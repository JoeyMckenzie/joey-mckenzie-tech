{
  "title": "Decoupling controllers with ApiEndpoints",
  "description": "No one likes monolithic controllers, and with ApiEndpoints, API design just got a whole lot easier.",
  "pubDate": "2020-09-23T07:00:00.000Z",
  "category": ".NET",
  "heroImage": "/images/decoupling-controllers-with-api-endpoints/friends-business-logic.jpg",
  "draft": false,
  "keywords": [
    "c#",
    ".net",
    "api"
  ],
  "body": {
    "raw": "\nAdmittedly, or not, we've all worked on projects during our careers that took the above meme's approach of \"just put it\nin the controller and we'll figure it out later\". Unfortunately for some, this is a way of life due to project budget\nconstraints, unrealistic product deadlines, and more senior developers refusing to change their ways because it \"works.\"\nIt's like how the old saying goes, you can't teach an old programmer to decouple independent concerns.\n\nOn a recent weekend getaway to the mountains, I did what I always do on long drives when my wife inevitably falls asleep\nin the car: put on episode of [.NET Rocks!](https://www.dotnetrocks.com/) and let Carl, Richard, and their guests\nfascinate me with the latest in the .NET ecosystem. On this fateful day, the guest happened to\nbe [Steve Smith](https://github.com/ardalis) talking about his relatively new\nproject - [ApiEndpoints](https://github.com/ardalis/ApiEndpoints). I've listened to a lot of .NET Rocks! over the years,\nand needless to say, a problem that has always bothered me throughout my relatively young career as a developer seemed\nto finally have a simple solution.\n\n## The Problem\n\nAs previously mentioned, we've all most likely worked on a legacy project at some point during our careers that makes\nthe company gobbles of money with no immediate plans of being sunsetted in place of a greenfield application, leaving\nother poor souls to maintain the mountain of tech debt accumulated over years of ignorance. While we could go down the\nrabbit hole of how a project eventually gets to this near unmaintainable state, I want to focus on a single area these\nprojects, more often than not, have in common: the fat controller.\n\n### Bloated controllers\n\nNot to be confused with the Thomas the Tank Engine character of the same name, fat controllers are a code smell,\nanti-pattern, etc. (pick your favorite buzzword) that boils down to a single issue at its root - controllers that are\ndoing _way_ too much, violating the [SRP](https://en.wikipedia.org/wiki/Single-responsibility_principle) to the fullest\nextent of the law.\n\nController bloat, in essence, is the product of compounding controller files with a plethora of action methods that,\nwhile related by their respective domain or managed resource, have no real dependence on one another. I'm not sure about\nyou, but I don't think I've ever seen a controller action being called by another action within the same file. Sure, we\nmight route resource requests at the API level to other methods with the same controller, but rarely is there a reason\nto directly call an action method explicitly from another. An unfortunate side effect of this phenomenon is a god class\nmentality developers take on, ignoring architectural boundaries, and injection of dependencies that service only a\nspecific use case within said controller, ignored by 90% of the other actions.\n\nWhat this eventually leads to (not in all cases, but a good majority), are controllers with thousands of lines of code\ncontaining an uncomfortable amount of business logic, constructors with an unnecessary amount of injected dependencies,\nand a regular trip to our local pharmacy for headache medication due to maintenance effort of these beasts.\n\n## ApiEndpoints to the rescue\n\nEnter [ApiEndpoints](https://github.com/ardalis/ApiEndpoints), a project started by Steve Smith with one goal in mind:\ndecoupling from controller-based solutions by encouraging\na [package by feature](https://phauer.com/2020/package-by-feature/#:~:text=%20A%20Recipe%20to%20Package%20by%20Feature%20,only%20have%20to%20delete%20the%20corresponding...%20More%20)\narchitecture from within our API project layers.\n\nWhat this means, in plain english, is a mindset change from the traditional MVC patterns we see in large web API\nprojects where there's most likely a `Controllers` folder that might contain tens of hundreds (yes, seriously)\ncontrollers that act as the gateway into the lower level working parts of our application and act as the liaison\nfor client requests. Traditionally, this sort of architecture is akin to _package by layer_ which we see in a grand\nmajority of projects within the enterprise, GitHub, your friend's sweet new app that's going to make them millions of\ndollars.\n\nWhat this boils down to, at the surface level, is an attempt to group related concerns and request work flows, i.e. how\na request enters and trickles through the system interacting with our various application resources, within the same\ndomain. What we're used to seeing might be similar to the following:\n\n```\n\\Controllers\n\\Models\n\\Views\n\\Services\n\n// ...and any number of layer-based components\n```\n\nOur controller directory might be broken down further:\n\n```\n\\Controllers\n    HomeController.cs\n    \\Orders\n        OrdersController.cs\n        OrderProcessingController.cs\n    \\Products\n        ProductsController.cs\n        ProductInventoryController.cs\n\n// ...again, any number of controllers nested within\n```\n\nOur `Models`, `Views`, and `Services` folders might very well contain the same, or very similar, structure. In this\nexample, we've created a package by layer architecture within our application - though everything exists in a single\nDLL, these would be more often utilized and referenced as separate class libraries, JARs, etc.\n\nWhat happens when a new business requirement comes in requiring a change, update, or addition to a specific feature? As\nyou might have guessed, from our example we'll most likely be making changes in _four_ separate places/layers of our\napplication, though the feature falls under a single domain. As with everything in software, your preferred package\nmethodology will always have payoffs, and the tried and true, handy dandy, all encompassing answer to the question of\nwhich ideology is best is simply... _it depends_.\n\nWhile we could dedicate an entire post about putting things where they belong and the tradeoffs of different packaging\narchitectures, we're focusing on just the API layer of our applications, namely everything under the `Controllers`\nfolder. Our aim, with help from the ApiEndpoints library, will be to sort concerns within individual `Feature` folders.\nSpecific to the API layer, a.k.a. our controllers, as we want to decouple services, dependencies, and independent\nprocesses from bloated, monolithic controllers. Imagine our orders controllers containing the following actions:\n\n### OrdersController.cs\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing SomeAwesomeNamespace.Services.Orders;\n\nnamespace SomeAwesomeNamespace.Controllers.Orders\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class OrdersController : ControllerBase\n    {\n        private readonly ILogger<OrdersController> _logger;\n        private readonly OrderServiceOne _serviceOne;\n        private readonly OrderServiceTwo _serviceTwo;\n        private readonly OrderServiceThree _serviceThree;\n\n\n        public OrdersController(\n            ILogger<OrdersController> logger,\n            OrderServiceOne serviceOne,\n            OrderServiceTwo serviceTwo,\n            OrderServiceThree serviceThree)\n        {\n            _logger = logger;\n            _serviceOne = serviceOne\n            _serviceTwo = serviceTwo\n            _serviceThree = serviceThree\n        }\n\n        [HttpGet]\n        public ActionResult SomeActionThatUsesServiceOne()\n        {\n            // Do some processing requiring service one...\n        }\n\n        [HttpPost]\n        public ActionResult SomeActionThatUsesServiceTwo()\n        {\n            // Do some processing requiring service two...\n        }\n\n        [HttpPut]\n        public ActionResult SomeActionThatUsesServiceThree()\n        {\n            // Do some processing requiring service three...\n        }\n\n        // ...and any number of action methods to be utilized elsewhere\n    }\n}\n```\n\nOur controller contains three service-based dependencies only utilized by a single method. Our controller is now coupled\nto three services, independent of one another, and consumed in only a third of its methods on a per service basis. While\nthis might be a bit of a contrived example, it's easy to see how we might extrapolate this controller into a real world\nscenario, adding more services and methods that have nothing to do with one another, making it more difficult to change\nand modify this controller as it becomes more coupled to its injected dependencies. When the time comes to test this bad\nboy, it will inevitably become a mocking nightmare.\n\nSo... how can we improve upon the paved path the old guard has laid before us?\n\n## Endpoints as units of work\n\nContinuing from our example above, let's think about what our API routing structure might look like:\n\n```\n/api/orders\n/api/orders/process\n/api/orders/:orderId\n/api/orders/:orderId/products\n/api/products\n/api/products/:productId\n/api/products/:productId/orders\n\n// ...and any number of routes our application might service\n```\n\nFrom the above, we could argue that based on domain, those routes probably belong in two separate controllers,\nproduct-based and order-based controllers. While that would suffice and get the job done for us, what about taking each\nof the above routes as an individual unit of work? Not to be confused with\nthe [design pattern](https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application#:~:text=The%20repository%20and%20unit%20of%20work%20patterns%20are,facilitate%20automated%20unit%20testing%20or%20test-driven%20development%20%28TDD%29.)\nof the same name, our definition of a unit of work in this context represents a processing silo in charge of one thing,\nand one thing only: `/api/orders` would be in charge of retrieving all outstanding/pending\norders, `/api/products/:productId`, would be in charge of retrieving products given a unique identifying\nkey, `/api/orders/:orderId/products` retrieves all the products on a particular order, etc. Each of these routes, while\nrelated by domain, performs a very specific task unrelated to its sibling routes with a good chance that each requires\nsome sort of injected service that may, or may not, be utilized by the others.\n\nWhile we could, again, dedicate an entire post to discuss API design semantics, let's break away from our conventional\nthinking and explore building an API without traditional controllers.\n\n## Individual endpoints with ApiEndpoints\n\nAs I'm sure the fine folks reading this article would love for me to continue aimlessly writing about orders and\nproducts for a fictional company, I'll shut up for now and finally get into some code. To start, let's create a new web\nAPI project using your preferred project bootstrapping method. I'll be using Visual Studio for Mac, so I'll go ahead and\nselect a new ASP.NET Core Web Application project using the API template, since we won't be doing anything with views.\n\nOnce we've got a project ready to roll, let's open up our solution and do a bit of immediate refactoring. Let's start by\nadding a package reference to `Ardalis.ApiEndpoints`:\n\n![Business_logic](/images/decoupling-controllers-with-api-endpoints/api-endpoints-nuget.png)\n\nOnce our package has been added, let's create a `Features` folder at the root of our project, and immediately beneath\nthat, a `Weather` directory.\nLet's go ahead and create two more directories beneath our `Weather` folder to house our concerns that have to deal with\neverything related to weather in `Models` and `Endpoints`. By creating feature slices within our application, we can\ngroup things by concern rather than by layer so that every feature request coming in from the business will be easily\ncontained within its corresponding domain. Let's start by offering up an endpoint to retrieve a weather forecast, akin\nto the already existing method within the `WeatherController.cs` file underneath the `Controllers` folder. Go ahead and\nadd a new file underneath our `Endpoints` folder called `GetWeatherForecasts.cs`, where we'll place the action method's\ncode from the `WeatherController`'s `Get()` method:\n\n### GetWeatherForecasts.cs\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Ardalis.ApiEndpoints;\nusing DecoupledControllersWithApiEndpoints.Features.Beers;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace DecoupledControllersWithApiEndpoints.Features.Weather.Endpoints\n{\n    [Route(Routes.WeatherUri)]\n    public class GetWeatherForecast : BaseEndpoint<IEnumerable<WeatherForecast>>\n    {\n        private static readonly string[] Summaries = new[]\n        {\n            \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n        };\n\n        [HttpGet]\n        public override ActionResult<IEnumerable<WeatherForecast>> Handle()\n        {\n            var rng = new Random();\n\n            var forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = rng.Next(-20, 55),\n                Summary = Summaries[rng.Next(Summaries.Length)]\n            })\n            .ToArray();\n\n            return Ok(forecasts);\n        }\n    }\n}\n```\n\nAs the method definition for `Handle()` is the same as the `Get()` action method along with the other parts I've\ndirectly copied over from the default `WeatherController` that the ASP.NET Core scaffold tools includes in its template,\nlet's focus on the unfamiliar parts of this file that ApiEndpoints brings to the table:\n\n-   We're still utilizing the `[Route]` and `[HttpGet]` attributes available to our controllers thanks to\n    the `Microsoft.AspNetCore.Mvc` namespace\n-   We're inheriting from the `BaseEndpoint<TResponse>` class that ApiEndpoints provides for us, signaling on application\n    startup that this is, in fact, a controller in disguise and will be treated just like a regular old ASP.NET Core\n    controller\n-   `BaseEndpoint<TResponse>` is an abstract class with a single method exposed for us to override in `Handle()` that\n    an `ActionResult<TResponse>` type, akin to action methods from within a controller\n-   If we follow the inheritance chain of `BaseEndpoint`, or any of its derivatives with higher order arity (thanks for\n    the vocab upgrade in my personal arsenal, Jon Skeet) in `BaseEndpoint<TResponse>`\n    or `BaseEndpoint<TRequest, TResponse>`, we see the base type ultimately pointing to ASP.NET Core's `ControllerBase`\n    type, solving the mystery as to why we have access to all the ASP.NET Core attributes and types in endpoints\n\nWe have a single named route thanks to the `[Route(Routes.WeatherUri])]` attribute, where I've defined `Routes.cs` at\nthe root of our `Features` folder below:\n\n### Features/Routes.cs\n\n```csharp\nnamespace DecoupledControllersWithApiEndpoints.Features.Beers\n{\n    public static class Routes\n    {\n        public const string WeatherUri = \"api/weather\";\n    }\n}\n```\n\nWhile most likely unnecessary for our small demo application, I find it helpful to have a single place containing our\nAPI routes for reference in other parts of our apps, should we need them. We'll add to this a bit later, but for now,\nthis should suffice.\n\nLet's spin up our application now using `F5`, or hitting a `dotnet run` in the terminal, and using Postman (or your\nfavorite web request utility), let's send a request to `https://localhost:5001/api/weather` and examine the response:\n\n```\n[\n    {\n        \"date\": \"2020-09-23T12:52:27.408507-07:00\",\n        \"temperatureC\": 6,\n        \"temperatureF\": 42,\n        \"summary\": \"Mild\"\n    },\n    {\n        \"date\": \"2020-09-24T12:52:27.408951-07:00\",\n        \"temperatureC\": -19,\n        \"temperatureF\": -2,\n        \"summary\": \"Freezing\"\n    },\n\n    // ...and several other random forecasts\n]\n```\n\nThanks to the `rng` we've built into our forecast generator, your response will look a bit different than mine, but\nlet's not gloss over the fact that we've just performed a complete request/response cycle within our API without using a\ncontroller!\n",
    "html": "<p>Admittedly, or not, we've all worked on projects during our careers that took the above meme's approach of \"just put it\nin the controller and we'll figure it out later\". Unfortunately for some, this is a way of life due to project budget\nconstraints, unrealistic product deadlines, and more senior developers refusing to change their ways because it \"works.\"\nIt's like how the old saying goes, you can't teach an old programmer to decouple independent concerns.</p>\n<p>On a recent weekend getaway to the mountains, I did what I always do on long drives when my wife inevitably falls asleep\nin the car: put on episode of <a href=\"https://www.dotnetrocks.com/\">.NET Rocks!</a> and let Carl, Richard, and their guests\nfascinate me with the latest in the .NET ecosystem. On this fateful day, the guest happened to\nbe <a href=\"https://github.com/ardalis\">Steve Smith</a> talking about his relatively new\nproject - <a href=\"https://github.com/ardalis/ApiEndpoints\">ApiEndpoints</a>. I've listened to a lot of .NET Rocks! over the years,\nand needless to say, a problem that has always bothered me throughout my relatively young career as a developer seemed\nto finally have a simple solution.</p>\n<h2>The Problem</h2>\n<p>As previously mentioned, we've all most likely worked on a legacy project at some point during our careers that makes\nthe company gobbles of money with no immediate plans of being sunsetted in place of a greenfield application, leaving\nother poor souls to maintain the mountain of tech debt accumulated over years of ignorance. While we could go down the\nrabbit hole of how a project eventually gets to this near unmaintainable state, I want to focus on a single area these\nprojects, more often than not, have in common: the fat controller.</p>\n<h3>Bloated controllers</h3>\n<p>Not to be confused with the Thomas the Tank Engine character of the same name, fat controllers are a code smell,\nanti-pattern, etc. (pick your favorite buzzword) that boils down to a single issue at its root - controllers that are\ndoing <em>way</em> too much, violating the <a href=\"https://en.wikipedia.org/wiki/Single-responsibility_principle\">SRP</a> to the fullest\nextent of the law.</p>\n<p>Controller bloat, in essence, is the product of compounding controller files with a plethora of action methods that,\nwhile related by their respective domain or managed resource, have no real dependence on one another. I'm not sure about\nyou, but I don't think I've ever seen a controller action being called by another action within the same file. Sure, we\nmight route resource requests at the API level to other methods with the same controller, but rarely is there a reason\nto directly call an action method explicitly from another. An unfortunate side effect of this phenomenon is a god class\nmentality developers take on, ignoring architectural boundaries, and injection of dependencies that service only a\nspecific use case within said controller, ignored by 90% of the other actions.</p>\n<p>What this eventually leads to (not in all cases, but a good majority), are controllers with thousands of lines of code\ncontaining an uncomfortable amount of business logic, constructors with an unnecessary amount of injected dependencies,\nand a regular trip to our local pharmacy for headache medication due to maintenance effort of these beasts.</p>\n<h2>ApiEndpoints to the rescue</h2>\n<p>Enter <a href=\"https://github.com/ardalis/ApiEndpoints\">ApiEndpoints</a>, a project started by Steve Smith with one goal in mind:\ndecoupling from controller-based solutions by encouraging\na <a href=\"https://phauer.com/2020/package-by-feature/#:~:text=%20A%20Recipe%20to%20Package%20by%20Feature%20,only%20have%20to%20delete%20the%20corresponding...%20More%20\">package by feature</a>\narchitecture from within our API project layers.</p>\n<p>What this means, in plain english, is a mindset change from the traditional MVC patterns we see in large web API\nprojects where there's most likely a <code>Controllers</code> folder that might contain tens of hundreds (yes, seriously)\ncontrollers that act as the gateway into the lower level working parts of our application and act as the liaison\nfor client requests. Traditionally, this sort of architecture is akin to <em>package by layer</em> which we see in a grand\nmajority of projects within the enterprise, GitHub, your friend's sweet new app that's going to make them millions of\ndollars.</p>\n<p>What this boils down to, at the surface level, is an attempt to group related concerns and request work flows, i.e. how\na request enters and trickles through the system interacting with our various application resources, within the same\ndomain. What we're used to seeing might be similar to the following:</p>\n<pre><code>\\Controllers\n\\Models\n\\Views\n\\Services\n\n// ...and any number of layer-based components\n</code></pre>\n<p>Our controller directory might be broken down further:</p>\n<pre><code>\\Controllers\n    HomeController.cs\n    \\Orders\n        OrdersController.cs\n        OrderProcessingController.cs\n    \\Products\n        ProductsController.cs\n        ProductInventoryController.cs\n\n// ...again, any number of controllers nested within\n</code></pre>\n<p>Our <code>Models</code>, <code>Views</code>, and <code>Services</code> folders might very well contain the same, or very similar, structure. In this\nexample, we've created a package by layer architecture within our application - though everything exists in a single\nDLL, these would be more often utilized and referenced as separate class libraries, JARs, etc.</p>\n<p>What happens when a new business requirement comes in requiring a change, update, or addition to a specific feature? As\nyou might have guessed, from our example we'll most likely be making changes in <em>four</em> separate places/layers of our\napplication, though the feature falls under a single domain. As with everything in software, your preferred package\nmethodology will always have payoffs, and the tried and true, handy dandy, all encompassing answer to the question of\nwhich ideology is best is simply... <em>it depends</em>.</p>\n<p>While we could dedicate an entire post about putting things where they belong and the tradeoffs of different packaging\narchitectures, we're focusing on just the API layer of our applications, namely everything under the <code>Controllers</code>\nfolder. Our aim, with help from the ApiEndpoints library, will be to sort concerns within individual <code>Feature</code> folders.\nSpecific to the API layer, a.k.a. our controllers, as we want to decouple services, dependencies, and independent\nprocesses from bloated, monolithic controllers. Imagine our orders controllers containing the following actions:</p>\n<h3>OrdersController.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">AspNetCore</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Mvc</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> SomeAwesomeNamespace</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Orders</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> SomeAwesomeNamespace</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Controllers</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Orders</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    [</span><span style=\"color:#5DA994\">ApiController</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    [</span><span style=\"color:#5DA994\">Route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">[controller]</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> OrdersController</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> ControllerBase</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">OrdersController</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> OrderServiceOne</span><span style=\"color:#80A665\"> _serviceOne</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> OrderServiceTwo</span><span style=\"color:#80A665\"> _serviceTwo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> OrderServiceThree</span><span style=\"color:#80A665\"> _serviceThree</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> OrdersController</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">OrdersController</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            OrderServiceOne</span><span style=\"color:#80A665\"> serviceOne</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            OrderServiceTwo</span><span style=\"color:#80A665\"> serviceTwo</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            OrderServiceThree</span><span style=\"color:#80A665\"> serviceThree</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _serviceOne</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> serviceOne</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _serviceTwo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> serviceTwo</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _serviceThree</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> serviceThree</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">HttpGet</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ActionResult</span><span style=\"color:#80A665\"> SomeActionThatUsesServiceOne</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Do some processing requiring service one...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">HttpPost</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ActionResult</span><span style=\"color:#80A665\"> SomeActionThatUsesServiceTwo</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Do some processing requiring service two...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">HttpPut</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ActionResult</span><span style=\"color:#80A665\"> SomeActionThatUsesServiceThree</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Do some processing requiring service three...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // ...and any number of action methods to be utilized elsewhere</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our controller contains three service-based dependencies only utilized by a single method. Our controller is now coupled\nto three services, independent of one another, and consumed in only a third of its methods on a per service basis. While\nthis might be a bit of a contrived example, it's easy to see how we might extrapolate this controller into a real world\nscenario, adding more services and methods that have nothing to do with one another, making it more difficult to change\nand modify this controller as it becomes more coupled to its injected dependencies. When the time comes to test this bad\nboy, it will inevitably become a mocking nightmare.</p>\n<p>So... how can we improve upon the paved path the old guard has laid before us?</p>\n<h2>Endpoints as units of work</h2>\n<p>Continuing from our example above, let's think about what our API routing structure might look like:</p>\n<pre><code>/api/orders\n/api/orders/process\n/api/orders/:orderId\n/api/orders/:orderId/products\n/api/products\n/api/products/:productId\n/api/products/:productId/orders\n\n// ...and any number of routes our application might service\n</code></pre>\n<p>From the above, we could argue that based on domain, those routes probably belong in two separate controllers,\nproduct-based and order-based controllers. While that would suffice and get the job done for us, what about taking each\nof the above routes as an individual unit of work? Not to be confused with\nthe <a href=\"https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application#:~:text=The%20repository%20and%20unit%20of%20work%20patterns%20are,facilitate%20automated%20unit%20testing%20or%20test-driven%20development%20%28TDD%29.\">design pattern</a>\nof the same name, our definition of a unit of work in this context represents a processing silo in charge of one thing,\nand one thing only: <code>/api/orders</code> would be in charge of retrieving all outstanding/pending\norders, <code>/api/products/:productId</code>, would be in charge of retrieving products given a unique identifying\nkey, <code>/api/orders/:orderId/products</code> retrieves all the products on a particular order, etc. Each of these routes, while\nrelated by domain, performs a very specific task unrelated to its sibling routes with a good chance that each requires\nsome sort of injected service that may, or may not, be utilized by the others.</p>\n<p>While we could, again, dedicate an entire post to discuss API design semantics, let's break away from our conventional\nthinking and explore building an API without traditional controllers.</p>\n<h2>Individual endpoints with ApiEndpoints</h2>\n<p>As I'm sure the fine folks reading this article would love for me to continue aimlessly writing about orders and\nproducts for a fictional company, I'll shut up for now and finally get into some code. To start, let's create a new web\nAPI project using your preferred project bootstrapping method. I'll be using Visual Studio for Mac, so I'll go ahead and\nselect a new ASP.NET Core Web Application project using the API template, since we won't be doing anything with views.</p>\n<p>Once we've got a project ready to roll, let's open up our solution and do a bit of immediate refactoring. Let's start by\nadding a package reference to <code>Ardalis.ApiEndpoints</code>:</p>\n<p><img src=\"/images/decoupling-controllers-with-api-endpoints/api-endpoints-nuget.png\" alt=\"Business_logic\"></p>\n<p>Once our package has been added, let's create a <code>Features</code> folder at the root of our project, and immediately beneath\nthat, a <code>Weather</code> directory.\nLet's go ahead and create two more directories beneath our <code>Weather</code> folder to house our concerns that have to deal with\neverything related to weather in <code>Models</code> and <code>Endpoints</code>. By creating feature slices within our application, we can\ngroup things by concern rather than by layer so that every feature request coming in from the business will be easily\ncontained within its corresponding domain. Let's start by offering up an endpoint to retrieve a weather forecast, akin\nto the already existing method within the <code>WeatherController.cs</code> file underneath the <code>Controllers</code> folder. Go ahead and\nadd a new file underneath our <code>Endpoints</code> folder called <code>GetWeatherForecasts.cs</code>, where we'll place the action method's\ncode from the <code>WeatherController</code>'s <code>Get()</code> method:</p>\n<h3>GetWeatherForecasts.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Ardalis</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">ApiEndpoints</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> DecoupledControllersWithApiEndpoints</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beers</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">AspNetCore</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Mvc</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DecoupledControllersWithApiEndpoints</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Weather</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Endpoints</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    [</span><span style=\"color:#5DA994\">Route</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">Routes</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">WeatherUri</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> GetWeatherForecast</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> BaseEndpoint</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">WeatherForecast</span><span style=\"color:#666666\">>></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> Summaries</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#666666\">[]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#C98A7D\">Freezing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Bracing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Chilly</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Cool</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Mild</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Warm</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Balmy</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hot</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sweltering</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Scorching</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">HttpGet</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#5DA994\"> ActionResult</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">WeatherForecast</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> rng</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Random</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> forecasts</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> Enumerable</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Range</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 5</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">Select</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">index</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> WeatherForecast</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Date</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Now</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddDays</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">index</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                TemperatureC</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> rng</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Next</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">-</span><span style=\"color:#4C9A91\">20</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 55</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Summary</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> Summaries</span><span style=\"color:#666666\">[</span><span style=\"color:#BD976A\">rng</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Next</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">Summaries</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Length</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            })</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">ToArray</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#80A665\"> Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">forecasts</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>As the method definition for <code>Handle()</code> is the same as the <code>Get()</code> action method along with the other parts I've\ndirectly copied over from the default <code>WeatherController</code> that the ASP.NET Core scaffold tools includes in its template,\nlet's focus on the unfamiliar parts of this file that ApiEndpoints brings to the table:</p>\n<ul>\n<li>We're still utilizing the <code>[Route]</code> and <code>[HttpGet]</code> attributes available to our controllers thanks to\nthe <code>Microsoft.AspNetCore.Mvc</code> namespace</li>\n<li>We're inheriting from the <code>BaseEndpoint&#x3C;TResponse></code> class that ApiEndpoints provides for us, signaling on application\nstartup that this is, in fact, a controller in disguise and will be treated just like a regular old ASP.NET Core\ncontroller</li>\n<li><code>BaseEndpoint&#x3C;TResponse></code> is an abstract class with a single method exposed for us to override in <code>Handle()</code> that\nan <code>ActionResult&#x3C;TResponse></code> type, akin to action methods from within a controller</li>\n<li>If we follow the inheritance chain of <code>BaseEndpoint</code>, or any of its derivatives with higher order arity (thanks for\nthe vocab upgrade in my personal arsenal, Jon Skeet) in <code>BaseEndpoint&#x3C;TResponse></code>\nor <code>BaseEndpoint&#x3C;TRequest, TResponse></code>, we see the base type ultimately pointing to ASP.NET Core's <code>ControllerBase</code>\ntype, solving the mystery as to why we have access to all the ASP.NET Core attributes and types in endpoints</li>\n</ul>\n<p>We have a single named route thanks to the <code>[Route(Routes.WeatherUri])]</code> attribute, where I've defined <code>Routes.cs</code> at\nthe root of our <code>Features</code> folder below:</p>\n<h3>Features/Routes.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DecoupledControllersWithApiEndpoints</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Routes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> const</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> WeatherUri</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">api/weather</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>While most likely unnecessary for our small demo application, I find it helpful to have a single place containing our\nAPI routes for reference in other parts of our apps, should we need them. We'll add to this a bit later, but for now,\nthis should suffice.</p>\n<p>Let's spin up our application now using <code>F5</code>, or hitting a <code>dotnet run</code> in the terminal, and using Postman (or your\nfavorite web request utility), let's send a request to <code>https://localhost:5001/api/weather</code> and examine the response:</p>\n<pre><code>[\n    {\n        \"date\": \"2020-09-23T12:52:27.408507-07:00\",\n        \"temperatureC\": 6,\n        \"temperatureF\": 42,\n        \"summary\": \"Mild\"\n    },\n    {\n        \"date\": \"2020-09-24T12:52:27.408951-07:00\",\n        \"temperatureC\": -19,\n        \"temperatureF\": -2,\n        \"summary\": \"Freezing\"\n    },\n\n    // ...and several other random forecasts\n]\n</code></pre>\n<p>Thanks to the <code>rng</code> we've built into our forecast generator, your response will look a bit different than mine, but\nlet's not gloss over the fact that we've just performed a complete request/response cycle within our API without using a\ncontroller!</p>"
  },
  "_id": "2020/decoupling-controllers-with-api-endpoints.md",
  "_raw": {
    "sourceFilePath": "2020/decoupling-controllers-with-api-endpoints.md",
    "sourceFileName": "decoupling-controllers-with-api-endpoints.md",
    "sourceFileDir": "2020",
    "contentType": "markdown",
    "flattenedPath": "2020/decoupling-controllers-with-api-endpoints"
  },
  "type": "Post",
  "url": "/blog/2020/decoupling-controllers-with-api-endpoints"
}