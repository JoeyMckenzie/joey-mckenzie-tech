{
  "title": "Constructing objects with intent",
  "description": "Build better object APIs with named constructors and fluent builders!",
  "pubDate": "2022-11-03T07:00:00.000Z",
  "category": "design",
  "heroImage": "/images/objects-with-intent/constructors_meme.jpg",
  "draft": false,
  "keywords": [
    "design",
    "software patterns",
    ".net",
    "rust"
  ],
  "body": {
    "raw": "\nI've been becoming increasingly annoyed, both by legacy code and modern frameworks, with the amount of non-constrained\nobject construction that occurs within a codebase. That's a bunch of developer jargon, so what does all that mean\nexactly? If a developer is working on a feature within a codebase they might be unfamiliar with, it's far too easy to\ninstantiate objects at will with zero constraints with some process downstream in an area of code tucked away in a dark\ncorner expecting the developer to have _correctly_ constructed said object. To me, this feels a lot like the \"read my\nmind\" mentality that occurs between employers and disgruntled employees in the workplace: the employer expects something\nto happen without communicating to the employee that intent (I think we've all experienced this regardless of industry).\nHow does this translate to code? Let's take a simple example from C#.\n\nLet's say I'm working in a codebase that validates addresses. The address structure may look something like:\n\n```csharp\npublic sealed record Address\n{\n    public string Street { get; init; }\n\n    public string City { get; init; }\n\n    public string State { get; init; }\n}\n```\n\nIf a friendly developer wanted to create a new `Address`, it's up to them to understand how the `Address` record is to\nbe instantiated _and_ understand any downstream business logic validation, processes, etc. that involve the `Address`\nobject. As it stands, a developer could _in theory_ instantiate an `Address` while forgetting to set the street, city,\nand state. Not very helpful, as we'll have no way of identifying a user's location if no information is provided. To get\naround this, we use constructors with the help of C#'s record type:\n\n```csharp\npublic sealed record Address(string Street, string City, string State);\n```\n\nNow, any developer looking to work with an `Address` object should reasonably expect all the fields to be populated.\nInevitably, a requirement comes along from the product team requesting only the address street to be required, not city\nand state (don't ask me, I don't make the rules around here). So naturally, we might add another constructor:\n\n```csharp\npublic sealed record Address\n{\n    public Address(string street, string city, string state)\n    {\n        Street = street;\n        City = city;\n        State = state;\n    }\n\n    public Address(string street)\n    {\n        Street = street;\n        City = string.Empty;\n        State = string.Empty;\n    }\n\n    public string Street { get; }\n\n    public string City { get; init; }\n\n    public string State { get; init; }\n\n    public void PrintAddress()\n    {\n        var addressParts = new List<string>\n        {\n            Street\n        };\n\n        if (!string.IsNullOrWhiteSpace(City))\n        {\n            addressParts.Add(City);\n        }\n\n        if (!string.IsNullOrWhiteSpace(State))\n        {\n            addressParts.Add(State);\n        }\n\n        Console.WriteLine(string.Join(\", \", addressParts));\n    }\n}\n```\n\nWe added a constructor that requires the street while defaulting the city and state to empty strings rather than `null`\nfor sanity. While it's easy enough to use object initializers instead, i.e.\n\n```csharp\nvar someAddress = new Address\n{\n    Street = \"123 Code Street\"\n};\n```\n\nWe add constructors to classes and structures to enforce object creation is _correct-by-construction_: the internals of\nconstructing an object, especially those more complex, are better off encapsulated from consumers so we don't have to\nworry about leaking business logic/rules out from their intended domain. Inevitably, more requirements come along so we\nadd _more_ constructors\n\n```csharp\npublic sealed record Address\n{\n    public Address(string street, string city, string state)\n    {\n        Street = street;\n        City = city;\n        State = state;\n    }\n\n    public Address(string street, string city)\n    {\n        Street = street;\n        City = city;\n        State = string.Empty;\n    }\n\n    public Address(string street)\n    {\n        Street = street;\n        City = string.Empty;\n        State = string.Empty;\n    }\n\n    public string Street { get; }\n\n    public string City { get; init; }\n\n    public string State { get; init; }\n\n    public void PrintAddress()\n    {\n        var addressParts = new List<string>\n        {\n            Street\n        };\n\n        if (!string.IsNullOrWhiteSpace(City))\n        {\n            addressParts.Add(City);\n        }\n\n        if (!string.IsNullOrWhiteSpace(State))\n        {\n            addressParts.Add(State);\n        }\n\n        Console.WriteLine(string.Join(\", \", addressParts));\n    }\n}\n```\n\nSo now, our consumers have to choose between three different ways to properly construct the address information. While\nthis is \"fine\" for the most part, I find it often more helpful to add contextual object constructors, a.k.a methods to\nan object that _clearly conveys_ what context the object is to be constructed with:\n\n```csharp\npublic sealed record Address\n{\n    private Address(string street)\n    {\n        Street = street;\n        City = string.Empty;\n        State = string.Empty;\n    }\n\n    private Address(string street, string city)\n    {\n        Street = street;\n        City = city;\n        State = string.Empty;\n    }\n\n    private Address(string street, string city, string state)\n    {\n        Street = street;\n        City = city;\n        State = state;\n    }\n\n    public static Address FromStreet(string street) => new(street);\n\n    public static Address FromStreetAndCity(string street, string city) => new(street, city);\n\n    public static Address FromFullAddress(string street, string city, string state) => new(street, city, state);\n\n    public string Street { get; }\n\n    public string City { get; }\n\n    public string State { get; }\n\n    public void PrintAddress()\n    {\n        var addressParts = new List<string>\n        {\n            Street\n        };\n\n        if (!string.IsNullOrWhiteSpace(City))\n        {\n            addressParts.Add(City);\n        }\n\n        if (!string.IsNullOrWhiteSpace(State))\n        {\n            addressParts.Add(State);\n        }\n\n        Console.WriteLine(string.Join(\", \", addressParts));\n    }\n}\n```\n\nNow, when consumers want to interact with an `Address` object, we provide context as to the address they're\nconstructing:\n\n```csharp\n// We don't allow consumers to construct an address however they'd like, they MUST construct it in ways we offer\nvar addressWithStreetOnly = Address.FromStreet(\"123 Code Street\");\naddressWithStreetOnly.PrintAddress();\n\nvar addressWithStreetAndState = Address.FromStreetAndCity(\"123 Code Street\",  \".NETville\");\naddressWithStreetAndState.PrintAddress();\n\nvar fullAddress = Address.FromFullAddress(\"123 Code Street\", \".NETville\", \"CA\");\nfullAddress.PrintAddress();\n```\n\nAlthough we still provide constructors, they're now `private` so we can further constrain how consumers instantiate\nan `Address` to help avoid pesky \"missing data/property\" bugs. We can think of these `static` builders on our `Address`\nrecord as _named constructors_, which come in handy when we need multiple variations of object construction.\n\n## Fluent builders for complex objects\n\nOftentimes, our constructed objects might contain a hodge-podge of properties that may or may not necessarily support\none another. I find implementing fluent builders, in this case, to help allow consumers to instantiate their objects in\na manner they see fit. Using builders, we offer a _fluent_ like API to callers allowing them to customize exactly what\nthe object they're looking to build should look like. In terms of C#, we're looking for something along the lines of:\n\n```csharp\nvar someFluentlyBuiltObject = new AwesomeFluentBuilder()\n    .WithFoo(\"Bar\")\n    .WithAnswerToLife(42)\n    .WithOpinion(\"Lord of the Rings is better than Star Wars\")\n    .Build();\n\nDebug.Assert(string.Equals(someFluentlyBuiltObject.Foo, \"Bar\"));\nDebug.Assert(someFluentlyBuiltObject.AnswerToLift, 42);\nDebug.Assert(string.Equals(someFluentlyBuiltObject.Opinion, \"Lord of the Rings is better than Star Wars\"));\n```\n\nI opt to use the `WithProperty()` convention to make it clear to consumers of my code that the object they're\nconstructing will contain whatever data they will correspond to that property's value - somewhat subject, but I feel the\nintention is clear. Let's take a look at a more fleshed out, yet contrived, example in Rust as I've been having somewhat\nof an obsession lately with the language and ecosystem. Seriously, the joy of using cargo alone makes me instantly\nannoyed whenever I'm _not_ working in a Rust context. Let's fluently build some pizzas with Rust.\n\nThis isn't a post about Rust necessarily, so I'll defer to the rustaceans much smarter and more well-versed in the\nlanguage than myself to deep dive into idiomatic Rust. The concept remains, however - our public API should offer a\npizza `struct` that can be consumed by callers. While a caller _could_ in theory, construct they're own pizza, we should\noffer them a convenient way to make pizzas without worrying about the internal details of constructing said pizza.\n\nWe can think of it as the exchange of transactions that occurs when one walks into their favorite pizza joint:\n\n-   We order at the register providing the establishment with a list of requirements we'd like our pizza to meet\n-   We make an exchange of currency after detailing what our pizza should look/taste like\n-   After some time, we receive a pizza at our table - hopefully accompanied by a nice cold adult beverage\n\nLet's see if we can model this scenario in code:\n\n```rust\n#[derive(Debug, Default)]\npub struct Pizza {\n    pub crust: Crust,\n    pub toppings: Toppings,\n    pub sauce: Sauce,\n}\n\n#[derive(Debug)]\npub enum Crust {\n    Regular,\n    Thin,\n    DeepDish,\n}\n\nimpl Default for Crust {\n    fn default() -> Self {\n        Crust::Regular\n    }\n}\n\ntype Toppings = Vec<Topping>;\n\n#[derive(Debug)]\npub enum Topping {\n    Cheese,\n    Pepperoni,\n    Onions,\n    BellPeppers,\n    Mushrooms,\n    Sausage,\n    Custom(String),\n}\n\n#[derive(Debug)]\npub enum Sauce {\n    Red,\n    White,\n}\n\nimpl Default for Sauce {\n    fn default() -> Self {\n        Sauce::Red\n    }\n}\n```\n\nA `Pizza` should contain a `Crust`, `Sauce`, and a plethora of `Topping`s. While callers of our public API could build a\npizza themselves, we want to make it as easy as possible to build such a pizza without worrying about how to ladle the\nsauce, toss the dough, shred the mozzarella, etc. Let's add a fluent builder our users can interact to build their\nperfect `Pizza`:\n\n```rust\nuse crate::pizza::Crust;\nuse crate::pizza::Pizza;\nuse crate::pizza::Sauce;\nuse crate::pizza::Topping;\n\npub struct PizzaBuilder {\n    pizza: Pizza,\n}\n\nimpl PizzaBuilder {\n    pub fn new() -> Self {\n        Self {\n            pizza: Pizza::default(),\n        }\n    }\n\n    pub fn with_crust(self, crust: Crust) -> Self {\n        Self {\n            pizza: Pizza {\n                crust,\n                ..self.pizza\n            },\n        }\n    }\n\n    pub fn with_sauce(self, sauce: Sauce) -> Self {\n        Self {\n            pizza: Pizza {\n                sauce,\n                ..self.pizza\n            },\n        }\n    }\n\n    pub fn with_topping(self, topping: Topping) -> Self {\n        let mut toppings_mut = self.pizza.toppings;\n\n        toppings_mut.push(topping);\n\n        Self {\n            pizza: Pizza {\n                toppings: toppings_mut,\n                ..self.pizza\n            },\n        }\n    }\n\n    pub fn build(self) -> Pizza {\n        self.pizza\n    }\n}\n```\n\nFor those unfamiliar with Rust, we won't hang up on the details here. Our builder simply offers methods on\nthe `PizzaBuilder` struct, consuming whatever the previous version of its internal `Pizza` state through `self`, and\ncreates a new internal state containing the previous pizza state with slight modifications depending on what property we\nmight be updating on the `Pizza` we'll hand back to consumers. When we finally `build()` this `Pizza`, we simply hand\nback the internally managed pizza state.\n\nConsuming our `PizzaBuilder` might look something like:\n\n```rust\nuse crate::{\n    pizza::{Crust, Sauce, Topping},\n    pizza_builder::PizzaBuilder,\n};\n\nmod pizza;\nmod pizza_builder;\n\nfn main() {\n    let double_pepperoni = PizzaBuilder::new()\n        .with_crust(Crust::Regular)\n        .with_sauce(Sauce::Red)\n        .with_topping(Topping::Cheese)\n        .with_topping(Topping::Pepperoni)\n        .with_topping(Topping::Pepperoni)\n        .build();\n\n    println!(\"{:?}\", double_pepperoni);\n\n    let deep_dish = PizzaBuilder::new()\n        .with_crust(Crust::DeepDish)\n        .with_sauce(Sauce::Red)\n        .with_topping(Topping::Cheese)\n        .with_topping(Topping::Sausage)\n        .with_topping(Topping::Mushrooms)\n        .build();\n\n    println!(\"{:?}\", deep_dish);\n\n    let white_pie = PizzaBuilder::new()\n        .with_crust(Crust::Thin)\n        .with_sauce(Sauce::White)\n        .with_topping(Topping::BellPeppers)\n        .with_topping(Topping::Onions)\n        .with_topping(Topping::Custom(\"Anchovies\".to_owned()))\n        .build();\n\n    println!(\"{:?}... ugh, anchovies...\", white_pie);\n}\n```\n\nRunning our code gives us an output along the lines of\"\n\n```shell\nPizza { crust: Regular, toppings: [Cheese, Pepperoni, Pepperoni], sauce: Red }\nPizza { crust: DeepDish, toppings: [Cheese, Sausage, Mushrooms], sauce: Red }\nPizza { crust: Thin, toppings: [BellPeppers, Onions, Custom(\"Anchovies\")], sauce: White }... ugh, anchovies...\n```\n\nSweet! We're building fluent pizzas on the fly without having to leak details on pizza internals to consumers.\n\nIn short, it's often better to constrain object construction for consumers _if your intent_ as the code owner is to have\nsuch consumers utilize your objects in a predefined manner. In essence, we should aim to help consumers build objects\n_with intent_ rather than letting them run wild with unconstrained creation.\n\nUntil next time, friends!\n",
    "html": "<p>I've been becoming increasingly annoyed, both by legacy code and modern frameworks, with the amount of non-constrained\nobject construction that occurs within a codebase. That's a bunch of developer jargon, so what does all that mean\nexactly? If a developer is working on a feature within a codebase they might be unfamiliar with, it's far too easy to\ninstantiate objects at will with zero constraints with some process downstream in an area of code tucked away in a dark\ncorner expecting the developer to have <em>correctly</em> constructed said object. To me, this feels a lot like the \"read my\nmind\" mentality that occurs between employers and disgruntled employees in the workplace: the employer expects something\nto happen without communicating to the employee that intent (I think we've all experienced this regardless of industry).\nHow does this translate to code? Let's take a simple example from C#.</p>\n<p>Let's say I'm working in a codebase that validates addresses. The address structure may look something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">public</span><span style=\"color:#F97583\"> sealed</span><span style=\"color:#F97583\"> record</span><span style=\"color:#B392F0\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Street</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">init</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> City</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">init</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">init</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>If a friendly developer wanted to create a new <code>Address</code>, it's up to them to understand how the <code>Address</code> record is to\nbe instantiated <em>and</em> understand any downstream business logic validation, processes, etc. that involve the <code>Address</code>\nobject. As it stands, a developer could <em>in theory</em> instantiate an <code>Address</code> while forgetting to set the street, city,\nand state. Not very helpful, as we'll have no way of identifying a user's location if no information is provided. To get\naround this, we use constructors with the help of C#'s record type:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">public</span><span style=\"color:#F97583\"> sealed</span><span style=\"color:#F97583\"> record</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> Street</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> City</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\">);</span></span></code></pre></figure>\n<p>Now, any developer looking to work with an <code>Address</code> object should reasonably expect all the fields to be populated.\nInevitably, a requirement comes along from the product team requesting only the address street to be required, not city\nand state (don't ask me, I don't make the rules around here). So naturally, we might add another constructor:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">public</span><span style=\"color:#F97583\"> sealed</span><span style=\"color:#F97583\"> record</span><span style=\"color:#B392F0\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> city</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> state</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Street </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> street;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        City </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> city;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        State </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> state;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Street </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> street;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        City </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">.Empty;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        State </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">.Empty;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Street</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> City</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">init</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">init</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> void</span><span style=\"color:#B392F0\"> PrintAddress</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        var</span><span style=\"color:#B392F0\"> addressParts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> List</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Street</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">IsNullOrWhiteSpace</span><span style=\"color:#E1E4E8\">(City))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            addressParts.</span><span style=\"color:#B392F0\">Add</span><span style=\"color:#E1E4E8\">(City);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">IsNullOrWhiteSpace</span><span style=\"color:#E1E4E8\">(State))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            addressParts.</span><span style=\"color:#B392F0\">Add</span><span style=\"color:#E1E4E8\">(State);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Join</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\", \"</span><span style=\"color:#E1E4E8\">, addressParts));</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>We added a constructor that requires the street while defaulting the city and state to empty strings rather than <code>null</code>\nfor sanity. While it's easy enough to use object initializers instead, i.e.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">var</span><span style=\"color:#B392F0\"> someAddress</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    Street </span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\"> \"123 Code Street\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">};</span></span></code></pre></figure>\n<p>We add constructors to classes and structures to enforce object creation is <em>correct-by-construction</em>: the internals of\nconstructing an object, especially those more complex, are better off encapsulated from consumers so we don't have to\nworry about leaking business logic/rules out from their intended domain. Inevitably, more requirements come along so we\nadd <em>more</em> constructors</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">public</span><span style=\"color:#F97583\"> sealed</span><span style=\"color:#F97583\"> record</span><span style=\"color:#B392F0\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> city</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> state</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Street </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> street;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        City </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> city;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        State </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> state;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> city</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Street </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> street;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        City </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> city;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        State </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">.Empty;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Street </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> street;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        City </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">.Empty;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        State </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">.Empty;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Street</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> City</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">init</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">init</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> void</span><span style=\"color:#B392F0\"> PrintAddress</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        var</span><span style=\"color:#B392F0\"> addressParts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> List</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Street</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">IsNullOrWhiteSpace</span><span style=\"color:#E1E4E8\">(City))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            addressParts.</span><span style=\"color:#B392F0\">Add</span><span style=\"color:#E1E4E8\">(City);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">IsNullOrWhiteSpace</span><span style=\"color:#E1E4E8\">(State))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            addressParts.</span><span style=\"color:#B392F0\">Add</span><span style=\"color:#E1E4E8\">(State);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Join</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\", \"</span><span style=\"color:#E1E4E8\">, addressParts));</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>So now, our consumers have to choose between three different ways to properly construct the address information. While\nthis is \"fine\" for the most part, I find it often more helpful to add contextual object constructors, a.k.a methods to\nan object that <em>clearly conveys</em> what context the object is to be constructed with:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">public</span><span style=\"color:#F97583\"> sealed</span><span style=\"color:#F97583\"> record</span><span style=\"color:#B392F0\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    private</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Street </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> street;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        City </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">.Empty;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        State </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">.Empty;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    private</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> city</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Street </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> street;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        City </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> city;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        State </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">.Empty;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    private</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> city</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> state</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Street </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> street;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        City </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> city;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        State </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> state;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#B392F0\"> FromStreet</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> new</span><span style=\"color:#E1E4E8\">(street);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#B392F0\"> FromStreetAndCity</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> city</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> new</span><span style=\"color:#E1E4E8\">(street, city);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#B392F0\"> FromFullAddress</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> street</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> city</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> state</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> new</span><span style=\"color:#E1E4E8\">(street, city, state);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Street</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> City</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> void</span><span style=\"color:#B392F0\"> PrintAddress</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        var</span><span style=\"color:#B392F0\"> addressParts</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> List</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Street</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">IsNullOrWhiteSpace</span><span style=\"color:#E1E4E8\">(City))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            addressParts.</span><span style=\"color:#B392F0\">Add</span><span style=\"color:#E1E4E8\">(City);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">IsNullOrWhiteSpace</span><span style=\"color:#E1E4E8\">(State))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            addressParts.</span><span style=\"color:#B392F0\">Add</span><span style=\"color:#E1E4E8\">(State);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Join</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\", \"</span><span style=\"color:#E1E4E8\">, addressParts));</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Now, when consumers want to interact with an <code>Address</code> object, we provide context as to the address they're\nconstructing:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\">// We don't allow consumers to construct an address however they'd like, they MUST construct it in ways we offer</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">var</span><span style=\"color:#B392F0\"> addressWithStreetOnly</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Address.</span><span style=\"color:#B392F0\">FromStreet</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"123 Code Street\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">addressWithStreetOnly.</span><span style=\"color:#B392F0\">PrintAddress</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">var</span><span style=\"color:#B392F0\"> addressWithStreetAndState</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Address.</span><span style=\"color:#B392F0\">FromStreetAndCity</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"123 Code Street\"</span><span style=\"color:#E1E4E8\">,  </span><span style=\"color:#9ECBFF\">\".NETville\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">addressWithStreetAndState.</span><span style=\"color:#B392F0\">PrintAddress</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">var</span><span style=\"color:#B392F0\"> fullAddress</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> Address.</span><span style=\"color:#B392F0\">FromFullAddress</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"123 Code Street\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\".NETville\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"CA\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">fullAddress.</span><span style=\"color:#B392F0\">PrintAddress</span><span style=\"color:#E1E4E8\">();</span></span></code></pre></figure>\n<p>Although we still provide constructors, they're now <code>private</code> so we can further constrain how consumers instantiate\nan <code>Address</code> to help avoid pesky \"missing data/property\" bugs. We can think of these <code>static</code> builders on our <code>Address</code>\nrecord as <em>named constructors</em>, which come in handy when we need multiple variations of object construction.</p>\n<h2>Fluent builders for complex objects</h2>\n<p>Oftentimes, our constructed objects might contain a hodge-podge of properties that may or may not necessarily support\none another. I find implementing fluent builders, in this case, to help allow consumers to instantiate their objects in\na manner they see fit. Using builders, we offer a <em>fluent</em> like API to callers allowing them to customize exactly what\nthe object they're looking to build should look like. In terms of C#, we're looking for something along the lines of:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">var</span><span style=\"color:#B392F0\"> someFluentlyBuiltObject</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> AwesomeFluentBuilder</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    .</span><span style=\"color:#B392F0\">WithFoo</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Bar\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    .</span><span style=\"color:#B392F0\">WithAnswerToLife</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">42</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    .</span><span style=\"color:#B392F0\">WithOpinion</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Lord of the Rings is better than Star Wars\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    .</span><span style=\"color:#B392F0\">Build</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Debug.</span><span style=\"color:#B392F0\">Assert</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Equals</span><span style=\"color:#E1E4E8\">(someFluentlyBuiltObject.Foo, </span><span style=\"color:#9ECBFF\">\"Bar\"</span><span style=\"color:#E1E4E8\">));</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Debug.</span><span style=\"color:#B392F0\">Assert</span><span style=\"color:#E1E4E8\">(someFluentlyBuiltObject.AnswerToLift, </span><span style=\"color:#79B8FF\">42</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Debug.</span><span style=\"color:#B392F0\">Assert</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Equals</span><span style=\"color:#E1E4E8\">(someFluentlyBuiltObject.Opinion, </span><span style=\"color:#9ECBFF\">\"Lord of the Rings is better than Star Wars\"</span><span style=\"color:#E1E4E8\">));</span></span></code></pre></figure>\n<p>I opt to use the <code>WithProperty()</code> convention to make it clear to consumers of my code that the object they're\nconstructing will contain whatever data they will correspond to that property's value - somewhat subject, but I feel the\nintention is clear. Let's take a look at a more fleshed out, yet contrived, example in Rust as I've been having somewhat\nof an obsession lately with the language and ecosystem. Seriously, the joy of using cargo alone makes me instantly\nannoyed whenever I'm <em>not</em> working in a Rust context. Let's fluently build some pizzas with Rust.</p>\n<p>This isn't a post about Rust necessarily, so I'll defer to the rustaceans much smarter and more well-versed in the\nlanguage than myself to deep dive into idiomatic Rust. The concept remains, however - our public API should offer a\npizza <code>struct</code> that can be consumed by callers. While a caller <em>could</em> in theory, construct they're own pizza, we should\noffer them a convenient way to make pizzas without worrying about the internal details of constructing said pizza.</p>\n<p>We can think of it as the exchange of transactions that occurs when one walks into their favorite pizza joint:</p>\n<ul>\n<li>We order at the register providing the establishment with a list of requirements we'd like our pizza to meet</li>\n<li>We make an exchange of currency after detailing what our pizza should look/taste like</li>\n<li>After some time, we receive a pizza at our table - hopefully accompanied by a nice cold adult beverage</li>\n</ul>\n<p>Let's see if we can model this scenario in code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Default</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> struct</span><span style=\"color:#B392F0\"> Pizza</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> crust</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Crust</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> toppings</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Toppings</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> sauce</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Sauce</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> enum</span><span style=\"color:#B392F0\"> Crust</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Regular</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Thin</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    DeepDish</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> Default</span><span style=\"color:#F97583\"> for</span><span style=\"color:#B392F0\"> Crust</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    fn</span><span style=\"color:#B392F0\"> default</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#79B8FF\"> Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        Crust</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Regular</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">type</span><span style=\"color:#B392F0\"> Toppings</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> Vec</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#E1E4E8\">>;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> enum</span><span style=\"color:#B392F0\"> Topping</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Cheese</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Pepperoni</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Onions</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    BellPeppers</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Mushrooms</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Sausage</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Custom</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">String</span><span style=\"color:#E1E4E8\">),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> enum</span><span style=\"color:#B392F0\"> Sauce</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Red</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    White</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> Default</span><span style=\"color:#F97583\"> for</span><span style=\"color:#B392F0\"> Sauce</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    fn</span><span style=\"color:#B392F0\"> default</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#79B8FF\"> Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        Sauce</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Red</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>A <code>Pizza</code> should contain a <code>Crust</code>, <code>Sauce</code>, and a plethora of <code>Topping</code>s. While callers of our public API could build a\npizza themselves, we want to make it as easy as possible to build such a pizza without worrying about how to ladle the\nsauce, toss the dough, shred the mozzarella, etc. Let's add a fluent builder our users can interact to build their\nperfect <code>Pizza</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#F97583\"> crate::</span><span style=\"color:#B392F0\">pizza</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Crust</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#F97583\"> crate::</span><span style=\"color:#B392F0\">pizza</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Pizza</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#F97583\"> crate::</span><span style=\"color:#B392F0\">pizza</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Sauce</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#F97583\"> crate::</span><span style=\"color:#B392F0\">pizza</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> struct</span><span style=\"color:#B392F0\"> PizzaBuilder</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    pizza</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Pizza</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> PizzaBuilder</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> new</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#79B8FF\"> Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            pizza</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Pizza</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">default</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> with_crust</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">, crust</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Crust</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#79B8FF\"> Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            pizza</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Pizza</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                crust,</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                ..</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">pizza</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> with_sauce</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">, sauce</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Sauce</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#79B8FF\"> Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            pizza</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Pizza</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                sauce,</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                ..</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">pizza</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> with_topping</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">, topping</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Topping</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#79B8FF\"> Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        let</span><span style=\"color:#F97583\"> mut</span><span style=\"color:#E1E4E8\"> toppings_mut </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> self</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">pizza</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">toppings;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        toppings_mut</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">push</span><span style=\"color:#E1E4E8\">(topping);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            pizza</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Pizza</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                toppings</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> toppings_mut,</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                ..</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">pizza</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> build</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Pizza</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        self</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">pizza</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>For those unfamiliar with Rust, we won't hang up on the details here. Our builder simply offers methods on\nthe <code>PizzaBuilder</code> struct, consuming whatever the previous version of its internal <code>Pizza</code> state through <code>self</code>, and\ncreates a new internal state containing the previous pizza state with slight modifications depending on what property we\nmight be updating on the <code>Pizza</code> we'll hand back to consumers. When we finally <code>build()</code> this <code>Pizza</code>, we simply hand\nback the internally managed pizza state.</p>\n<p>Consuming our <code>PizzaBuilder</code> might look something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#F97583\"> crate::</span><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    pizza</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">Crust</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Sauce</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#E1E4E8\">},</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    pizza_builder</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">PizzaBuilder</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">mod</span><span style=\"color:#B392F0\"> pizza</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">mod</span><span style=\"color:#B392F0\"> pizza_builder</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">fn</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> double_pepperoni </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> PizzaBuilder</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_crust</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Crust</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Regular</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_sauce</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Sauce</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Red</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_topping</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Cheese</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_topping</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Pepperoni</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_topping</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Pepperoni</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">build</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"{:?}\"</span><span style=\"color:#E1E4E8\">, double_pepperoni);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> deep_dish </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> PizzaBuilder</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_crust</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Crust</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">DeepDish</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_sauce</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Sauce</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Red</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_topping</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Cheese</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_topping</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Sausage</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_topping</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Mushrooms</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">build</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"{:?}\"</span><span style=\"color:#E1E4E8\">, deep_dish);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> white_pie </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> PizzaBuilder</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_crust</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Crust</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Thin</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_sauce</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Sauce</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">White</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_topping</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">BellPeppers</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_topping</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Onions</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_topping</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Topping</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Custom</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Anchovies\"</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">to_owned</span><span style=\"color:#E1E4E8\">()))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">build</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"{:?}... ugh, anchovies...\"</span><span style=\"color:#E1E4E8\">, white_pie);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Running our code gives us an output along the lines of\"</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">Pizza</span><span style=\"color:#9ECBFF\"> {</span><span style=\"color:#9ECBFF\"> crust:</span><span style=\"color:#9ECBFF\"> Regular,</span><span style=\"color:#9ECBFF\"> toppings:</span><span style=\"color:#E1E4E8\"> [Cheese, </span><span style=\"color:#9ECBFF\">Pepperoni,</span><span style=\"color:#9ECBFF\"> Pepperoni],</span><span style=\"color:#9ECBFF\"> sauce:</span><span style=\"color:#9ECBFF\"> Red</span><span style=\"color:#9ECBFF\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Pizza</span><span style=\"color:#9ECBFF\"> {</span><span style=\"color:#9ECBFF\"> crust:</span><span style=\"color:#9ECBFF\"> DeepDish,</span><span style=\"color:#9ECBFF\"> toppings:</span><span style=\"color:#E1E4E8\"> [Cheese, </span><span style=\"color:#9ECBFF\">Sausage,</span><span style=\"color:#9ECBFF\"> Mushrooms],</span><span style=\"color:#9ECBFF\"> sauce:</span><span style=\"color:#9ECBFF\"> Red</span><span style=\"color:#9ECBFF\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Pizza</span><span style=\"color:#9ECBFF\"> {</span><span style=\"color:#9ECBFF\"> crust:</span><span style=\"color:#9ECBFF\"> Thin,</span><span style=\"color:#9ECBFF\"> toppings:</span><span style=\"color:#E1E4E8\"> [BellPeppers, </span><span style=\"color:#9ECBFF\">Onions,</span><span style=\"color:#9ECBFF\"> Custom</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">\"Anchovies\"</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#9ECBFF\">],</span><span style=\"color:#9ECBFF\"> sauce:</span><span style=\"color:#9ECBFF\"> White</span><span style=\"color:#9ECBFF\"> }...</span><span style=\"color:#9ECBFF\"> ugh,</span><span style=\"color:#9ECBFF\"> anchovies...</span></span></code></pre></figure>\n<p>Sweet! We're building fluent pizzas on the fly without having to leak details on pizza internals to consumers.</p>\n<p>In short, it's often better to constrain object construction for consumers <em>if your intent</em> as the code owner is to have\nsuch consumers utilize your objects in a predefined manner. In essence, we should aim to help consumers build objects\n<em>with intent</em> rather than letting them run wild with unconstrained creation.</p>\n<p>Until next time, friends!</p>"
  },
  "_id": "2022/constructing-objects-with-intent.md",
  "_raw": {
    "sourceFilePath": "2022/constructing-objects-with-intent.md",
    "sourceFileName": "constructing-objects-with-intent.md",
    "sourceFileDir": "2022",
    "contentType": "markdown",
    "flattenedPath": "2022/constructing-objects-with-intent"
  },
  "type": "Post",
  "url": "/blog/2022/constructing-objects-with-intent"
}