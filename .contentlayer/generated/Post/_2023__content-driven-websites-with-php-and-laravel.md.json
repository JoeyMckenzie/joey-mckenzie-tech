{
  "title": "Content-driven websites with PHP and Laravel",
  "description": "It's PHPin' time!",
  "pubDate": "2023-12-13T08:00:00.000Z",
  "category": "laravel",
  "heroImage": "/images/migrating-to-laravel/meme.jpg",
  "draft": false,
  "keywords": [
    "php",
    "laravel"
  ],
  "body": {
    "raw": "\nAlright, I'm making this one short (sort of). My pre-New Year's Resolution is to write on my blog here more\nthan bi-annually. Since becoming a dad and taking up my jorts-laden mantle and becoming alarmingly interested in grass\nmowing techniques and New Balance footwear this past year, finding the time to write has come too far and between\n(betwixt?).\n\nI was recently on the hunt for something new to learn and after laughing at memes\non [r/webdev](https://reddit.com/r/webdev/) about PHP for far too long, I figured I had better at least learn a little\nPHP\nto understand the source of the meme'ery in the first place. Learning PHP ultimately brought me\nto [Laravel](https://laravel.com/),\nand oh... my... god... do I feel betrayed by my fellow developers for dunking on PHP without telling me about the\nabundant Lambos running rampant in the Laravel ecosystem. I've been writing a bunch of Rust to keep my brain occupied\noutside my normal 8-to-5 and PHP was a breath of fresh air.\n\nIf you're a full-time TypeScript/.NET'er working with a sprinkle of other languages like Go and Rust here and there like\nme, PHP might seem like an afterthought. I can confidently say that after embarking down the Laravel/PHP road, I'm more\nthan happy I did.\n\nI thought it would be fun to write a bit about the process of learning Laravel through re-writing my website from a few\ndifferent iterations of JS frameworks and give some insight from a newcomers perspective about Laravel and PHP.\n\n## Framework exhaustion\n\nI'm a creature of habit, and one thing I've formed somewhat of a ritual around is re-writing my website, the very one\nyou happen to be reading, at least once a year. I've gone through a few iterations:\n\n- Static site generators with Hugo and Jekyll\n- SSR frameworks\n  with [Next.js](https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/blog-v1), [Nuxt.js](https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/nuxt-v2),\n  and [SvelteKit](https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/svelte)\n- At one point, a combo of [Astro and Rust](https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/astro-rust)\n  that formed an interesting mix of SSG and [island architectures](https://docs.astro.build/en/concepts/islands/) for\n  fetching dynamic data\n\nQuite frankly, I'm burnt out on JS framework madness, though to no fault of their own. There's many that are innovating\nand pushing the ecosystem forward with cool new technology that I'll get to use in production five years from now if I'm\nlucky. Each iteration I re-wrote wrangled a hodge podge of JS libraries for certain things I wanted to do, including but\nnot limited to:\n\n- Parsing markdown\n  content ([contentlayer](https://contentlayer.dev), [gray-matter](https://www.npmjs.com/package/gray-matter)) and\n  highlighting code snippets ([highlight.js](https://highlightjs.org/), [shiki](https://shiki.matsu.io/))\n- Storing things in a database with a bit of magic\n  abstraction ([prisma](https://prisma.io), [drizzle](https://orm.drizzle.team/))\n- Calling external APIs through framework semantics, which differ from framework to framework\n- Caching content pages as I don't update them often\n\nAnd a plethora of other things. The nice thing about Laravel is that a lot of this is out-of-the-box functionality so\nI can indulge in my slice-of-the-internet playground that is my website.\n\n## Making code great again\n\nI found that while re-building my site with Laravel, I was having fun writing code in a new way that I was missing when\nusing the JS flavor of the month framework. My .NET brain felt right at home with Laravel, all the while being able to\nmix and match frontends thanks to [Inertia.js](https://inertiajs.com) (I'm not quite ready to\nembrace [Livewire](https://livewire.laravel.com/) just yet). Anything I wanted to do, Laravel had an answer:\n\n- Syncing content to the database on\n  deployment? [Console commands](https://laravel.com/docs/10.x/artisan#generating-commands).\n- Querying content? [Eloquent](https://laravel.com/docs/10.x/eloquent).\n- Built-in caching, an HTTP client, and just about anything you'll need for the general web\n\nThe goal of this post will be to outline what I think makes Laravel great from the context of a PHP/Laravel outsider\neven for a small, mostly static website like mine.\n\n## DI from the start\n\nComing from .NET, I clutch onto my DI framework pearls tightly, rarely loosening my grip. I'll even die on the hill that\n.NET's first-party dependency injection framework (when used within it's expected confines) is one of the better DI\nframeworks out there (I've enjoyed it _much_ more than Spring's DI with magical `@autowire`s on every bean).\n\nI like to _think_ I'm not that much of a DI container shill after writing a few things in Rust and Go, and while they\nhave there place and time when serving a viable purpose, are nice to work with _when used correctly_. I see a lot of\n.NET in the wild attempting to bend `ServiceProvider`s to their application's will, creating a poor man's service\nlocator within a service locator (I'm guilty as charged).\n\nWith Laravel, binding contracts to concretes is simple and straight forward. Coupled with route-provider binding\nbuilt-in DI, it quite literally felt like I was back at home writing a modern .NET application.\n\n## Strict linting opt-in\n\nI'm glutton for punishment and Rust-level strict typing, so [phpstan](https://phpstan.org/) with the\nhelp [larastan](https://github.com/larastan/larastan) cranked up to the max scratched that itch. I'm currently\nin the process of trimming down the things I don't need with Laravel, which ultimately entails things\nlike removing auth-based middleware, migrations, and models since I have no intention of managing users. While max level\nphpstan requires a few tweaks to a freshly scaffolded [Laravel Breeze](https://github.com/laravel/breeze) app, once\nthose tweaks were made that mainly consisted of a few typing hints here and there, everything worked as expected.\nCoupled with [fswatch](https://github.com/emcrisostomo/fswatch), I got the same DX as I'm used to with Rust akin to\nrunning something like `cargo watch -x clippy` with the help of [cargo-watch](https://crates.io/crates/cargo-watch).\nBetter yet, hiding said `fswatch` command behind a [justfile](https://github.com/casey/just) made it seamless to\nintegrate phpstan continuously while I was writing code:\n\n```shell\ndefault: pail\n\n# runs tail logging\npail:\n    php artisan pail\n\n# syncs content to the database\nsync:\n    php artisan app:sync-content\n\n# continuously runs lint on file change\nlint:\n    fswatch -o app/ | xargs -n1 -I{} sh -c \"composer run lint\"\n```\n\nand in my terminal:\n\n```shell\n$ just lint # which runs `fswatch -o app/ | xargs -n1 -I{} sh -c \"composer run lint\"` by proxy\n\n> vendor/bin/phpstan analyse app\n\n\nNote: Using configuration file /Users/jmckenzie/projects/php/joeymckenzie.tech/phpstan.neon.\n 40/40 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%\n\n\n [OK] No errors\n```\n\nBeautiful! Any source code change within my `app/` directory triggered a full linting run to make sure I was holding\nmyself accountable for not letting my code go to shit (pardon my French).\n\nSide note, composer is easily up there with cargo competing for best language toolchain on the market. I mean come on\nJavaScript... why do we need four different package managers?\n\n## Content syncing\n\nOne of the things I need is the ability to continuously sync markdown content with the database I store it in, which in\nmy case is just a MySQL instance running on my droplet provisioned with the help of Laravel Forge (more on that later).\nRather than writing some one off shell script to do that, I found Laravel commands mighty useful to simply just define a\ncustom artisan command that would:\n\n- Read my content files\n- Parse the frontmatter on each markdown file\n- Parse the markdown and convert it to HTML\n- Save everything to the data to the database\n\nThat ended up looking something like:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Console\\Commands;\n\nuse App\\Contracts\\ContentUtilityContract;\nuse App\\Models\\ContentMeta;\nuse Illuminate\\Console\\Command;\nuse Throwable;\n\nfinal class SyncContent extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'app:sync-content';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Syncs content from markdown files into the database.';\n\n    /**\n     * Execute the console command.\n     *\n     * @throws Throwable\n     */\n    public function handle(ContentUtilityContract $contentUtility): void\n    {\n        $files = $contentUtility->getMarkdownFilePaths();\n        collect($files)\n            ->map(fn (string $filePath) => $contentUtility->getParsedContent($filePath))\n            ->each(fn (ContentMeta $contentMeta) => $contentUtility->upsertBlogPost($contentMeta));\n    }\n}\n```\n\nComing from .NET, I'm a self diagnosed [LINQ](https://learn.microsoft.com/en-us/dotnet/csharp/linq/) addict. Collections\nmade me feel right at home. From the above, I'm configuring a short pipeline of sorts that will do all the things I\noutlined with a little help from the DI container and the `ContentUtilityContract`:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Contracts;\n\nuse App\\Models\\BlogPost;\nuse App\\Models\\ContentMeta;\nuse League\\CommonMark\\Exception\\CommonMarkException;\nuse League\\Config\\Exception\\ConfigurationExceptionInterface;\n\ninterface ContentUtilityContract\n{\n    /**\n     * @return string[]\n     */\n    public function getMarkdownFilePaths(): array;\n\n    /**\n     * @throws ConfigurationExceptionInterface\n     * @throws CommonMarkException\n     */\n    public function getParsedContent(string $filePath): ContentMeta;\n\n    public function upsertBlogPost(ContentMeta $contentMeta): BlogPost;\n}\n```\n\nand whose implementation looks something like:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Services;\n\nuse App\\Contracts\\ContentUtilityContract;\nuse App\\Models\\BlogPost;\nuse App\\Models\\ContentMeta;\nuse Illuminate\\Support\\Facades\\Log;\nuse League\\CommonMark\\ConverterInterface;\nuse League\\CommonMark\\Extension\\FrontMatter\\Data\\SymfonyYamlFrontMatterParser;\nuse League\\CommonMark\\Extension\\FrontMatter\\FrontMatterParser;\nuse Override;\n\nfinal readonly class MarkdownUtility implements ContentUtilityContract\n{\n    private ConverterInterface $converter;\n\n    public function __construct(ConverterInterface $converter)\n    {\n        $this->converter = $converter;\n    }\n\n    #[Override]\n    public function getMarkdownFilePaths(): array\n    {\n        $basePath = base_path();\n        $contentPath = \"$basePath\".'/content';\n\n        Log::info(\"identified content path as $contentPath, globbing content files\");\n\n        /** @var string[] $files */\n        $files = app()->environment() === 'local'\n            ? glob(\"$contentPath/**/*.md\", GLOB_BRACE)\n            : glob(\"$contentPath/*[!draft]/*.md\", GLOB_BRACE);\n\n        $fileCount = count($files);\n\n        Log::info(\"$fileCount globbed files found\");\n\n        return $files;\n    }\n\n    #[Override]\n    public function getParsedContent(string $filePath): ContentMeta\n    {\n        Log::info(\"parsing content for file $filePath\");\n\n        /** @var string $contents */\n        $contents = file_get_contents($filePath);\n        $fileInfo = pathinfo($filePath);\n        $extension = empty($fileInfo['extension'])\n            ? ''\n            : '.'.$fileInfo['extension'];\n        $fileSlug = basename($filePath, $extension);\n\n        Log::info(\"file parsed, determined slug as $fileSlug\");\n\n        $frontMatterParser = new FrontMatterParser(new SymfonyYamlFrontMatterParser());\n        $parsedContent = $frontMatterParser->parse($contents);\n        $frontMatter = $parsedContent->getFrontMatter();\n        $markdown = $parsedContent->getContent();\n        $html = $this->converter->convert($markdown)->getContent();\n\n        Log::info('frontmatter and content parsed');\n\n        return new ContentMeta($fileSlug, $markdown, $html, $frontMatter);\n    }\n\n    #[Override]\n    public function upsertBlogPost(ContentMeta $contentMeta): BlogPost\n    {\n        $contentSlug = $contentMeta->slug;\n\n        Log::info(\"upserting blog post $contentSlug\");\n\n        $upsertedBlog = BlogPost::updateOrCreate([\n            'slug' => $contentSlug,\n        ], [\n            'slug' => $contentSlug,\n            'title' => $contentMeta->frontMatter->title,\n            'description' => $contentMeta->frontMatter->description,\n            'category' => $contentMeta->frontMatter->category,\n            'published_date' => $contentMeta->frontMatter->pubDate,\n            'hero_image' => $contentMeta->frontMatter->heroImage,\n            'keywords' => implode(',', $contentMeta->frontMatter->keywords),\n            'raw_content' => $contentMeta->markdown,\n            'parsed_content' => $contentMeta->html,\n        ]);\n\n        Log::info('blog content updated!');\n\n        return $upsertedBlog;\n    }\n}\n```\n\nNow from what I've gathered... folks in the PHP community don't exactly _love_ `final` classes - I have no intention on\ninheriting from these classes and like to follow a composition approach as often as possible (though not always).\n\nNow anytime I want to sync my content, a simple\n\n```shell\n$ artisan app:sync-content\n```\n\ndoes the trick! Note: I'm a lazy developer, so my `~/.zshrc` configuration has an alias:\n\n```shell\nalias artisan=\"php artisan\"\n```\n\nI could probably be even lazier and shorten it, but that'll do for now.\n\n## Servers\n\nUsing [Laravel Forge](https://forge.laravel.com/) and a DigitalOcean droplet, I'm able to turn the server provisioning\npart of my brain completely off and simply write code, commit, and push. Forge does just about everything for you when\ndeploying application servers, including setting up MySQL, PHP versions, server tooling, SSL, etc. I was even able to\ntweak the deployment script, so I could refresh/sync my markdown content with the database anytime a new deployment was\ntriggered. You're probably thinking \"wait... why do you have a database in the first place?\" There's a few reasons for\nthat.\n\nI use [torchlight](https://torchlight.dev/) for syntax highlighting in content, and storing the parsed content in the\ndatabase means I only need to pay the price of content highlighting once at deployment time. I also like to keep track\nof views on each blog, so I need some form of persistent storage. I _also_ like to keep my notes in there (one of my few\npieces of website flair) where I can simply SSH to my droplet and _drop_ (no pun intended) into\na [tinker](https://laravel.com/docs/10.x/artisan#tinker) session to create more notes, so something like this just works\nwhen I\nwant to add a new note without a GUI component:\n\n```shell\n# On the droplet...\n\nroot@website /home/forge/joeymckenzie.tech $ php artisan tinker\n\nPsy Shell v0.11.22 (PHP 8.3.0 — cli) by Justin Hileman\n\n> \\App\\Models\\Note::create(['title' => 'Networking', 'description' => 'I have no clue how SSL truly works.']);\n= App\\Models\\Note {#7285\n    title: \"Networking\",\n    description: \"I have no clue how SSL truly works.\",\n    +updated_at: \"2023-12-11 23:04:02\",\n    +created_at: \"2023-12-11 23:04:02\",\n    +id: 5,\n  }\n```\n\nI can also generate sitemaps on startup too which is \"dumb easy\" (as the kids say) with the help of\nSpatie's [Laravel sitemap library](https://github.com/spatie/laravel-sitemap) paired with another console command:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Console\\Commands;\n\nuse App\\Models\\BlogPost;\nuse Illuminate\\Console\\Command;\nuse Spatie\\Sitemap\\SitemapGenerator;\nuse Spatie\\Sitemap\\Tags\\Url;\n\nclass GenerateSitemap extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'app:generate-sitemap';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Generates the sitemap.';\n\n    /**\n     * Generates a sitemap for all the SEO goodness\n     */\n    public function handle(): void\n    {\n        /** @var string $url */\n        $url = config('app.url');\n\n        // Build the sitemap key that will ultimately live in the public directory\n        $publicPath = public_path();\n        $outputFile = \"$publicPath/sitemap-index.xml\";\n\n        // Grab a list of the slugs from the database so we can\n        // dynamically generate the different entries of the map\n        $slugs = BlogPost::select(['slug', 'updated_at'])->get();\n        $siteMap = SitemapGenerator::create($url)->getSitemap();\n\n        // Roll through each entry, mapping each to a sitemap entry with a low priority change value\n        collect($slugs)\n            ->each(function (BlogPost $blogPost) use ($siteMap) {\n                $slug = $blogPost->slug;\n                $siteMap\n                    ->add(Url::create(\"/blog/$slug\")\n                        ->setPriority(0.5)\n                        ->setChangeFrequency(Url::CHANGE_FREQUENCY_YEARLY)\n                        ->setLastModificationDate($blogPost->updated_at?->toDate() ?? now()));\n            });\n\n        // Finally, add the static pages as well\n        $siteMap\n            ->add(Url::create('/about')\n                ->setPriority(0.5)\n                ->setChangeFrequency(Url::CHANGE_FREQUENCY_YEARLY))\n            ->add(Url::create('/now')\n                ->setPriority(0.5)\n                ->setChangeFrequency(Url::CHANGE_FREQUENCY_YEARLY))\n            ->writeToFile($outputFile);\n    }\n}\n```\n\nAnd in my Forge deployment script, I can simply add the custom artisan command to generate a new sitemap everytime I\ndeploy:\n\n```shell\n# Other stuff...\n\nif [ -f artisan ]; then\n    $FORGE_PHP artisan migrate --force\n    $FORGE_PHP artisan app:sync-content\n    $FORGE_PHP artisan app:generate-sitemap\nfi\n```\n\nSimple!\n\n# Inertia\n\nOkay, so I know I'm somewhat dunking on JavaScript in this post, but truth be told... I still love JS. I've had jobs\nworking with each of the Big Three<sup>tm</sup> frameworks in Angular, Vue, and React. I've begrudgingly been using\nReact because I'm lazy and (what seems like) one of the few that enjoy JSX. With Inertia and React, that means I can use\nthings like [shad](https://ui.shadcn.com/) for getting that clean Tailwind look (there's also\na [Vue](https://www.shadcn-vue.com/) and [Svelte](https://www.shadcn-svelte.com/) versions I used in the previous\niterations), and\nall the neat React things that are out in the wild. If it's on the web, there's probably a React library for it.\n\nI'm a fan of [pnpm](https://pnpm.io/) as a drop in replacement for npm, and I've also decided to\nditch [eslint](https://eslint.org/) and [prettier](https://prettier.io/) for [biome](https://biomejs.dev/), another drop\nin replacement for both tools, written in Rust (like all good tooling nowadays). I've had my fair share of battles over\nthe years with both eslint and prettier, and also getting them to play nice together (shout out\nto [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier)). While they're fundamentally different\nthings, i.e. formatting vs. linting, I think the argument could be made they're in the same family of code quality\ntools. Biome neatly wraps them up into a single tool that _just works_. So now when I want to lint or format my React\ncomponents, no more `.eslintrc.*` and `.prettierrc.*` files to deal with, just a single `biome.json` file:\n\n```json\n{\n    \"$schema\": \"https://biomejs.dev/schemas/1.4.1/schema.json\",\n    \"organizeImports\": {\n        \"enabled\": true\n    },\n    \"formatter\": {\n        \"indentStyle\": \"space\",\n        \"indentWidth\": 4\n    },\n    \"linter\": {\n        \"enabled\": true,\n        \"rules\": {\n            \"recommended\": true\n        }\n    }\n}\n```\n\nCoupled with a neat biome command:\n\n```shell\n# When I want to format things\n$ pnpm dlx @biomejs/biome format --write ./resources/js\n\n# or, if I want to lint\n$ pnpm dlx @biomejs/biome lint ./resources/js\n```\n\nWrapping those up in my `package.json` `scripts` looks something like:\n\n```json\n{\n    // Other stuff...\n    \"scripts\": {\n        \"dev\": \"vite\",\n        \"build\": \"tsc && vite build && vite build --ssr\",\n        \"tailwind\": \"prettier --plugin prettier-plugin-tailwindcss --write ./resources/js\",\n        \"check\": \"pnpm dlx @biomejs/biome check --apply ./resources/js\",\n        \"fmt\": \"pnpm dlx @biomejs/biome format --write ./resources/js\",\n        \"fix\": \"pnpm dlx @biomejs/biome lint --apply ./resources/js\",\n        \"lint\": \"pnpm dlx @biomejs/biome lint ./resources/js\",\n        \"ci\": \"pnpm dlx @biomejs/biome ci ./resources/js\",\n        \"prepare\": \"git config core.hookspath .githooks\",\n        \"pre-commit\": \"pnpm run tailwind && pnpm run check && pnpm run fmt\"\n    }\n}\n```\n\nNow unfortunately, I'm not _entirely_ free of prettier just yet, as there's still no support for [Tailwind class sorting\nin biome](https://github.com/biomejs/biome/discussions/164). I only use prettier to simply wrangle Tailwind classes,\nthen let biome do the rest.\n\nInertia has SSR too, which boils down to simply having to run an `artisan` command on deployment to spin up your Node.js\nserver where ever it may be and point Laravel to it. With Forge, it's _literally_ the flip of a switch.\n\nOne of the things I also needed was to display some common data on each page of my website, including on all the posts\nthemselves. In the footer, you'll see a Spotify widget that displays what I'm currently listening to and the current\nbuild commit SHA the site was deployed with. With Inertia middleware, this was a simple addon to the existing configured\nmiddleware:\n\n#### app/Http/Middleware/HandleInertiaRequests.php\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Http\\Middleware;\n\nuse App\\Contracts\\MusicTrackerContract;\nuse Illuminate\\Foundation\\Application;\nuse Illuminate\\Http\\Request;\nuse Inertia\\Middleware;\nuse Tightenco\\Ziggy\\Ziggy;\n\nfinal class HandleInertiaRequests extends Middleware\n{\n    /**\n     * The root template that is loaded on the first page visit.\n     *\n     * @var string\n     */\n    protected $rootView = 'app';\n\n    public function __construct(private readonly MusicTrackerContract $spotifyTracker)\n    {\n    }\n\n    /**\n     * Determine the current asset version.\n     */\n    public function version(Request $request): ?string\n    {\n        return parent::version($request);\n    }\n\n    /**\n     * Define the props that are shared by default.\n     *\n     * @return array<string, mixed>\n     */\n    public function share(Request $request): array\n    {\n        return [\n            ...parent::share($request),\n            'ziggy' => fn () => [\n                ...(new Ziggy)->toArray(),\n                'location' => $request->url(),\n            ],\n            // Propagate the commit information on every request\n            'commit' => config('app.commit'),\n            // Also propagate the current listening data from Spotify\n            'spotify' => $this->spotifyTracker->getNowPlaying(),\n            'laravelVersion' => Application::VERSION,\n            'phpVersion' => PHP_VERSION,\n        ];\n    }\n}\n```\n\nand in my component footer:\n\n#### resources/js/Components/SpotifyTracker.tsx\n\n```tsx\nexport default function SpotifyTracker({children}: { children: React.JSX.Element }): React.JSX.Element {\n    // Inertia has a pretty sweet hook allowing us to tap into common page properties\n    const page = usePage();\n\n    const nowPlaying = page.props.spotify as NowPlaying | undefined;\n    const currentlyPlaying = nowPlaying?.nowPlaying ?? false;\n\n    return (\n        <>\n            {currentlyPlaying && nowPlaying !== undefined && (\n                <CurrentlyPlaying nowPlaying={nowPlaying}>\n                    {children}\n                </CurrentlyPlaying>\n            )}\n            {!currentlyPlaying && (\n                <NotCurrentlyPlaying>{children}</NotCurrentlyPlaying>\n            )}\n        </>\n    );\n}\n```\n\nwith the corresponding `PageProps` in `index.d.ts` changes:\n\n```typescript\nexport type NowPlaying = {\n    nowPlaying: boolean;\n    albumImageSrc?: string;\n    artist?: string;\n    href?: string;\n    trackTitle?: string;\n};\n\nexport type Note = {\n    title: string;\n    description: string;\n};\n\nexport type PageProps<\n    T extends Record<string, unknown> = Record<string, unknown>,\n> = T & {\n    commit: string;\n    laravelVersion: string;\n    phpVersion: string;\n    spotify?: NowPlaying;\n    notes: Note[];\n};\n```\n\nNow any page returned from an Inertia rendered route has all the common data available as React props. Pretty sweet,\nhuh?\n\n## Rendering content\n\nFor displaying the content of a blog post route, Laravel's route-model binding offered everything I needed to get up and\nrunning. Simply defining a route in my `web.php` like so:\n\n```php\nRoute::get('blog/{slug}', fn (string $slug, ContentRepositoryContract $contentRepository) => Inertia::render('Blog/Post/Index', [\n    'post' => $contentRepository->getBlogPostBySlug($slug),\n]))\n    ->name('post');\n```\n\npasses everything the page needs to render to the component responsible for rending content:\n\n```typescript jsx\nimport {Badge} from \"@/Components/ui/badge\";\nimport {Button} from \"@/Components/ui/button\";\nimport MainLayout from \"@/Layouts/MainLayout\";\nimport {type Post} from \"@/models\";\nimport {Head, Link} from \"@inertiajs/react\";\nimport * as React from \"react\";\n\nexport default function BlogPost({post}: { post: Post }): React.JSX.Element {\n    const formattedDate = new Date(\n        post.published_date ?? \"\",\n    ).toLocaleDateString(\"en-us\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n    });\n\n    return (\n        <>\n            <Head title={`${post.title} | joeymckenzie.tech`}>\n                <meta name=\"keywords\" content={post.keywords}/>\n            </Head>\n\n            <MainLayout>\n                <div className=\"flex flex-col justify-center\">\n                    <article\n                        className=\"prose mx-auto w-full overflow-hidden pb-6 dark:prose-invert prose-pre:text-sm prose-img:mx-auto prose-img:rounded-md\">\n                        <h1 className=\"text-center text-2xl\">{post.title}</h1>\n                        <div className=\"flex flex-row items-center justify-center gap-x-2 text-sm tracking-tight\">\n                            <time dateTime={post.published_date}>\n                                {formattedDate}\n                            </time>\n                            <Badge>{post.category}</Badge>\n                            <p>{post.views} views</p>\n                        </div>\n                        <img\n                            alt={`${post.title} blog meme`}\n                            src={post.hero_image}\n                            height=\"400\"\n                            width=\"500\"\n                        />\n                        <div\n                            // biome-ignore lint/security/noDangerouslySetInnerHtml: controlled input\n                            dangerouslySetInnerHTML={{\n                                __html: post.parsed_content,\n                            }}\n                        />\n                    </article>\n                    <Link href={route(\"blogs\")} className=\"mx-auto max-w-md\">\n                        <Button variant=\"secondary\"> Back to blogs</Button>\n                    </Link>\n                </div>\n            </MainLayout>\n        </>\n    );\n}\n```\n\nA fairly simple component that ultimately takes the converted HTML content I've run through the nifty PHP League's\n[CommonMark](https://commonmark.thephpleague.com/) library and spit out on the other side to `dangerouslySetInnerHTML`\nwithin my React code.\n\nGathering the content is simple enough with the help of Eloquent too:\n\n#### app/Services/BlogPostRepository.php\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Services;\n\nuse App\\Contracts\\ContentRepositoryContract;\nuse App\\Models\\BlogPost;\nuse DateInterval;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Support\\Facades\\Cache;\nuse Override;\n\nfinal readonly class BlogPostRepository implements ContentRepositoryContract\n{\n    #[Override]\n    public function getBlogPostBySlug(string $slug): BlogPost\n    {\n        // We won't cache the blogs, easier to let the view counts ride\n        $post = BlogPost::select([\n            'id',\n            'slug',\n            'keywords',\n            'hero_image',\n            'published_date',\n            'category',\n            'title',\n            'views',\n            'parsed_content',\n        ])->firstWhere('slug', $slug);\n\n        if (is_null($post)) {\n            abort(404);\n        }\n\n        // While we're at it, add a view count\n        // AddView::dispatch($post);\n\n        $post->views += 1;\n        $post->save();\n\n        return $post;\n    }\n\n    #[Override]\n    public function getLatestBlogPostMetadata(): Collection\n    {\n        /** @var Collection<int, BlogPost> $posts */\n        $posts = self::getBlogPostMetadata()\n            ->sortByDesc('published_date')\n            ->take(3);\n\n        return $posts;\n    }\n\n    #[Override]\n    public function getBlogPostMetadata(): Collection\n    {\n        if (Cache::has('allPosts')) {\n            /** @var Collection<int, BlogPost> $allPosts */\n            $allPosts = Cache::get('allPosts');\n\n            return $allPosts;\n        }\n\n        /** @var Collection<int, BlogPost> $posts */\n        $posts = BlogPost::select([\n            'slug',\n            'published_date',\n            'category',\n            'description',\n            'title',\n            'views',\n        ])\n            ->orderByDesc('published_date')\n            ->get();\n\n        Cache::set('allPosts', $posts, new DateInterval('PT5M'));\n\n        return $posts;\n    }\n}\n```\n\nI'm not exactly a fan of the repository pattern on top of existing repository implementations - Eloquent is _already_ a\ngreat implementation of the repository pattern. But... I like to keep my controllers/routes thin and also wanted to add\na bit a caching here and there as the content itself won't change much from deployment to deployment.\n\nWhich brings me to my next talking point...\n\n# Deployments\n\nI'm a big fan of GitHub Actions, and while I _could_ just trigger Forge deploys based on the latest push, it's easy\nenough to set up a simple action to ping the deployment URL to tell Forge to pull in my code and deploy the latest\nversion of it to the droplet. I like to display the latest commit in the footer, so I also needed a way to propagate the\ngit commit SHA as an environment variable. Unfortunately, Forge only has the SHA available at deployment time.\n_Fortunately_, it's easy enough to work around by pulling in the latest configuration for production via the Forge CLI,\nappending the SHA as an environment variable, and simply pushing it back up to Forge before the deployment script runs.\n\nOne caveat to this process is that we want the append process to only append _if_ there's currently not a commit in the `.env` file, while replacing the existing commit key-value pair if it already exists. A quick script like the follow should get the job done:\n\n```shell\n#!/bin/bash\n\n# Check if the correct number of arguments is provided\nif [ \"$#\" -ne 2 ]; then\n  echo \"Usage: $0 <arg1> <arg2>\"\n  exit 1\nfi\n\n# Assign arguments to variables\nkey=\"$1\"\nvalue=\"$2\"\n\n# Check if the key already exists in the file\nif grep -q \"^$key=\" .env; then\n  # Replace the existing key-value pair\n  sed -i \"s/^$key=.*/$key=$value/\" .env\nelse\n  # Append the new key-value pair to the end of the file\n  echo \"$key=$value\" >> .env\nfi\n```\n\n\nWe can then update our deploy workflow action to call this script, pass the key and SHA to it, and execute directly before updating the production configuration. All-in-all, this is what my deploy action looks like:\n\n```yaml\nname: Deploy to Forge\n\non:\n    workflow_run:\n        workflows: [ 'Inertia CI' ]\n        types:\n            - completed\n\njobs:\n    build:\n        runs-on: ubuntu-latest\n        timeout-minutes: 10\n\n        name: Deploy application\n        steps:\n            - uses: actions/checkout@v3\n\n            - name: Setup PHP\n              id: setup-php\n              uses: shivammathur/setup-php@v2\n              with:\n                  php-version: '8.3'\n\n            - name: Install Forge CLI\n              run: composer global require laravel/forge-cli\n\n            - name: Authenticate with Forge\n              run: forge login --token=${{ secrets.FORGE_API_TOKEN }}\n\n            # Forge environment variables, including the current git commit hash,\n            # aren't included as runtime environment variables and only in the build script.\n            # To get the current commit propagated, pull the current production configuration,\n            # and append the current commit to the file and push it back up to Forge.\n            - name: Download current configuration\n              run: forge env:pull joeymckenzie.tech ${{ github.workspace }}/.env\n\n            - name: Add current commit and push back to forge\n              run: |\n                ./scripts/update-commit.sh FORGE_DEPLOY_COMMIT ${{ github.sha }}\n              working-directory: ${{ github.workspace }}\n\n            - name: Push environment to Forge\n              run: forge env:push joeymckenzie.tech ${{ github.workspace }}/.env\n\n            - name: Ping deploy URL\n              run: curl -l ${{ secrets.FORGE_DEPLOY_URL }}\n```\n\nSetting a few environment variables, badda bing, badda boom, and everything works.\n\n## Wrapping up\n\nAlright, I promised to keep it short.\n\nIn the end, is Laravel probably overkill for my simple little website? Absolutely.\n\nIs it fun to over-engineer such things, though? Ab-so-lutely.\n\nI'm looking forward to seeing what else I can conjure up with Laravel to give myself a reason to explore all the various\nnooks and crannies of the framework as I'm not a full-time Laravel developer (yet...). All the code that powers my blog\nis available on GitHub [here](https://github.com/JoeyMckenzie/joeymckenzie.tech). I'm just beginning my Laravel journey\nand I'm well aware there's a _ton_ more to learn, but nonetheless, I'm quite excited to keep at it.\n\nTL;DR - Laravel is friggin' sweet.\n\nUntil next time, friends!\n",
    "html": "<p>Alright, I'm making this one short (sort of). My pre-New Year's Resolution is to write on my blog here more\nthan bi-annually. Since becoming a dad and taking up my jorts-laden mantle and becoming alarmingly interested in grass\nmowing techniques and New Balance footwear this past year, finding the time to write has come too far and between\n(betwixt?).</p>\n<p>I was recently on the hunt for something new to learn and after laughing at memes\non <a href=\"https://reddit.com/r/webdev/\">r/webdev</a> about PHP for far too long, I figured I had better at least learn a little\nPHP\nto understand the source of the meme'ery in the first place. Learning PHP ultimately brought me\nto <a href=\"https://laravel.com/\">Laravel</a>,\nand oh... my... god... do I feel betrayed by my fellow developers for dunking on PHP without telling me about the\nabundant Lambos running rampant in the Laravel ecosystem. I've been writing a bunch of Rust to keep my brain occupied\noutside my normal 8-to-5 and PHP was a breath of fresh air.</p>\n<p>If you're a full-time TypeScript/.NET'er working with a sprinkle of other languages like Go and Rust here and there like\nme, PHP might seem like an afterthought. I can confidently say that after embarking down the Laravel/PHP road, I'm more\nthan happy I did.</p>\n<p>I thought it would be fun to write a bit about the process of learning Laravel through re-writing my website from a few\ndifferent iterations of JS frameworks and give some insight from a newcomers perspective about Laravel and PHP.</p>\n<h2>Framework exhaustion</h2>\n<p>I'm a creature of habit, and one thing I've formed somewhat of a ritual around is re-writing my website, the very one\nyou happen to be reading, at least once a year. I've gone through a few iterations:</p>\n<ul>\n<li>Static site generators with Hugo and Jekyll</li>\n<li>SSR frameworks\nwith <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/blog-v1\">Next.js</a>, <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/nuxt-v2\">Nuxt.js</a>,\nand <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/svelte\">SvelteKit</a></li>\n<li>At one point, a combo of <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/astro-rust\">Astro and Rust</a>\nthat formed an interesting mix of SSG and <a href=\"https://docs.astro.build/en/concepts/islands/\">island architectures</a> for\nfetching dynamic data</li>\n</ul>\n<p>Quite frankly, I'm burnt out on JS framework madness, though to no fault of their own. There's many that are innovating\nand pushing the ecosystem forward with cool new technology that I'll get to use in production five years from now if I'm\nlucky. Each iteration I re-wrote wrangled a hodge podge of JS libraries for certain things I wanted to do, including but\nnot limited to:</p>\n<ul>\n<li>Parsing markdown\ncontent (<a href=\"https://contentlayer.dev\">contentlayer</a>, <a href=\"https://www.npmjs.com/package/gray-matter\">gray-matter</a>) and\nhighlighting code snippets (<a href=\"https://highlightjs.org/\">highlight.js</a>, <a href=\"https://shiki.matsu.io/\">shiki</a>)</li>\n<li>Storing things in a database with a bit of magic\nabstraction (<a href=\"https://prisma.io\">prisma</a>, <a href=\"https://orm.drizzle.team/\">drizzle</a>)</li>\n<li>Calling external APIs through framework semantics, which differ from framework to framework</li>\n<li>Caching content pages as I don't update them often</li>\n</ul>\n<p>And a plethora of other things. The nice thing about Laravel is that a lot of this is out-of-the-box functionality so\nI can indulge in my slice-of-the-internet playground that is my website.</p>\n<h2>Making code great again</h2>\n<p>I found that while re-building my site with Laravel, I was having fun writing code in a new way that I was missing when\nusing the JS flavor of the month framework. My .NET brain felt right at home with Laravel, all the while being able to\nmix and match frontends thanks to <a href=\"https://inertiajs.com\">Inertia.js</a> (I'm not quite ready to\nembrace <a href=\"https://livewire.laravel.com/\">Livewire</a> just yet). Anything I wanted to do, Laravel had an answer:</p>\n<ul>\n<li>Syncing content to the database on\ndeployment? <a href=\"https://laravel.com/docs/10.x/artisan#generating-commands\">Console commands</a>.</li>\n<li>Querying content? <a href=\"https://laravel.com/docs/10.x/eloquent\">Eloquent</a>.</li>\n<li>Built-in caching, an HTTP client, and just about anything you'll need for the general web</li>\n</ul>\n<p>The goal of this post will be to outline what I think makes Laravel great from the context of a PHP/Laravel outsider\neven for a small, mostly static website like mine.</p>\n<h2>DI from the start</h2>\n<p>Coming from .NET, I clutch onto my DI framework pearls tightly, rarely loosening my grip. I'll even die on the hill that\n.NET's first-party dependency injection framework (when used within it's expected confines) is one of the better DI\nframeworks out there (I've enjoyed it <em>much</em> more than Spring's DI with magical <code>@autowire</code>s on every bean).</p>\n<p>I like to <em>think</em> I'm not that much of a DI container shill after writing a few things in Rust and Go, and while they\nhave there place and time when serving a viable purpose, are nice to work with <em>when used correctly</em>. I see a lot of\n.NET in the wild attempting to bend <code>ServiceProvider</code>s to their application's will, creating a poor man's service\nlocator within a service locator (I'm guilty as charged).</p>\n<p>With Laravel, binding contracts to concretes is simple and straight forward. Coupled with route-provider binding\nbuilt-in DI, it quite literally felt like I was back at home writing a modern .NET application.</p>\n<h2>Strict linting opt-in</h2>\n<p>I'm glutton for punishment and Rust-level strict typing, so <a href=\"https://phpstan.org/\">phpstan</a> with the\nhelp <a href=\"https://github.com/larastan/larastan\">larastan</a> cranked up to the max scratched that itch. I'm currently\nin the process of trimming down the things I don't need with Laravel, which ultimately entails things\nlike removing auth-based middleware, migrations, and models since I have no intention of managing users. While max level\nphpstan requires a few tweaks to a freshly scaffolded <a href=\"https://github.com/laravel/breeze\">Laravel Breeze</a> app, once\nthose tweaks were made that mainly consisted of a few typing hints here and there, everything worked as expected.\nCoupled with <a href=\"https://github.com/emcrisostomo/fswatch\">fswatch</a>, I got the same DX as I'm used to with Rust akin to\nrunning something like <code>cargo watch -x clippy</code> with the help of <a href=\"https://crates.io/crates/cargo-watch\">cargo-watch</a>.\nBetter yet, hiding said <code>fswatch</code> command behind a <a href=\"https://github.com/casey/just\">justfile</a> made it seamless to\nintegrate phpstan continuously while I was writing code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">default:</span><span style=\"color:#C98A7D\"> pail</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># runs tail logging</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">pail:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    php</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> pail</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># syncs content to the database</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">sync:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    php</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> app:sync-content</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># continuously runs lint on file change</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">lint:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    fswatch</span><span style=\"color:#C99076\"> -o</span><span style=\"color:#C98A7D\"> app/</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> xargs</span><span style=\"color:#C99076\"> -n1</span><span style=\"color:#C99076\"> -I</span><span style=\"color:#DBD7CAEE\">{} sh -c \"composer run lint\"</span></span></code></pre></figure>\n<p>and in my terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> just</span><span style=\"color:#C98A7D\"> lint</span><span style=\"color:#758575DD\"> # which runs `fswatch -o app/ | xargs -n1 -I{} sh -c \"composer run lint\"` by proxy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> vendor/bin/phpstan analyse app</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Note:</span><span style=\"color:#C98A7D\"> Using</span><span style=\"color:#C98A7D\"> configuration</span><span style=\"color:#C98A7D\"> file</span><span style=\"color:#C98A7D\"> /Users/jmckenzie/projects/php/joeymckenzie.tech/phpstan.neon.</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> 40/40</span><span style=\"color:#DBD7CAEE\"> [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\"> [</span><span style=\"color:#DBD7CAEE\">OK</span><span style=\"color:#666666\">]</span><span style=\"color:#80A665\"> No</span><span style=\"color:#C98A7D\"> errors</span></span></code></pre></figure>\n<p>Beautiful! Any source code change within my <code>app/</code> directory triggered a full linting run to make sure I was holding\nmyself accountable for not letting my code go to shit (pardon my French).</p>\n<p>Side note, composer is easily up there with cargo competing for best language toolchain on the market. I mean come on\nJavaScript... why do we need four different package managers?</p>\n<h2>Content syncing</h2>\n<p>One of the things I need is the ability to continuously sync markdown content with the database I store it in, which in\nmy case is just a MySQL instance running on my droplet provisioned with the help of Laravel Forge (more on that later).\nRather than writing some one off shell script to do that, I found Laravel commands mighty useful to simply just define a\ncustom artisan command that would:</p>\n<ul>\n<li>Read my content files</li>\n<li>Parse the frontmatter on each markdown file</li>\n<li>Parse the markdown and convert it to HTML</li>\n<li>Save everything to the data to the database</li>\n</ul>\n<p>That ended up looking something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Console</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Contracts</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentUtilityContract</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Console</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Command</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Throwable</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">final</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> SyncContent</span><span style=\"color:#CB7676\"> extends</span><span style=\"color:#80A665\"> Command</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * The name and signature of the console command.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    protected</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">signature</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">app:sync-content</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * The console command description.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    protected</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">description</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Syncs content from markdown files into the database.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * Execute the console command.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@throws</span><span style=\"color:#B8A965\"> Throwable</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> handle</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">ContentUtilityContract</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentUtility</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4D9375\"> void</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">files</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentUtility</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getMarkdownFilePaths</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        collect</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">files</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">map</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">fn</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentUtility</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getParsedContent</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">each</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">fn</span><span style=\"color:#666666\"> (</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentUtility</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">upsertBlogPost</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Coming from .NET, I'm a self diagnosed <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/\">LINQ</a> addict. Collections\nmade me feel right at home. From the above, I'm configuring a short pipeline of sorts that will do all the things I\noutlined with a little help from the DI container and the <code>ContentUtilityContract</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Contracts</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">BlogPost</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> League</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">CommonMark</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Exception</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">CommonMarkException</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> League</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Config</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Exception</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ConfigurationExceptionInterface</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">interface</span><span style=\"color:#5DA994\"> ContentUtilityContract</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@return</span><span style=\"color:#4D9375\"> string[]</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getMarkdownFilePaths</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4D9375\"> array</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@throws</span><span style=\"color:#B8A965\"> ConfigurationExceptionInterface</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@throws</span><span style=\"color:#B8A965\"> CommonMarkException</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getParsedContent</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> ContentMeta</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> upsertBlogPost</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> BlogPost</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and whose implementation looks something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Contracts</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentUtilityContract</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">BlogPost</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Support</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Facades</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Log</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> League</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">CommonMark</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ConverterInterface</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> League</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">CommonMark</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Extension</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">FrontMatter</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Data</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">SymfonyYamlFrontMatterParser</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> League</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">CommonMark</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Extension</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">FrontMatter</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">FrontMatterParser</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Override</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">final</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> MarkdownUtility</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> ContentUtilityContract</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#B8A965\"> ConverterInterface</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">converter</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#B8A965\"> __construct</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">ConverterInterface</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">converter</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#C99076\">this</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">converter</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">converter</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getMarkdownFilePaths</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4D9375\"> array</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">basePath</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> base_path</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">contentPath</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">basePath</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">/content</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">identified content path as </span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">contentPath, globbing content files</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string[]</span><span style=\"color:#758575DD\"> $files */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">files</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> app</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">environment</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">local</span><span style=\"color:#C98A7D99\">'</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            ?</span><span style=\"color:#B8A965\"> glob</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">contentPath/**/*.md</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C99076\"> GLOB_BRACE</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            :</span><span style=\"color:#B8A965\"> glob</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">contentPath/*[!draft]/*.md</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C99076\"> GLOB_BRACE</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">fileCount</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> count</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">files</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">fileCount globbed files found</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">files</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getParsedContent</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> ContentMeta</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">parsing content for file </span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">filePath</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#758575DD\"> $contents */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">contents</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> file_get_contents</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">fileInfo</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> pathinfo</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">extension</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> empty</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">fileInfo</span><span style=\"color:#666666\">[</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">extension</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">])</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            ?</span><span style=\"color:#C98A7D99\"> ''</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            :</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\">.</span><span style=\"color:#666666\">$</span><span style=\"color:#BD976A\">fileInfo</span><span style=\"color:#666666\">[</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">extension</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">fileSlug</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> basename</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">extension</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">file parsed, determined slug as </span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">fileSlug</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">frontMatterParser</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> new</span><span style=\"color:#B8A965\"> FrontMatterParser</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">new</span><span style=\"color:#B8A965\"> SymfonyYamlFrontMatterParser</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">parsedContent</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">frontMatterParser</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">parse</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">contents</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">parsedContent</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getFrontMatter</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">markdown</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">parsedContent</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getContent</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">html</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#C99076\">this</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">converter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">convert</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">markdown</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getContent</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">frontmatter and content parsed</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#4D9375\"> new</span><span style=\"color:#B8A965\"> ContentMeta</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">fileSlug</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">markdown</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">html</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> upsertBlogPost</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> BlogPost</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">contentSlug</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">upserting blog post </span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">contentSlug</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">upsertedBlog</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> BlogPost</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">updateOrCreate</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentSlug</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ],</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentSlug</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">description</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">description</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">category</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">category</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">published_date</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">pubDate</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">hero_image</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">heroImage</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">keywords</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#B8A965\"> implode</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">,</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">keywords</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">raw_content</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">markdown</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">parsed_content</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">html</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">blog content updated!</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">upsertedBlog</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now from what I've gathered... folks in the PHP community don't exactly <em>love</em> <code>final</code> classes - I have no intention on\ninheriting from these classes and like to follow a composition approach as often as possible (though not always).</p>\n<p>Now anytime I want to sync my content, a simple</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> app:sync-content</span></span></code></pre></figure>\n<p>does the trick! Note: I'm a lazy developer, so my <code>~/.zshrc</code> configuration has an alias:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">alias</span><span style=\"color:#BD976A\"> artisan</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">php artisan</span><span style=\"color:#C98A7D99\">\"</span></span></code></pre></figure>\n<p>I could probably be even lazier and shorten it, but that'll do for now.</p>\n<h2>Servers</h2>\n<p>Using <a href=\"https://forge.laravel.com/\">Laravel Forge</a> and a DigitalOcean droplet, I'm able to turn the server provisioning\npart of my brain completely off and simply write code, commit, and push. Forge does just about everything for you when\ndeploying application servers, including setting up MySQL, PHP versions, server tooling, SSL, etc. I was even able to\ntweak the deployment script, so I could refresh/sync my markdown content with the database anytime a new deployment was\ntriggered. You're probably thinking \"wait... why do you have a database in the first place?\" There's a few reasons for\nthat.</p>\n<p>I use <a href=\"https://torchlight.dev/\">torchlight</a> for syntax highlighting in content, and storing the parsed content in the\ndatabase means I only need to pay the price of content highlighting once at deployment time. I also like to keep track\nof views on each blog, so I need some form of persistent storage. I <em>also</em> like to keep my notes in there (one of my few\npieces of website flair) where I can simply SSH to my droplet and <em>drop</em> (no pun intended) into\na <a href=\"https://laravel.com/docs/10.x/artisan#tinker\">tinker</a> session to create more notes, so something like this just works\nwhen I\nwant to add a new note without a GUI component:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># On the droplet...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">root@website</span><span style=\"color:#C98A7D\"> /home/forge/joeymckenzie.tech</span><span style=\"color:#DBD7CAEE\"> $ </span><span style=\"color:#C98A7D\">php</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> tinker</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Psy</span><span style=\"color:#C98A7D\"> Shell</span><span style=\"color:#C98A7D\"> v0.11.22</span><span style=\"color:#DBD7CAEE\"> (PHP </span><span style=\"color:#4C9A91\">8.3</span><span style=\"color:#C98A7D\">.0</span><span style=\"color:#C98A7D\"> —</span><span style=\"color:#C98A7D\"> cli</span><span style=\"color:#DBD7CAEE\">) by Justin Hileman</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#C99076\"> \\A</span><span style=\"color:#DBD7CAEE\">pp</span><span style=\"color:#C99076\">\\M</span><span style=\"color:#DBD7CAEE\">odels</span><span style=\"color:#C99076\">\\N</span><span style=\"color:#DBD7CAEE\">ote::create</span><span style=\"color:#666666\">([</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Networking</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">description</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">I have no clue how SSL truly works.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">]);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">= </span><span style=\"color:#C98A7D\">App</span><span style=\"color:#C99076\">\\M</span><span style=\"color:#C98A7D\">odels</span><span style=\"color:#C99076\">\\N</span><span style=\"color:#C98A7D\">ote</span><span style=\"color:#C98A7D\"> {#7285</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    title:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Networking</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    description:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">I have no clue how SSL truly works.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    +updated_at:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">2023-12-11 23:04:02</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    +created_at:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">2023-12-11 23:04:02</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    +id:</span><span style=\"color:#4C9A91\"> 5</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">  }</span></span></code></pre></figure>\n<p>I can also generate sitemaps on startup too which is \"dumb easy\" (as the kids say) with the help of\nSpatie's <a href=\"https://github.com/spatie/laravel-sitemap\">Laravel sitemap library</a> paired with another console command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Console</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">BlogPost</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Console</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Command</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Spatie</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Sitemap</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">SitemapGenerator</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Spatie</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Sitemap</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Tags</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">class</span><span style=\"color:#5DA994\"> GenerateSitemap</span><span style=\"color:#CB7676\"> extends</span><span style=\"color:#80A665\"> Command</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * The name and signature of the console command.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    protected</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">signature</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">app:generate-sitemap</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * The console command description.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    protected</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">description</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Generates the sitemap.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * Generates a sitemap for all the SEO goodness</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> handle</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4D9375\"> void</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#758575DD\"> $url */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">url</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> config</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">app.url</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Build the sitemap key that will ultimately live in the public directory</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">publicPath</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> public_path</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">outputFile</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">publicPath/sitemap-index.xml</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Grab a list of the slugs from the database so we can</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // dynamically generate the different entries of the map</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">slugs</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> BlogPost</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">select</span><span style=\"color:#666666\">([</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">updated_at</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">])</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">siteMap</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> SitemapGenerator</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">create</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">url</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getSitemap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Roll through each entry, mapping each to a sitemap entry with a low priority change value</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        collect</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">slugs</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">each</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">function</span><span style=\"color:#666666\"> (</span><span style=\"color:#B8A965\">BlogPost</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">blogPost</span><span style=\"color:#666666\">)</span><span style=\"color:#4D9375\"> use</span><span style=\"color:#666666\"> ($</span><span style=\"color:#BD976A\">siteMap</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                $</span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">blogPost</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                $</span><span style=\"color:#BD976A\">siteMap</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                    -></span><span style=\"color:#80A665\">add</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">create</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/blog/</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        -></span><span style=\"color:#80A665\">setPriority</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">.</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        -></span><span style=\"color:#80A665\">setChangeFrequency</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">CHANGE_FREQUENCY_YEARLY</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        -></span><span style=\"color:#80A665\">setLastModificationDate</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">blogPost</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">updated_at</span><span style=\"color:#CB7676\">?-></span><span style=\"color:#80A665\">toDate</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> ??</span><span style=\"color:#80A665\"> now</span><span style=\"color:#666666\">()));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Finally, add the static pages as well</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">siteMap</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">add</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">create</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">/about</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                -></span><span style=\"color:#80A665\">setPriority</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">.</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                -></span><span style=\"color:#80A665\">setChangeFrequency</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">CHANGE_FREQUENCY_YEARLY</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">add</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">create</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">/now</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                -></span><span style=\"color:#80A665\">setPriority</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">.</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                -></span><span style=\"color:#80A665\">setChangeFrequency</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">CHANGE_FREQUENCY_YEARLY</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">writeToFile</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">outputFile</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>And in my Forge deployment script, I can simply add the custom artisan command to generate a new sitemap everytime I\ndeploy:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># Other stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">if</span><span style=\"color:#666666\"> [</span><span style=\"color:#CB7676\"> -f</span><span style=\"color:#DBD7CAEE\"> artisan </span><span style=\"color:#666666\">];</span><span style=\"color:#4D9375\"> then</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    $FORGE_PHP</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> migrate</span><span style=\"color:#C99076\"> --force</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    $FORGE_PHP</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> app:sync-content</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    $FORGE_PHP</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> app:generate-sitemap</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">fi</span></span></code></pre></figure>\n<p>Simple!</p>\n<h1>Inertia</h1>\n<p>Okay, so I know I'm somewhat dunking on JavaScript in this post, but truth be told... I still love JS. I've had jobs\nworking with each of the Big Threetm frameworks in Angular, Vue, and React. I've begrudgingly been using\nReact because I'm lazy and (what seems like) one of the few that enjoy JSX. With Inertia and React, that means I can use\nthings like <a href=\"https://ui.shadcn.com/\">shad</a> for getting that clean Tailwind look (there's also\na <a href=\"https://www.shadcn-vue.com/\">Vue</a> and <a href=\"https://www.shadcn-svelte.com/\">Svelte</a> versions I used in the previous\niterations), and\nall the neat React things that are out in the wild. If it's on the web, there's probably a React library for it.</p>\n<p>I'm a fan of <a href=\"https://pnpm.io/\">pnpm</a> as a drop in replacement for npm, and I've also decided to\nditch <a href=\"https://eslint.org/\">eslint</a> and <a href=\"https://prettier.io/\">prettier</a> for <a href=\"https://biomejs.dev/\">biome</a>, another drop\nin replacement for both tools, written in Rust (like all good tooling nowadays). I've had my fair share of battles over\nthe years with both eslint and prettier, and also getting them to play nice together (shout out\nto <a href=\"https://github.com/prettier/eslint-config-prettier\">eslint-config-prettier</a>). While they're fundamentally different\nthings, i.e. formatting vs. linting, I think the argument could be made they're in the same family of code quality\ntools. Biome neatly wraps them up into a single tool that <em>just works</em>. So now when I want to lint or format my React\ncomponents, no more <code>.eslintrc.*</code> and <code>.prettierrc.*</code> files to deal with, just a single <code>biome.json</code> file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">$schema</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">https://biomejs.dev/schemas/1.4.1/schema.json</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">organizeImports</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">enabled</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> true</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">formatter</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">indentStyle</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">space</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">indentWidth</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 4</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">linter</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">enabled</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> true</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">rules</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#B8A965\">recommended</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> true</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Coupled with a neat biome command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># When I want to format things</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> dlx</span><span style=\"color:#C98A7D\"> @biomejs/biome</span><span style=\"color:#C98A7D\"> format</span><span style=\"color:#C99076\"> --write</span><span style=\"color:#C98A7D\"> ./resources/js</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># or, if I want to lint</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> dlx</span><span style=\"color:#C98A7D\"> @biomejs/biome</span><span style=\"color:#C98A7D\"> lint</span><span style=\"color:#C98A7D\"> ./resources/js</span></span></code></pre></figure>\n<p>Wrapping those up in my <code>package.json</code> <code>scripts</code> looks something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">scripts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">dev</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">vite</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">build</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">tsc &#x26;&#x26; vite build &#x26;&#x26; vite build --ssr</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">tailwind</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">prettier --plugin prettier-plugin-tailwindcss --write ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">check</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm dlx @biomejs/biome check --apply ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">fmt</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm dlx @biomejs/biome format --write ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">fix</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm dlx @biomejs/biome lint --apply ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">lint</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm dlx @biomejs/biome lint ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">ci</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm dlx @biomejs/biome ci ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">prepare</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">git config core.hookspath .githooks</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">pre-commit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm run tailwind &#x26;&#x26; pnpm run check &#x26;&#x26; pnpm run fmt</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now unfortunately, I'm not <em>entirely</em> free of prettier just yet, as there's still no support for <a href=\"https://github.com/biomejs/biome/discussions/164\">Tailwind class sorting\nin biome</a>. I only use prettier to simply wrangle Tailwind classes,\nthen let biome do the rest.</p>\n<p>Inertia has SSR too, which boils down to simply having to run an <code>artisan</code> command on deployment to spin up your Node.js\nserver where ever it may be and point Laravel to it. With Forge, it's <em>literally</em> the flip of a switch.</p>\n<p>One of the things I also needed was to display some common data on each page of my website, including on all the posts\nthemselves. In the footer, you'll see a Spotify widget that displays what I'm currently listening to and the current\nbuild commit SHA the site was deployed with. With Inertia middleware, this was a simple addon to the existing configured\nmiddleware:</p>\n<h4>app/Http/Middleware/HandleInertiaRequests.php</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Middleware</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Contracts</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">MusicTrackerContract</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Foundation</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Application</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Http</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Request</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Inertia</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Middleware</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Tightenco</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Ziggy</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Ziggy</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">final</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> HandleInertiaRequests</span><span style=\"color:#CB7676\"> extends</span><span style=\"color:#80A665\"> Middleware</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * The root template that is loaded on the first page visit.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    protected</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">rootView</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">app</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#B8A965\"> __construct</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#B8A965\"> MusicTrackerContract</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">spotifyTracker</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * Determine the current asset version.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> version</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Request</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#CB7676\"> ?</span><span style=\"color:#4D9375\">string</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#CB7676\"> parent::</span><span style=\"color:#80A665\">version</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * Define the props that are shared by default.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@return</span><span style=\"color:#4D9375\"> array</span><span style=\"color:#758575DD\">&#x3C;</span><span style=\"color:#4D9375\">string</span><span style=\"color:#758575DD\">, mixed></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> share</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Request</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4D9375\"> array</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ...</span><span style=\"color:#CB7676\">parent::</span><span style=\"color:#80A665\">share</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">ziggy</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#666666\"> ()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ...(</span><span style=\"color:#4D9375\">new</span><span style=\"color:#B8A965\"> Ziggy</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">toArray</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">location</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">request</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">url</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ],</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Propagate the commit information on every request</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">commit</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#80A665\"> config</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">app.commit</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Also propagate the current listening data from Spotify</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">spotify</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#C99076\">this</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">spotifyTracker</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getNowPlaying</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">laravelVersion</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#B8A965\"> Application</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">VERSION</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">phpVersion</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#C99076\"> PHP_VERSION</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and in my component footer:</p>\n<h4>resources/js/Components/SpotifyTracker.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"vitesse-dark\"><code data-language=\"tsx\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#4D9375\"> default</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> SpotifyTracker</span><span style=\"color:#666666\">({</span><span style=\"color:#BD976A\">children</span><span style=\"color:#666666\">}: { </span><span style=\"color:#BD976A\">children</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">React</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">JSX</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Element</span><span style=\"color:#666666\"> }):</span><span style=\"color:#5DA994\"> React</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">JSX</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Element</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Inertia has a pretty sweet hook allowing us to tap into common page properties</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const</span><span style=\"color:#BD976A\"> page</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> usePage</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const</span><span style=\"color:#BD976A\"> nowPlaying</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> page</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">props</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">spotify</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#5DA994\"> NowPlaying</span><span style=\"color:#666666\"> |</span><span style=\"color:#CB7676\"> undefined</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const</span><span style=\"color:#BD976A\"> currentlyPlaying</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> nowPlaying</span><span style=\"color:#666666\">?.</span><span style=\"color:#BD976A\">nowPlaying</span><span style=\"color:#CB7676\"> ??</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span><span style=\"color:#BD976A\">currentlyPlaying</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#BD976A\"> nowPlaying</span><span style=\"color:#CB7676\"> !==</span><span style=\"color:#CB7676\"> undefined</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#B8A965\">CurrentlyPlaying</span><span style=\"color:#BD976A\"> nowPlaying</span><span style=\"color:#666666\">={</span><span style=\"color:#BD976A\">nowPlaying</span><span style=\"color:#666666\">}></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    {</span><span style=\"color:#BD976A\">children</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#B8A965\">CurrentlyPlaying</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            )}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">currentlyPlaying</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#B8A965\">NotCurrentlyPlaying</span><span style=\"color:#666666\">>{</span><span style=\"color:#BD976A\">children</span><span style=\"color:#666666\">}&#x3C;/</span><span style=\"color:#B8A965\">NotCurrentlyPlaying</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            )}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>with the corresponding <code>PageProps</code> in <code>index.d.ts</code> changes:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> type</span><span style=\"color:#5DA994\"> NowPlaying</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    nowPlaying</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    albumImageSrc</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    artist</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    href</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    trackTitle</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> type</span><span style=\"color:#5DA994\"> Note</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    title</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    description</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> type</span><span style=\"color:#5DA994\"> PageProps</span><span style=\"color:#666666\">&#x3C;</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    T</span><span style=\"color:#CB7676\"> extends</span><span style=\"color:#5DA994\"> Record</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> unknown</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Record</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> unknown</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">></span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> T</span><span style=\"color:#666666\"> &#x26;</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    commit</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    laravelVersion</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    phpVersion</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    spotify</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">NowPlaying</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    notes</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Note</span><span style=\"color:#666666\">[];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>Now any page returned from an Inertia rendered route has all the common data available as React props. Pretty sweet,\nhuh?</p>\n<h2>Rendering content</h2>\n<p>For displaying the content of a blog post route, Laravel's route-model binding offered everything I needed to get up and\nrunning. Simply defining a route in my <code>web.php</code> like so:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B8A965\">Route</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">blog/{slug}</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">,</span><span style=\"color:#B8A965\"> ContentRepositoryContract</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentRepository</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#B8A965\"> Inertia</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">render</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Blog/Post/Index</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    '</span><span style=\"color:#C98A7D\">post</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentRepository</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getBlogPostBySlug</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">]))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    -></span><span style=\"color:#80A665\">name</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">post</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>passes everything the page needs to render to the component responsible for rending content:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\">Badge</span><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">@/Components/ui/badge</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\">Button</span><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">@/Components/ui/button</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#BD976A\"> MainLayout</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">@/Layouts/MainLayout</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#4D9375\">type</span><span style=\"color:#BD976A\"> Post</span><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">@/models</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\">Head</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Link</span><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">@inertiajs/react</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#4D9375\"> *</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#BD976A\"> React</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">react</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#4D9375\"> default</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> BlogPost</span><span style=\"color:#666666\">({</span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\">}: { </span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Post</span><span style=\"color:#666666\"> }):</span><span style=\"color:#5DA994\"> React</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">JSX</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Element</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">formattedDate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new </span><span style=\"color:#80A665\">Date</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        post</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">published_date</span><span style=\"color:#CB7676\"> ?? </span><span style=\"color:#C98A7D99\">\"\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ).</span><span style=\"color:#80A665\">toLocaleDateString</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en-us</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        year</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">numeric</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        month</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">short</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        day</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">numeric</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">Head</span><span style=\"color:#BD976A\"> title</span><span style=\"color:#666666\">={</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">post</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> | joeymckenzie.tech</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">}></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">meta</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">keywords</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> content</span><span style=\"color:#666666\">={post.</span><span style=\"color:#BD976A\">keywords</span><span style=\"color:#666666\">}</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">Head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#5DA994\">MainLayout</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex flex-col justify-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">article</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                        className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">prose mx-auto w-full overflow-hidden pb-6 dark:prose-invert prose-pre:text-sm prose-img:mx-auto prose-img:rounded-md</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#BD976A\">h1</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center text-2xl</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>{post.</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\">}&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex flex-row items-center justify-center gap-x-2 text-sm tracking-tight</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#BD976A\">time</span><span style=\"color:#BD976A\"> dateTime</span><span style=\"color:#666666\">={post.</span><span style=\"color:#BD976A\">published_date</span><span style=\"color:#666666\">}></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                                {</span><span style=\"color:#BD976A\">formattedDate</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">time</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#5DA994\">Badge</span><span style=\"color:#666666\">>{post.</span><span style=\"color:#BD976A\">category</span><span style=\"color:#666666\">}&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">Badge</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#5DA994\">p</span><span style=\"color:#666666\">>{post.</span><span style=\"color:#BD976A\">views</span><span style=\"color:#666666\">}</span><span style=\"color:#BD976A\"> views</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#BD976A\">img</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            alt</span><span style=\"color:#666666\">={</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">post</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> blog meme</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            src</span><span style=\"color:#666666\">={post.</span><span style=\"color:#BD976A\">hero_image</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            height</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">400</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            width</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">500</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#BD976A\">div</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                            // biome-ignore lint/security/noDangerouslySetInnerHtml: controlled input</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            dangerouslySetInnerHTML</span><span style=\"color:#666666\">={{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                                __html</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">parsed_content</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            }}</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">article</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">Link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">={</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">blogs</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)}</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mx-auto max-w-md</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#BD976A\">Button</span><span style=\"color:#BD976A\"> variant</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">secondary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\"> Back</span><span style=\"color:#BD976A\"> to</span><span style=\"color:#BD976A\"> blogs</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">Button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">Link</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">MainLayout</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>A fairly simple component that ultimately takes the converted HTML content I've run through the nifty PHP League's\n<a href=\"https://commonmark.thephpleague.com/\">CommonMark</a> library and spit out on the other side to <code>dangerouslySetInnerHTML</code>\nwithin my React code.</p>\n<p>Gathering the content is simple enough with the help of Eloquent too:</p>\n<h4>app/Services/BlogPostRepository.php</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Contracts</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentRepositoryContract</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">BlogPost</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> DateInterval</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Database</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Eloquent</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Collection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Support</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Facades</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Cache</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Override</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">final</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BlogPostRepository</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> ContentRepositoryContract</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getBlogPostBySlug</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> BlogPost</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // We won't cache the blogs, easier to let the view counts ride</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> BlogPost</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">select</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">id</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">keywords</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">hero_image</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">published_date</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">category</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">views</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">parsed_content</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ])</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">firstWhere</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#B8A965\">is_null</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\">))</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            abort</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">404</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // While we're at it, add a view count</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // AddView::dispatch($post);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">post</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">views</span><span style=\"color:#666666\"> +=</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">post</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">save</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getLatestBlogPostMetadata</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> Collection</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#B8A965\"> Collection</span><span style=\"color:#758575DD\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#758575DD\">, BlogPost> $posts */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">posts</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> self::</span><span style=\"color:#80A665\">getBlogPostMetadata</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">sortByDesc</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">published_date</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">take</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">posts</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getBlogPostMetadata</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> Collection</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#B8A965\">Cache</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">has</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">allPosts</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">))</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#B8A965\"> Collection</span><span style=\"color:#758575DD\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#758575DD\">, BlogPost> $allPosts */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            $</span><span style=\"color:#BD976A\">allPosts</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> Cache</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">allPosts</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">allPosts</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#B8A965\"> Collection</span><span style=\"color:#758575DD\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#758575DD\">, BlogPost> $posts */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">posts</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> BlogPost</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">select</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">published_date</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">category</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">description</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">views</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ])</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">orderByDesc</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">published_date</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Cache</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">set</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">allPosts</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">posts</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> new</span><span style=\"color:#B8A965\"> DateInterval</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">PT5M</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">posts</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I'm not exactly a fan of the repository pattern on top of existing repository implementations - Eloquent is <em>already</em> a\ngreat implementation of the repository pattern. But... I like to keep my controllers/routes thin and also wanted to add\na bit a caching here and there as the content itself won't change much from deployment to deployment.</p>\n<p>Which brings me to my next talking point...</p>\n<h1>Deployments</h1>\n<p>I'm a big fan of GitHub Actions, and while I <em>could</em> just trigger Forge deploys based on the latest push, it's easy\nenough to set up a simple action to ping the deployment URL to tell Forge to pull in my code and deploy the latest\nversion of it to the droplet. I like to display the latest commit in the footer, so I also needed a way to propagate the\ngit commit SHA as an environment variable. Unfortunately, Forge only has the SHA available at deployment time.\n<em>Fortunately</em>, it's easy enough to work around by pulling in the latest configuration for production via the Forge CLI,\nappending the SHA as an environment variable, and simply pushing it back up to Forge before the deployment script runs.</p>\n<p>One caveat to this process is that we want the append process to only append <em>if</em> there's currently not a commit in the <code>.env</code> file, while replacing the existing commit key-value pair if it already exists. A quick script like the follow should get the job done:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">#!/bin/bash</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Check if the correct number of arguments is provided</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">if</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C99076\">$#</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> -ne</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#666666\"> ];</span><span style=\"color:#4D9375\"> then</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">  echo</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Usage: $0 &#x3C;arg1> &#x3C;arg2></span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">  exit</span><span style=\"color:#4C9A91\"> 1</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">fi</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Assign arguments to variables</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">$1</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">$2</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Check if the key already exists in the file</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">if</span><span style=\"color:#80A665\"> grep</span><span style=\"color:#C99076\"> -q</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^$key=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\"> .env</span><span style=\"color:#666666\">;</span><span style=\"color:#4D9375\"> then</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">  # Replace the existing key-value pair</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  sed</span><span style=\"color:#C99076\"> -i</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">s/^$key=.*/$key=$value/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\"> .env</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">else</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">  # Append the new key-value pair to the end of the file</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">  echo</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">$key=$value</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> >></span><span style=\"color:#C98A7D\"> .env</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">fi</span></span></code></pre></figure>\n<p>We can then update our deploy workflow action to call this script, pass the key and SHA to it, and execute directly before updating the production configuration. All-in-all, this is what my deploy action looks like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"yaml\" data-theme=\"vitesse-dark\"><code data-language=\"yaml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B8A965\">name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Deploy to Forge</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">on</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    workflow_run</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        workflows</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Inertia CI</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\"> ]</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        types</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#C98A7D\"> completed</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">jobs</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    build</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        runs-on</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> ubuntu-latest</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        timeout-minutes</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 10</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Deploy application</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        steps</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> uses</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> actions/checkout@v3</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Setup PHP</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              id</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> setup-php</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              uses</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> shivammathur/setup-php@v2</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              with</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                  php-version</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">8.3</span><span style=\"color:#C98A7D99\">'</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Install Forge CLI</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> composer global require laravel/forge-cli</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Authenticate with Forge</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> forge login --token=${{ secrets.FORGE_API_TOKEN }}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            # Forge environment variables, including the current git commit hash,</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            # aren't included as runtime environment variables and only in the build script.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            # To get the current commit propagated, pull the current production configuration,</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            # and append the current commit to the file and push it back up to Forge.</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Download current configuration</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> forge env:pull joeymckenzie.tech ${{ github.workspace }}/.env</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Add current commit and push back to forge</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> |</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                ./scripts/update-commit.sh FORGE_DEPLOY_COMMIT ${{ github.sha }}</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              working-directory</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> ${{ github.workspace }}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Push environment to Forge</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> forge env:push joeymckenzie.tech ${{ github.workspace }}/.env</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Ping deploy URL</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> curl -l ${{ secrets.FORGE_DEPLOY_URL }}</span></span></code></pre></figure>\n<p>Setting a few environment variables, badda bing, badda boom, and everything works.</p>\n<h2>Wrapping up</h2>\n<p>Alright, I promised to keep it short.</p>\n<p>In the end, is Laravel probably overkill for my simple little website? Absolutely.</p>\n<p>Is it fun to over-engineer such things, though? Ab-so-lutely.</p>\n<p>I'm looking forward to seeing what else I can conjure up with Laravel to give myself a reason to explore all the various\nnooks and crannies of the framework as I'm not a full-time Laravel developer (yet...). All the code that powers my blog\nis available on GitHub <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech\">here</a>. I'm just beginning my Laravel journey\nand I'm well aware there's a <em>ton</em> more to learn, but nonetheless, I'm quite excited to keep at it.</p>\n<p>TL;DR - Laravel is friggin' sweet.</p>\n<p>Until next time, friends!</p>"
  },
  "_id": "2023/content-driven-websites-with-php-and-laravel.md",
  "_raw": {
    "sourceFilePath": "2023/content-driven-websites-with-php-and-laravel.md",
    "sourceFileName": "content-driven-websites-with-php-and-laravel.md",
    "sourceFileDir": "2023",
    "contentType": "markdown",
    "flattenedPath": "2023/content-driven-websites-with-php-and-laravel"
  },
  "type": "Post",
  "url": "/blog/2023/content-driven-websites-with-php-and-laravel"
}