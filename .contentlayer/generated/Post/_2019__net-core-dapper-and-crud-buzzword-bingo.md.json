{
  "title": "Clean architecture, Dapper, MediatR, and buzzword bingo (part 1)",
  "description": "Build an API using Dapper, MediatR, and clean architecture principles with the help of beer.",
  "pubDate": "2019-10-04T07:00:00.000Z",
  "category": ".NET",
  "heroImage": "/images/net-core-dapper-and-crud-series/part-1/beer-background-dappery.jpg",
  "draft": false,
  "keywords": [
    ".net",
    "c#",
    "dapper",
    "mediatr"
  ],
  "body": {
    "raw": "\nWelcome to buzzword bingo, a.k.a. how many resume keywords can we fit in one blog post before someone stops reading. If\nyou're like me, you've comfortably relied on Entity Framework Core as your go-to ORM for .NET Core projects. Rightfully\nso, EF Core serves its purpose, and does its job _very_ well. Primarily as a Java developer, I often daydream about\nhaving the ease, convenience, and configuration of EF Core in place of JPA (seriously, toss a few HQL queries in your\ncode base and then tell me how much fun you're having).\n\nI love EF Core for its tooling, ease of use, and deep integration with .NET Core. However, it's always nice to take a\nstep back from the tools are seemingly default to and explore new horizons. It just so happens that the folks at\nStackOverflow, the site primarily responsible for my paychecks, developed another useful micro-ORM that we can use - and\nboy, does that baby _purr_. Checkout Dapper's [GitHub](https://github.com/StackExchange/Dapper) page, in particular the\nbenchmarks recoreded by the team. Dapper not only rivals the use case of ORMs like EF Core and NHibernate, it damn near\nbeats them out of the water!\n\nIn this series, we'll explore building a simple CRUD web application built with ASP.NET Core, Dapper, and MediatR (to\nspice things up a bit). Before we get started, let's discuss the architecture of exactly what we'll be building. Far too\noften, I read how-to articles of X technology and how to accomplish Y task. For a simple CRUD application like we'll be\nbuilding, and probably for most modern business software, shoving everything into one project solution will suffice.\n\nWe'll be building a simple CRUD API for our fictional brewery management software, Dappery. I always try to encourage\nclean architecture, so we'll be doing things a little differently. Let's go over our project structure:\n\n1. First, we'll implement a simple domain layer containing our persisted entities, data transfer objects, view models\n   and resources, and most of our core domain business logic.\n2. Once our domain layer is in place, we'll slap a data access layer on top of it. This layer's sole responsibility is\n   database interaction - no more, no less.\n3. Following the data layer, we'll add our core business layer project that acts as the middle-man between our web layer\n   and our data access layer. We'll use MediatR and FluentValidator to do the heavy lifting in this layer.\n4. Once our core business logic layer is in place, we'll top things off with our API layer for the world to interact\n   with. This layer will contain our ASP.NET Core project, with things like thin controllers, NO business logic (this is\n   important, our API is the doorway to our application), and a simple Swagger doc for consumers to reference.\n\nIn this post, we'll get started with our domain layer. I should mention that we'll also be using .NET Core 3.0 with its\nnew bells and whistles. Let's fire up a terminal (apologies, I'll be working exclusively on a Mac), and get started. If\nyou're using Visual Studio, go ahead and initialize a new solution. In the terminal, let's start a new solution:\n\n```shell\n~$ mkdir Dappery && cd Dappery\n~/Dappery$ dotnet new sln\n```\n\nCaveat: it's totally okay to fire up your favorite IDE (I'll be using Rider) and doing all this setup through the GUI.\nThis is just my preference for project setup. Next, let's go ahead and add some `src` and `tests` directories, and spin\nup our domain layer project within the `src` directory:\n\n```shell\n~/Dappery$ mkdir src && mkdir tests\n~/Dappery$ cd src && dotnet new classlib -n Dappery.Domain\n```\n\nThings to note are the fact that this is a `classlib`, which means this is a `netstandard2.0` library that we can reuse\nin any .NET project that leverages the standard. Now that we've got our project skeleton, let's go ahead and link it to\nour solution:\n\n```shell\n~/Dappery/src$ dotnet sln ../Dappery.sln add Dappery.Domain/Dappery.Domain.csproj\nProject `src/Dappery.Domain/Dappery.Domain.csproj` added to the solution.\n```\n\nWith our solution linked to our domain project, let's go ahead and fire up our IDE with the project. As I mentioned\npreviously, I'll be using Rider. If your IDE hasn't already, I'd suggest adding the `src` and `tests` folders as project\nfolders, just to keep everything tidy. With our domain project skeleton in place, let's talk about what exactly we'll be\nputting in this layer.\n\n### The Domain Layer\n\nThere's a popular architectural design pattern in software engineering\ncalled [Domain Driven Design](https://en.wikipedia.org/wiki/Domain-driven_design), or DDD. To summarize, DDD takes the\napproach that your application should be centered around your core domain model and business logic. In layman's terms,\nwhat this means for us is that our domain layer project will house our beer and brewery entities and any special\nbusiness logic that pertains to these entities. This layer should not have ANY dependency on other layers; all this\nlayer knows, and cares about, is its entities and models. We'll also put our media types, or data transfer objects, in\nthis project as well to act as the middleman when moving data between layers. Let's create an `Entities` folder within\nour `Dapper.Domain` project. We'll place two POCOs (plain old C# classes) that will act as our persisted database\nentities, `Beer.cs` and `Brewery.cs`. To keep our code [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself),\nwe'll derive these classes from a `TimeStampedEntity` that will contain some common properies `Beer` and `Brewery` will\nneed.\n\n#### TimeStampedEntity.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    using System;\n\n    public class TimeStampedEntity\n    {\n        public int Id { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime UpdatedAt { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### Beer.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    public class Beer : TimeStampedEntity\n    {\n        public string Name { get; set; }\n\n        public BeerStyle BeerStyle { get; set; }\n\n        public Brewery Brewery { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### Brewery.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    using System.Collections.Generic;\n\n    public class Brewery : TimeStampedEntity\n    {\n        public Brewery()\n        {\n            Beers = new List<Beer>();\n        }\n\n        public string Name { get; set; }\n\n        public Address Address { get; set; }\n\n        public ICollection<Beer> Beers { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nYou'll notice I've put my `using` directives within my namespaces. This is purely preference, and has very little\ndifference than if I were to put them outside my\nnamespaces. [Here's](https://stackoverflow.com/questions/125319/should-using-directives-be-inside-or-outside-the-namespace)\na great discussion about the difference, for the curious. Also notice I've also created an `Address` class associated to\na `Brewery` and a `BeerStyle` enumeration so we can strongly type our families of beer. We've also initialized\nour `Beers` list within our `Brewery` model - this is a great pattern to get into when working within the domain layer,\nas consumers of our API should not have to worry about `NullReferenceExceptions` when interrogating logic based on a\ncollection from their API provider.\n\n#### Address.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    public class Address : TimeStampedEntity\n    {\n        public string StreetAddress { get; set; }\n\n        public string City { get; set; }\n\n        public string State { get; set; }\n\n        public int ZipCode { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### BeerStyle.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    public enum BeerStyle\n    {\n        Lager,\n        Pilsner,\n        Amber,\n        PaleAle,\n        Ipa,\n        DoubleIpa,\n        TripleIpa,\n        Stout\n    }\n}\n```\n\n&nbsp;\n\nFor the scope of this series, we'll keep things simple and stick with these properties for our entities. Our project\nshould look a little something like this:\n\n![Project](/images/net-core-dapper-and-crud-series/part-1/project-setup.png)\n\nWith our entities in place, let's go ahead add our DTOs. Before we do that, let's talk about what exactly we should be\n_putting_ in these DTOs.\n\n#### DTOs\n\nFor our implementation, we want our DTOs to reflect actions we can perform on our application. This a CRUD application,\nbut we're also going to\nutilize [Command and Query Responsibility Segregation](https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs),\nor CQRS, to distinguish actions we'll be performing on our database - read only queries, and write commands. For our\nsimple application, it's tempting to have all-purpose DTOs for each CRUD operation. While this is a viable solution, I\nwould _highly_ recommend against it. As our application grows, so do our needs for more complex queries and actions we\ncan perform on our database. Rather than trying to shove all that container logic into a few classes, we'll be\nseparating our DTOs by media type and action. Let's go ahead and add a `Dtos` folder, and within that folder, we'll add\nseparate folders for our different domains, `Beer`, and `Brewery`. and add our first create DTOs for a beer and a\nbrewery.\n\n#### Brewery/CreateBreweryDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Brewery\n{\n    public class CreateBreweryDto\n    {\n        public string Name { get; set; }\n\n        public AddressDto Address { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### Beer/CreateBeerDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Beer\n{\n    using Entities;\n\n    public class CreateBeerDto\n    {\n        public string Name { get; set; }\n\n        public BeerStyle Style { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nNotice I've also added an `AddressDto` as an acceptable media type to the `CreateBreweryDto` class, so let's define that\nas well at the root of the `Dtos` folder since this will be an all-purpose DTO since its properties do not change as we\ndo not directly CRUD with `Address` class.\n\n#### AddressDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos\n{\n    public class AddressDto\n    {\n        public string StreetAddress { get; set; }\n\n        public string City { get; set; }\n\n        public string State { get; set; }\n\n        public int ZipCode { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nIn our `CreateBeerDto` class, we're only exposing the name and beer style associated to a beer - why not a brewery? This\nis where we'll define our first business rule:\n\n#### Business Rule 1: A beer cannot be created with an associated brewery\n\nWhat does this mean for our users? In order to add a beer to our database through our API, we'll add an endpoint\nassociated with our breweries that will expose an add beer operation. This will simplify our API, as we will not need to\ndo any association at creation time to the brewery for the beer to be added - we'll know exactly what brewery to add it\nto!\n\nFor our `CreateBreweryDto` class, we're exposing the name and the address of the brewery, NOT the list of beers. This\nbrings us to our second business rule:\n\n#### Business Rule 2: A brewery cannot be created with beers on a request\n\nWhile this may seem arbitrary, this rule will simplify our API, forcing users to first create a brewery, and\nsubsequentially add the beers to that brewery at their leisure. We'll see later why we're implementing this design, both\nfor simplicity for the developer and ease of use for our users. This brings up a good point - metadata. Let's add some\nproperies to our `Brewery.cs` entity to easily extract the number of beers a brewery has to offer. Let's add\na `BeerCount` property:\n\n#### Brewery.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    using System.Collections.Generic;\n\n    public class Brewery : TimeStampedEntity\n    {\n        public string Name { get; set; }\n\n        public Address Address { get; set; }\n\n        public ICollection<Beer> Beers { get; set; }\n\n        public int BeerCount => Beers.Count;\n    }\n}\n```\n\n&nbsp;\n\nWe've added a `BeerCount` delegate that will simply give us a count of all beers related to that entity whenever we\nquery for a specific brewery. With our create DTOs out of the way, let's go ahead and implement the rest of our CRUD\nDTOs. For our reads, we'll create simple `BeerDto.cs` and `BreweryDto.cs` classes - no need to prefix these with an\noperation as they will more, or less, be our default DTO when moving between layers:\n\n#### BreweryDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Brewery\n{\n    using System.Collections.Generic;\n    using Entities;\n\n    public class BreweryDto\n    {\n        public int Id { get; set; }\n\n        public string Name { get; set; }\n\n        public AddressDto Address { get; set; }\n\n        public IEnumerable<Beer> Beers { get; set; }\n\n        public int BeerCount { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### BeerDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Beer\n{\n    using Brewery;\n    using Entities;\n\n    public class BeerDto\n    {\n        public int Id { get; set; }\n\n        public string Name { get; set; }\n\n        public BeerStyle Style { get; set; }\n\n        public BreweryDto Brewery { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nNothing special here, the only difference is we'll be pulling out the ID for each beer and brewery, respectively. Note,\nwe're using `IEnumerable<Beer>` as our iterative type on our beers because this is just an immutable list, whereas we\nused `ICollection<Beer>` in our entity due to the fact we will be modifying list over time.\n\nWith our reads out of the the way, let's go ahead and create `UpdateBeerDto.cs` and `UpdateBreweryDto.cs` classes:\n\n#### UpdateBeerDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Beer\n{\n    public class UpdateBeerDto\n    {\n        public int Id { get; set; }\n\n        public string Name { get; set; }\n\n        public AddressDto Address { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### UpdateBreweryDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Brewery\n{\n    using Entities;\n\n    public class UpdateBreweryDto\n    {\n        public int Id { get; set; }\n\n        public string Name { get; set; }\n\n        public AddressDto Type { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nAgain, nothing special here. We have an `Id` property on each DTO, as we'll need to know which beer, or brewery, to\nupdate for the user on the request, and we're only allowing a few properties to change on our entities. Luckily for us,\nfor our delete operation, we'll be relying on the user to pass in an ID associated with the beer, or brewery, and that's\nit. No need to include anything in the body, as long as we have the ID, we're good to. Let's take a minute to grab a\nbeer and take a look at where we're at so far. Our project structure should look more, or less, like this:\n\n![Project_thus_far](/images/net-core-dapper-and-crud-series/part-1/project-dtos-in-place.png)\n\nI promise we're almost done (sort of). That last knot for us to tie up is the media type we'll be presenting to our\nconsumer. To be quite honest, this implementation is _probably_ overkill for our use case, but a good exercise for us to\nbuild robust APIs. For our API, our entities and DTOs would suffice. However, in a real world enterprise setting, where\nour API interacts with tens of microservices all communicating with each other, a transfer data type that represents the\nmedia type and domain concern our API will provide to consumers is a good idea. Think of it as layers _within_ our\ndomain layer:\n\n-   Our entities represent the source of record stored within our database, that when extracted, are expected to modify\n    and persist their state\n-   Our DTOs act as containers to transport that persisted data between layers (e.g. the domain layer and the data layer,\n    and from the data layer to the API layer in the long run)\n-   Our API layer should **not** have any knowledge of our entities, as they contain audit properties (timestamps) and\n    relations to other entities that should only be interacted with at lower layers\n-   Our resource types will represent the models/media types we will provide to our consumers, as our DTOs are more, or\n    less, internal to our API\n\nWith the semantics out of the way, lets go ahead and create a `Media` folder and place a few resource types within that\nfolder:\n\n#### Resource.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    public class Resource<T>\n    {\n        public T Self { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nOur general resource type that will serve as the template for all types our API will give to our consumers. As we build\nour API, we'll continue to add metadata for our consumers so that they can make decisions about our responses we give\nthem without having to inspect the data we _actually_ hand over. Next, let's create a `ResourceList.cs` class that will\nserve as an iterable collection we hand over to our callers:\n\n#### ResourceList.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    using System.Collections.Generic;\n    using System.Linq;\n\n    public class ResourceList<T>\n    {\n        public IEnumerable<T> Items { get; set; }\n\n        public int Count => Items.Count();\n    }\n}\n```\n\n&nbsp;\n\nWith a resource list in place, we have the building blocks to add our `Beer` and `Brewery` implementations of these\ngeneric types:\n\n#### BeerResource.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    using Dtos.Beer;\n\n    public class BeerResource : Resource<BeerDto>\n    {\n    }\n}\n```\n\n&nbsp;\n\n#### BreweryResource.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    using Dtos.Brewery;\n\n    public class BreweryResource : Resource<BreweryDto>\n    {\n    }\n}\n```\n\n&nbsp;\n\n#### BeerResourceList.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    using Dtos.Beer;\n\n    public class BeerResourceList : ResourceList<BeerDto>\n    {\n    }\n}\n```\n\n&nbsp;\n\n#### BreweryResourceList.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    using Dtos.Brewery;\n\n    public class BreweryResourceList : ResourceList<BreweryDto>\n    {\n    }\n}\n```\n\n&nbsp;\n\nWhile these classes may be simple and quite unecessary for now, we now have the ability to extend these resource types\nbased on the model implmentation as we wish. Our `ResourceList` type has a few built in properties (`Items` and `Count`)\nfor our consumers to always expect on a list type response, for example. With everything all said and done, our project\nstructure should look like the following:\n\n![Domain_layer_finished](/images/net-core-dapper-and-crud-series/part-1/finished-domain-layer.png)\n\nFor those following along, [here's](https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-1-domain-layer) the\nrepository of what we've done so far.\n\nWe can see the light at the end of the tunnel! A few lingering questions remain though, in particular with our `tests`\ndirectory. We WILL be writing tests, but for our simple domain layer as of now, as there is really no logic in any of\nthe classes we've created so far, we're going to wait until we build the core functionality to start writing unit and\nintegration tests. For now, we'll stop here and continue with the meat and potatoes of our project in the next post in\nthe series, the data layer.\n\nCrack open a cold, you deserve it.\n",
    "html": "<p>Welcome to buzzword bingo, a.k.a. how many resume keywords can we fit in one blog post before someone stops reading. If\nyou're like me, you've comfortably relied on Entity Framework Core as your go-to ORM for .NET Core projects. Rightfully\nso, EF Core serves its purpose, and does its job <em>very</em> well. Primarily as a Java developer, I often daydream about\nhaving the ease, convenience, and configuration of EF Core in place of JPA (seriously, toss a few HQL queries in your\ncode base and then tell me how much fun you're having).</p>\n<p>I love EF Core for its tooling, ease of use, and deep integration with .NET Core. However, it's always nice to take a\nstep back from the tools are seemingly default to and explore new horizons. It just so happens that the folks at\nStackOverflow, the site primarily responsible for my paychecks, developed another useful micro-ORM that we can use - and\nboy, does that baby <em>purr</em>. Checkout Dapper's <a href=\"https://github.com/StackExchange/Dapper\">GitHub</a> page, in particular the\nbenchmarks recoreded by the team. Dapper not only rivals the use case of ORMs like EF Core and NHibernate, it damn near\nbeats them out of the water!</p>\n<p>In this series, we'll explore building a simple CRUD web application built with ASP.NET Core, Dapper, and MediatR (to\nspice things up a bit). Before we get started, let's discuss the architecture of exactly what we'll be building. Far too\noften, I read how-to articles of X technology and how to accomplish Y task. For a simple CRUD application like we'll be\nbuilding, and probably for most modern business software, shoving everything into one project solution will suffice.</p>\n<p>We'll be building a simple CRUD API for our fictional brewery management software, Dappery. I always try to encourage\nclean architecture, so we'll be doing things a little differently. Let's go over our project structure:</p>\n<ol>\n<li>First, we'll implement a simple domain layer containing our persisted entities, data transfer objects, view models\nand resources, and most of our core domain business logic.</li>\n<li>Once our domain layer is in place, we'll slap a data access layer on top of it. This layer's sole responsibility is\ndatabase interaction - no more, no less.</li>\n<li>Following the data layer, we'll add our core business layer project that acts as the middle-man between our web layer\nand our data access layer. We'll use MediatR and FluentValidator to do the heavy lifting in this layer.</li>\n<li>Once our core business logic layer is in place, we'll top things off with our API layer for the world to interact\nwith. This layer will contain our ASP.NET Core project, with things like thin controllers, NO business logic (this is\nimportant, our API is the doorway to our application), and a simple Swagger doc for consumers to reference.</li>\n</ol>\n<p>In this post, we'll get started with our domain layer. I should mention that we'll also be using .NET Core 3.0 with its\nnew bells and whistles. Let's fire up a terminal (apologies, I'll be working exclusively on a Mac), and get started. If\nyou're using Visual Studio, go ahead and initialize a new solution. In the terminal, let's start a new solution:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">~</span><span style=\"color:#E1E4E8\">$ mkdir Dappery &#x26;&#x26; </span><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> Dappery</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">~</span><span style=\"color:#E1E4E8\">/Dappery$ dotnet new sln</span></span></code></pre></figure>\n<p>Caveat: it's totally okay to fire up your favorite IDE (I'll be using Rider) and doing all this setup through the GUI.\nThis is just my preference for project setup. Next, let's go ahead and add some <code>src</code> and <code>tests</code> directories, and spin\nup our domain layer project within the <code>src</code> directory:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">~</span><span style=\"color:#E1E4E8\">/Dappery$ mkdir src &#x26;&#x26; </span><span style=\"color:#B392F0\">mkdir</span><span style=\"color:#9ECBFF\"> tests</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">~</span><span style=\"color:#E1E4E8\">/Dappery$ cd src &#x26;&#x26; </span><span style=\"color:#B392F0\">dotnet</span><span style=\"color:#9ECBFF\"> new</span><span style=\"color:#9ECBFF\"> classlib</span><span style=\"color:#79B8FF\"> -n</span><span style=\"color:#9ECBFF\"> Dappery.Domain</span></span></code></pre></figure>\n<p>Things to note are the fact that this is a <code>classlib</code>, which means this is a <code>netstandard2.0</code> library that we can reuse\nin any .NET project that leverages the standard. Now that we've got our project skeleton, let's go ahead and link it to\nour solution:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">~</span><span style=\"color:#E1E4E8\">/Dappery/src$ dotnet sln ../Dappery.sln add Dappery.Domain/Dappery.Domain.csproj</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Project</span><span style=\"color:#9ECBFF\"> `</span><span style=\"color:#B392F0\">src/Dappery.Domain/Dappery.Domain.csproj</span><span style=\"color:#9ECBFF\">`</span><span style=\"color:#B392F0\"> added</span><span style=\"color:#9ECBFF\"> to</span><span style=\"color:#9ECBFF\"> the</span><span style=\"color:#9ECBFF\"> solution.</span></span></code></pre></figure>\n<p>With our solution linked to our domain project, let's go ahead and fire up our IDE with the project. As I mentioned\npreviously, I'll be using Rider. If your IDE hasn't already, I'd suggest adding the <code>src</code> and <code>tests</code> folders as project\nfolders, just to keep everything tidy. With our domain project skeleton in place, let's talk about what exactly we'll be\nputting in this layer.</p>\n<h3>The Domain Layer</h3>\n<p>There's a popular architectural design pattern in software engineering\ncalled <a href=\"https://en.wikipedia.org/wiki/Domain-driven_design\">Domain Driven Design</a>, or DDD. To summarize, DDD takes the\napproach that your application should be centered around your core domain model and business logic. In layman's terms,\nwhat this means for us is that our domain layer project will house our beer and brewery entities and any special\nbusiness logic that pertains to these entities. This layer should not have ANY dependency on other layers; all this\nlayer knows, and cares about, is its entities and models. We'll also put our media types, or data transfer objects, in\nthis project as well to act as the middleman when moving data between layers. Let's create an <code>Entities</code> folder within\nour <code>Dapper.Domain</code> project. We'll place two POCOs (plain old C# classes) that will act as our persisted database\nentities, <code>Beer.cs</code> and <code>Brewery.cs</code>. To keep our code <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY</a>,\nwe'll derive these classes from a <code>TimeStampedEntity</code> that will contain some common properies <code>Beer</code> and <code>Brewery</code> will\nneed.</p>\n<h4>TimeStampedEntity.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> TimeStampedEntity</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> Id</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> DateTime</span><span style=\"color:#B392F0\"> CreatedAt</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> DateTime</span><span style=\"color:#B392F0\"> UpdatedAt</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>Beer.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> Beer</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">TimeStampedEntity</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Name</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> BeerStyle</span><span style=\"color:#B392F0\"> BeerStyle</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> Brewery</span><span style=\"color:#B392F0\"> Brewery</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>Brewery.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Collections</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Generic</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> Brewery</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">TimeStampedEntity</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> Brewery</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Beers </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> List</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Beer</span><span style=\"color:#E1E4E8\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Name</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> ICollection</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Beer</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">Beers</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<p>You'll notice I've put my <code>using</code> directives within my namespaces. This is purely preference, and has very little\ndifference than if I were to put them outside my\nnamespaces. <a href=\"https://stackoverflow.com/questions/125319/should-using-directives-be-inside-or-outside-the-namespace\">Here's</a>\na great discussion about the difference, for the curious. Also notice I've also created an <code>Address</code> class associated to\na <code>Brewery</code> and a <code>BeerStyle</code> enumeration so we can strongly type our families of beer. We've also initialized\nour <code>Beers</code> list within our <code>Brewery</code> model - this is a great pattern to get into when working within the domain layer,\nas consumers of our API should not have to worry about <code>NullReferenceExceptions</code> when interrogating logic based on a\ncollection from their API provider.</p>\n<h4>Address.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">TimeStampedEntity</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> StreetAddress</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> City</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> ZipCode</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BeerStyle.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> enum</span><span style=\"color:#B392F0\"> BeerStyle</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        Lager</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        Pilsner</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        Amber</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        PaleAle</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        Ipa</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        DoubleIpa</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        TripleIpa</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        Stout</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<p>For the scope of this series, we'll keep things simple and stick with these properties for our entities. Our project\nshould look a little something like this:</p>\n<p><img src=\"/images/net-core-dapper-and-crud-series/part-1/project-setup.png\" alt=\"Project\"></p>\n<p>With our entities in place, let's go ahead add our DTOs. Before we do that, let's talk about what exactly we should be\n<em>putting</em> in these DTOs.</p>\n<h4>DTOs</h4>\n<p>For our implementation, we want our DTOs to reflect actions we can perform on our application. This a CRUD application,\nbut we're also going to\nutilize <a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs\">Command and Query Responsibility Segregation</a>,\nor CQRS, to distinguish actions we'll be performing on our database - read only queries, and write commands. For our\nsimple application, it's tempting to have all-purpose DTOs for each CRUD operation. While this is a viable solution, I\nwould <em>highly</em> recommend against it. As our application grows, so do our needs for more complex queries and actions we\ncan perform on our database. Rather than trying to shove all that container logic into a few classes, we'll be\nseparating our DTOs by media type and action. Let's go ahead and add a <code>Dtos</code> folder, and within that folder, we'll add\nseparate folders for our different domains, <code>Beer</code>, and <code>Brewery</code>. and add our first create DTOs for a beer and a\nbrewery.</p>\n<h4>Brewery/CreateBreweryDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Dtos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> CreateBreweryDto</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Name</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> AddressDto</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>Beer/CreateBeerDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Dtos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Beer</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> Entities</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> CreateBeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Name</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> BeerStyle</span><span style=\"color:#B392F0\"> Style</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Notice I've also added an <code>AddressDto</code> as an acceptable media type to the <code>CreateBreweryDto</code> class, so let's define that\nas well at the root of the <code>Dtos</code> folder since this will be an all-purpose DTO since its properties do not change as we\ndo not directly CRUD with <code>Address</code> class.</p>\n<h4>AddressDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Dtos</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> AddressDto</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> StreetAddress</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> City</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> ZipCode</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<p>In our <code>CreateBeerDto</code> class, we're only exposing the name and beer style associated to a beer - why not a brewery? This\nis where we'll define our first business rule:</p>\n<h4>Business Rule 1: A beer cannot be created with an associated brewery</h4>\n<p>What does this mean for our users? In order to add a beer to our database through our API, we'll add an endpoint\nassociated with our breweries that will expose an add beer operation. This will simplify our API, as we will not need to\ndo any association at creation time to the brewery for the beer to be added - we'll know exactly what brewery to add it\nto!</p>\n<p>For our <code>CreateBreweryDto</code> class, we're exposing the name and the address of the brewery, NOT the list of beers. This\nbrings us to our second business rule:</p>\n<h4>Business Rule 2: A brewery cannot be created with beers on a request</h4>\n<p>While this may seem arbitrary, this rule will simplify our API, forcing users to first create a brewery, and\nsubsequentially add the beers to that brewery at their leisure. We'll see later why we're implementing this design, both\nfor simplicity for the developer and ease of use for our users. This brings up a good point - metadata. Let's add some\nproperies to our <code>Brewery.cs</code> entity to easily extract the number of beers a brewery has to offer. Let's add\na <code>BeerCount</code> property:</p>\n<h4>Brewery.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Collections</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Generic</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> Brewery</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">TimeStampedEntity</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Name</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> ICollection</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Beer</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">Beers</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> BeerCount</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> Beers.Count;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<p>We've added a <code>BeerCount</code> delegate that will simply give us a count of all beers related to that entity whenever we\nquery for a specific brewery. With our create DTOs out of the way, let's go ahead and implement the rest of our CRUD\nDTOs. For our reads, we'll create simple <code>BeerDto.cs</code> and <code>BreweryDto.cs</code> classes - no need to prefix these with an\noperation as they will more, or less, be our default DTO when moving between layers:</p>\n<h4>BreweryDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Dtos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Collections</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Generic</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> Entities</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> BreweryDto</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> Id</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Name</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> AddressDto</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> IEnumerable</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Beer</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">Beers</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> BeerCount</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BeerDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Dtos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Beer</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> Brewery</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> Entities</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> BeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> Id</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Name</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> BeerStyle</span><span style=\"color:#B392F0\"> Style</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> BreweryDto</span><span style=\"color:#B392F0\"> Brewery</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Nothing special here, the only difference is we'll be pulling out the ID for each beer and brewery, respectively. Note,\nwe're using <code>IEnumerable&#x3C;Beer></code> as our iterative type on our beers because this is just an immutable list, whereas we\nused <code>ICollection&#x3C;Beer></code> in our entity due to the fact we will be modifying list over time.</p>\n<p>With our reads out of the the way, let's go ahead and create <code>UpdateBeerDto.cs</code> and <code>UpdateBreweryDto.cs</code> classes:</p>\n<h4>UpdateBeerDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Dtos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Beer</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> UpdateBeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> Id</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Name</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> AddressDto</span><span style=\"color:#B392F0\"> Address</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>UpdateBreweryDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Dtos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> Entities</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> UpdateBreweryDto</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> Id</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> Name</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> AddressDto</span><span style=\"color:#B392F0\"> Type</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Again, nothing special here. We have an <code>Id</code> property on each DTO, as we'll need to know which beer, or brewery, to\nupdate for the user on the request, and we're only allowing a few properties to change on our entities. Luckily for us,\nfor our delete operation, we'll be relying on the user to pass in an ID associated with the beer, or brewery, and that's\nit. No need to include anything in the body, as long as we have the ID, we're good to. Let's take a minute to grab a\nbeer and take a look at where we're at so far. Our project structure should look more, or less, like this:</p>\n<p><img src=\"/images/net-core-dapper-and-crud-series/part-1/project-dtos-in-place.png\" alt=\"Project_thus_far\"></p>\n<p>I promise we're almost done (sort of). That last knot for us to tie up is the media type we'll be presenting to our\nconsumer. To be quite honest, this implementation is <em>probably</em> overkill for our use case, but a good exercise for us to\nbuild robust APIs. For our API, our entities and DTOs would suffice. However, in a real world enterprise setting, where\nour API interacts with tens of microservices all communicating with each other, a transfer data type that represents the\nmedia type and domain concern our API will provide to consumers is a good idea. Think of it as layers <em>within</em> our\ndomain layer:</p>\n<ul>\n<li>Our entities represent the source of record stored within our database, that when extracted, are expected to modify\nand persist their state</li>\n<li>Our DTOs act as containers to transport that persisted data between layers (e.g. the domain layer and the data layer,\nand from the data layer to the API layer in the long run)</li>\n<li>Our API layer should <strong>not</strong> have any knowledge of our entities, as they contain audit properties (timestamps) and\nrelations to other entities that should only be interacted with at lower layers</li>\n<li>Our resource types will represent the models/media types we will provide to our consumers, as our DTOs are more, or\nless, internal to our API</li>\n</ul>\n<p>With the semantics out of the way, lets go ahead and create a <code>Media</code> folder and place a few resource types within that\nfolder:</p>\n<h4>Resource.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> Resource</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">T</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> T</span><span style=\"color:#B392F0\"> Self</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Our general resource type that will serve as the template for all types our API will give to our consumers. As we build\nour API, we'll continue to add metadata for our consumers so that they can make decisions about our responses we give\nthem without having to inspect the data we <em>actually</em> hand over. Next, let's create a <code>ResourceList.cs</code> class that will\nserve as an iterable collection we hand over to our callers:</p>\n<h4>ResourceList.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Collections</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Generic</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Linq</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> ResourceList</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">T</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> IEnumerable</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">T</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">Items</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> Count</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> Items.</span><span style=\"color:#B392F0\">Count</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<p>With a resource list in place, we have the building blocks to add our <code>Beer</code> and <code>Brewery</code> implementations of these\ngeneric types:</p>\n<h4>BeerResource.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> Dtos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Beer</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> BeerResource</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">Resource</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">BeerDto</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BreweryResource.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> Dtos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Brewery</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> BreweryResource</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">Resource</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">BreweryDto</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BeerResourceList.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> Dtos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Beer</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> BeerResourceList</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">ResourceList</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">BeerDto</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BreweryResourceList.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> Dappery</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Domain</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    using</span><span style=\"color:#B392F0\"> Dtos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Brewery</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> BreweryResourceList</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">ResourceList</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">BreweryDto</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p> </p>\n<p>While these classes may be simple and quite unecessary for now, we now have the ability to extend these resource types\nbased on the model implmentation as we wish. Our <code>ResourceList</code> type has a few built in properties (<code>Items</code> and <code>Count</code>)\nfor our consumers to always expect on a list type response, for example. With everything all said and done, our project\nstructure should look like the following:</p>\n<p><img src=\"/images/net-core-dapper-and-crud-series/part-1/finished-domain-layer.png\" alt=\"Domain_layer_finished\"></p>\n<p>For those following along, <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-1-domain-layer\">here's</a> the\nrepository of what we've done so far.</p>\n<p>We can see the light at the end of the tunnel! A few lingering questions remain though, in particular with our <code>tests</code>\ndirectory. We WILL be writing tests, but for our simple domain layer as of now, as there is really no logic in any of\nthe classes we've created so far, we're going to wait until we build the core functionality to start writing unit and\nintegration tests. For now, we'll stop here and continue with the meat and potatoes of our project in the next post in\nthe series, the data layer.</p>\n<p>Crack open a cold, you deserve it.</p>"
  },
  "_id": "2019/net-core-dapper-and-crud-buzzword-bingo.md",
  "_raw": {
    "sourceFilePath": "2019/net-core-dapper-and-crud-buzzword-bingo.md",
    "sourceFileName": "net-core-dapper-and-crud-buzzword-bingo.md",
    "sourceFileDir": "2019",
    "contentType": "markdown",
    "flattenedPath": "2019/net-core-dapper-and-crud-buzzword-bingo"
  },
  "type": "Post",
  "url": "/blog/2019/net-core-dapper-and-crud-buzzword-bingo"
}