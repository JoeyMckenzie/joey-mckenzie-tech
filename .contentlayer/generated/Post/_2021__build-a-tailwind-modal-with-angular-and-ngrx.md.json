{
  "title": "Build a Tailwind modal with Angular and NgRx",
  "description": "Out-of-the-box modals are nice, but often times inflexible and can bring a lot of unnecessary code into a project for something as simple as displaying a message. Let's use Tailwind to build our very own state-based modal instead!",
  "pubDate": "2021-04-27T07:00:00.000Z",
  "category": "angular",
  "heroImage": "/images/tailwind-ngrx-modal/off_the_shelf_modal.jpg",
  "draft": false,
  "keywords": [
    "angular",
    "ngrx",
    "typescript"
  ],
  "body": {
    "raw": "\nComing off a blogging hiatus, I'm finally making my triumphant return. If you've been following my writing up until now,\nyou'll know that I'm primarily a .NET dude. Lately, I've been wanting to get back to my roots with Angular and see what\nI could build with everyone's new favorite CSS framework on the block, [Tailwind](https://tailwindcss.com/). I'm going\nto be dialing back the length in content in place of smaller, bit-sized chunks in an effort to get back to helping the\ngeneral developer population with the lessons I've learned and things that I think are fire (as the kids say) in the\ncommunity. With that out of the way, let's dive in!\n\n## What is Tailwind?\n\nIf you're not familiar with Tailwind CSS, it's a utility-based CSS framework that I like to think of as an API into your\nCSS. This isn't exactly an article about the intricacies and deep diving into the framework, as there are plenty of\ngreat developers out there writing about Tailwind and why we all think it's the future of stylized development (\nseriously, once you start using, you'll most likely never want to go back). Tailwind is awesome due to it's flexibility\nand thin footprint (given you process your build correctly) it provides to our applications. With Tailwind, you'll\n_rarely_ find yourself writing custom CSS and if you have a need for such, you can always include it as\na [separate utility](https://tailwindcss.com/docs/adding-new-utilities) for reusability purposes.\n\nBottom line, Tailwind is amazing and an excellent tool to add to any developer's tool belt.\n\n> Disclaimer: I pay for [Tailwind UI](https://tailwindui.com/) because I love the components that Adam Wathan and the\n> Tailwind team have put together. I would recommend anyone that loves Tailwind to check it out, but for the purposes of\n> our demo here, we'll only be using the publicly available free components.\n\n## Modal components\n\nOften times (read: every other sprint), it's helpful to add a bit of pizazz to our frontend application messaging in the\nform of modals that display handy bits of information for our users. While we _could_ use an out-of-the-box modal\ncomponent using a styling library like [Angular Material](https://material.angular.io/)\nor [Bootstrap](https://getbootstrap.com/), luckily for us, Tailwind UI offers a set\nof [awesomely styled modal components](https://tailwindui.com/components/application-ui/overlays/modals) ready for use.\nWe'll be using the free modal component here to quickly prototype our app modal that we could potentially use throughout\nour site.\n\n## What we'll build\n\nGetting started, let's run through the list of what we'll be building and the tools we'll utilize as we embark on our\nmodal-based journey:\n\n-   We'll utilize Tailwind as our style provider to give our modal a modern look and feel\n-   Instead of using an injectable service to dynamically render DOM that contains our modal markup and content using\n    something like Angular's [Renderer2](https://angular.io/api/core/Renderer2), we'll lean on a flux-based state approach\n    using [NgRx](https://ngrx.io) to help us manage the displaying of our modal with custom content (more on this in a\n    minute)\n-   Using a state-based approach, we'll expose actions that will allow any of our components to call into the modal and\n    display it based on any set of criteria\n\nWith our approach lined out, let's defer to the second bullet point of the aforementioned list.\n\n## Using state in place of rendering\n\nWhile it might be tempting to take on a dependency to render modal's within our application, that approach can bring\nalong quite a bit of unnecessary JavaScript and CSS that is most likely over engineered for our simple use cases.\nAnother popular approach is to write our own custom rendering services that inject DOM directly into the rendered\nmarkup; this is a popular homegrown solution with many articles and example repositories available to pull from. I find\noften times that these solutions can be a bit cumbersome with quite a few moving pieces to keep track and once again,\nquite frankly, feel a bit over engineered. While I'm quite positive someone much smarter than myself has an excellent\ncounterpoint to this, I fall in the camp of _shove all your application logic into flux actions_ and it only seemed\nnatural to have my components like modals, slide overs, dropdowns, menus, etc. fit into that bill as well.\n\nWith our sermon out of the way, let's get into some code. At any point, you can always refer to\nthe [source code](https://github.com/JoeyMckenzie/joey-mckenzie-io-blog-samples/tree/main/projects/ngrx-tailwind-modal)\non my GitHub for reference.\n\n## Getting started\n\nWhile I'm using an Angular workspace in the example project, this all applies to existing single project workspaces as\nwell. Let's spin up a new application using your terminal of choice:\n\n```shell\nng new ngrx-tailwind-modal\n```\n\n> I'm using Angular version 11.2.5, which fortunately for us, the Angular team has included PostCSS into the build\n> processor allowing us to natively install Tailwind without explicitly installing it's dependencies\n\nWith our project in place, let's go ahead and install Tailwind (assuming you're using Angular v11.2 or greater):\n\n```shell\nnpm install --save-dev tailwindcss\n```\n\nand if you're using yarn:\n\n```shell\nyarn add tailwindcss\n```\n\nI'm using CSS in the example below, so we need to add the Tailwind utilities to our global styles as well:\n\n#### styles.css\n\n```csharp\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nIf you're using another CSS library, checkout the [docs](https://tailwindcss.com/docs/installation) to get started. I've\nopted to use just good ole fashioned CSS here since I won't be writing any custom styles myself and have no need to\nprocess CSS files during build time.\n\nWith Tailwind in place, let's go ahead and add NgRx to our dependencies:\n\n```shell\nnpm install @ngrx/store --save\n```\n\nand for yarn\n\n```shell\nyarn add @ngrx/store\n```\n\nOptionally, you can install NgRx dev tools as well to assist with debugging, but for our simple use case, it's not\nnecessary. With our required dependencies in place, let's go ahead and generate a new modal component. Go ahead and `cd`\ninto your project directory and run the Angular schematic to spin up a new component:\n\n```shell\nng g c modal --skip-tests\n```\n\nWe'll add the `--skip-tests` flag for now as we won't be unit testing our modal. After our schematic has run, go ahead\nand open up `modal.component.html` and let's replace the markup with Tailwind's free modal component HTML:\n\n### modal.component.html\n\n```html\n<!-- This example requires Tailwind CSS v2.0+ -->\n<div\n    class=\"fixed inset-0 z-10 overflow-y-auto\"\n    aria-labelledby=\"modal-title\"\n    role=\"dialog\"\n    aria-modal=\"true\"\n>\n    <div\n        class=\"flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0\"\n    >\n        <!--\n      Background overlay, show/hide based on modal state.\n\n      Entering: \"ease-out duration-300\"\n        From: \"opacity-0\"\n        To: \"opacity-100\"\n      Leaving: \"ease-in duration-200\"\n        From: \"opacity-100\"\n        To: \"opacity-0\"\n    -->\n        <div\n            class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n            aria-hidden=\"true\"\n        ></div>\n\n        <!-- This element is to trick the browser into centering the modal contents. -->\n        <span\n            class=\"hidden sm:inline-block sm:h-screen sm:align-middle\"\n            aria-hidden=\"true\"\n            >&#8203;</span\n        >\n\n        <!--\n      Modal panel, show/hide based on modal state.\n\n      Entering: \"ease-out duration-300\"\n        From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        To: \"opacity-100 translate-y-0 sm:scale-100\"\n      Leaving: \"ease-in duration-200\"\n        From: \"opacity-100 translate-y-0 sm:scale-100\"\n        To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n    -->\n        <div\n            class=\"inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle\"\n        >\n            <div class=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4\">\n                <div class=\"sm:flex sm:items-start\">\n                    <div\n                        class=\"mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10\"\n                    >\n                        <!-- Heroicon name: outline/exclamation -->\n                        <svg\n                            class=\"h-6 w-6 text-red-600\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                            aria-hidden=\"true\"\n                        >\n                            <path\n                                stroke-linecap=\"round\"\n                                stroke-linejoin=\"round\"\n                                stroke-width=\"2\"\n                                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n                            />\n                        </svg>\n                    </div>\n                    <div class=\"mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left\">\n                        <h3\n                            class=\"text-lg font-medium leading-6 text-gray-900\"\n                            id=\"modal-title\"\n                        >\n                            Deactivate account\n                        </h3>\n                        <div class=\"mt-2\">\n                            <p class=\"text-sm text-gray-500\">\n                                Are you sure you want to deactivate your\n                                account? All of your data will be permanently\n                                removed. This action cannot be undone.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div\n                class=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\"\n            >\n                <button\n                    type=\"button\"\n                    class=\"inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm\"\n                >\n                    Deactivate\n                </button>\n                <button\n                    type=\"button\"\n                    class=\"mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:ml-3 sm:mt-0 sm:w-auto sm:text-sm\"\n                >\n                    Cancel\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\nWhile I've just copy pasta'd over the direct HTML component, using Tailwind it's straight forward to replace markup\nverbiage, button text, and custom brand styles easily into our components using a few simple `@Input()` props on\nour `modal.component.ts` class in combination with some `[ngClass]` directives sprinkled throughout our HTML. I'll leave\nthat extensibility feat as an exercise for the reader.\n\nWith our modal markup in place and our component brought in to our `app.module.ts`'s `declarations` array, let's go\nahead add write our NgRx actions, reducer, and a few helpers to help facilitate opening and closing the modal. First,\nlet's add a directory just beneath `/app` named `+state`. `+state` is a common directory name for a module's state\nactions, reducers, effects, selectors, and other NgRx semantics that helps provide a bit of convention when\nencapsulating modular state.\n\nWith our directory in place, let's get started by adding a `layout.actions.ts` file to house our dispatchable actions to\nthe store with the following code:\n\n#### layout.actions.ts\n\n```typescript\nimport { createAction } from '@ngrx/store';\n\nexport const openModal = createAction('[Layout] Open modal');\n\nexport const closeModal = createAction('[Layout] Close modal');\n```\n\nWe don't include any `props` in our actions, but we could easily define a single action with a flag signaling the\nmodal's state - I fall in the camp of \"it's not that hard to write actions, just boilerplate-y\" so I prefer more, atomic\nactions rather than generic, composable actions. With our actions in place, let's go ahead and define our layout state\ninside a new file named `layout.reducer.ts`:\n\n#### layout.reducer.ts\n\n```typescript\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as fromActions from './layout.actions';\n\nexport const layoutFeatureKey = 'layout';\n\nexport interface LayoutState {\n    modalIsOpen: boolean;\n}\n\nconst initialState: LayoutState = {\n    modalIsOpen: false,\n};\n\nconst appReducer = createReducer(\n    initialState,\n    on(fromActions.openModal, (state) => ({\n        ...state,\n        modalIsOpen: true,\n    })),\n    on(fromActions.closeModal, (state) => ({\n        ...state,\n        modalIsOpen: false,\n    })),\n);\n\nexport const reducer = (state: LayoutState | undefined, action: Action) =>\n    appReducer(state, action);\n```\n\nAgain, this post _is not_ meant to the de facto grimoire of implementing NgRx properly in your application. Given our\nscope, we'll use just a simple state implementation to facilitate our layout state that could easily be extended to\ninclude any number of layout specific concerns.\n\nBreaking down the code above, we:\n\n-   Define our layout feature slice with `LayoutState` that will serve as the source of truth for our current modal\n    displaying\n-   Create a reducer to facilitate _what_ our state should look like when the modal actions are dispatched\n-   Create an identifying `const` key to declare our layout feature slice with `layoutFeatureKey`\n\nWhile we could easily set singular state on each reducer type to simply set the modal state according, as our\napplication grows, so will our need to only change single, or a handful at most, pieces of state at time. For these\ncases, we'll go ahead and add in a `...state` to shallow copy our current state as to not mutate any state that is not\nconcerned with the modal state.\n\nWith our reducer in place, let's go ahead and add a selector to get the current modal state and provide multiple\ncomponents a single funnel into our state. Let's create a `layout.selectors.ts` file in our `+state` folder with the\nfollowing:\n\n#### layout.selectors.ts\n\n```typescript\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { LayoutState, layoutFeatureKey } from './layout.reducer';\n\nconst layoutFeatureSlice = createFeatureSelector<LayoutState>(layoutFeatureKey);\n\nexport const selectModalStatus = createSelector(\n    layoutFeatureSlice,\n    (state: LayoutState) => state.modalIsOpen,\n);\n```\n\nWithin our selector, we define a feature selector to reference the `layout` slice of our composite state, and then\ncreate a selector to grab the modal state node. With our selector in place let's go ahead and create a facilitator to\nhelp shroud our store inner workings from our components so that we can create a layer of abstraction between the\ntechnical details of our application and the view layer that users ultimate see.\n\n> This is known as the [_facade pattern_](https://en.wikipedia.org/wiki/Facade_pattern) in software development, and\n> while it is worth keeping in the back of your mind, it's a bit outside our scope for now. Checkout my (shameless plug)\n> post on [state management with Blazor](https://joeymckenzie.tech/blog/fluxor-blazor-part-1) for a more in-depth\n> discussion.\n\nAdding a state facade is entirely optional, and should not be taken as final truth - there are many reason to _not_\ninclude this service as it does trade some complexity and boilerplate-ness for a bit of dependency inversion. You're\nmore than welcome to facilitate your actions directly from your components as well.\n\nWith the disclaimer out of the way, let's add a `layout.facade.ts` with the following:\n\n#### layout.facade.ts\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { LayoutState } from './layout.reducer';\nimport * as fromActions from './layout.actions';\nimport * as fromSelectors from './layout.selectors';\n\n@Injectable()\nexport class LayoutFacade {\n    modalState$ = this.store.pipe(select(fromSelectors.selectModalStatus));\n\n    constructor(private store: Store<LayoutState>) {}\n\n    openModal() {\n        this.store.dispatch(fromActions.openModal());\n    }\n\n    closeModal() {\n        this.store.dispatch(fromActions.closeModal());\n        setTimeout(() => this.openModal(), 1000);\n    }\n}\n```\n\nOur `layout.facade.ts`, as we can see, is nothing more than a scoped service (we don't include the `providedIn`\nconfiguration to `@Injectable()`) that pulls through our selectors and defines some methods wrapping our dispatcher that\nfires off the modal actions. Our `closeModal()` method also includes the following:\n\n```typescript\nsetTimeout(() => this.openModal(), 1000);\n```\n\nThis is solely for example purposes as to mimic the behavior of the Tailwind UI modal examples (closing a modal on the\nexample reopens the modal shortly after). This will save us some interaction with a button when testing out our modal.\n\nWith our state ceremony out of the way, let's go ahead and wire up everything we need in our `app.module.ts`\n\n#### app.module.ts\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { LayoutFacade } from './+state';\nimport { layoutFeatureKey, reducer } from './+state/layout.reducer';\n\nimport { AppComponent } from './app.component';\nimport { ModalComponent } from './modal/modal.component';\n\n@NgModule({\n    declarations: [AppComponent, ModalComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        StoreModule.forRoot({ [layoutFeatureKey]: reducer }),\n        StoreDevtoolsModule.instrument({\n            maxAge: 25,\n        }),\n    ],\n    providers: [LayoutFacade],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```\n\nWe include the required NgRx modules using our `layoutFeatureKey` defined in our reducer file, include our Redux\nDevTools plugins and `LayoutFacade` service, and also include the `BrowserAnimationsModule` we'll use to add some nice\ntransitions to our modal for flare.\n\nSpeaking of transitions, let's go ahead and add a few animations in our `modal.component.ts` to add the pleasing\nappearing/fading of the modal onto page. In our `modal.component.ts`, we'll add three simple animation attribute:\n\n-   `@modalContainer`\n-   `@modalOverlay`\n-   `@modalContent`\n\nLet's add each of the tags to our markup so that it resembles the following:\n\n```html\n<!-- This example requires Tailwind CSS v2.0+ -->\n<div\n    @modalContainer\n    *ngIf=\"(modalState$ | async) === true\"\n    class=\"fixed inset-0 z-10 overflow-y-auto\"\n    aria-labelledby=\"modal-title\"\n    role=\"dialog\"\n    aria-modal=\"true\"\n>\n    <div\n        class=\"flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0\"\n    >\n        <!--\n      Background overlay, show/hide based on modal state.\n\n      Entering: \"ease-out duration-300\"\n        From: \"opacity-0\"\n        To: \"opacity-100\"\n      Leaving: \"ease-in duration-200\"\n        From: \"opacity-100\"\n        To: \"opacity-0\"\n    -->\n        <div\n            @modalOverlay\n            (click)=\"onClose()\"\n            class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n            aria-hidden=\"true\"\n        ></div>\n\n        <!-- This element is to trick the browser into centering the modal contents. -->\n        <span\n            class=\"hidden sm:inline-block sm:h-screen sm:align-middle\"\n            aria-hidden=\"true\"\n            >&#8203;</span\n        >\n\n        <!--\n      Modal panel, show/hide based on modal state.\n\n      Entering: \"ease-out duration-300\"\n        From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        To: \"opacity-100 translate-y-0 sm:scale-100\"\n      Leaving: \"ease-in duration-200\"\n        From: \"opacity-100 translate-y-0 sm:scale-100\"\n        To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n    -->\n        <div\n            @modalContent\n            class=\"inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle\"\n        >\n            <div class=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4\">\n                <div class=\"sm:flex sm:items-start\">\n                    <div\n                        class=\"mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10\"\n                    >\n                        <!-- Heroicon name: outline/exclamation -->\n                        <svg\n                            class=\"h-6 w-6 text-red-600\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                            aria-hidden=\"true\"\n                        >\n                            <path\n                                stroke-linecap=\"round\"\n                                stroke-linejoin=\"round\"\n                                stroke-width=\"2\"\n                                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n                            />\n                        </svg>\n                    </div>\n                    <div class=\"mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left\">\n                        <h3\n                            class=\"text-lg font-medium leading-6 text-gray-900\"\n                            id=\"modal-title\"\n                        >\n                            Deactivate account\n                        </h3>\n                        <div class=\"mt-2\">\n                            <p class=\"text-sm text-gray-500\">\n                                Are you sure you want to deactivate your\n                                account? All of your data will be permanently\n                                removed. This action cannot be undone.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div\n                class=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\"\n            >\n                <button\n                    (click)=\"onClose()\"\n                    type=\"button\"\n                    class=\"inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm\"\n                >\n                    Deactivate\n                </button>\n                <button\n                    (click)=\"onClose()\"\n                    type=\"button\"\n                    class=\"mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:ml-3 sm:mt-0 sm:w-auto sm:text-sm\"\n                >\n                    Cancel\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\nWe'll use each of the animation attributes to drive the transition animations\nusing [parent-child animations](https://angular.io/guide/transition-and-triggers#parent-child-animations).\n\n> There's lots of great posts that are much more in-depth about Angular's transition library, and I'll once again defer\n> that as an exercise for the reader.\n\nWith our component markup in place, let's add the inner workings of our `modal.component.ts`:\n\n#### modal.component.ts\n\n```typescript\nimport {\n    trigger,\n    transition,\n    query,\n    animateChild,\n    state,\n    style,\n    animate,\n    group,\n} from '@angular/animations';\nimport { Component, OnInit } from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { LayoutFacade } from '../+state';\n\n@Component({\n    selector: 'femfit-modal',\n    templateUrl: './modal.component.html',\n    animations: [\n        trigger('modalContainer', [\n            transition(':enter', [\n                group([\n                    query('@modalOverlay', animateChild()),\n                    query('@modalContent', animateChild()),\n                ]),\n            ]),\n            transition(\n                ':leave',\n                group([\n                    query('@modalOverlay', animateChild()),\n                    query('@modalContent', animateChild()),\n                ]),\n            ),\n        ]),\n        // Background overlay, show/hide based on modal state.\n\n        // Entering: \"ease-out duration-300\"\n        //   From: \"opacity-0\"\n        //   To: \"opacity-100\"\n        // Leaving: \"ease-in duration-200\"\n        //   From: \"opacity-100\"\n        //   To: \"opacity-0\"\n        trigger('modalOverlay', [\n            state(\n                'void',\n                style({\n                    opacity: 0,\n                }),\n            ),\n            state(\n                '*',\n                style({\n                    opacity: 1,\n                }),\n            ),\n            transition(':enter', [animate('300ms ease-out')]),\n            transition(':leave', [animate('100ms ease-in')]),\n        ]),\n        // Modal panel, show/hide based on modal state.\n\n        // Entering: \"ease-out duration-300\"\n        //   From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        //   To: \"opacity-100 translate-y-0 sm:scale-100\"\n        // Leaving: \"ease-in duration-200\"\n        //   From: \"opacity-100 translate-y-0 sm:scale-100\"\n        //   To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        trigger('modalContent', [\n            state(\n                'void',\n                style({\n                    opacity: 0,\n                    transform: 'scale(0.95)',\n                }),\n            ),\n            state(\n                '*',\n                style({\n                    opacity: 1,\n                    transform: 'scale(1)',\n                }),\n            ),\n            transition(':enter', [animate('300ms ease-out')]),\n            transition(':leave', [animate('200ms ease-in')]),\n        ]),\n    ],\n})\nexport class ModalComponent implements OnInit {\n    modalState$ = this.layoutFacade.modalState$;\n\n    constructor(private layoutFacade: LayoutFacade) {}\n\n    private readonly unsubscribe$ = new Subject();\n\n    ngOnInit(): void {\n        // When the component is mounted, fire up the modal if closed taking the first emission only\n        this.modalState$.pipe(take(1)).subscribe((isOpen) => {\n            if (!isOpen) {\n                this.layoutFacade.openModal();\n            }\n        });\n\n        // Register a stream to listen for escape keydown events to close the modal\n        fromEvent(document, 'keydown')\n            .pipe(\n                takeUntil(this.unsubscribe$),\n                filter(\n                    (event) =>\n                        event instanceof KeyboardEvent &&\n                        event.code === 'Escape',\n                ),\n                withLatestFrom(this.modalState$),\n            )\n            .subscribe(([_, modalIsOpen]) => {\n                if (modalIsOpen) {\n                    this.layoutFacade.closeModal();\n                }\n            });\n    }\n\n    onClose(): void {\n        this.layoutFacade.closeModal();\n    }\n}\n```\n\nLet's breakdown what our modal component is doing behind the scenes:\n\n-   First, we define three animation `trigger`s that will run when our component is rendered into and out of the DOM (I've\n    loosely translated the suggested Tailwind transition classes that should apply to the modal)\n    -   Our first `trigger` is applied to the wrapping `div` element that houses the entirety of our modal component, and\n        it's job is to coordinate running the nested child transitions when it is rendered into/out of the DOM (driven by\n        the `*ngIf=\"(modalState$ | async) === true\"` directive) with the assistance of the `group` and `query` Angular\n        animation helper methods to signify which child transitions to run\n    -   Our second `trigger` is the fading in and out of the background overlay using a simple opacity transition\n    -   Our third `trigger` is the displaying of the modal content using a combination of opacity and scaling transition\n        animations\n    -   You'll notice each `trigger` transitions using the `:enter`/`:leave` aliases which represent the transitioning\n        of `void` state (i.e. not in the rendered DOM), to `*` state (i.e. any state existing in the markup)\n-   Next, we pull through a reference from the state facade to the current modal status with `modalStatus$` observable\n    that listens for values based on our selector stream\n-   We define an emission `Subject` to help facilitate the closing of our streams when our component is destroyed, i.e.\n    removed from the DOM, in order to avoid memory leaks that can be pretty common in `rxjs` without proper `Observable`\n    management\n-   Finally, inside of our mounting lifecycle hook:\n    -   We listen on modal state changes and fire off the action to open the modal anytime on first render using `take(1)`\n    -   We hook into the hot document observable and listen for `esc` keydown strokes to provide a bit of nice UX to close\n        the modal anytime it's open and the key is pressed\n\nWith all of our modal details in place, let's finally add the component to our `app.component.html` by replacing all the\nplaceholder markup with the modal selector:\n\n```html\n<app-modal></app-modal>\n```\n\nWith everything wired up, let's go ahead and punch in a `ng serve` in the terminal of your choice and navigate\nto `localhost:4200`. Clicking on either of the buttons now closes the modal, and if we take a look at our Redux DevTools\nin the console, we can see the actions being dispatched:\n\n[Our full Ngrx-based Tailwind modal](/images/tailwind-ngrx-modal/screen_grab.webm)\n\nYou'll see in the above screencast I interact with the modal in a few ways:\n\n1. Closing the modal via clicking either button\n2. Closing the modal by clicking on the background overlay, thanks to the `(click)` handler we added to the\n   overlay `div` that dispatches the close action\n3. Closing the modal by hitting the `esc` key\n\nWhile I've begun to shift to state-based layout UI/UX, there _are_ some limitations (with workarounds, of course) to\nusing state for things like modals, sliding navs, toast notifications, etc. One of the major benefits, in the case of\nthe modal, to using a DOM injection service is the ability to render dynamic content in your modal. This allows for us\nto pass any rendering component to the modal service, often times, and have it display in the content area. While we\n_could_ achieve this with a state-based approach, it's a bit more work that I have yet to find a solution I'm satisfied\nwith.\n\nIn the end, I love Tailwind and the sanity (at the cost of complexity) that NgRx brings to my Angular applications and\nwill continue to move forward offloading common UI interactions into layout state slices.\n\nUntil next time, friends!\n",
    "html": "<p>Coming off a blogging hiatus, I'm finally making my triumphant return. If you've been following my writing up until now,\nyou'll know that I'm primarily a .NET dude. Lately, I've been wanting to get back to my roots with Angular and see what\nI could build with everyone's new favorite CSS framework on the block, <a href=\"https://tailwindcss.com/\">Tailwind</a>. I'm going\nto be dialing back the length in content in place of smaller, bit-sized chunks in an effort to get back to helping the\ngeneral developer population with the lessons I've learned and things that I think are fire (as the kids say) in the\ncommunity. With that out of the way, let's dive in!</p>\n<h2>What is Tailwind?</h2>\n<p>If you're not familiar with Tailwind CSS, it's a utility-based CSS framework that I like to think of as an API into your\nCSS. This isn't exactly an article about the intricacies and deep diving into the framework, as there are plenty of\ngreat developers out there writing about Tailwind and why we all think it's the future of stylized development (\nseriously, once you start using, you'll most likely never want to go back). Tailwind is awesome due to it's flexibility\nand thin footprint (given you process your build correctly) it provides to our applications. With Tailwind, you'll\n<em>rarely</em> find yourself writing custom CSS and if you have a need for such, you can always include it as\na <a href=\"https://tailwindcss.com/docs/adding-new-utilities\">separate utility</a> for reusability purposes.</p>\n<p>Bottom line, Tailwind is amazing and an excellent tool to add to any developer's tool belt.</p>\n<blockquote>\n<p>Disclaimer: I pay for <a href=\"https://tailwindui.com/\">Tailwind UI</a> because I love the components that Adam Wathan and the\nTailwind team have put together. I would recommend anyone that loves Tailwind to check it out, but for the purposes of\nour demo here, we'll only be using the publicly available free components.</p>\n</blockquote>\n<h2>Modal components</h2>\n<p>Often times (read: every other sprint), it's helpful to add a bit of pizazz to our frontend application messaging in the\nform of modals that display handy bits of information for our users. While we <em>could</em> use an out-of-the-box modal\ncomponent using a styling library like <a href=\"https://material.angular.io/\">Angular Material</a>\nor <a href=\"https://getbootstrap.com/\">Bootstrap</a>, luckily for us, Tailwind UI offers a set\nof <a href=\"https://tailwindui.com/components/application-ui/overlays/modals\">awesomely styled modal components</a> ready for use.\nWe'll be using the free modal component here to quickly prototype our app modal that we could potentially use throughout\nour site.</p>\n<h2>What we'll build</h2>\n<p>Getting started, let's run through the list of what we'll be building and the tools we'll utilize as we embark on our\nmodal-based journey:</p>\n<ul>\n<li>We'll utilize Tailwind as our style provider to give our modal a modern look and feel</li>\n<li>Instead of using an injectable service to dynamically render DOM that contains our modal markup and content using\nsomething like Angular's <a href=\"https://angular.io/api/core/Renderer2\">Renderer2</a>, we'll lean on a flux-based state approach\nusing <a href=\"https://ngrx.io\">NgRx</a> to help us manage the displaying of our modal with custom content (more on this in a\nminute)</li>\n<li>Using a state-based approach, we'll expose actions that will allow any of our components to call into the modal and\ndisplay it based on any set of criteria</li>\n</ul>\n<p>With our approach lined out, let's defer to the second bullet point of the aforementioned list.</p>\n<h2>Using state in place of rendering</h2>\n<p>While it might be tempting to take on a dependency to render modal's within our application, that approach can bring\nalong quite a bit of unnecessary JavaScript and CSS that is most likely over engineered for our simple use cases.\nAnother popular approach is to write our own custom rendering services that inject DOM directly into the rendered\nmarkup; this is a popular homegrown solution with many articles and example repositories available to pull from. I find\noften times that these solutions can be a bit cumbersome with quite a few moving pieces to keep track and once again,\nquite frankly, feel a bit over engineered. While I'm quite positive someone much smarter than myself has an excellent\ncounterpoint to this, I fall in the camp of <em>shove all your application logic into flux actions</em> and it only seemed\nnatural to have my components like modals, slide overs, dropdowns, menus, etc. fit into that bill as well.</p>\n<p>With our sermon out of the way, let's get into some code. At any point, you can always refer to\nthe <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-io-blog-samples/tree/main/projects/ngrx-tailwind-modal\">source code</a>\non my GitHub for reference.</p>\n<h2>Getting started</h2>\n<p>While I'm using an Angular workspace in the example project, this all applies to existing single project workspaces as\nwell. Let's spin up a new application using your terminal of choice:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> new</span><span style=\"color:#C98A7D\"> ngrx-tailwind-modal</span></span></code></pre></figure>\n<blockquote>\n<p>I'm using Angular version 11.2.5, which fortunately for us, the Angular team has included PostCSS into the build\nprocessor allowing us to natively install Tailwind without explicitly installing it's dependencies</p>\n</blockquote>\n<p>With our project in place, let's go ahead and install Tailwind (assuming you're using Angular v11.2 or greater):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C99076\"> --save-dev</span><span style=\"color:#C98A7D\"> tailwindcss</span></span></code></pre></figure>\n<p>and if you're using yarn:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">yarn</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tailwindcss</span></span></code></pre></figure>\n<p>I'm using CSS in the example below, so we need to add the Tailwind utilities to our global styles as well:</p>\n<h4>styles.css</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#5DA994\">@tailwind</span><span style=\"color:#80A665\"> base</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">@tailwind</span><span style=\"color:#80A665\"> components</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">@tailwind</span><span style=\"color:#80A665\"> utilities</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>If you're using another CSS library, checkout the <a href=\"https://tailwindcss.com/docs/installation\">docs</a> to get started. I've\nopted to use just good ole fashioned CSS here since I won't be writing any custom styles myself and have no need to\nprocess CSS files during build time.</p>\n<p>With Tailwind in place, let's go ahead and add NgRx to our dependencies:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C98A7D\"> @ngrx/store</span><span style=\"color:#C99076\"> --save</span></span></code></pre></figure>\n<p>and for yarn</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">yarn</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> @ngrx/store</span></span></code></pre></figure>\n<p>Optionally, you can install NgRx dev tools as well to assist with debugging, but for our simple use case, it's not\nnecessary. With our required dependencies in place, let's go ahead and generate a new modal component. Go ahead and <code>cd</code>\ninto your project directory and run the Angular schematic to spin up a new component:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> c</span><span style=\"color:#C98A7D\"> modal</span><span style=\"color:#C99076\"> --skip-tests</span></span></code></pre></figure>\n<p>We'll add the <code>--skip-tests</code> flag for now as we won't be unit testing our modal. After our schematic has run, go ahead\nand open up <code>modal.component.html</code> and let's replace the markup with Tailwind's free modal component HTML:</p>\n<h3>modal.component.html</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- This example requires Tailwind CSS v2.0+ --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">fixed inset-0 z-10 overflow-y-auto</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    aria-labelledby</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">modal-title</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    role</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">dialog</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    aria-modal</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!--</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Background overlay, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        >&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- This element is to trick the browser into centering the modal contents. --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">span</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">hidden sm:inline-block sm:h-screen sm:align-middle</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            >&#x26;</span><span style=\"color:#C99076\">#8203;</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">span</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!--</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Modal panel, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sm:flex sm:items-start</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    ></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                        &#x3C;!-- Heroicon name: outline/exclamation --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">svg</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">h-6 w-6 text-red-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            xmlns</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">http://www.w3.org/2000/svg</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            fill</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">none</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            viewBox</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">0 0 24 24</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            stroke</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">currentColor</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#4D9375\">path</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-linecap</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">round</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-linejoin</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">round</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-width</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">2</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                d</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">svg</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">h3</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-lg font-medium leading-6 text-gray-900</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">modal-title</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                            Deactivate account</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">h3</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-sm text-gray-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                Are you sure you want to deactivate your</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                account? All of your data will be permanently</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                removed. This action cannot be undone.</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                    Deactivate</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:ml-3 sm:mt-0 sm:w-auto sm:text-sm</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                    Cancel</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>While I've just copy pasta'd over the direct HTML component, using Tailwind it's straight forward to replace markup\nverbiage, button text, and custom brand styles easily into our components using a few simple <code>@Input()</code> props on\nour <code>modal.component.ts</code> class in combination with some <code>[ngClass]</code> directives sprinkled throughout our HTML. I'll leave\nthat extensibility feat as an exercise for the reader.</p>\n<p>With our modal markup in place and our component brought in to our <code>app.module.ts</code>'s <code>declarations</code> array, let's go\nahead add write our NgRx actions, reducer, and a few helpers to help facilitate opening and closing the modal. First,\nlet's add a directory just beneath <code>/app</code> named <code>+state</code>. <code>+state</code> is a common directory name for a module's state\nactions, reducers, effects, selectors, and other NgRx semantics that helps provide a bit of convention when\nencapsulating modular state.</p>\n<p>With our directory in place, let's get started by adding a <code>layout.actions.ts</code> file to house our dispatchable actions to\nthe store with the following code:</p>\n<h4>layout.actions.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> createAction</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">openModal</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createAction</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">[Layout] Open modal</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">closeModal</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createAction</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">[Layout] Close modal</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>We don't include any <code>props</code> in our actions, but we could easily define a single action with a flag signaling the\nmodal's state - I fall in the camp of \"it's not that hard to write actions, just boilerplate-y\" so I prefer more, atomic\nactions rather than generic, composable actions. With our actions in place, let's go ahead and define our layout state\ninside a new file named <code>layout.reducer.ts</code>:</p>\n<h4>layout.reducer.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Action</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> createReducer</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> on</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#4D9375\"> *</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#BD976A\"> fromActions</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./layout.actions</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">layoutFeatureKey</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">layout</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> interface</span><span style=\"color:#5DA994\"> LayoutState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    modalIsOpen</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">initialState</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">LayoutState</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    modalIsOpen</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">appReducer</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createReducer</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    initialState</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    on</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">fromActions</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">openModal</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ...</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        modalIsOpen</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    })),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    on</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">fromActions</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">closeModal</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ...</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        modalIsOpen</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    })),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#80A665\">reducer</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">LayoutState</span><span style=\"color:#666666\"> | </span><span style=\"color:#CB7676\">undefined</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Action</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    appReducer</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>Again, this post <em>is not</em> meant to the de facto grimoire of implementing NgRx properly in your application. Given our\nscope, we'll use just a simple state implementation to facilitate our layout state that could easily be extended to\ninclude any number of layout specific concerns.</p>\n<p>Breaking down the code above, we:</p>\n<ul>\n<li>Define our layout feature slice with <code>LayoutState</code> that will serve as the source of truth for our current modal\ndisplaying</li>\n<li>Create a reducer to facilitate <em>what</em> our state should look like when the modal actions are dispatched</li>\n<li>Create an identifying <code>const</code> key to declare our layout feature slice with <code>layoutFeatureKey</code></li>\n</ul>\n<p>While we could easily set singular state on each reducer type to simply set the modal state according, as our\napplication grows, so will our need to only change single, or a handful at most, pieces of state at time. For these\ncases, we'll go ahead and add in a <code>...state</code> to shallow copy our current state as to not mutate any state that is not\nconcerned with the modal state.</p>\n<p>With our reducer in place, let's go ahead and add a selector to get the current modal state and provide multiple\ncomponents a single funnel into our state. Let's create a <code>layout.selectors.ts</code> file in our <code>+state</code> folder with the\nfollowing:</p>\n<h4>layout.selectors.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> createFeatureSelector</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> createSelector</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> LayoutState</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> layoutFeatureKey</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./layout.reducer</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">layoutFeatureSlice</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createFeatureSelector</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LayoutState</span><span style=\"color:#666666\">>(</span><span style=\"color:#BD976A\">layoutFeatureKey</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">selectModalStatus</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createSelector</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    layoutFeatureSlice</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">LayoutState</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">modalIsOpen</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>Within our selector, we define a feature selector to reference the <code>layout</code> slice of our composite state, and then\ncreate a selector to grab the modal state node. With our selector in place let's go ahead and create a facilitator to\nhelp shroud our store inner workings from our components so that we can create a layer of abstraction between the\ntechnical details of our application and the view layer that users ultimate see.</p>\n<blockquote>\n<p>This is known as the <a href=\"https://en.wikipedia.org/wiki/Facade_pattern\"><em>facade pattern</em></a> in software development, and\nwhile it is worth keeping in the back of your mind, it's a bit outside our scope for now. Checkout my (shameless plug)\npost on <a href=\"https://joeymckenzie.tech/blog/fluxor-blazor-part-1\">state management with Blazor</a> for a more in-depth\ndiscussion.</p>\n</blockquote>\n<p>Adding a state facade is entirely optional, and should not be taken as final truth - there are many reason to <em>not</em>\ninclude this service as it does trade some complexity and boilerplate-ness for a bit of dependency inversion. You're\nmore than welcome to facilitate your actions directly from your components as well.</p>\n<p>With the disclaimer out of the way, let's add a <code>layout.facade.ts</code> with the following:</p>\n<h4>layout.facade.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> select</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Store</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> LayoutState</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./layout.reducer</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#4D9375\"> *</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#BD976A\"> fromActions</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./layout.actions</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#4D9375\"> *</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#BD976A\"> fromSelectors</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./layout.selectors</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> LayoutFacade</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    modalState$</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">store</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">select</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">fromSelectors</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">selectModalStatus</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> store</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LayoutState</span><span style=\"color:#666666\">>)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    openModal</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">store</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">fromActions</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">openModal</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    closeModal</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">store</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">fromActions</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">closeModal</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        setTimeout</span><span style=\"color:#666666\">(()</span><span style=\"color:#666666\"> =></span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">openModal</span><span style=\"color:#666666\">(),</span><span style=\"color:#4C9A91\"> 1000</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our <code>layout.facade.ts</code>, as we can see, is nothing more than a scoped service (we don't include the <code>providedIn</code>\nconfiguration to <code>@Injectable()</code>) that pulls through our selectors and defines some methods wrapping our dispatcher that\nfires off the modal actions. Our <code>closeModal()</code> method also includes the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">setTimeout</span><span style=\"color:#666666\">(()</span><span style=\"color:#666666\"> =></span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">openModal</span><span style=\"color:#666666\">(),</span><span style=\"color:#4C9A91\"> 1000</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>This is solely for example purposes as to mimic the behavior of the Tailwind UI modal examples (closing a modal on the\nexample reopens the modal shortly after). This will save us some interaction with a button when testing out our modal.</p>\n<p>With our state ceremony out of the way, let's go ahead and wire up everything we need in our <code>app.module.ts</code></p>\n<h4>app.module.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NgModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> BrowserModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/platform-browser</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> BrowserAnimationsModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/platform-browser/animations</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> StoreModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> StoreDevtoolsModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store-devtools</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> LayoutFacade</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./+state</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> layoutFeatureKey</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> reducer</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./+state/layout.reducer</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> AppComponent</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./app.component</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ModalComponent</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./modal/modal.component</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">NgModule</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    declarations</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">AppComponent</span><span style=\"color:#666666\">, </span><span style=\"color:#BD976A\">ModalComponent</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    imports</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BrowserModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BrowserAnimationsModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        StoreModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forRoot</span><span style=\"color:#666666\">({ [</span><span style=\"color:#BD976A\">layoutFeatureKey</span><span style=\"color:#666666\">]: </span><span style=\"color:#BD976A\">reducer</span><span style=\"color:#666666\"> }),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        StoreDevtoolsModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">instrument</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            maxAge</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">25</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providers</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">LayoutFacade</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    bootstrap</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">AppComponent</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> AppModule</span><span style=\"color:#666666\"> {}</span></span></code></pre></figure>\n<p>We include the required NgRx modules using our <code>layoutFeatureKey</code> defined in our reducer file, include our Redux\nDevTools plugins and <code>LayoutFacade</code> service, and also include the <code>BrowserAnimationsModule</code> we'll use to add some nice\ntransitions to our modal for flare.</p>\n<p>Speaking of transitions, let's go ahead and add a few animations in our <code>modal.component.ts</code> to add the pleasing\nappearing/fading of the modal onto page. In our <code>modal.component.ts</code>, we'll add three simple animation attribute:</p>\n<ul>\n<li><code>@modalContainer</code></li>\n<li><code>@modalOverlay</code></li>\n<li><code>@modalContent</code></li>\n</ul>\n<p>Let's add each of the tags to our markup so that it resembles the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- This example requires Tailwind CSS v2.0+ --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    @modalContainer</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    *ngIf</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">(modalState$ | async) === true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">fixed inset-0 z-10 overflow-y-auto</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    aria-labelledby</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">modal-title</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    role</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">dialog</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    aria-modal</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!--</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Background overlay, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            @modalOverlay</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            (click)</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">onClose()</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        >&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- This element is to trick the browser into centering the modal contents. --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">span</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">hidden sm:inline-block sm:h-screen sm:align-middle</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            >&#x26;</span><span style=\"color:#C99076\">#8203;</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">span</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!--</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Modal panel, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            @modalContent</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sm:flex sm:items-start</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    ></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                        &#x3C;!-- Heroicon name: outline/exclamation --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">svg</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">h-6 w-6 text-red-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            xmlns</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">http://www.w3.org/2000/svg</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            fill</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">none</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            viewBox</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">0 0 24 24</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            stroke</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">currentColor</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#4D9375\">path</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-linecap</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">round</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-linejoin</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">round</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-width</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">2</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                d</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">svg</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">h3</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-lg font-medium leading-6 text-gray-900</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">modal-title</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                            Deactivate account</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">h3</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-sm text-gray-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                Are you sure you want to deactivate your</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                account? All of your data will be permanently</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                removed. This action cannot be undone.</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    (click)</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">onClose()</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                    Deactivate</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    (click)</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">onClose()</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:ml-3 sm:mt-0 sm:w-auto sm:text-sm</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                    Cancel</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>We'll use each of the animation attributes to drive the transition animations\nusing <a href=\"https://angular.io/guide/transition-and-triggers#parent-child-animations\">parent-child animations</a>.</p>\n<blockquote>\n<p>There's lots of great posts that are much more in-depth about Angular's transition library, and I'll once again defer\nthat as an exercise for the reader.</p>\n</blockquote>\n<p>With our component markup in place, let's add the inner workings of our <code>modal.component.ts</code>:</p>\n<h4>modal.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    trigger</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    transition</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    query</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    animateChild</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    state</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    style</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    animate</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    group</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/animations</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> fromEvent</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Subject</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> filter</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> take</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> takeUntil</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> withLatestFrom</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> LayoutFacade</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../+state</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">femfit-modal</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./modal.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    animations</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        trigger</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">modalContainer</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">:enter</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                group</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    query</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@modalOverlay</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, </span><span style=\"color:#80A665\">animateChild</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    query</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@modalContent</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, </span><span style=\"color:#80A665\">animateChild</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ]),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">:leave</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                group</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    query</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@modalOverlay</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, </span><span style=\"color:#80A665\">animateChild</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    query</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@modalContent</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, </span><span style=\"color:#80A665\">animateChild</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]),</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Background overlay, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   From: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   To: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   From: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   To: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        trigger</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">modalOverlay</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            state</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">void</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                style</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    opacity</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            state</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">*</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                style</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    opacity</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">:enter</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span><span style=\"color:#80A665\">animate</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">300ms ease-out</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)]),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">:leave</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span><span style=\"color:#80A665\">animate</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">100ms ease-in</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]),</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Modal panel, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   To: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   From: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        trigger</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">modalContent</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            state</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">void</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                style</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    opacity</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    transform</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">scale(0.95)</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            state</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">*</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                style</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    opacity</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    transform</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">scale(1)</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">:enter</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span><span style=\"color:#80A665\">animate</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">300ms ease-out</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)]),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">:leave</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span><span style=\"color:#80A665\">animate</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">200ms ease-in</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> ModalComponent</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnInit</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    modalState$</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">layoutFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">modalState$</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> layoutFacade</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">LayoutFacade</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#BD976A\"> unsubscribe$</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#80A665\"> Subject</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnInit</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // When the component is mounted, fire up the modal if closed taking the first emission only</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">modalState$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">take</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">)).</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">isOpen</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">isOpen</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">                this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">layoutFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">openModal</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Register a stream to listen for escape keydown events to close the modal</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        fromEvent</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">document</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">keydown</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                takeUntil</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">unsubscribe$</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                filter</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    (</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                        event</span><span style=\"color:#CB7676\"> instanceof</span><span style=\"color:#5DA994\"> KeyboardEvent</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                        event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">code</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Escape</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                withLatestFrom</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">modalState$</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            )</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">(([</span><span style=\"color:#BD976A\">_</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> modalIsOpen</span><span style=\"color:#666666\">])</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">modalIsOpen</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">                    this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">layoutFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">closeModal</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    onClose</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">layoutFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">closeModal</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Let's breakdown what our modal component is doing behind the scenes:</p>\n<ul>\n<li>First, we define three animation <code>trigger</code>s that will run when our component is rendered into and out of the DOM (I've\nloosely translated the suggested Tailwind transition classes that should apply to the modal)\n<ul>\n<li>Our first <code>trigger</code> is applied to the wrapping <code>div</code> element that houses the entirety of our modal component, and\nit's job is to coordinate running the nested child transitions when it is rendered into/out of the DOM (driven by\nthe <code>*ngIf=\"(modalState$ | async) === true\"</code> directive) with the assistance of the <code>group</code> and <code>query</code> Angular\nanimation helper methods to signify which child transitions to run</li>\n<li>Our second <code>trigger</code> is the fading in and out of the background overlay using a simple opacity transition</li>\n<li>Our third <code>trigger</code> is the displaying of the modal content using a combination of opacity and scaling transition\nanimations</li>\n<li>You'll notice each <code>trigger</code> transitions using the <code>:enter</code>/<code>:leave</code> aliases which represent the transitioning\nof <code>void</code> state (i.e. not in the rendered DOM), to <code>*</code> state (i.e. any state existing in the markup)</li>\n</ul>\n</li>\n<li>Next, we pull through a reference from the state facade to the current modal status with <code>modalStatus$</code> observable\nthat listens for values based on our selector stream</li>\n<li>We define an emission <code>Subject</code> to help facilitate the closing of our streams when our component is destroyed, i.e.\nremoved from the DOM, in order to avoid memory leaks that can be pretty common in <code>rxjs</code> without proper <code>Observable</code>\nmanagement</li>\n<li>Finally, inside of our mounting lifecycle hook:\n<ul>\n<li>We listen on modal state changes and fire off the action to open the modal anytime on first render using <code>take(1)</code></li>\n<li>We hook into the hot document observable and listen for <code>esc</code> keydown strokes to provide a bit of nice UX to close\nthe modal anytime it's open and the key is pressed</li>\n</ul>\n</li>\n</ul>\n<p>With all of our modal details in place, let's finally add the component to our <code>app.component.html</code> by replacing all the\nplaceholder markup with the modal selector:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">app-modal</span><span style=\"color:#666666\">>&#x3C;/</span><span style=\"color:#4D9375\">app-modal</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>With everything wired up, let's go ahead and punch in a <code>ng serve</code> in the terminal of your choice and navigate\nto <code>localhost:4200</code>. Clicking on either of the buttons now closes the modal, and if we take a look at our Redux DevTools\nin the console, we can see the actions being dispatched:</p>\n<p><a href=\"/images/tailwind-ngrx-modal/screen_grab.webm\">Our full Ngrx-based Tailwind modal</a></p>\n<p>You'll see in the above screencast I interact with the modal in a few ways:</p>\n<ol>\n<li>Closing the modal via clicking either button</li>\n<li>Closing the modal by clicking on the background overlay, thanks to the <code>(click)</code> handler we added to the\noverlay <code>div</code> that dispatches the close action</li>\n<li>Closing the modal by hitting the <code>esc</code> key</li>\n</ol>\n<p>While I've begun to shift to state-based layout UI/UX, there <em>are</em> some limitations (with workarounds, of course) to\nusing state for things like modals, sliding navs, toast notifications, etc. One of the major benefits, in the case of\nthe modal, to using a DOM injection service is the ability to render dynamic content in your modal. This allows for us\nto pass any rendering component to the modal service, often times, and have it display in the content area. While we\n<em>could</em> achieve this with a state-based approach, it's a bit more work that I have yet to find a solution I'm satisfied\nwith.</p>\n<p>In the end, I love Tailwind and the sanity (at the cost of complexity) that NgRx brings to my Angular applications and\nwill continue to move forward offloading common UI interactions into layout state slices.</p>\n<p>Until next time, friends!</p>"
  },
  "_id": "2021/build-a-tailwind-modal-with-angular-and-ngrx.md",
  "_raw": {
    "sourceFilePath": "2021/build-a-tailwind-modal-with-angular-and-ngrx.md",
    "sourceFileName": "build-a-tailwind-modal-with-angular-and-ngrx.md",
    "sourceFileDir": "2021",
    "contentType": "markdown",
    "flattenedPath": "2021/build-a-tailwind-modal-with-angular-and-ngrx"
  },
  "type": "Post",
  "url": "/blog/2021/build-a-tailwind-modal-with-angular-and-ngrx"
}