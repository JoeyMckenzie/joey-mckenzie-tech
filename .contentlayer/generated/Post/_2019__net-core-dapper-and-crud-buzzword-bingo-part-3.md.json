{
  "title": "Clean architecture, Dapper, MediatR, and buzzword bingo (part 3)",
  "description": "Testing code with xUnit, Dapper, and Shouldly.",
  "pubDate": "2019-11-19T08:00:00.000Z",
  "category": ".NET",
  "heroImage": "/images/net-core-dapper-and-crud-series/part-3/shouldly-xunit-meme.jpeg",
  "draft": false,
  "keywords": [
    ".net",
    "c#",
    "dapper",
    "mediatr"
  ],
  "body": {
    "raw": "\nTwo layers down, two to go. While we've made some great progress in\nour [last post](/images/net-core-dapper-and-crud-buzzword-bingo-part-2/), I wanted to carve out at least one section in\nour series discussing testing our application. So far, we've built our domain and persistence layers, but we have yet to\nactually implement any transactional processes that require the higher up layers that will run the code we've written so\nfar to confirm its correctness. Rather than wait until we've built out our API layer to begin testing our implementation\nof the data layer (that would be more integration testing, one could argue), a better solution would be to take some\ntime to write some simple and quick unit tests around our persistence layer. With our data layer fully unit tested, we\nwon't have to wait to have an API to interact with via Postman, or some other application testing tool, to ensure he\ncode we have so far is giving us the result sets we expect. With our code unit tested in this fashion, we can use said\ntests as contracts for our expectation of each operation within our repositories, and grant ourself the ability to\nsafely refactor without fear of unknowingly breaking the application (at least within the persistence layer).\n\nFeel free to checkout the code in this\npost [here](https://github.com/JoeyMckenzie/Dappery/tree/master/tests/Dappery.Data.Tests). Before we jump into writing\nthe unit tests, let's discuss the tools, approach, and mindset we'll use for writing our tests in each layer of our\napplication (excluding our domain layer, as there is really not much logic there by design):\n\n-   Within each layer, we'll use a combination of [xUnit](https://xunit.net/)\n    and [Shouldly](https://github.com/shouldly/shouldly), my preferred unit test and assertion frameworks, respectively\n-   In our `Dappery.Data` project, we'll write units tests around each operation in our `BeerRepository`\n    and `BreweryRepository` classes, utilizing the seeded database we setup for our in-memory SQLite database provider in\n    our `UnitOfWork` class\n-   In our `Dappery.Core` project, which contains all of our business and cross-cutting concern logic, we'll again use\n    xUnit and Shouldly, with unit tests surrounding each query/command action that we will be sending to our MediatR\n    request factory to create the corresponding handlers, as well as verifying proper mappings and responses in each\n    scenario\n-   In our `Dappery.Api` project, we'll write a suite of integration tests that will act as our end-to-end spec,\n    effectively testing all of our request transactions from API interface to database interaction, and everything\n    inbetween (creating a _use case_ for our application)\n\n### Testing our Persistence Layer\n\nBefore we jump into writing our unit tests for our `Dappery.Data` project, we'll setup just a bit of test infrastructure\ncode that will assist us with creating an in-memory SQLite database to use within the scope of each test and setup our\ndependencies that our repositories will need. Some of you might be asking the question, however, why use an in-memory\ndatabase to test, and not the actual database our application will be using? Without launching into a diatribe about\nwhich method is best for our application, let me start by saying that _either_ approach is viable; we just so happen to\nbe using the in-memory database for ease of testing and project bootstrapping. There are perfectly valid reasons for\nusing both approaches, for example:\n\n-   Within an enterprise environment, one of your team's APIs may contain one, or more, dependencies on another team's API\n    and the persisted data it utilizes, which is good fit for testing against a live non-production (production in the\n    case of live smoke testing) database consumed by all teams\n-   Utilizing a common datastore between applications can, however, create a brittle dependency on the physical _data_ you\n    are asserting against - should someone remove an expected record from the database that your dependent API returns,\n    our tests will break (if we are not mocking the API calls)\n-   In-memory test databases are great for internal application request transactions and execution paths that have little\n    to no external API dependency - our data can be seeded, manipulated, and scrubbed/removed inbetween tests without fear\n    of another manager yelling at us for deleting test data\n-   Although, with the introduction of multiple API dependencies, mocking entire databases and tables from dependent APIs\n    can quickly become unwieldy and introduce complexity in the form of data management that may not be particularly your\n    API's domain concern\n\nSo, what's the answer to our self imposed rhetorical question about which method to use? A good ole fashioned, **it\ndepends**. For our use case, we don't have any external APIs that we rely on and no data dependency that is out of our\ndomain, so we'll roll our own in-memory database that will be seeded, modified, and torn down in between each test to\nensure a fresh test fixture. Since we'll be using xUnit, we can leverage the testing library's disposable interfaces,\nshared contexts, and dependency injection to write our unit test in a clean, simple fashion. Now, since this is not\n_really_ a detailed how-to article with xUnit, I'll quickly gloss over some of our infrastructure code that will form\nthe basis of each unit test class that we'll write, utilizing the disposable paradigm xUnit encourages us to use, and\nthen we'll jump into each test by repository and action.\n\nFor our unit tests, we'll be heavily relying on xUnit's concept\nof [collection fixtures](https://xunit.net/docs/shared-context). From the xUnit documentation for collection fixtures:\n\n> When to use: when you want to create a single test context and share it among tests in several test classes, and have\n> it cleaned up after all the tests in the test classes have finished.\n\nIn essence, an xUnit collection fixture allows us to share objects, which our case is the in-memory database, between\nunit test classes. While our MediatR request handlers will only have a single Unit of Work dependency, collection\nfixures really shine when we're testing classes with several dependencies that we might want to spread across multiple\nclass files to keep our test domains of a single responsibility. I like to think of a collection fixture as the unit\ntest bootstrapping file, similar to a `Startup.cs` file in an ASP.NET Core web project. In our collection fixture, we'll\nbootstrap our in-memory database with seeded data and supply implementations for our Unit of Work and repository\nclasses. Since talk is cheap, let's go ahead and start setting things up by creating a unit test project for\nour `Dappery.Data` project within our `tests` folder:\n\n```\n~/Dappery/tests$ dotnet new xunit -n Dappery.Data.Tests\n~/Dappery/tests$ dotnet sln ../Dappery.sln add tests/Dappery.Data.Tests/Dappery.Data.Tests.csproj\n```\n\nAgain, I'm one of those weirdos that prefers the command line, so feel free to add the project via your IDE if you want.\nNext, we'll reference our `Dappery.Data` project in our new test project, which just boils down to adding the package\nreference in our `Dappery.Data.Tests.csproj` file:\n\n```xml\n\n<ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Dappery.Core\\Dappery.Core.csproj\"/>\n    <ProjectReference Include=\"..\\..\\src\\Dappery.Data\\Dappery.Data.csproj\"/>\n</ItemGroup>\n```\n\nNotice we've also referenced our `Dappery.Core` project, which we'll see later that we'll require this dependency to\naccess our `IUnitOfWork` and repository interfaces. Let's go ahead and add a `DataCollectionFixture.cs` class within\nour `tests/Dappery.Data.Tests` project that will serve as our central collection fixture for our persistence tests.\n\n### DataCollectionFixture.cs\n\n```csharp\nnamespace Dappery.Data.Tests\n{\n    using Xunit;\n\n    [CollectionDefinition(\"DataCollectionFixture\")]\n    public class DataCollectionFixture : ICollectionFixture<TestFixture>\n    {\n    }\n}\n```\n\nNothing special, mostly just boilerplate code that tells xUnit how to define our collection fixture, which we'll\nimplement with a `TestFixture.cs` file in the same directory:\n\n### TestFixture.cs\n\n```csharp\nnamespace Dappery.Data.Tests\n{\n    using System;\n    using Core.Data;\n\n    public class TestFixture : IDisposable\n    {\n        protected TestFixture()\n        {\n            UnitOfWork = new UnitOfWork(null);\n        }\n\n        protected IUnitOfWork UnitOfWork { get; }\n\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n\n        private void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                UnitOfWork.Dispose();\n            }\n        }\n    }\n}\n```\n\nAgain, nothing too complicated here. We simply define our `TestFixture` which all unit tests will use as a base, and\nnote that this class inherits from the `IDisposable` interface - this is where the xUnit magic happens. With this\ninheritance, our `TestFixture` class will be disposed of inbetween unit test runs, tearing down our database (\nbootstrapped through our `UnitOfWork`), and ensuring we have a fresh test fixture clean from persisted changes made in\nprevious tests. We define a read-only `UnitOfWork` property that each of our inheritors will be able to access, and\nfinish off with a simple resource clean up disposable implementation that will be utilized by xUnit when it disposes of\nour `TestFixture` between test runs. Notice that we instantiate our `UnitOfWork` using the implementation defined in\nour `Dappery.Data` project, which we setup to accept a nullable `string?` value that, when `null`, initializes a seeded\nin-memory SQLite database for us that we'll assert against during our unit tests.\n\nWith our initial infrastructure out of the way, let's go ahead and create a `BeerRepositoryTest.cs` file and write our\nfirst test case:\n\n### BeerRepositoryTest.cs\n\n```csharp\nnamespace Dappery.Data.Tests\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Domain.Entities;\n    using Shouldly;\n    using Xunit;\n\n    public class BeerRepositoryTest : TestFixture\n    {\n        [Fact]\n        public async Task GetAllBeers_WhenInvokedAndBeersExist_ReturnsValidListOfBeers()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n\n            // Act\n            var beers = (await unitOfWork.BeerRepository.GetAllBeers()).ToList();\n            unitOfWork.Commit();\n\n            // Assert\n            beers.ShouldNotBeNull();\n            beers.ShouldBeOfType<List<Beer>>();\n            beers.ShouldNotBeEmpty();\n            beers.All(b => b.Brewery != null).ShouldBeTrue();\n            beers.All(b => b.Brewery.Address != null).ShouldBeTrue();\n            beers.All(b => b.Brewery.Address.BreweryId == b.Brewery.Id).ShouldBeTrue();\n            beers.ShouldContain(b => b.Name == \"Hexagenia\");\n            beers.FirstOrDefault(b => b.Name == \"Hexagenia\")?.BeerStyle.ShouldBe(BeerStyle.Ipa);\n            beers.ShouldContain(b => b.Name == \"Widowmaker\");\n            beers.FirstOrDefault(b => b.Name == \"Widowmaker\")?.BeerStyle.ShouldBe(BeerStyle.DoubleIpa);\n            beers.ShouldContain(b => b.Name == \"Hooked\");\n            beers.FirstOrDefault(b => b.Name == \"Hooked\")?.BeerStyle.ShouldBe(BeerStyle.Lager);\n            beers.ShouldContain(b => b.Name == \"Pale Ale\");\n            beers.FirstOrDefault(b => b.Name == \"Pale Ale\")?.BeerStyle.ShouldBe(BeerStyle.PaleAle);\n            beers.ShouldContain(b => b.Name == \"Hazy Little Thing\");\n            beers.FirstOrDefault(b => b.Name == \"Hazy Little Thing\")?.BeerStyle.ShouldBe(BeerStyle.NewEnglandIpa);\n        }\n    }\n}\n```\n\nAlright, let's breakdown this test:\n\n-   We're using the AAA pattern - Arrange, Act, Assert - which you'll see me make extensive use of throughout our projects\n    as it encourages us to keep out unit tests _simple_ and not too complex (as they should be, massive and complicated\n    unit test cases are a code smell)\n-   We're using the new `using` syntax for disposable classes that shipped with C# 8.0 to grab a reference to\n    our `UnitOfWork` and ensure its resources it creates are properly disposed of once our test is finished - this\n    behavior mimics how we'll inject a scoped instance in our API layer using built-in ASP.NET Core dependency injection\n-   We commit our transactions within our unit of work, as our UoW begins a transaction when initialized - while not\n    entirely necessary for our in-memory unit test database, it's always a good practice to end our transactions even the\n    case of read-only queries as to not keep lingering connections that may come back to bite us\n-   We dispose of _both_ our `UnitOfWork`, once the reference falls out of scope, and the collection test fixture; while\n    not entirely necessary, it's a good practice to get into (disposing resources at each level)\n-   We make use of `async`/`await` to allow for blocking until we receive a response from our in-memory database before\n    continuing onto our assertions\n-   We use the `Shouldly` object extension methods to assert the various properties, types, and collection objects we're\n    expecting in the response\n-   `Shouldly` natively supports use of LINQ and expression predicates, making assertions fluid and easy to read - one of\n    the many reason I _love_ the library\n\nIf we run this unit test, using either the Visual Studio/Rider test runner, or running `dotnet test`, we'll see that\nthis test passes. If we step through this code via a debug session, we can see exactly what is returned within our\nrepository, each query executing and what its result yields, etc. I'll leave that as an exercise for the reader, but\nalways worth while to validate that our unit tests are truly yielding the results we expect. Let's add an empty test\nfor `GetAllBeers()` and a couple of tests for our `GetBeerById()` repository methods:\n\n```csharp\n// ...previous tests\n\n[Fact]\npublic async Task GetAllBeers_WhenNoBeersExist_ReturnsEmptyListOfBeers()\n{\n    // Arrange, remove all the beers from our database\n    using var unitOfWork = UnitOfWork;\n    await unitOfWork.BeerRepository.DeleteBeer(1);\n    await unitOfWork.BeerRepository.DeleteBeer(2);\n    await unitOfWork.BeerRepository.DeleteBeer(3);\n    await unitOfWork.BeerRepository.DeleteBeer(4);\n    await unitOfWork.BeerRepository.DeleteBeer(5);\n\n    // Act\n    var beers = (await unitOfWork.BeerRepository.GetAllBeers()).ToList();\n    unitOfWork.Commit();\n\n    // Assert\n    beers.ShouldNotBeNull();\n    beers.ShouldBeOfType<List<Beer>>();\n    beers.ShouldBeEmpty();\n}\n\n[Fact]\npublic async Task GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n\n    // Act\n    var beer = await unitOfWork.BeerRepository.GetBeerById(1);\n    unitOfWork.Commit();\n\n    // Assert, validate a few properties\n    beer.ShouldNotBeNull();\n    beer.ShouldBeOfType<Beer>();\n    beer.Name.ShouldBe(\"Hexagenia\");\n    beer.BeerStyle.ShouldBe(BeerStyle.Ipa);\n    beer.Brewery.ShouldNotBeNull();\n    beer.Brewery.Name.ShouldBe(\"Fall River Brewery\");\n    beer.Brewery.Address.ShouldNotBeNull();\n    beer.Brewery.Address.City.ShouldBe(\"Redding\");\n}\n\n[Fact]\npublic async Task GetBeerById_WhenInvokedAndBeerDoesNotExist_ReturnsNull()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n\n    // Act\n    var beer = await unitOfWork.BeerRepository.GetBeerById(10);\n    unitOfWork.Commit();\n\n    // Assert, validate a few properties\n    beer.ShouldBeNull();\n}\n```\n\nNothing too complex here, just some simple positive/negative test cases for finding a beer given an ID from the caller.\nOne thing to note is in our `GetAllBeers_WhenNoBeersExist_ReturnsEmptyListOfBeers` method, we use the `unitOfWork` to\nremove all the beers in our test database (probably not the most efficient way, quick and dirty for now), and assert\nagainst the empty list that gets returned. While this might not seem too interesting, the beauty is that xUnit,\nalongside the infrastructure code we setup, will clean up this modified database that we've 'dirtied' the context of,\nand create an entirely fresh database on the next run, disregarding any transactional changes we made in a previous\ntest. We simply retrieve the beer within our test database and assert the properties `Should` be what we expect. One of\nthe reasons I prefer using Shouldly is the response messages we receive when a test fails. Let's take a look at an\nexample be changing our assertion of our `GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer()` test method above to\nexpect an incorrect beer name:\n\n```csharp\n[Fact]\npublic async Task GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n\n    // Act\n    var beer = await unitOfWork.BeerRepository.GetBeerById(1);\n    unitOfWork.Commit();\n\n    // Assert, validate a few properties\n    beer.ShouldNotBeNull();\n    beer.ShouldBeOfType<Beer>();\n    beer.Name.ShouldBe(\"A beer that doesn't exist\"); // This beer was NOT seeded in our database\n    beer.BeerStyle.ShouldBe(BeerStyle.Ipa);\n    beer.Brewery.ShouldNotBeNull();\n    beer.Brewery.Name.ShouldBe(\"Fall River Brewery\");\n    beer.Brewery.Address.ShouldNotBeNull();\n    beer.Brewery.Address.City.ShouldBe(\"Redding\");\n}\n```\n\nIf we run this run this test, we see the following in the console from Shouldly:\n\n```\nDappery.Data.Tests.BeerRepositoryTest.GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer:\n    Outcome: Failed\n    Error Message:\n    Shouldly.ShouldAssertException : beer.Name\n    should be\n\"A beer that doesn't exist\"\n    but was\n\"Hexagenia\"\n    difference\nDifference     |  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n               | \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/\nIndex          | 0    1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   ...\nExpected Value | A    \\s   b    e    e    r    \\s   t    h    a    t    \\s   d    o    e    s    n    '    t    \\s   e    ...\nActual Value   | H    e    x    a    g    e    n    i    a                                                                ...\nExpected Code  | 65   32   98   101  101  114  32   116  104  97   116  32   100  111  101  115  110  39   116  32   101  ...\nActual Code    | 72   101  120  97   103  101  110  105  97                                                               ...\n\nDifference     |       |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n               |      \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/\nIndex          | ...  4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24\nExpected Value | ...  e    r    \\s   t    h    a    t    \\s   d    o    e    s    n    '    t    \\s   e    x    i    s    t\nActual Value   | ...  g    e    n    i    a\nExpected Code  | ...  101  114  32   116  104  97   116  32   100  111  101  115  110  39   116  32   101  120  105  115  116\nActual Code    | ...  103  101  110  105  97\n```\n\nOf the many reasons I love using Shouldly in all my unit test projects, this is one of my favorites. Shouldly points out\nexactly what it expected, what it received, and the index differences in the string. Now, this isn't an infomercial on\ntrying to sell you on using Shouldly, but informative failure messages like this can help you quickly identify\ninconsistencies in your code and fix things at a faster rate than traditional assertion frameworks. Let's finish out\nour `BeerRepositoryTest.cs` file by adding the unit tests that will exercise our database commands for our create,\nupdate, and delete operations:\n\n```csharp\n// ...previous query tests\n\n[Fact]\npublic async Task CreateBeer_WhenBeerIsValid_ReturnsNewlyInsertedBeer()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n    var beerToInsert = new Beer\n    {\n        Name = \"Lazy Hazy\",\n        CreatedAt = DateTime.UtcNow,\n        UpdatedAt = DateTime.UtcNow,\n        BreweryId = 1,\n        BeerStyle = BeerStyle.NewEnglandIpa\n    };\n\n    // Act\n    var beerId = await unitOfWork.BeerRepository.CreateBeer(beerToInsert);\n    var insertedBeer = await unitOfWork.BeerRepository.GetBeerById(beerId);\n    unitOfWork.Commit();\n\n    insertedBeer.ShouldNotBeNull();\n    insertedBeer.ShouldBeOfType<Beer>();\n    insertedBeer.Brewery.ShouldNotBeNull();\n    insertedBeer.Brewery.Address.ShouldNotBeNull();\n    insertedBeer.Brewery.Beers.ShouldNotBeEmpty();\n    insertedBeer.Brewery.Beers.Count.ShouldBe(4);\n    insertedBeer.Brewery.Beers.ShouldContain(b => b.Id == insertedBeer.Id);\n    insertedBeer.Brewery.Beers.FirstOrDefault(b => b.Id == insertedBeer.Id)?.Name.ShouldBe(beerToInsert.Name);\n}\n\n[Fact]\npublic async Task UpdateBeer_WhenBeerIsValid_ReturnsUpdateBeer()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n    var beerToUpdate = new Beer\n    {\n        Id = 1,\n        Name = \"Colossus Imperial Stout\",\n        UpdatedAt = DateTime.UtcNow,\n        BeerStyle = BeerStyle.Stout,\n        BreweryId = 1,\n    };\n\n    // Act\n    await unitOfWork.BeerRepository.UpdateBeer(beerToUpdate);\n    var updatedBeer = await unitOfWork.BeerRepository.GetBeerById(beerToUpdate.Id);\n    unitOfWork.Commit();\n\n    updatedBeer.ShouldNotBeNull();\n    updatedBeer.ShouldBeOfType<Beer>();\n    updatedBeer.Brewery.ShouldNotBeNull();\n    updatedBeer.Brewery.Address.ShouldNotBeNull();\n    updatedBeer.Brewery.Beers.ShouldNotBeEmpty();\n    updatedBeer.Brewery.Beers.Count.ShouldBe(3);\n    updatedBeer.Brewery.Beers.ShouldContain(b => b.Id == beerToUpdate.Id);\n    updatedBeer.Brewery.Beers.ShouldNotContain(b => b.Name == \"Hexagenia\");\n    updatedBeer.Brewery.Beers.FirstOrDefault(b => b.Id == beerToUpdate.Id)?.Name.ShouldBe(beerToUpdate.Name);\n}\n\n[Fact]\npublic async Task DeleteBeer_WhenBeerExists_RemovesBeerFromDatabase()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n    (await unitOfWork.BeerRepository.GetAllBeers())?.Count().ShouldBe(5);\n\n    // Act\n    var removeBeerCommand = await unitOfWork.BeerRepository.DeleteBeer(1);\n    var breweryOfRemovedBeer = await unitOfWork.BreweryRepository.GetBreweryById(1);\n    (await unitOfWork.BeerRepository.GetAllBeers())?.Count().ShouldBe(4);\n    unitOfWork.Commit();\n\n    // Assert\n    removeBeerCommand.ShouldNotBeNull();\n    removeBeerCommand.ShouldBe(1);\n    breweryOfRemovedBeer.ShouldNotBeNull();\n    breweryOfRemovedBeer.Beers.ShouldNotBeNull();\n    breweryOfRemovedBeer.Beers.ShouldNotBeEmpty();\n    breweryOfRemovedBeer.Beers.ShouldNotContain(b => b.Name == \"Hexagenia\");\n}\n```\n\nNotice that our tests are simple and clean, naively testing the happy paths for all three commands since, by design, our\npersistence layer has one job, and one job only: query and command the database. No (checked) exceptions are thrown in\nthis layer, so we don't need any assertion tests to failure cases, and since our validations/mappings will be done in\nthe core business logic layer (as they should be), we exclude tests of that nature as well. With our unit tests in\nplace, we're free to modify our logic within our persistence layer any way we see fit as a simple `dotnet test` will\ntell us if we've broken any existing functionality. Our brewery repository tests will be very similar to our beer\nrepository tests, so let's create a `BreweryRepositoryTest.cs` file within our unit test project with the following\ntests:\n\n### BreweryRepositoryTest.cs\n\n```csharp\nnamespace Dappery.Data.Tests\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Domain.Entities;\n    using Shouldly;\n    using Xunit;\n\n    public class BreweryRepositoryTest : TestFixture\n    {\n        [Fact]\n        public async Task GetAllBreweries_WhenInvokedAndBreweriesExist_ReturnsValidListOfBreweries()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n\n            // Act\n            var breweries = (await unitOfWork.BreweryRepository.GetAllBreweries()).ToList();\n            unitOfWork.Commit();\n\n            // Assert\n            breweries.ShouldNotBeNull();\n            breweries.ShouldNotBeEmpty();\n            breweries.Count.ShouldBe(2);\n            breweries.All(br => br.Address != null).ShouldBeTrue();\n            breweries.All(br => br.Beers != null).ShouldBeTrue();\n            breweries.All(br => br.Beers.Any()).ShouldBeTrue();\n            breweries.FirstOrDefault(br => br.Name == \"Fall River Brewery\")?.Beers\n                .ShouldContain(b => b.Name == \"Hexagenia\");\n            breweries.FirstOrDefault(br => br.Name == \"Fall River Brewery\")?.Beers\n                .ShouldContain(b => b.Name == \"Widowmaker\");\n            breweries.FirstOrDefault(br => br.Name == \"Fall River Brewery\")?.Beers\n                .ShouldContain(b => b.Name == \"Hooked\");\n            breweries.FirstOrDefault(br => br.Name == \"Sierra Nevada Brewing Company\")?.Beers\n                .ShouldContain(b => b.Name == \"Pale Ale\");\n            breweries.FirstOrDefault(br => br.Name == \"Sierra Nevada Brewing Company\")?.Beers\n                .ShouldContain(b => b.Name == \"Hazy Little Thing\");\n        }\n\n        [Fact]\n        public async Task GetAllBreweries_WhenInvokedAndNoBreweriesExist_ReturnsEmptyList()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            await unitOfWork.BreweryRepository.DeleteBrewery(1);\n            await unitOfWork.BreweryRepository.DeleteBrewery(2);\n\n            // Act\n            var breweries = (await unitOfWork.BreweryRepository.GetAllBreweries()).ToList();\n            unitOfWork.Commit();\n\n            // Assert\n            breweries.ShouldNotBeNull();\n            breweries.ShouldBeOfType<List<Brewery>>();\n            breweries.ShouldBeEmpty();\n        }\n\n        [Fact]\n        public async Task GetBreweryById_WhenInvokedAndBreweryExist_ReturnsValidBreweryWithBeersAndAddress()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n\n            // Act\n            var brewery = await unitOfWork.BreweryRepository.GetBreweryById(1);\n            unitOfWork.Commit();\n\n            // Assert\n            brewery.ShouldNotBeNull();\n            brewery.ShouldBeOfType<Brewery>();\n            brewery.Address.ShouldNotBeNull();\n            brewery.Beers.ShouldNotBeNull();\n            brewery.Beers.ShouldNotBeEmpty();\n            brewery.BeerCount.ShouldBe(3);\n            brewery.Beers.ShouldContain(b => b.Name == \"Hexagenia\");\n            brewery.Beers.ShouldContain(b => b.Name == \"Widowmaker\");\n            brewery.Beers.ShouldContain(b => b.Name == \"Hooked\");\n        }\n\n        [Fact]\n        public async Task GetBreweryById_WhenInvokedAndNoBreweryExist_ReturnsNull()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n\n            // Act\n            var brewery = await unitOfWork.BreweryRepository.GetBreweryById(11);\n            unitOfWork.Commit();\n\n            // Assert\n            brewery.ShouldBeNull();\n        }\n\n        [Fact]\n        public async Task CreateBrewery_WhenBreweryIsValid_ReturnsNewlyInsertedBrewery()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var breweryToInsert = new Brewery\n            {\n                Name = \"Bike Dog Brewing Company\",\n                Address = new Address\n                {\n                    StreetAddress = \"123 Sacramento St.\",\n                    City = \"Sacramento\",\n                    State = \"CA\",\n                    ZipCode = \"95811\",\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow\n                },\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow\n            };\n\n            // Act\n            var breweryId = await unitOfWork.BreweryRepository.CreateBrewery(breweryToInsert);\n            var insertedBrewery = await unitOfWork.BreweryRepository.GetBreweryById(breweryId);\n            unitOfWork.Commit();\n\n            // Assert\n            insertedBrewery.ShouldNotBeNull();\n            insertedBrewery.ShouldBeOfType<Brewery>();\n            insertedBrewery.Address.ShouldNotBeNull();\n            insertedBrewery.Address.StreetAddress.ShouldBe(breweryToInsert.Address.StreetAddress);\n            insertedBrewery.Address.BreweryId.ShouldBe(3);\n            insertedBrewery.Beers.ShouldBeEmpty();\n        }\n\n        [Fact]\n        public async Task UpdateBrewery_WhenBreweryIsValidAndAddressIsNotUpdated_ReturnsUpdatedBrewery()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var breweryToUpdate = new Brewery\n            {\n                Id = 2,\n                Name = \"Sierra Nevada Brewing Company Of Brewing\",\n                Address = new Address\n                {\n                    StreetAddress = \"1075 E 20th St\",\n                    City = \"Chico\",\n                    State = \"CA\",\n                    ZipCode = \"95928\",\n                    UpdatedAt = DateTime.UtcNow,\n                    BreweryId = 2\n                },\n                UpdatedAt = DateTime.UtcNow\n            };\n\n            // Act\n            await unitOfWork.BreweryRepository.UpdateBrewery(breweryToUpdate);\n            var updatedBrewery = await unitOfWork.BreweryRepository.GetBreweryById(breweryToUpdate.Id);\n            unitOfWork.Commit();\n\n            // Assert\n            updatedBrewery.ShouldNotBeNull();\n            updatedBrewery.ShouldBeOfType<Brewery>();\n            updatedBrewery.Address.ShouldNotBeNull();\n            updatedBrewery.Address.StreetAddress.ShouldBe(breweryToUpdate.Address.StreetAddress);\n            updatedBrewery.Address.BreweryId.ShouldBe(2);\n            updatedBrewery.Beers.ShouldNotBeNull();\n            updatedBrewery.Beers.ShouldNotBeEmpty();\n        }\n\n        [Fact]\n        public async Task UpdateBrewery_WhenBreweryIsValidAndAddressIsUpdated_ReturnsUpdatedBrewery()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var breweryToUpdate = new Brewery\n            {\n                Id = 2,\n                Name = \"Sierra Nevada Brewing Company Of Brewing\",\n                Address = new Address\n                {\n                    Id = 2,\n                    StreetAddress = \"123 Happy St.\",\n                    City = \"Redding\",\n                    State = \"CA\",\n                    ZipCode = \"96002\",\n                    UpdatedAt = DateTime.UtcNow,\n                    BreweryId = 2\n                },\n                UpdatedAt = DateTime.UtcNow\n            };\n\n            // Act\n            await unitOfWork.BreweryRepository.UpdateBrewery(breweryToUpdate, true);\n            var updatedBrewery = await unitOfWork.BreweryRepository.GetBreweryById(breweryToUpdate.Id);\n            unitOfWork.Commit();\n\n            // Assert\n            updatedBrewery.ShouldNotBeNull();\n            updatedBrewery.ShouldBeOfType<Brewery>();\n            updatedBrewery.Address.ShouldNotBeNull();\n            updatedBrewery.Address.StreetAddress.ShouldBe(breweryToUpdate.Address.StreetAddress);\n            updatedBrewery.Address.ZipCode.ShouldBe(breweryToUpdate.Address.ZipCode);\n            updatedBrewery.Address.City.ShouldBe(breweryToUpdate.Address.City);\n            updatedBrewery.Address.BreweryId.ShouldBe(2);\n            updatedBrewery.Beers.ShouldNotBeNull();\n            updatedBrewery.Beers.ShouldNotBeEmpty();\n        }\n\n        [Fact]\n        public async Task DeleteBrewery_WhenBreweryExists_RemovesBreweryAndAllAssociatedBeersAndAddress()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            (await unitOfWork.BreweryRepository.GetAllBreweries())?.Count().ShouldBe(2);\n            (await unitOfWork.BeerRepository.GetAllBeers())?.Count().ShouldBe(5);\n\n\n            // Act\n            var removedBrewery = await unitOfWork.BreweryRepository.DeleteBrewery(1);\n            var breweries = (await unitOfWork.BreweryRepository.GetAllBreweries()).ToList();\n            (await unitOfWork.BeerRepository.GetAllBeers())?.Count().ShouldBe(2);\n            unitOfWork.Commit();\n\n            // Assert\n            removedBrewery.ShouldNotBeNull();\n            removedBrewery.ShouldBe(1);\n            breweries.ShouldNotBeNull();\n            breweries.Count.ShouldBe(1);\n            breweries.ShouldNotContain(br => br.Name == \"Fall River Brewery\");\n        }\n    }\n}\n```\n\nAgain, pretty similar to the tests within our beer repository file. We see a few scenarios testing our retrieval\nmethods, and one test each for our commands to create, update, and delete breweries that also exercise the connection\nbetween breweries and beers. Toss in a few nullable `?` operators to make the compiler happy, and we've got a working\nunit test project. Let's run one final `dotnet test` to make sure our tests look good so far now that we've covered all\nof our operations in either repository:\n\n```\nTest run for /path/to/Dappery/tests/Dappery.Data.Tests/bin/Debug/netcoreapp3.0/Dappery.Data.Tests.dll(.NETCoreApp,Version=v3.0)\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nStarting test execution, please wait...\n\nA total of 1 test files matched the specified pattern.\n\nTest Run Successful.\nTotal tests: 15\n     Passed: 15\n Total time: 1.8437 Seconds\n```\n\nMusic to a developer's ears: 15 tests ran, 15 passed. While it is in fact possible to swap out our in-memory SQLite\ndatabase for disk-based SQL Server, or Postgres, I prefer to use the mock in-memory versions simply because the database\ncontext is refreshed easily for us between test runs and ready to go for any need we may be using it for. As a\ndisclaimer, we _will_ be writing more unit tests for our project, both at the unit and functional level, but I'll allude\nto each test project within the section during that\ntime. [Here's](https://github.com/JoeyMckenzie/Dappery/tree/master/tests/Dappery.Data.Tests) the code we've written so\nfar for our persistence layer. Let's go ahead and leave things here now, and head on to the meat and potatoes of the\nproject: the core business layer!\n",
    "html": "<p>Two layers down, two to go. While we've made some great progress in\nour <a href=\"/images/net-core-dapper-and-crud-buzzword-bingo-part-2/\">last post</a>, I wanted to carve out at least one section in\nour series discussing testing our application. So far, we've built our domain and persistence layers, but we have yet to\nactually implement any transactional processes that require the higher up layers that will run the code we've written so\nfar to confirm its correctness. Rather than wait until we've built out our API layer to begin testing our implementation\nof the data layer (that would be more integration testing, one could argue), a better solution would be to take some\ntime to write some simple and quick unit tests around our persistence layer. With our data layer fully unit tested, we\nwon't have to wait to have an API to interact with via Postman, or some other application testing tool, to ensure he\ncode we have so far is giving us the result sets we expect. With our code unit tested in this fashion, we can use said\ntests as contracts for our expectation of each operation within our repositories, and grant ourself the ability to\nsafely refactor without fear of unknowingly breaking the application (at least within the persistence layer).</p>\n<p>Feel free to checkout the code in this\npost <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/master/tests/Dappery.Data.Tests\">here</a>. Before we jump into writing\nthe unit tests, let's discuss the tools, approach, and mindset we'll use for writing our tests in each layer of our\napplication (excluding our domain layer, as there is really not much logic there by design):</p>\n<ul>\n<li>Within each layer, we'll use a combination of <a href=\"https://xunit.net/\">xUnit</a>\nand <a href=\"https://github.com/shouldly/shouldly\">Shouldly</a>, my preferred unit test and assertion frameworks, respectively</li>\n<li>In our <code>Dappery.Data</code> project, we'll write units tests around each operation in our <code>BeerRepository</code>\nand <code>BreweryRepository</code> classes, utilizing the seeded database we setup for our in-memory SQLite database provider in\nour <code>UnitOfWork</code> class</li>\n<li>In our <code>Dappery.Core</code> project, which contains all of our business and cross-cutting concern logic, we'll again use\nxUnit and Shouldly, with unit tests surrounding each query/command action that we will be sending to our MediatR\nrequest factory to create the corresponding handlers, as well as verifying proper mappings and responses in each\nscenario</li>\n<li>In our <code>Dappery.Api</code> project, we'll write a suite of integration tests that will act as our end-to-end spec,\neffectively testing all of our request transactions from API interface to database interaction, and everything\ninbetween (creating a <em>use case</em> for our application)</li>\n</ul>\n<h3>Testing our Persistence Layer</h3>\n<p>Before we jump into writing our unit tests for our <code>Dappery.Data</code> project, we'll setup just a bit of test infrastructure\ncode that will assist us with creating an in-memory SQLite database to use within the scope of each test and setup our\ndependencies that our repositories will need. Some of you might be asking the question, however, why use an in-memory\ndatabase to test, and not the actual database our application will be using? Without launching into a diatribe about\nwhich method is best for our application, let me start by saying that <em>either</em> approach is viable; we just so happen to\nbe using the in-memory database for ease of testing and project bootstrapping. There are perfectly valid reasons for\nusing both approaches, for example:</p>\n<ul>\n<li>Within an enterprise environment, one of your team's APIs may contain one, or more, dependencies on another team's API\nand the persisted data it utilizes, which is good fit for testing against a live non-production (production in the\ncase of live smoke testing) database consumed by all teams</li>\n<li>Utilizing a common datastore between applications can, however, create a brittle dependency on the physical <em>data</em> you\nare asserting against - should someone remove an expected record from the database that your dependent API returns,\nour tests will break (if we are not mocking the API calls)</li>\n<li>In-memory test databases are great for internal application request transactions and execution paths that have little\nto no external API dependency - our data can be seeded, manipulated, and scrubbed/removed inbetween tests without fear\nof another manager yelling at us for deleting test data</li>\n<li>Although, with the introduction of multiple API dependencies, mocking entire databases and tables from dependent APIs\ncan quickly become unwieldy and introduce complexity in the form of data management that may not be particularly your\nAPI's domain concern</li>\n</ul>\n<p>So, what's the answer to our self imposed rhetorical question about which method to use? A good ole fashioned, <strong>it\ndepends</strong>. For our use case, we don't have any external APIs that we rely on and no data dependency that is out of our\ndomain, so we'll roll our own in-memory database that will be seeded, modified, and torn down in between each test to\nensure a fresh test fixture. Since we'll be using xUnit, we can leverage the testing library's disposable interfaces,\nshared contexts, and dependency injection to write our unit test in a clean, simple fashion. Now, since this is not\n<em>really</em> a detailed how-to article with xUnit, I'll quickly gloss over some of our infrastructure code that will form\nthe basis of each unit test class that we'll write, utilizing the disposable paradigm xUnit encourages us to use, and\nthen we'll jump into each test by repository and action.</p>\n<p>For our unit tests, we'll be heavily relying on xUnit's concept\nof <a href=\"https://xunit.net/docs/shared-context\">collection fixtures</a>. From the xUnit documentation for collection fixtures:</p>\n<blockquote>\n<p>When to use: when you want to create a single test context and share it among tests in several test classes, and have\nit cleaned up after all the tests in the test classes have finished.</p>\n</blockquote>\n<p>In essence, an xUnit collection fixture allows us to share objects, which our case is the in-memory database, between\nunit test classes. While our MediatR request handlers will only have a single Unit of Work dependency, collection\nfixures really shine when we're testing classes with several dependencies that we might want to spread across multiple\nclass files to keep our test domains of a single responsibility. I like to think of a collection fixture as the unit\ntest bootstrapping file, similar to a <code>Startup.cs</code> file in an ASP.NET Core web project. In our collection fixture, we'll\nbootstrap our in-memory database with seeded data and supply implementations for our Unit of Work and repository\nclasses. Since talk is cheap, let's go ahead and start setting things up by creating a unit test project for\nour <code>Dappery.Data</code> project within our <code>tests</code> folder:</p>\n<pre><code>~/Dappery/tests$ dotnet new xunit -n Dappery.Data.Tests\n~/Dappery/tests$ dotnet sln ../Dappery.sln add tests/Dappery.Data.Tests/Dappery.Data.Tests.csproj\n</code></pre>\n<p>Again, I'm one of those weirdos that prefers the command line, so feel free to add the project via your IDE if you want.\nNext, we'll reference our <code>Dappery.Data</code> project in our new test project, which just boils down to adding the package\nreference in our <code>Dappery.Data.Tests.csproj</code> file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"xml\" data-theme=\"vitesse-dark\"><code data-language=\"xml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">ItemGroup</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">ProjectReference</span><span style=\"color:#BD976A\"> Include</span><span style=\"color:#DBD7CAEE\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">..\\..\\src\\Dappery.Core\\Dappery.Core.csproj</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">/></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">ProjectReference</span><span style=\"color:#BD976A\"> Include</span><span style=\"color:#DBD7CAEE\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">..\\..\\src\\Dappery.Data\\Dappery.Data.csproj</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">/></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">ItemGroup</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>Notice we've also referenced our <code>Dappery.Core</code> project, which we'll see later that we'll require this dependency to\naccess our <code>IUnitOfWork</code> and repository interfaces. Let's go ahead and add a <code>DataCollectionFixture.cs</code> class within\nour <code>tests/Dappery.Data.Tests</code> project that will serve as our central collection fixture for our persistence tests.</p>\n<h3>DataCollectionFixture.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tests</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Xunit</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    [</span><span style=\"color:#5DA994\">CollectionDefinition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">DataCollectionFixture</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DataCollectionFixture</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> ICollectionFixture</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TestFixture</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing special, mostly just boilerplate code that tells xUnit how to define our collection fixture, which we'll\nimplement with a <code>TestFixture.cs</code> file in the same directory:</p>\n<h3>TestFixture.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tests</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TestFixture</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IDisposable</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#80A665\"> TestFixture</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            UnitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> UnitOfWork</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">null</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> UnitOfWork</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            GC</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">SuppressFinalize</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">bool</span><span style=\"color:#80A665\"> disposing</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">disposing</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                UnitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispose</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Again, nothing too complicated here. We simply define our <code>TestFixture</code> which all unit tests will use as a base, and\nnote that this class inherits from the <code>IDisposable</code> interface - this is where the xUnit magic happens. With this\ninheritance, our <code>TestFixture</code> class will be disposed of inbetween unit test runs, tearing down our database (\nbootstrapped through our <code>UnitOfWork</code>), and ensuring we have a fresh test fixture clean from persisted changes made in\nprevious tests. We define a read-only <code>UnitOfWork</code> property that each of our inheritors will be able to access, and\nfinish off with a simple resource clean up disposable implementation that will be utilized by xUnit when it disposes of\nour <code>TestFixture</code> between test runs. Notice that we instantiate our <code>UnitOfWork</code> using the implementation defined in\nour <code>Dappery.Data</code> project, which we setup to accept a nullable <code>string?</code> value that, when <code>null</code>, initializes a seeded\nin-memory SQLite database for us that we'll assert against during our unit tests.</p>\n<p>With our initial infrastructure out of the way, let's go ahead and create a <code>BeerRepositoryTest.cs</code> file and write our\nfirst test case:</p>\n<h3>BeerRepositoryTest.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tests</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Shouldly</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Xunit</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BeerRepositoryTest</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> TestFixture</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetAllBeers_WhenInvokedAndBeersExist_ReturnsValidListOfBeers</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> beers</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Ipa</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Widowmaker</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Widowmaker</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">DoubleIpa</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hooked</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hooked</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Lager</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Pale Ale</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Pale Ale</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">PaleAle</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hazy Little Thing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hazy Little Thing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">NewEnglandIpa</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Alright, let's breakdown this test:</p>\n<ul>\n<li>We're using the AAA pattern - Arrange, Act, Assert - which you'll see me make extensive use of throughout our projects\nas it encourages us to keep out unit tests <em>simple</em> and not too complex (as they should be, massive and complicated\nunit test cases are a code smell)</li>\n<li>We're using the new <code>using</code> syntax for disposable classes that shipped with C# 8.0 to grab a reference to\nour <code>UnitOfWork</code> and ensure its resources it creates are properly disposed of once our test is finished - this\nbehavior mimics how we'll inject a scoped instance in our API layer using built-in ASP.NET Core dependency injection</li>\n<li>We commit our transactions within our unit of work, as our UoW begins a transaction when initialized - while not\nentirely necessary for our in-memory unit test database, it's always a good practice to end our transactions even the\ncase of read-only queries as to not keep lingering connections that may come back to bite us</li>\n<li>We dispose of <em>both</em> our <code>UnitOfWork</code>, once the reference falls out of scope, and the collection test fixture; while\nnot entirely necessary, it's a good practice to get into (disposing resources at each level)</li>\n<li>We make use of <code>async</code>/<code>await</code> to allow for blocking until we receive a response from our in-memory database before\ncontinuing onto our assertions</li>\n<li>We use the <code>Shouldly</code> object extension methods to assert the various properties, types, and collection objects we're\nexpecting in the response</li>\n<li><code>Shouldly</code> natively supports use of LINQ and expression predicates, making assertions fluid and easy to read - one of\nthe many reason I <em>love</em> the library</li>\n</ul>\n<p>If we run this unit test, using either the Visual Studio/Rider test runner, or running <code>dotnet test</code>, we'll see that\nthis test passes. If we step through this code via a debug session, we can see exactly what is returned within our\nrepository, each query executing and what its result yields, etc. I'll leave that as an exercise for the reader, but\nalways worth while to validate that our unit tests are truly yielding the results we expect. Let's add an empty test\nfor <code>GetAllBeers()</code> and a couple of tests for our <code>GetBeerById()</code> repository methods:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// ...previous tests</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetAllBeers_WhenNoBeersExist_ReturnsEmptyListOfBeers</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange, remove all the beers from our database</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">4</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beers</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assert, validate a few properties</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Ipa</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetBeerById_WhenInvokedAndBeerDoesNotExist_ReturnsNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">10</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assert, validate a few properties</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too complex here, just some simple positive/negative test cases for finding a beer given an ID from the caller.\nOne thing to note is in our <code>GetAllBeers_WhenNoBeersExist_ReturnsEmptyListOfBeers</code> method, we use the <code>unitOfWork</code> to\nremove all the beers in our test database (probably not the most efficient way, quick and dirty for now), and assert\nagainst the empty list that gets returned. While this might not seem too interesting, the beauty is that xUnit,\nalongside the infrastructure code we setup, will clean up this modified database that we've 'dirtied' the context of,\nand create an entirely fresh database on the next run, disregarding any transactional changes we made in a previous\ntest. We simply retrieve the beer within our test database and assert the properties <code>Should</code> be what we expect. One of\nthe reasons I prefer using Shouldly is the response messages we receive when a test fails. Let's take a look at an\nexample be changing our assertion of our <code>GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer()</code> test method above to\nexpect an incorrect beer name:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assert, validate a few properties</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">A beer that doesn't exist</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span><span style=\"color:#758575DD\"> // This beer was NOT seeded in our database</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Ipa</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>If we run this run this test, we see the following in the console from Shouldly:</p>\n<pre><code>Dappery.Data.Tests.BeerRepositoryTest.GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer:\n    Outcome: Failed\n    Error Message:\n    Shouldly.ShouldAssertException : beer.Name\n    should be\n\"A beer that doesn't exist\"\n    but was\n\"Hexagenia\"\n    difference\nDifference     |  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n               | \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/\nIndex          | 0    1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   ...\nExpected Value | A    \\s   b    e    e    r    \\s   t    h    a    t    \\s   d    o    e    s    n    '    t    \\s   e    ...\nActual Value   | H    e    x    a    g    e    n    i    a                                                                ...\nExpected Code  | 65   32   98   101  101  114  32   116  104  97   116  32   100  111  101  115  110  39   116  32   101  ...\nActual Code    | 72   101  120  97   103  101  110  105  97                                                               ...\n\nDifference     |       |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n               |      \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/\nIndex          | ...  4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24\nExpected Value | ...  e    r    \\s   t    h    a    t    \\s   d    o    e    s    n    '    t    \\s   e    x    i    s    t\nActual Value   | ...  g    e    n    i    a\nExpected Code  | ...  101  114  32   116  104  97   116  32   100  111  101  115  110  39   116  32   101  120  105  115  116\nActual Code    | ...  103  101  110  105  97\n</code></pre>\n<p>Of the many reasons I love using Shouldly in all my unit test projects, this is one of my favorites. Shouldly points out\nexactly what it expected, what it received, and the index differences in the string. Now, this isn't an infomercial on\ntrying to sell you on using Shouldly, but informative failure messages like this can help you quickly identify\ninconsistencies in your code and fix things at a faster rate than traditional assertion frameworks. Let's finish out\nour <code>BeerRepositoryTest.cs</code> file by adding the unit tests that will exercise our database commands for our create,\nupdate, and delete operations:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// ...previous query tests</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> CreateBeer_WhenBeerIsValid_ReturnsNewlyInsertedBeer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beerToInsert</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Lazy Hazy</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        CreatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BeerStyle</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">NewEnglandIpa</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beerId</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerToInsert</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> insertedBeer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Count</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">4</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerToInsert</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> UpdateBeer_WhenBeerIsValid_ReturnsUpdateBeer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beerToUpdate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Colossus Imperial Stout</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BeerStyle</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Stout</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UpdateBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerToUpdate</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> updatedBeer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Count</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> beerToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> beerToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> DeleteBeer_WhenBeerExists_RemovesBeerFromDatabase</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">())</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> removeBeerCommand</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> breweryOfRemovedBeer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">())</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">4</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    removeBeerCommand</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    removeBeerCommand</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    breweryOfRemovedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    breweryOfRemovedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    breweryOfRemovedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    breweryOfRemovedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Notice that our tests are simple and clean, naively testing the happy paths for all three commands since, by design, our\npersistence layer has one job, and one job only: query and command the database. No (checked) exceptions are thrown in\nthis layer, so we don't need any assertion tests to failure cases, and since our validations/mappings will be done in\nthe core business logic layer (as they should be), we exclude tests of that nature as well. With our unit tests in\nplace, we're free to modify our logic within our persistence layer any way we see fit as a simple <code>dotnet test</code> will\ntell us if we've broken any existing functionality. Our brewery repository tests will be very similar to our beer\nrepository tests, so let's create a <code>BreweryRepositoryTest.cs</code> file within our unit test project with the following\ntests:</p>\n<h3>BreweryRepositoryTest.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tests</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Shouldly</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Xunit</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BreweryRepositoryTest</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> TestFixture</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetAllBreweries_WhenInvokedAndBreweriesExist_ReturnsValidListOfBreweries</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweries</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBreweries</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Count</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Any</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Widowmaker</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hooked</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sierra Nevada Brewing Company</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Pale Ale</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sierra Nevada Brewing Company</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hazy Little Thing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetAllBreweries_WhenInvokedAndNoBreweriesExist_ReturnsEmptyList</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweries</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBreweries</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetBreweryById_WhenInvokedAndBreweryExist_ReturnsValidBreweryWithBeersAndAddress</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerCount</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Widowmaker</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hooked</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetBreweryById_WhenInvokedAndNoBreweryExist_ReturnsNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">11</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> CreateBrewery_WhenBreweryIsValid_ReturnsNewlyInsertedBrewery</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToInsert</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Bike Dog Brewing Company</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">123 Sacramento St.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    City</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sacramento</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    State</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">95811</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    CreatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                CreatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToInsert</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> insertedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToInsert</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> UpdateBrewery_WhenBreweryIsValidAndAddressIsNotUpdated_ReturnsUpdatedBrewery</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToUpdate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sierra Nevada Brewing Company Of Brewing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">1075 E 20th St</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    City</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Chico</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    State</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">95928</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 2</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UpdateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updatedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> UpdateBrewery_WhenBreweryIsValidAndAddressIsUpdated_ReturnsUpdatedBrewery</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToUpdate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sierra Nevada Brewing Company Of Brewing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">123 Happy St.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    City</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    State</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">96002</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 2</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UpdateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> true</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updatedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> DeleteBrewery_WhenBreweryExists_RemovesBreweryAndAllAssociatedBeersAndAddress</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBreweries</span><span style=\"color:#666666\">())</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">())</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> removedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweries</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBreweries</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">())</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            removedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            removedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Count</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Again, pretty similar to the tests within our beer repository file. We see a few scenarios testing our retrieval\nmethods, and one test each for our commands to create, update, and delete breweries that also exercise the connection\nbetween breweries and beers. Toss in a few nullable <code>?</code> operators to make the compiler happy, and we've got a working\nunit test project. Let's run one final <code>dotnet test</code> to make sure our tests look good so far now that we've covered all\nof our operations in either repository:</p>\n<pre><code>Test run for /path/to/Dappery/tests/Dappery.Data.Tests/bin/Debug/netcoreapp3.0/Dappery.Data.Tests.dll(.NETCoreApp,Version=v3.0)\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nStarting test execution, please wait...\n\nA total of 1 test files matched the specified pattern.\n\nTest Run Successful.\nTotal tests: 15\n     Passed: 15\n Total time: 1.8437 Seconds\n</code></pre>\n<p>Music to a developer's ears: 15 tests ran, 15 passed. While it is in fact possible to swap out our in-memory SQLite\ndatabase for disk-based SQL Server, or Postgres, I prefer to use the mock in-memory versions simply because the database\ncontext is refreshed easily for us between test runs and ready to go for any need we may be using it for. As a\ndisclaimer, we <em>will</em> be writing more unit tests for our project, both at the unit and functional level, but I'll allude\nto each test project within the section during that\ntime. <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/master/tests/Dappery.Data.Tests\">Here's</a> the code we've written so\nfar for our persistence layer. Let's go ahead and leave things here now, and head on to the meat and potatoes of the\nproject: the core business layer!</p>"
  },
  "_id": "2019/net-core-dapper-and-crud-buzzword-bingo-part-3.md",
  "_raw": {
    "sourceFilePath": "2019/net-core-dapper-and-crud-buzzword-bingo-part-3.md",
    "sourceFileName": "net-core-dapper-and-crud-buzzword-bingo-part-3.md",
    "sourceFileDir": "2019",
    "contentType": "markdown",
    "flattenedPath": "2019/net-core-dapper-and-crud-buzzword-bingo-part-3"
  },
  "type": "Post",
  "url": "/blog/2019/net-core-dapper-and-crud-buzzword-bingo-part-3"
}