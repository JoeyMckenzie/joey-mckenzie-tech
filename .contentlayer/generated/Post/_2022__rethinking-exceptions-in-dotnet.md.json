{
  "title": "Rethinking exceptions in .NET",
  "description": "Exceptions... exceptions everywhere!",
  "pubDate": "2022-09-21T07:00:00.000Z",
  "category": ".NET",
  "heroImage": "/images/rethinking-dotnet-exceptions/exceptions_meme.jpg",
  "draft": false,
  "keywords": [
    ".net",
    "exceptions",
    "result"
  ],
  "body": {
    "raw": "\nI've recently undergone a courtship with Go and Rust, diving into each ecosystem in my spare time and even contributing\nto a few open source projects here and there in each language.\nBeing a .NET developer by day, I interact primarily with code and services written by other developers that may include\nquite a bit of control flow via throwing exceptions when any\nerroneous scenario or non-desirable application state arises. While this may be the norm in .NET and quite frankly what\n.NET/Java developers hardened by the enterprise have been trained for years\nto do as a first action during a fallible process, I've been conscientiously forcing myself to properly handle said\nfallible situations in a manner similar to what both Go and Rust offer\nin regards to the error handling developer experience.\n\nFor those not familiar with Go or Rust, a fallible method (simply a function that could return an error) might look\nsomething like:\n\n```go\nfunc SomeFallibleFunction(name string) (string, error) {\n    if name != \"Joey\" {\n        return \"\", errors.New(\"That's not the name I was expecting!\")\n    }\n\n    return \"Hello, Joey!\", nil\n}\n```\n\nin Go, or similarly in Rust:\n\n```rust\nfn some_fallible_function(name: &str) -> Result<&str, &str> {\n    if name != \"Joey\" {\n        return Err(\"That's a terrible name!\");\n    }\n\n    Ok(\"Nice to meet you, Joey!\")\n}\n```\n\nRunning each of these examples in an executable context, it may look something like the following:\n\n```go\npackage main\n\nimport (\n  \"errors\"\n  \"log\"\n)\n\nfunc main() {\n    if result, err := SomeFallibleFunction(\"Joey\"); err != nil {\n        log.Printf(\"An error occurred: %v\", err)\n    } else {\n        log.Printf(result)\n    }\n}\n\nfunc SomeFallibleFunction(name string) (string, error) {\n    if name != \"Joey\" {\n        return \"\", errors.New(\"That's not the name I was expecting!\")\n    }\n\n    return \"Hello, Joey!\", nil\n}\n```\n\nwith output along the lines of:\n\n```shell\nHello, Joey!\n```\n\nNow, the Rust equivalent in its full glory:\n\n```rust\nfn main() {\n    let result = some_fallible_function(\"Joey\");\n\n    if let Ok(response) = result {\n        println!(\"{}\", response);\n    } else {\n        println!(\"An error occurred: {}\", result.unwrap_err());\n    }\n}\n\nfn some_fallible_function(name: &str) -> Result<&str, &str> {\n    if name != \"Joey\" {\n        return Err(\"That's a terrible name!\");\n    }\n\n    Ok(\"Nice to meet you, Joey!\")\n}\n```\n\nand running a simple `cargo run` in the command line of your choice produces the following:\n\n```shell\nNice to meet you, Joey!\n```\n\nWhile each of these examples may seem a bit contrived, each conveys an idea that is core to either language in proper\nerror handling: _explicitly_ signifying to callers that the method is _fallible_! Fallible methods\ncan be thought of as a contract between caller and callee - the caller understands that the callee may produce an\nundesirable result or state that _should_ be handled responsibly by the caller. Unfortunately, .NET does\nnot have a similarly equivalent error handling experience akin to Go or Rust in the base class library, and while not a\nfault of the language itself, it can be rather annoying to deal with codebases where the default\nerror handling precedent set by previous developers might be `throw`ing exceptions at every corner and littering said\ncodebase with `try`/`catch` blocks often accompanied by some form of global\nexception handler to swallow any unexpected exceptions that arise outside of our error handling blocks.\n\nWhat this leads to, more often than not, is a breakdown in an application or service's architecture as we're allowing\n_control flow via exceptions_ (pause for audible gasps). If you've ever been exposed to languages\nwith GOTO statements (I cut my teeth with Fortran as my first real language during my undergrad), one can make the\nargument that exceptions as a form of control flow is nothing more than a sophisticated GOTO statement\nin an application or service. There's a plethora of reasons you won't see named or GOTO statements in many modern\nlanguages, applications, and codebases but I'll primarily make the argument that it makes code difficult\nto read, maintain, and extend as sensible control flow is essentially thrown out the window as we're allowing the flow\nof execution to sporadically jump lines anytime we see fit.\n\n## Rusti-fying our .NET code\n\nI'm not a fan of throwing exceptions, and I've been making the conscious effort to force myself to handle errors in a\nsane fashion as they arise rather than propagating them up the stack by `throw`ing them anytime an undesirable state in\nmy application code is reached. As an experiment, let's take a look at Rust'\ns [`std::result::Result`](https://doc.rust-lang.org/std/result/) type in an effort to take a monadic approach to wrap a\nmethod's outcome with a bit of metadata about the response. In a simple .NET 7 console app, let's define a result type\nthat captures information about the desired resulting data should the method succeed, i.e. no exceptions occur, and also\ncarries a bit of information about what types of errors we should expect in the case our processing fails:\n\n```csharp\nnamespace ExceptionAlternatives;\n\ninternal class Result<TData, TError>\n{\n    private readonly TData? _data;\n\n    private readonly TError? _error;\n\n    public static Result<TData, TError> Ok(TData data) => new(data);\n\n    public static Result<TData, TError> Err(TError error) => new(error);\n\n    private Result(TData data) => _data = data;\n\n    private Result(TError error) => _error = error;\n\n    public bool IsOk => _data is not null && _error is null;\n\n    public bool IsErr => !IsOk;\n\n    public TData Unwrap()\n    {\n        if (_data is null)\n        {\n            throw new InvalidOperationException(\"Result data is null and cannot be accessed.\");\n        }\n\n        return _data;\n    }\n\n    public TError UnwrapErr()\n    {\n        if (_error is null)\n        {\n            throw new InvalidOperationException(\"Result error is null and cannot be accessed.\");\n        }\n\n        return _error;\n    }\n}\n```\n\nLet's breakdown what our `Result` type is encapsulating for us:\n\n1. We provide two generic arguments in the form of `TData` and `TError` so that callers are aware of the type context a\n   fallible function may return\n2. We _internally_ track the state of the resulting data and any error that may occur as a result (no pun intended) of\n   the processing that goes on in our method\n3. We'll provide some simple `Result` type constructing methods to assist our methods in building our `Result` correctly\n   without said methods having to worry about how to instantiate our `Result` type correctly, i.e.\n   _correct-by-construction_\n4. We provide some simple utilities to peek at the result data without having to directly deref any of our internally\n   tracked `Result` state with the `IsOk` and `IsErr` auto-props\n5. Finally, should our callers do their due diligence and confirm their `Result` either succeeded or failed, we provide\n   a couple of methods to expose the data or error encapsulated by our `Result` object with the `Unwrap()`\n   and `UnwrapErr()` methods\n\nUsing our `Result` in a contrived example, it may look something like the following out in the wild:\n\n```csharp\nusing ExceptionAlternatives;\n\nvar successfulProcessing = await DoSomeFallibleProcessingThatSucceeds();\nvar failedProcessing = await DoSomeFallibleProcessingThatFails();\n\nConsole.WriteLine($\"Result of {nameof(successfulProcessing)}\");\nConsole.WriteLine($\"Successful? - {successfulProcessing.IsOk}\");\nConsole.WriteLine($\"Errors? - {successfulProcessing.IsErr}\");\nConsole.WriteLine($\"Successful result: {successfulProcessing.Unwrap()}\");\n\nConsole.WriteLine($\"\\nResult of {nameof(failedProcessing)}\");\nConsole.WriteLine($\"Successful? - {failedProcessing.IsOk}\");\nConsole.WriteLine($\"Errors? - {failedProcessing.IsErr}\");\nConsole.WriteLine($\"Error result: {failedProcessing.UnwrapErr()}\");\n\nasync Task<Result<int, string>> DoSomeFallibleProcessingThatSucceeds()\n{\n    // Act like we're doing something...\n    await Task.Delay(TimeSpan.FromMilliseconds(500));\n\n    return Result<int, string>.Ok(42);\n}\n\nasync Task<Result<int, string>> DoSomeFallibleProcessingThatFails()\n{\n    // Act like we're doing something again, but takes a bit longer...\n    await Task.Delay(TimeSpan.FromMilliseconds(1000));\n\n    return Result<int, string>.Err(\"Oh no! Processing failed :(\");\n}\n```\n\nRunning our code, we see the following printed out in the console:\n\n```shell\nResult of successfulProcessing\nSuccessful? - True\nErrors? - False\nSuccessful result: 42\n\nResult of failedProcessing\nSuccessful? - False\nErrors? - True\nError result: Oh no! Processing failed :(\n```\n\nSweet! While the first set of processing results may not be all that interesting, our second attempt at processing\nfailed and provided our context of the failure _without_ `throw`ing an exception and muddying up our code with\nunnecessary `try`/`catch` blocks! While this feels a lot better (personally) to code against in a real-world scenario,\nwe still need to address one bit of code in our `Result` type.\n\nWe still `throw` an exception when a user attempts to `Unwrap()` the `Result`'s internal data in the case that data does\nnot exist. Similar to Rust's `std::result::Result` type which `panic`'s (Rust's version of crashing an application) in\nthe case a caller attempts to access said data, we `throw` in an attempt to protect the `Result` object from handling up\ninvalid or `null` data. In our case, our `Result` type _expects_ a non-`null` data type to be the underlying data\ncontext in our `Result` object. We could extend this to allow for handling `null`able values, but I'll leave that as an\nexercise for the reader.\n\nSecondly, in our `DoSomeFallibleProcessingThatFails()` method, we're not guaranteed the ongoing processing will not\npanic inside that method - we expect that all the stuff that goes on in that method is itself infallible which may not\nbe the case. If we we're talking to a database, for example, an exception outside of our code (maybe internal to the\nBCL) may be thrown in the case the connection string is malformed or our result set can't be mapped. We'd most likely be\nbetter off wrapping the execution context of `DoSomeFallibleProcessingThatFails()` in a `try`/`catch` block, returning\nan `Ok` result if all goes well while passing back an `Err` in the case our `catch` block needs to execute logic.\n\n## Throwing exceptions _when it matters_\n\nWhile I've been touting that we should refrain from `throw`ing exceptions in our .NET code, that does **not** mean that\nwe should _never_ `throw` exceptions; simply put, **throw exceptions when it matters**.\n\nHow should we determine when and where to `throw` exceptions and use `try`/`catch` blocks? For me, the age-old question\nis accompanied by the age-old answer - _it depends_.\n\nDoes our application require loading in some critical configuration to properly run without error? Probably good\nto `throw` on startup if our configuration can't be found, read properly, or loaded into application memory/cached for\nwhatever reason.\n\nDo we rely on calls to third-party libraries or APIs that don't necessarily share our same radical `Result`-based\nideology? That's a great use case for surrounding that bit of connecting code with a `try`/`catch` while internally\npropagating those outbound results as a `Result` type in our application code.\n\n## Wrapping up\n\nExceptions have their time and place - as I've grown in my software career, I find that my personal developer growth\ncomes in the form of identifying _when_ and _where_ it may be appropriate to `throw` and surround bits of code\nin `try`/`catch` blocks rather than relying on them as a crutch for ease of control flow. What this translates to, more\nor less, is forcing callers and callees to properly handle error cases _as they arise_ rather than making it the next\nstack frame's problem. Unfortunately, humans are not perfect. Code is written by humans (most of the time), and\ntherefore _can_ be imperfect itself, not accounting for erroneous scenarios that might be outside our peripheral.\n\nUntil next time, friends!\n",
    "html": "<p>I've recently undergone a courtship with Go and Rust, diving into each ecosystem in my spare time and even contributing\nto a few open source projects here and there in each language.\nBeing a .NET developer by day, I interact primarily with code and services written by other developers that may include\nquite a bit of control flow via throwing exceptions when any\nerroneous scenario or non-desirable application state arises. While this may be the norm in .NET and quite frankly what\n.NET/Java developers hardened by the enterprise have been trained for years\nto do as a first action during a fallible process, I've been conscientiously forcing myself to properly handle said\nfallible situations in a manner similar to what both Go and Rust offer\nin regards to the error handling developer experience.</p>\n<p>For those not familiar with Go or Rust, a fallible method (simply a function that could return an error) might look\nsomething like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"go\" data-theme=\"github-dark\"><code data-language=\"go\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">func</span><span style=\"color:#B392F0\"> SomeFallibleFunction</span><span style=\"color:#E1E4E8\">(name </span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">) (</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">error</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> name </span><span style=\"color:#F97583\">!=</span><span style=\"color:#9ECBFF\"> \"Joey\"</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        return</span><span style=\"color:#9ECBFF\"> \"\"</span><span style=\"color:#E1E4E8\">, errors.</span><span style=\"color:#79B8FF\">New</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"That's not the name I was expecting!\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#9ECBFF\"> \"Hello, Joey!\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">nil</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>in Go, or similarly in Rust:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">fn</span><span style=\"color:#B392F0\"> some_fallible_function</span><span style=\"color:#E1E4E8\">(name</span><span style=\"color:#F97583\">:</span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#B392F0\">str</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#B392F0\">str</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#B392F0\">str</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> name </span><span style=\"color:#F97583\">!=</span><span style=\"color:#9ECBFF\"> \"Joey\"</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        return</span><span style=\"color:#B392F0\"> Err</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"That's a terrible name!\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Nice to meet you, Joey!\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Running each of these examples in an executable context, it may look something like the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"go\" data-theme=\"github-dark\"><code data-language=\"go\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">package</span><span style=\"color:#B392F0\"> main</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">  \"</span><span style=\"color:#B392F0\">errors</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">  \"</span><span style=\"color:#B392F0\">log</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">func</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> result, err </span><span style=\"color:#F97583\">:=</span><span style=\"color:#79B8FF\"> SomeFallibleFunction</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Joey\"</span><span style=\"color:#E1E4E8\">); err </span><span style=\"color:#F97583\">!=</span><span style=\"color:#79B8FF\"> nil</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        log.</span><span style=\"color:#79B8FF\">Printf</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"An error occurred: </span><span style=\"color:#79B8FF\">%v</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">, err)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    } </span><span style=\"color:#F97583\">else</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        log.</span><span style=\"color:#79B8FF\">Printf</span><span style=\"color:#E1E4E8\">(result)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">func</span><span style=\"color:#B392F0\"> SomeFallibleFunction</span><span style=\"color:#E1E4E8\">(name </span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">) (</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">error</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> name </span><span style=\"color:#F97583\">!=</span><span style=\"color:#9ECBFF\"> \"Joey\"</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        return</span><span style=\"color:#9ECBFF\"> \"\"</span><span style=\"color:#E1E4E8\">, errors.</span><span style=\"color:#79B8FF\">New</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"That's not the name I was expecting!\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#9ECBFF\"> \"Hello, Joey!\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">nil</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>with output along the lines of:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">Hello,</span><span style=\"color:#9ECBFF\"> Joey!</span></span></code></pre></figure>\n<p>Now, the Rust equivalent in its full glory:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">fn</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> result </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> some_fallible_function</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Joey\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    if</span><span style=\"color:#F97583\"> let</span><span style=\"color:#B392F0\"> Ok</span><span style=\"color:#E1E4E8\">(response) </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> result {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"{}\"</span><span style=\"color:#E1E4E8\">, response);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    } </span><span style=\"color:#F97583\">else</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"An error occurred: {}\"</span><span style=\"color:#E1E4E8\">, result</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">unwrap_err</span><span style=\"color:#E1E4E8\">());</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">fn</span><span style=\"color:#B392F0\"> some_fallible_function</span><span style=\"color:#E1E4E8\">(name</span><span style=\"color:#F97583\">:</span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#B392F0\">str</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#B392F0\">str</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#B392F0\">str</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> name </span><span style=\"color:#F97583\">!=</span><span style=\"color:#9ECBFF\"> \"Joey\"</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        return</span><span style=\"color:#B392F0\"> Err</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"That's a terrible name!\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Nice to meet you, Joey!\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>and running a simple <code>cargo run</code> in the command line of your choice produces the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">Nice</span><span style=\"color:#9ECBFF\"> to</span><span style=\"color:#9ECBFF\"> meet</span><span style=\"color:#9ECBFF\"> you,</span><span style=\"color:#9ECBFF\"> Joey!</span></span></code></pre></figure>\n<p>While each of these examples may seem a bit contrived, each conveys an idea that is core to either language in proper\nerror handling: <em>explicitly</em> signifying to callers that the method is <em>fallible</em>! Fallible methods\ncan be thought of as a contract between caller and callee - the caller understands that the callee may produce an\nundesirable result or state that <em>should</em> be handled responsibly by the caller. Unfortunately, .NET does\nnot have a similarly equivalent error handling experience akin to Go or Rust in the base class library, and while not a\nfault of the language itself, it can be rather annoying to deal with codebases where the default\nerror handling precedent set by previous developers might be <code>throw</code>ing exceptions at every corner and littering said\ncodebase with <code>try</code>/<code>catch</code> blocks often accompanied by some form of global\nexception handler to swallow any unexpected exceptions that arise outside of our error handling blocks.</p>\n<p>What this leads to, more often than not, is a breakdown in an application or service's architecture as we're allowing\n<em>control flow via exceptions</em> (pause for audible gasps). If you've ever been exposed to languages\nwith GOTO statements (I cut my teeth with Fortran as my first real language during my undergrad), one can make the\nargument that exceptions as a form of control flow is nothing more than a sophisticated GOTO statement\nin an application or service. There's a plethora of reasons you won't see named or GOTO statements in many modern\nlanguages, applications, and codebases but I'll primarily make the argument that it makes code difficult\nto read, maintain, and extend as sensible control flow is essentially thrown out the window as we're allowing the flow\nof execution to sporadically jump lines anytime we see fit.</p>\n<h2>Rusti-fying our .NET code</h2>\n<p>I'm not a fan of throwing exceptions, and I've been making the conscious effort to force myself to handle errors in a\nsane fashion as they arise rather than propagating them up the stack by <code>throw</code>ing them anytime an undesirable state in\nmy application code is reached. As an experiment, let's take a look at Rust'\ns <a href=\"https://doc.rust-lang.org/std/result/\"><code>std::result::Result</code></a> type in an effort to take a monadic approach to wrap a\nmethod's outcome with a bit of metadata about the response. In a simple .NET 7 console app, let's define a result type\nthat captures information about the desired resulting data should the method succeed, i.e. no exceptions occur, and also\ncarries a bit of information about what types of errors we should expect in the case our processing fails:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> ExceptionAlternatives</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">internal</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">TData</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">TError</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    private</span><span style=\"color:#F97583\"> readonly</span><span style=\"color:#B392F0\"> TData</span><span style=\"color:#E1E4E8\">? </span><span style=\"color:#B392F0\">_data</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    private</span><span style=\"color:#F97583\"> readonly</span><span style=\"color:#B392F0\"> TError</span><span style=\"color:#E1E4E8\">? </span><span style=\"color:#B392F0\">_error</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">TData</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">TError</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">TData</span><span style=\"color:#B392F0\"> data</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> new</span><span style=\"color:#E1E4E8\">(data);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">TData</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">TError</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">Err</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">TError</span><span style=\"color:#B392F0\"> error</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#F97583\"> new</span><span style=\"color:#E1E4E8\">(error);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    private</span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">TData</span><span style=\"color:#B392F0\"> data</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> _data </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> data;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    private</span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">TError</span><span style=\"color:#B392F0\"> error</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> _error </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> error;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> bool</span><span style=\"color:#B392F0\"> IsOk</span><span style=\"color:#F97583\"> =></span><span style=\"color:#E1E4E8\"> _data </span><span style=\"color:#F97583\">is</span><span style=\"color:#F97583\"> not</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#F97583\"> &#x26;&#x26;</span><span style=\"color:#E1E4E8\"> _error </span><span style=\"color:#F97583\">is</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> bool</span><span style=\"color:#B392F0\"> IsErr</span><span style=\"color:#F97583\"> =></span><span style=\"color:#F97583\"> !</span><span style=\"color:#E1E4E8\">IsOk;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#B392F0\"> TData</span><span style=\"color:#B392F0\"> Unwrap</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> (_data </span><span style=\"color:#F97583\">is</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            throw</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> InvalidOperationException</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Result data is null and cannot be accessed.\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        return</span><span style=\"color:#E1E4E8\"> _data;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#B392F0\"> TError</span><span style=\"color:#B392F0\"> UnwrapErr</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        if</span><span style=\"color:#E1E4E8\"> (_error </span><span style=\"color:#F97583\">is</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            throw</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> InvalidOperationException</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Result error is null and cannot be accessed.\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        return</span><span style=\"color:#E1E4E8\"> _error;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Let's breakdown what our <code>Result</code> type is encapsulating for us:</p>\n<ol>\n<li>We provide two generic arguments in the form of <code>TData</code> and <code>TError</code> so that callers are aware of the type context a\nfallible function may return</li>\n<li>We <em>internally</em> track the state of the resulting data and any error that may occur as a result (no pun intended) of\nthe processing that goes on in our method</li>\n<li>We'll provide some simple <code>Result</code> type constructing methods to assist our methods in building our <code>Result</code> correctly\nwithout said methods having to worry about how to instantiate our <code>Result</code> type correctly, i.e.\n<em>correct-by-construction</em></li>\n<li>We provide some simple utilities to peek at the result data without having to directly deref any of our internally\ntracked <code>Result</code> state with the <code>IsOk</code> and <code>IsErr</code> auto-props</li>\n<li>Finally, should our callers do their due diligence and confirm their <code>Result</code> either succeeded or failed, we provide\na couple of methods to expose the data or error encapsulated by our <code>Result</code> object with the <code>Unwrap()</code>\nand <code>UnwrapErr()</code> methods</li>\n</ol>\n<p>Using our <code>Result</code> in a contrived example, it may look something like the following out in the wild:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> ExceptionAlternatives</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">var</span><span style=\"color:#B392F0\"> successfulProcessing</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> DoSomeFallibleProcessingThatSucceeds</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">var</span><span style=\"color:#B392F0\"> failedProcessing</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> DoSomeFallibleProcessingThatFails</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">$\"Result of {</span><span style=\"color:#F97583\">nameof</span><span style=\"color:#9ECBFF\">(</span><span style=\"color:#E1E4E8\">successfulProcessing</span><span style=\"color:#9ECBFF\">)}\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">$\"Successful? - {</span><span style=\"color:#E1E4E8\">successfulProcessing</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">IsOk</span><span style=\"color:#9ECBFF\">}\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">$\"Errors? - {</span><span style=\"color:#E1E4E8\">successfulProcessing</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">IsErr</span><span style=\"color:#9ECBFF\">}\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">$\"Successful result: {</span><span style=\"color:#E1E4E8\">successfulProcessing</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#B392F0\">Unwrap</span><span style=\"color:#9ECBFF\">()}\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">$\"</span><span style=\"color:#79B8FF\">\\n</span><span style=\"color:#9ECBFF\">Result of {</span><span style=\"color:#F97583\">nameof</span><span style=\"color:#9ECBFF\">(</span><span style=\"color:#E1E4E8\">failedProcessing</span><span style=\"color:#9ECBFF\">)}\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">$\"Successful? - {</span><span style=\"color:#E1E4E8\">failedProcessing</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">IsOk</span><span style=\"color:#9ECBFF\">}\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">$\"Errors? - {</span><span style=\"color:#E1E4E8\">failedProcessing</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">IsErr</span><span style=\"color:#9ECBFF\">}\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">Console.</span><span style=\"color:#B392F0\">WriteLine</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">$\"Error result: {</span><span style=\"color:#E1E4E8\">failedProcessing</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#B392F0\">UnwrapErr</span><span style=\"color:#9ECBFF\">()}\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#B392F0\"> Task</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">int</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">>> </span><span style=\"color:#B392F0\">DoSomeFallibleProcessingThatSucceeds</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Act like we're doing something...</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    await</span><span style=\"color:#E1E4E8\"> Task.</span><span style=\"color:#B392F0\">Delay</span><span style=\"color:#E1E4E8\">(TimeSpan.</span><span style=\"color:#B392F0\">FromMilliseconds</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> Result&#x3C;</span><span style=\"color:#F97583\">int</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">>.</span><span style=\"color:#B392F0\">Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">42</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#B392F0\"> Task</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">int</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">>> </span><span style=\"color:#B392F0\">DoSomeFallibleProcessingThatFails</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Act like we're doing something again, but takes a bit longer...</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    await</span><span style=\"color:#E1E4E8\"> Task.</span><span style=\"color:#B392F0\">Delay</span><span style=\"color:#E1E4E8\">(TimeSpan.</span><span style=\"color:#B392F0\">FromMilliseconds</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> Result&#x3C;</span><span style=\"color:#F97583\">int</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">>.</span><span style=\"color:#B392F0\">Err</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Oh no! Processing failed :(\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Running our code, we see the following printed out in the console:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">Result</span><span style=\"color:#9ECBFF\"> of</span><span style=\"color:#9ECBFF\"> successfulProcessing</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Successful?</span><span style=\"color:#9ECBFF\"> -</span><span style=\"color:#9ECBFF\"> True</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Errors?</span><span style=\"color:#9ECBFF\"> -</span><span style=\"color:#9ECBFF\"> False</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Successful</span><span style=\"color:#9ECBFF\"> result:</span><span style=\"color:#79B8FF\"> 42</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Result</span><span style=\"color:#9ECBFF\"> of</span><span style=\"color:#9ECBFF\"> failedProcessing</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Successful?</span><span style=\"color:#9ECBFF\"> -</span><span style=\"color:#9ECBFF\"> False</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Errors?</span><span style=\"color:#9ECBFF\"> -</span><span style=\"color:#9ECBFF\"> True</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Error</span><span style=\"color:#9ECBFF\"> result:</span><span style=\"color:#9ECBFF\"> Oh</span><span style=\"color:#9ECBFF\"> no!</span><span style=\"color:#9ECBFF\"> Processing</span><span style=\"color:#9ECBFF\"> failed</span><span style=\"color:#9ECBFF\"> :</span><span style=\"color:#E1E4E8\">(</span></span></code></pre></figure>\n<p>Sweet! While the first set of processing results may not be all that interesting, our second attempt at processing\nfailed and provided our context of the failure <em>without</em> <code>throw</code>ing an exception and muddying up our code with\nunnecessary <code>try</code>/<code>catch</code> blocks! While this feels a lot better (personally) to code against in a real-world scenario,\nwe still need to address one bit of code in our <code>Result</code> type.</p>\n<p>We still <code>throw</code> an exception when a user attempts to <code>Unwrap()</code> the <code>Result</code>'s internal data in the case that data does\nnot exist. Similar to Rust's <code>std::result::Result</code> type which <code>panic</code>'s (Rust's version of crashing an application) in\nthe case a caller attempts to access said data, we <code>throw</code> in an attempt to protect the <code>Result</code> object from handling up\ninvalid or <code>null</code> data. In our case, our <code>Result</code> type <em>expects</em> a non-<code>null</code> data type to be the underlying data\ncontext in our <code>Result</code> object. We could extend this to allow for handling <code>null</code>able values, but I'll leave that as an\nexercise for the reader.</p>\n<p>Secondly, in our <code>DoSomeFallibleProcessingThatFails()</code> method, we're not guaranteed the ongoing processing will not\npanic inside that method - we expect that all the stuff that goes on in that method is itself infallible which may not\nbe the case. If we we're talking to a database, for example, an exception outside of our code (maybe internal to the\nBCL) may be thrown in the case the connection string is malformed or our result set can't be mapped. We'd most likely be\nbetter off wrapping the execution context of <code>DoSomeFallibleProcessingThatFails()</code> in a <code>try</code>/<code>catch</code> block, returning\nan <code>Ok</code> result if all goes well while passing back an <code>Err</code> in the case our <code>catch</code> block needs to execute logic.</p>\n<h2>Throwing exceptions <em>when it matters</em></h2>\n<p>While I've been touting that we should refrain from <code>throw</code>ing exceptions in our .NET code, that does <strong>not</strong> mean that\nwe should <em>never</em> <code>throw</code> exceptions; simply put, <strong>throw exceptions when it matters</strong>.</p>\n<p>How should we determine when and where to <code>throw</code> exceptions and use <code>try</code>/<code>catch</code> blocks? For me, the age-old question\nis accompanied by the age-old answer - <em>it depends</em>.</p>\n<p>Does our application require loading in some critical configuration to properly run without error? Probably good\nto <code>throw</code> on startup if our configuration can't be found, read properly, or loaded into application memory/cached for\nwhatever reason.</p>\n<p>Do we rely on calls to third-party libraries or APIs that don't necessarily share our same radical <code>Result</code>-based\nideology? That's a great use case for surrounding that bit of connecting code with a <code>try</code>/<code>catch</code> while internally\npropagating those outbound results as a <code>Result</code> type in our application code.</p>\n<h2>Wrapping up</h2>\n<p>Exceptions have their time and place - as I've grown in my software career, I find that my personal developer growth\ncomes in the form of identifying <em>when</em> and <em>where</em> it may be appropriate to <code>throw</code> and surround bits of code\nin <code>try</code>/<code>catch</code> blocks rather than relying on them as a crutch for ease of control flow. What this translates to, more\nor less, is forcing callers and callees to properly handle error cases <em>as they arise</em> rather than making it the next\nstack frame's problem. Unfortunately, humans are not perfect. Code is written by humans (most of the time), and\ntherefore <em>can</em> be imperfect itself, not accounting for erroneous scenarios that might be outside our peripheral.</p>\n<p>Until next time, friends!</p>"
  },
  "_id": "2022/rethinking-exceptions-in-dotnet.md",
  "_raw": {
    "sourceFilePath": "2022/rethinking-exceptions-in-dotnet.md",
    "sourceFileName": "rethinking-exceptions-in-dotnet.md",
    "sourceFileDir": "2022",
    "contentType": "markdown",
    "flattenedPath": "2022/rethinking-exceptions-in-dotnet"
  },
  "type": "Post",
  "url": "/blog/2022/rethinking-exceptions-in-dotnet"
}