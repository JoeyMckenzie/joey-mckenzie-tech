{
  "title": "State Management with Blazor using Fluxor (Part 1)",
  "description": "Manage state in your Blazor applications using the tried-and-true flux pattern with Fluxor.",
  "pubDate": "2020-06-26T07:00:00.000Z",
  "category": "blazor",
  "heroImage": "https://imgs.xkcd.com/comics/unreachable_state.png",
  "draft": false,
  "keywords": [
    "state management",
    "flux",
    "c#",
    ".net"
  ],
  "body": {
    "raw": "\nI'm gonna give it to you straight, uncensored, and off the cuff. Building reactive, fault tolerant, pleasant-to-use\nfrontend single page applications in the modern web-based world is not an easy task; building _stateful_ applications,\non top of all that, can be the most difficult part of frontend application engineering. Nowadays in the modern\nenterprise, frontend applications are more complicated than ever - managing user data, interacting with a plethora of\nAPIs, all while allowing users to navigate from page to page and back again carrying what seems like (from an end user's\nperspective) a history of all their page interactions and application data they've inherently requested just by clicking\nbuttons.\n\nTo the untrained eye, this may seem like some form of complicated JavaScript dark magic, and alas, I ensure you for the\nmost part, it is. However, sometime around the rise of React in the mid-2010s, Facebook developed a rather useful design\npattern for managing frontend applications in a sane, predictable\nmanner - [Flux](https://facebook.github.io/flux/docs/in-depth-overview). Using flux, Facebook (and by proxy, the React\ndevelopment community), pioneered a derivative of the subscriber pattern for the frontend, eventually leading to the\ndevelopment of the well-known [Redux](https://redux.js.org/) JavaScript library for building React applications. With\nthe popularity of Redux and React together, state management adhering to the flux spec came into the mainstream, and a\nplethora of flux-based libraries, heavily influenced by redux, hit the market (as an Angular reformist, I'm quite\npartial to [NgRx](https://ngrx.io/)).\n\nWith flux in our back pocket, state management on the frontend has become a tried and true design pattern for building\nrich, interactive applications that are predictable by nature and seemingly eliminate the infinite state machine that\nwas the early days of JS on the web (if you think I'm joking, look at some JS written circa mid-1990's). The question\nthen becomes, what about Blazor? I've put all my eggs in the Blazor basket, and one of the last things holding me back\nfrom full immersion was the existence of a flux-based library for the framework.\nEnter [Fluxor](https://github.com/mrpmorris/fluxor), an amazing open source library headed\nby [Peter Morris](https://github.com/mrpmorris) and the GitHub community, that provides an easy-to-use flux\nimplementation for .NET Core and Blazor. In this series, I'll guide us as we develop a simple flux-based application\nusing Fluxor with Blazor alongside [Redux DevTools](https://github.com/reduxjs/redux-devtools) (available for\nChrome/Edge and Firefox), to manage everyone's favorite list - the todos.\n\n## What we'll build\n\nFor the completed source code of what we'll be building in the first part of this (at least planned, so far) three part\nseries can be found [here](https://github.com/JoeyMckenzie/StateManagementWithFluxor/tree/feature/todos-part-1). With\nthe help of the [JSON Placeholder](https://jsonplaceholder.typicode.com/guide.html) project, we'll be using their \"\nAPI\" (in quotes since it's not really a persistence server, simply just for making dummy calls) to build a simple CRUD\napplication using the todo models from JSON Placeholder.\n\n## Getting started\n\nTo kick things off, let's go ahead and bootstrap a new Blazor WebAssembly project from your preferred project template\nprovider. I'll be using Visual Studio throughout this series, but you're more than welcome to use Rider, VS Code, or\njust the command line. In Visual Studio, let's go ahead and hit up a `File > New Project` and select\nthe `Blazor WebAssembly` project template. I'll name my project `StateManagementWithFluxor`, but you're welcome to pick\na name of your choosing. Leaving the defaults, as we don't need any authentication or hosting from an ASP.NET Core\nserver, let's go ahead and hit `Create`.\n\nWith our project ready to roll within VS, let's add a package reference to `Fluxor.Blazor.Web`\nand `Fluxor.Blazor.Web.ReduxDevTools` using your preferred installation method:\n\n-   Using the command line, `dotnet add package Fluxor.Blazor.Web`\n    and `dotnet add package Fluxor.Blazor.Web.ReduxDevTools`\n-   Using Package Manager with VS `Install-Package Fluxor.Blazor.Web`\n    and `Install-Package Fluxor.Blazor.Web.ReduxDevTools`\n-   Or, just simply add the package references through the NuGet GUI within VS\n\nOnce we've got Fluxor added to the project, we'll need to add a few references to the library through our code to bring\ninto scope. In our `index.html` file, let's add the required JavaScript bundle just above the closing `</body>` tag:\n\n#### index.html\n\n```html\n<!doctype html>\n<html>\n    <head>\n        <!-- Meta and CSS references -->\n    </head>\n\n    <body>\n        <!-- Existing bootstrapped HTML -->\n\n        <!-- Fluxor JS dependencies -->\n        <script src=\"_content/Fluxor.Blazor.Web/scripts/index.js\"></script>\n    </body>\n</html>\n```\n\nWith our JS references in scope, let's add a project reference to our `_Imports.razor` file below all of our other\nimported namespaces\n\n### \\_Imports.razor\n\n```csharp\n@* ...existing project references *@\n@using Fluxor\n```\n\nNow, in our `Program.cs` entry point file, let's add Fluxor to the DI container so we can utilize its services\nthroughout our components:\n\n#### Program.cs\n\n```csharp\n// Imported namespaces...\n\nnamespace StateManagementWithFluxor\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n\n            builder.Services.AddTransient(sp => new HttpClient { BaseAddress = new Uri(\"https://jsonplaceholder.typicode.com\") });\n\n            // Add Fluxor\n            builder.Services.AddFluxor(options =>\n            {\n                options.ScanAssemblies(Assembly.GetExecutingAssembly());\n                options.UseReduxDevTools();\n            });\n\n            await builder.Build().RunAsync();\n        }\n    }\n}\n```\n\nNotice I've also updated the base URI our default HTTP client instance points to (defaults to the project host) to the\nJSON Placeholder base API address in `https://jsonplaceholder.typicode.com`. In a later post, we'll refactor this HTTP\nservice instance to\na [typed HTTP client](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests)\ninstance; for now, this will do just fine. Along with adding our Fluxor instance to the DI container, we've also told it\nto enable Redux Dev Tools that will allow us to see, in realtime, our flux workflow as we interact with our application,\nwhere we'll be able to debug, time travel between state transitions, and a few other powerful features that come in\nhandy when working with flux-based frontend applications.\n\nLastly, let's add a reference to the flux store that will serve as the source of record for our entire application,\ncontaining all current stateful information, within `App.razor`\n\n#### App.razor\n\n```csharp\n<Fluxor.Blazor.Web.StoreInitializer />\n\n<Router AppAssembly=\"@typeof(Program).Assembly\">\n    <Found Context=\"routeData\">\n        <RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\" />\n    </Found>\n    <NotFound>\n        <LayoutView Layout=\"@typeof(MainLayout)\">\n            <p>Sorry, there's nothing at this address.</p>\n        </LayoutView>\n    </NotFound>\n</Router>\n```\n\nAt the top, we've added a reference to Fluxor's `StoreInitializer` that will bootstrap our state container,\namong [a few other things](https://github.com/mrpmorris/Fluxor/blob/master/Source/Fluxor.Blazor.Web/StoreInitializer.cs),\nbut I'll let the curious folks parse through the lifecycle hooks to get a feel of what it does for us.\n\nWith Fluxor ready to roll, let's take a few minutes to talk shop about the center of attention and the entire reason for\nthis series, flux.\n\n## Flux in a nutshell\n\n![Flux_flow](/images/state-management-with-blazor-using-fluxor/part-1/flux-in-a-nutshell.png)\n\nIn my totally awesome flowchart, I've outlined the big ideas with flux and what an application's architecture, using the\ndesign pattern, might look like. We'll go through each key term in the flux lexicon, but to skim the top, there are six\nkey terms you'll hear frequently when using any flux/redux library:\n\n-   **Dispatcher** - Nothing more than a request delegator of sorts, this guy/gal is in charge of issuing actions anytime\n    a user decides to do something on our page\n-   **Actions** - A metadata container containing information about _what_ the user did and what our application should do\n    after the user has performed the interaction with our page to kick off our flux pipeline\n-   **Side Effects** - As subscribers to dispatched actions, I like to think of effects as listeners of specific actions,\n    performing resulting tasks based on what action was just issued\n-   **Reducers** - Simple pure methods whose only job is to take state _in_, and spit state _out_ by way of\n    non-destructive mutation, i.e. taking our current state object in, examining what action was just dispatched and how\n    the state should be transformed, and spitting out a _new_ state object with said transformations\n-   **State** - A snapshot of the currently rendered page, containing any and all data our application is concerned about\n    at that point in time\n-   **Store** - The central piece, our store is the state container, holding on to all current slices of state that all\n    components ultimately subscribe to and react to any store changes accordingly when the store notifies listeners\n    there's been an update\n\nLet's break each of those down in correlation to the flux application flowchart above, starting at step 1:\n\n1. To kick things off, a user of our web application lands on our site, in absolute awe of our CSS ability, and wants to\n   interact with the page. In our example scenario, let's pretend our user clicks a button that ultimately navigates\n   them to another page that will have some data loaded from an external API in a table\n2. When the user clicks the button to kick off the workflow, we tie said button click to a **dispatcher** that, you\n   guessed it, _dispatches_ an action that contains the metadata related to \"hey, the user just pressed this button\"\n3. With the action in flight, we've kicked off our flux cycle that will eventually end up in a state mutation that will\n   contain the aforementioned API data our components will pull in and render on the page for the user\n4. A **side effect** that listens for specific button clicks is notified the button they're interested in was clicked,\n   and that they should make (in our case) an HTTP network call to the API in question to retrieve some data\n5. As our button click action fires off, a **reducer** listening for that specific button click evaluates the current\n   state and determines _what_ the new state should look like. In our case, we've issued a kickoff action, so the\n   reducer might mutate our current state to produce a new state that contains a boolean flag notifying components\n   there's an API call in progress\n6. This new state is then set within our flux **store**, causing a notification to fire off to all concerned components\n   that \"hey, there's a new piece of state!\" and cause our pages to render accordingly to what conditional state\n   properties they might be interested in (possibly rendering a loading spinner, for our case)\n\nWhew, that's quite a bit for just making a simple API call. You might be asking the question, however, due to the\nunfortunate limit on the speed of light, what happens when the API call returns? Our state has already been set from the\ninitial kickoff button click, so how do we get the data that has now been returned from the API to display on the page?\nI'm glad you asked. **Side effects** themselves also have the ability to dispatch actions, kicking off the entire flux\ncycle anew, and there's a common pattern in flux to issue _success_ and _failure_ commands (somewhat debated, as I fall\ninto this camp to keep clean action separation) from effects given the response to a blocking action (like an external\nnetwork call, file I/O, etc.). When our side effect has confirmed the network call came back successfully with the data\nin question, we can dispatch _another_ action containing said data, that will ultimately kick off this cycle once more,\nreach a reducer waiting to be notified for that particular success action, and produce a new state with the data\ncontained from the action, which will then be set within our store where our components will be notified once again\ncausing them to re-render.\n\nOkay, let's catch our breath here for a sec, as that was more, or less, flux in a nutshell. At this point, we should\nprobably ask ourselves the question: why even bother with flux? That's quite a bit going on, only to become increasingly\nmore complex the more interaction we add to an application. While we could probably answer that a few different ways,\none of my favorite reasons for using flux/redux in any frontend application is _predictable state transitions_. In other\nwords, using flux/redux, we _reduce_ the number of states our site can have and find ourselves less and less wondering \"\nhow in the _heck_ did that happen?\"\n\nTake for example a modern Angular application. A large application will have tens of hundreds (yes, you heard that\nright) of components all dynamically interacting with middle-tier data storage services that call other services that\nmake network calls, etc. and are used all over the place. Your middle-tier data storage service (in flux/redux, this\nwould be your state) might be used by many components, all independently interacting with this singular service, and\nmight unknowingly effect _another_ reliant component's local rendered state without any notification. This happens quite\noften in large Angular projects without redux providers, and at scale, can cause a lot of unnecessary headache.\n\n## Back to business\n\nOkay, now that we've covered the syllabus for flux 101, let's jump into the code and put these things to practice. I've\nremoved the `Counter.razor`, `FetchData.razor`, and `SurveyPrompt.razor` pages simply because we don't need them, and\nI've updated our `NavMenu.razor` component to reflect those changes:\n\n#### NavMenu.razor\n\n```csharp\n<div class=\"top-row pl-4 navbar navbar-dark\">\n    <a class=\"navbar-brand\" href=\"\">StateManagementWithFluxor</a>\n    <button class=\"navbar-toggler\" @onclick=\"ToggleNavMenu\">\n        <span class=\"navbar-toggler-icon\"></span>\n    </button>\n</div>\n\n<div class=\"@NavMenuCssClass\" @onclick=\"ToggleNavMenu\">\n    <ul class=\"nav flex-column\">\n        <li class=\"nav-item px-3\">\n            <NavLink class=\"nav-link\" href=\"\" Match=\"NavLinkMatch.All\">\n                <span class=\"oi oi-home\" aria-hidden=\"true\"></span> Home\n            </NavLink>\n        </li>\n        <li class=\"nav-item px-3\">\n            <NavLink class=\"nav-link\" href=\"todos\">\n                <span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span> Todos\n            </NavLink>\n        </li>\n    </ul>\n</div>\n\n@code {\n\n    // Nothing new here...\n\n}\n```\n\nI've added a hyperlink to a new route, `/todos`, and to accommodate, let's go ahead and create a new page under\nthe `Pages` folder called `Todos.razor` with the following markup:\n\n#### Todos.razor\n\n```csharp\n@inherits Fluxor.Blazor.Web.Components.FluxorComponent\n\n@page \"/todos\"\n\n<h3 class=\"text-center mb-3\">Todos</h3>\n\n@code {\n\n    protected override void OnInitialized()\n    {\n        base.OnInitialized();\n    }\n\n}\n```\n\nInside `Todos.razor`, we've inherited from a `FluxorComponent`, which in turn inherits from a `ComponentBase`, which,\nagain you've guessed, serves as the parent for all `.razor` pages in a Blazor application. Inheriting from\na `FluxorComponent` allows us to call its implmentation of `OnInitialized()`, the first lifecycle hook a `.razor` page\ngoes through during its rendering process.\n\nIf we start up our application now, either by hitting F5 in Visual Studio, or running `dotnet watch run` from the\ncommand line, we nothing particularly exciting on our site just yet (just a a landing page and one route-able page).\nWith our central flux architecture in place, let's go ahead and start wiring things up. First, let's create a model that\nwill house the response from our network calls to the JSON Placeholder API. Let's create a `Models` folder in the root\nof our project, and underneath that, let's add a `Todos` folder as well. In our `Todos` directory, let's create\na `TodoDto.cs` class file with the following content:\n\n#### TodoDto.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Models.Todos\n{\n    public class TodoDto\n    {\n        public int Id { get; set; }\n\n        public string? Title { get; set; }\n\n        public bool Completed { get; set; }\n\n        public int UserId { get; set; }\n    }\n}\n```\n\nNothing super exciting here, only to note that for this project, I've enabled nullable reference types (see\nour `.csproj` file) and the compiler will complain if I we're to mark the `Title` as a `string` type rather than a\nnullable `string?` type without an explicit constructor initializing it's value. The ASP.NET Core HTTP client class is\nresponsible for serializing requests and deserializing responses. While it's perfectly fine for our requests to be\nimmutable data types (which we'll be doing throughout this series), upon deserialization from an HTTP response, the\nframework will internally call our model's setters, so we need to make them publicly available.\n\nWith our response model taken care of, let's go ahead and wire up our first application workflow: retrieving a list of\ntodos.\n\n### Defining our first action\n\nIf we call the JSON Placeholder API `/todos` endpoint, we'll see the following response:\n\n```json\n[\n    {\n        \"userId\": 1,\n        \"id\": 1,\n        \"title\": \"delectus aut autem\",\n        \"completed\": false\n    },\n    {\n        \"userId\": 1,\n        \"id\": 2,\n        \"title\": \"quis ut nam facilis et officia qui\",\n        \"completed\": false\n    }\n    // Repeat 100 times...\n]\n```\n\nWe'll need to define a piece of state to hold the API response for the list of todos so that we can display it on the\ntodos page. Let's start be defining our todos state that we'll be interacting with throughout our application. At the\nroot of our project, let's create a `Store` folder, and underneath that, let's add a `State` directory. You're free use\nany flux/redux folder structure you feel comfortable with, but I tend to take an opinionated approach similar to the\nfollowing file structure:\n\n```\n/Store\n    /Features\n        /Feature1\n            /Actions\n            /Reducers\n            /Effects\n            Feature1.cs\n        /Feature2\n            /Actions\n            /Reducers\n            /Effects\n            Feature2.cs\n    /State\n        FeatureState1.cs\n        FeatureState2.cs\n```\n\nTo set ourselves up for ease of feature extension in the future, let's define a `RootState.cs` class file that will hold\ncommon feature state properties (loading flags, common errors, etc.):\n\n#### RootState.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Store.State\n{\n    public abstract class RootState\n    {\n        public RootState(bool isLoading, string? currentErrorMessage) =>\n            (IsLoading, CurrentErrorMessage) = (isLoading, currentErrorMessage);\n\n        public bool IsLoading { get; }\n\n        public string? CurrentErrorMessage { get; }\n\n        public bool HasCurrentErrors => !string.IsNullOrWhiteSpace(CurrentErrorMessage);\n    }\n}\n```\n\nExactly as mentioned above, our `RootState` will serve the purpose of playing the parent to all feature state slices\nwhere we'll be able to define common properties. In large applications, you might have multiple feature\nstates (`TodosState.cs`, `ArticlesState.cs`, `UsersState.cs`, etc.) so defining a common state for all to descend from\nallows us to build in shared state properties without duplicating such properties across multiple states. Notice we've\nmarked this class as `abstract` to convey the intent to our fellow developers that this class should be inherited from,\nnot instantiated on its own.\n\nWith our common state defined, let's add a `TodosState.cs` file inside of our `State` subfolder to contain all of our\nrelevant state properties:\n\n#### TodosState.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos;\nusing System.Collections.Generic;\n\nnamespace StateManagementWithFluxor.Store.State\n{\n    public class TodosState : RootState\n    {\n        public TodosState(bool isLoading, string? currentErrorMessage, IEnumerable<TodoDto>? currentTodos, TodoDto? currentTodo)\n            : base(isLoading, currentErrorMessage)\n        {\n            CurrentTodos = currentTodos;\n            CurrentTodo = currentTodo;\n        }\n\n        public IEnumerable<TodoDto>? CurrentTodos { get; }\n\n        public TodoDto? CurrentTodo { get; }\n    }\n}\n```\n\nDescending from our `RootState` we construct an immutable state object (i.e. no setters on any properties) and define\ntwo feature specific properties: `CurrentTodos` and `CurrentTodo`. `CurrentTodos` will hold the most recent list of\ntodos returned from the JSON Placeholder API's `/todos` endpoint, with `CurrentTodo` holding the most recent todo\nreturned from the `/todos/:id` endpoint. Again, I've declared these explicitly as nullable, since there may be points in\nour application's lifecycle that we'll have yet to interact with any APIs, and no data will be presently available\nwithin our store.\n\nWith our state objects defined, let's define our first feature. Inside the `Store` folder, let's add a `Features`\nfolder, and within that, a `Todos` folder. Again, sticking to the saforementioned file structure, let's add\na `TodosFeature.cs` file underneath our `Features` folder:\n\n#### TodosFeature.cs\n\n```csharp\nusing Fluxor;\nusing StateManagementWithFluxor.Store.State;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos\n{\n    public class TodosFeature : Feature<TodosState>\n    {\n        public override string GetName() => \"Todos\";\n\n        protected override TodosState GetInitialState() =>\n            new TodosState(false, null, null, null);\n    }\n}\n```\n\nDescending from `Feature<TodosState>`, this tells Fluxor at startup (during its initial assembly scanning) that this\nwill be a store feature named `Todos` that will house a `TodosState` object. Later when we look at our current state\nwith Redux Dev Tools, we'll see that our store is nothing more than a JSON object containing a `Todos` node with all the\nproperties we've defined in the `TodosState` class. Fluxor needs to know what initial state our todos feature slice\nshould have, so we add a constructor to initialize an initial state object. Some people might cringe when they\nsee `null` being explicitly passed to a constructor, but thanks to C#'s nullable reference type, we're telling our\nfellow developers that our intent is to express the absence of those properties, and before dereferencing those\nproperties in a component, the compiler will warn them if they do not check for `null` before doing so. Pretty cool,\nhuh?\n\nWith our first feature defined, let's create our first workflow. Let's create an `Actions` folder underneath our `Todos`\ndirectory and add one more folder called `LoadTodos` underneath our newly created `Actions` folder. In our `LoadTodos`\nsubfolder, let's create three classes: `LoadTodosAction.cs`, `LoadTodosSuccessAction.cs`,\nand `LoadTodosFailureAction.cs` action:\n\n#### LoadTodosAction.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos\n{\n    public class LoadTodosAction\n    {\n    }\n}\n```\n\n#### LoadTodosSuccessAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos;\nusing System.Collections.Generic;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos\n{\n    public class LoadTodosSuccessAction\n    {\n        public LoadTodosSuccessAction(IEnumerable<TodoDto> todos) =>\n            Todos = todos;\n\n        public IEnumerable<TodoDto> Todos { get; }\n    }\n}\n```\n\n#### LoadTodosFailureAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Store.Features.Shared.Actions;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos\n{\n    public class LoadTodosFailureAction : FailureAction\n    {\n        public LoadTodosFailureAction(string errorMessage)\n            : base(errorMessage)\n        {\n        }\n    }\n}\n```\n\n-   Our `LoadTodosAction.cs` class contains no logic, and is used for nothing more that a typed action for the flux\n    pipeline to signal to its subscribers of the `LoadTodos` workflow. Kickoff actions can contain metadata and we'll see\n    this when we retrieve todo details by ID.\n-   Our `LoadTodosSuccessAction.cs` class contains a list of non-nullable `TodoDto` items that will act as the transport\n    object moving the JSON Placeholder API response into our flux store.\n-   Our `LoadTodosFailureAction.cs` class will trigger an error workflow, allowing us to gracefully respond to any network\n    failures or errors returned from the API to be propagated back to our components.\n\nNotice I've also defined a `FailureAction.cs` class that acts as the root for all failure actions. For our simple\napplication, failure actions will more often that not contain some type of error identifier (in our case, a message, but\ncould also contain an ID), and I've defined it in a `Shared` feature folder underneath an `Actions` subdirectory:\n\n#### Features/Shared/Actions/FailureAction.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Store.Features.Shared.Actions\n{\n    public abstract class FailureAction\n    {\n        protected FailureAction(string errorMessage) =>\n            ErrorMessage = errorMessage;\n\n        public string ErrorMessage { get; }\n    }\n}\n```\n\nAgain, this `abstract` class tells other developers that this should be seen as the common failure action all failure\nactions should descend from, so we can reuse common error properties (message, ID, etc.). With our action defined, let's\ncreate a reducer to help set the pieces of state according to dispatched action. Underneath the `Todos` feature folder,\nlet's add a `Reducers` folder with a `LoadTodosActionsReducer.cs` class:\n\n#### LoadTodosActionsReducer.cs\n\n```csharp\nusing Fluxor;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos;\nusing StateManagementWithFluxor.Store.State;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Reducers\n{\n    public static class LoadTodosActionsReducer\n    {\n        [ReducerMethod]\n        public static TodosState ReduceLoadTodosAction(TodosState state, LoadTodosAction _) =>\n            new TodosState(true, null, null, state.CurrentTodo);\n\n        [ReducerMethod]\n        public static TodosState ReduceLoadTodosSuccessAction(TodosState state, LoadTodosSuccessAction action) =>\n            new TodosState(false, null, action.Todos, state.CurrentTodo);\n\n        [ReducerMethod]\n        public static TodosState ReduceLoadTodosFailureAction(TodosState state, LoadTodosFailureAction action) =>\n            new TodosState(false, action.ErrorMessage, null, state.CurrentTodo);\n    }\n}\n```\n\nOur reducer class is simply just a `static` object with `static` methods invoked at runtime that takes in the current\nfeature slice state, and returns a new `TodosState` object based on any relevant data contained within the action that\ncaused the reducer method to be invoked.\n\n-   The `ReduceLoadTodosAction` method causes our reducer to create a new state with the `IsLoading` flag set to `true`,\n    telling components there's currently an API call in flight. Since our current action workflow is just dealing with\n    gathering a list of todos and does not effect the currently selected todo piece of state, we set whatever\n    the `CurrentTodo` property was from the old state on the new state as to not effect any components concerned with that\n    particular property.\n-   The `ReduceLoadTodosSuccessAction` method returns a new state setting the `IsLoading` to `false` letting components\n    know our API call has completed, and we set the `CurrentTodos` state property to the `Todo` property dereferenced from\n    the `LoadTodosSuccessAction` passed in. We'll see how this property is initially populated in\n    the `LoadTodosSuccessAction` class shortly.\n-   The `ReduceLoadTodosFailureAction` method again sets the `IsLoading` flag to `false` for the reasons mentioned above,\n    and we populate the `CurrentErrors` property on our state so that our components may react accordingly to the API\n    failure.\n\nWith our reducer defined, let's go ahead and create a side effect that will do the work of calling the API and\ndispatching the success or failure action based on its response. Again, back in our `Features/Todos` subfolder, let's\nadd an `Effects` folder with a `LoadTodosEffect.cs` class:\n\n#### LoadTodosEffect.cs\n\n```csharp\n\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Models.Todos;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos;\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects\n{\n    public class LoadTodosEffect : Effect<LoadTodosAction>\n    {\n        private readonly ILogger<LoadTodosEffect> _logger;\n        private readonly HttpClient _httpClient;\n\n        public LoadTodosEffect(ILogger<LoadTodosEffect> logger, HttpClient httpClient) =>\n            (_logger, _httpClient) = (logger, httpClient);\n\n        protected override async Task HandleAsync(LoadTodosAction action, IDispatcher dispatcher)\n        {\n            try\n            {\n                _logger.LogInformation(\"Loading todos...\");\n\n                // Add a little extra latency for dramatic effect...\n                await Task.Delay(TimeSpan.FromMilliseconds(1000));\n                var todosResponse = await _httpClient.GetFromJsonAsync<IEnumerable<TodoDto>>(\"todos\");\n\n                _logger.LogInformation(\"Todos loaded successfully!\");\n                dispatcher.Dispatch(new LoadTodosSuccessAction(todosResponse));\n            }\n            catch (Exception e)\n            {\n                _logger.LogError($\"Error loading todos, reason: {e.Message}\");\n                dispatcher.Dispatch(new LoadTodosFailureAction(e.Message));\n            }\n\n        }\n    }\n}\n```\n\nLet's break this code down:\n\n-   First, we descend from Fluxor's `Effect<TAction>` class, with our `TAction` generic type being our `LoadTodosAction`\n    class so this effect knows to invoke its `HandleAsync` method whenever that action is dispatched\n-   Fluxor scans our assembly for all classes descending from `Effect<TAction>` and adds them to the DI container, so we\n    have the ease of injecting dependencies at runtime\n-   We inject an `HttpClient` instance and a logger into the class using an expression bodied tuple constructor (some C#\n    syntactic sugar)\n-   `HandleAsync` ships with an `IDispatcher` instance for us to utilize to issue more actions inside our effect\n-   We make the API call using the injected `HttpClient` instance, and use the `GetFromJsonAsync<TResponse>` extension\n    method from the `System.Net.Http` namespace the .NET team has so generously provided us to make the HTTP call and\n    deserialize the response into our `TodoDto` list\n-   If all goes well and the API call is successful, we issue another action in the form of a `LoadTodosSuccessAction`\n    class constructed with the endpoint's response\n-   If there's any exceptions thrown, we'll `catch` and log the error, as well as issue a failure action with the\n    exception message\n\nRecall the flux pipeline mentioned earlier. Throughout our list retrieval process, we'll be going through two iterations\nof dispatcher > action > effect/reducer > store:\n\n1. (Initial) `LoadTodosAction` > `LoadTodosEffect` / `LoadTodosActionsReducer` > `TodosState` set in the store\n2. (Post API call) `LoadTodosSuccessAction`/`LoadTodosFailureAction` > `LoadTodosActionsReducer` > `TodosState` set in\n   the store\n\nIn the first iteration, we fire our initial action to signal to our application to call to the API and retrieve some\ndata, with the following iteration being the outcome of the API call. When the API call completes and another action is\nissued, either the success or failure actions, we'll again invoke the proper reducer method to produce a new slice of\nfeature state in store with either the loaded data for components to access, or an error message for the components to\ndisplay back to the user.\n\nWith our actions, reducer, and side effect defined, let's add one more service to help with dispatching actions that our\ncomponents will be able to inject and use accordingly: our `StateFacade.cs` service:\n\n#### StateFacade.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodoDetail;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos;\n\nnamespace StateManagementWithFluxor.Services\n{\n    public class StateFacade\n    {\n        private readonly ILogger<StateFacade> _logger;\n        private readonly IDispatcher _dispatcher;\n\n        public StateFacade(ILogger<StateFacade> logger, IDispatcher dispatcher) =>\n            (_logger, _dispatcher) = (logger, dispatcher);\n\n        public void LoadTodos()\n        {\n            _logger.LogInformation(\"Issuing action to load todos...\");\n            _dispatcher.Dispatch(new LoadTodosAction());\n        }\n    }\n}\n```\n\nBefore we break this code down, let's discuss why we might want to use a facade, and furthermore, what the heck even is\na \"facade.\"\n\n#### Decoupling components from flux\n\nWith flux being a proven robust frontend application architecture, in large codebases, you'll most likely have hundreds\nof different actions with many different feature state slices in a store. For those with Redux Dev Tools installed, if\nyou we're to navigate to [Reddit](https://reddit.com) with the dev console Redux tab open, you'll see the reddit store\ncontains roughly 50 or so different state slices, each complexly nested with various pieces of that particular state's\nnode. In Redux, there's an idea used quite often called the _facade pattern_ that provides a layer of separation between\nour view components and our store interactions. As we tend to think of backend architectures in various layers, the\ngrowing complexity of the frontend can be thought of in the same way, with a layered architecture to encapsulate the\nvarious features of an application.\n\n![facade](/images/state-management-with-blazor-using-fluxor/part-1/facade_redirection.png)\n\nIf we consider the rendered view our user interacts with as the innermost layer akin to the domain layer in onion\narchitecture, then our flux implementation for state management would be a low-level detail in charge of providing the\ndata for those view components. If we think of the classic onion diagram, outermost dependencies should always point\ninward, implying that our rendered views should not be concerned with, or even care, how the data they display is given\nto them. We simply give our views read-only access to the store for them to treat as the source of record; how the data\ngets there is none of their concern.\n\nBy providing a facade interface between our components and the flux cycle, our components do not need to know about\nindividual actions, only workflows concerning what data they need. For simple applications like ours, it may be a bit\noverkill, but I would argue in large complex applications, adding a facade layer does provide the benefit of\nimplementation details being shrouded from the view components and allowing us to rework actions and workflows without\nbreaking our contracts between the view layer and the flux layer.\n\nAlright, now back to our regularly scheduled program.\n\n### Back to business\n\nWith our facade in place, our `.razor` components now need only to inject the `StateFacade` and whatever feature slice\nstate they're concerned about to render their markup. As we're adding a service, we also need to add it to the DI\ncontainer. Back in our `Program.cs`:\n\n#### Program.cs\n\n```csharp\n// Existing namespaces...\nusing StateManagementWithFluxor.Services;\n\nnamespace StateManagementWithFluxor\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            // Previous services being wired up...\n\n            // Add custom application services\n            builder.Services.AddScoped<StateFacade>();\n\n            await builder.Build().RunAsync();\n        }\n    }\n}\n```\n\nWe've added our `StateFacade` as a scoped service available for injection anew every time the service is plucked from\nthe DI container and injected at runtime into a `.razor` page.\n\n### Putting it all together\n\nWith our feature, actions, reducers, side effect, and store defined and ready to go, let's FINALLY start writing some\nmarkup to display all this darn data. First, let's open up our `MainLayout.razor` file and have it inherit from\na `FluxorComponent` as it'll be housing components interacting with pieces of state that involve event handlers, and\nwill be in need of proper disposal later in the series:\n\n#### MainLayout.razor\n\n```csharp\n@inherits Fluxor.Blazor.Web.Components.FluxorLayout\n\n<div class=\"sidebar\">\n    <NavMenu />\n</div>\n\n<div class=\"main\">\n    <div class=\"top-row px-4\">\n        <a href=\"http://blazor.net\" target=\"_blank\" class=\"ml-md-auto\">About</a>\n    </div>\n\n    <div class=\"content px-4\">\n        @Body\n    </div>\n</div>\n\n@code {\n\n    protected override void OnInitialized()\n    {\n        base.OnInitialized();\n    }\n\n}\n```\n\nWe've add the `@inherits Fluxor.Blazor.Web.Components.FluxorLayout` directive so that we can call `FluxorLayout`'s\nimplementation of the `OnInitialized()` lifecycle hook similarly to our `Todos.razor` file. With this in place, let's\nopen up our `Todos.razor` page again and add some markup, as well as the injected services we'll need to properly render\nthe data:\n\n#### Todos.razor\n\n```csharp\n@inherits Fluxor.Blazor.Web.Components.FluxorComponent\n\n@page \"/todos\"\n\n@using StateManagementWithFluxor.Store.State\n@using StateManagementWithFluxor.Services\n\n@inject IState<TodosState> TodosState\n@inject StateFacade Facade\n\n<h3 class=\"text-center mb-3\">Todos</h3>\n\n@if (TodosState.Value.IsLoading)\n{\n    <div class=\"d-flex flex-row justify-content-center\">\n        <div class=\"spinner-border\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span>\n        </div>\n    </div>\n}\nelse if (TodosState.Value.HasCurrentErrors)\n{\n    <span>Whoops! Looks like an issue occurred loading todos :(</span>\n}\nelse if (!(TodosState.Value.CurrentTodos is null) && TodosState.Value.CurrentTodos.Any())\n{\n    <table class=\"table table-hover\">\n        <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Title</th>\n                <th scope=\"col\">Completed</th>\n                <th scope=\"col\">User ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var todo in TodosState.Value.CurrentTodos.Take(10))\n            {\n                <tr>\n                    <td>@todo.Id</td>\n                    <td>@todo.Title</td>\n                    <td>@todo.Completed</td>\n                    <td>@todo.UserId</td>\n                </tr>\n            }\n        </tbody>\n    </table>\n}\n\n@code {\n\n    protected override void OnInitialized()\n    {\n        // Issue the load todos command, if no current todos have been loaded\n        if (TodosState.Value.CurrentTodos is null)\n        {\n            Facade.LoadTodos();\n        }\n\n        base.OnInitialized();\n    }\n\n}\n```\n\nFinally, we've got some testable markup! Using some simple Bootstrap (feel free to use your favorite CSS provider,\nyou'll have to pry Bootstrap out of my cold, dead hands), we've added a table to display our todos, taking only the\nfirst 10 for brevity, as well as some logic to load todos using our `StateFacade` with the line `Facade.LoadTodos();`.\nOur Todos component has no concern with _how_ the todos are loaded or what actions are involved, it's only concerned\nabout issuing a command to get the todos loaded into the store. If we to fire up our application once more and navigate\nto the `Todos` nav item (open your dev console to the Network tab), we should see an API call being made to the `todos`\nendpoint, a loading spinner spinning for just a few seconds, and then... a todo list!\n\nLet's explore a little using Redux Dev Tools (download for your favorite browser). After you installed the addon, let's\nhead back to the home page and refresh the application with the `Redux` tab selected in the dev console. Right off the\nbat, we see three actions being issued:\n\n-   `@@INIT` - Redux Dev Tool's internal action\n-   `StoreInitializedAction` - Recall the `<Fluxor.Blazor.Web.StoreInitializer />` component we added to `App.razor`, this\n    is Fluxor initializing our feature states from the `Feature<TState>` found during assembly scanning and setting up our\n    default states from the `GetInitialState()` method\n-   `GoAction` - Fluxor's internal navigation action that sets the `@routing` piece of state on our store with the `Uri`\n    node within it (we'll hook into this action as well in a later post)\n\nNow, if we navigate to `Todos` on the side nav, we should see three more actions being issued in the following order:\n\n-   Another `GoAction` issued internally by Fluxor\n-   Our `LoadTodosAction` we defined earlier\n-   And finally, our `LoadTodosSuccessAction` containing the todo items returned from the API (click on the `Action` tab\n    on the action in the list and you see see our `Todo` property underneath the `Payload` property)\n\nIf we click on the `LoadTodosSuccessAction` on the action list and then the `State` tab, we should see our `Todos`\nfeature slice node with a `CurrentTodos` node that contains an array of all the todo items returned from the API!\n\nYou might be asking the question - how does the page know to render the list? Recall the `IState<TodosState> State`\ndirective we injected into our `Todos.razor` page - because we've inheried from a `FluxorComponent`, when we\ncall `OnInitialized()`, our component subscribes to state changes of the injected state type (`TodosState` in our case),\nand when a new state is set (from reducers producing a new state on an issued action), Blazor's built\nin `StateHasChanged()` is called for us, forcing components to re-render their markup accordingly. The hard work is done\nfor us, while we get to sit back and gaze at our beautiful todos in all their glory.\n\n### Wrapping up\n\nSo far, we've seen what flux is, why we would want to use it in a single page application, and how to setup Fluxor with\nBlazor. For brevity, I've also added a workflow to retrieve todos by ID, but I'll leave the implementation details up to\nthe reader (take a look a the source\ncode [here](https://github.com/JoeyMckenzie/StateManagementWithFluxor/tree/feature/todos-part-1) to see exactly how I've\ndone it - nothing crazy, just a new page with some more actions, reducers, and effects). We've seen how using Redux Dev\nTools, we're able to peek into the workflow step-by-step of our application and observe incremental state changes, and\nlater, we'll see the real power of Dev Tools in time travel state transitions.\n\nNext up, we'll implement some CRUD operations and make a few improvements to our current implementation, but for now,\nwe'll call that a day. Cheers!\n",
    "html": "<p>I'm gonna give it to you straight, uncensored, and off the cuff. Building reactive, fault tolerant, pleasant-to-use\nfrontend single page applications in the modern web-based world is not an easy task; building <em>stateful</em> applications,\non top of all that, can be the most difficult part of frontend application engineering. Nowadays in the modern\nenterprise, frontend applications are more complicated than ever - managing user data, interacting with a plethora of\nAPIs, all while allowing users to navigate from page to page and back again carrying what seems like (from an end user's\nperspective) a history of all their page interactions and application data they've inherently requested just by clicking\nbuttons.</p>\n<p>To the untrained eye, this may seem like some form of complicated JavaScript dark magic, and alas, I ensure you for the\nmost part, it is. However, sometime around the rise of React in the mid-2010s, Facebook developed a rather useful design\npattern for managing frontend applications in a sane, predictable\nmanner - <a href=\"https://facebook.github.io/flux/docs/in-depth-overview\">Flux</a>. Using flux, Facebook (and by proxy, the React\ndevelopment community), pioneered a derivative of the subscriber pattern for the frontend, eventually leading to the\ndevelopment of the well-known <a href=\"https://redux.js.org/\">Redux</a> JavaScript library for building React applications. With\nthe popularity of Redux and React together, state management adhering to the flux spec came into the mainstream, and a\nplethora of flux-based libraries, heavily influenced by redux, hit the market (as an Angular reformist, I'm quite\npartial to <a href=\"https://ngrx.io/\">NgRx</a>).</p>\n<p>With flux in our back pocket, state management on the frontend has become a tried and true design pattern for building\nrich, interactive applications that are predictable by nature and seemingly eliminate the infinite state machine that\nwas the early days of JS on the web (if you think I'm joking, look at some JS written circa mid-1990's). The question\nthen becomes, what about Blazor? I've put all my eggs in the Blazor basket, and one of the last things holding me back\nfrom full immersion was the existence of a flux-based library for the framework.\nEnter <a href=\"https://github.com/mrpmorris/fluxor\">Fluxor</a>, an amazing open source library headed\nby <a href=\"https://github.com/mrpmorris\">Peter Morris</a> and the GitHub community, that provides an easy-to-use flux\nimplementation for .NET Core and Blazor. In this series, I'll guide us as we develop a simple flux-based application\nusing Fluxor with Blazor alongside <a href=\"https://github.com/reduxjs/redux-devtools\">Redux DevTools</a> (available for\nChrome/Edge and Firefox), to manage everyone's favorite list - the todos.</p>\n<h2>What we'll build</h2>\n<p>For the completed source code of what we'll be building in the first part of this (at least planned, so far) three part\nseries can be found <a href=\"https://github.com/JoeyMckenzie/StateManagementWithFluxor/tree/feature/todos-part-1\">here</a>. With\nthe help of the <a href=\"https://jsonplaceholder.typicode.com/guide.html\">JSON Placeholder</a> project, we'll be using their \"\nAPI\" (in quotes since it's not really a persistence server, simply just for making dummy calls) to build a simple CRUD\napplication using the todo models from JSON Placeholder.</p>\n<h2>Getting started</h2>\n<p>To kick things off, let's go ahead and bootstrap a new Blazor WebAssembly project from your preferred project template\nprovider. I'll be using Visual Studio throughout this series, but you're more than welcome to use Rider, VS Code, or\njust the command line. In Visual Studio, let's go ahead and hit up a <code>File > New Project</code> and select\nthe <code>Blazor WebAssembly</code> project template. I'll name my project <code>StateManagementWithFluxor</code>, but you're welcome to pick\na name of your choosing. Leaving the defaults, as we don't need any authentication or hosting from an ASP.NET Core\nserver, let's go ahead and hit <code>Create</code>.</p>\n<p>With our project ready to roll within VS, let's add a package reference to <code>Fluxor.Blazor.Web</code>\nand <code>Fluxor.Blazor.Web.ReduxDevTools</code> using your preferred installation method:</p>\n<ul>\n<li>Using the command line, <code>dotnet add package Fluxor.Blazor.Web</code>\nand <code>dotnet add package Fluxor.Blazor.Web.ReduxDevTools</code></li>\n<li>Using Package Manager with VS <code>Install-Package Fluxor.Blazor.Web</code>\nand <code>Install-Package Fluxor.Blazor.Web.ReduxDevTools</code></li>\n<li>Or, just simply add the package references through the NuGet GUI within VS</li>\n</ul>\n<p>Once we've got Fluxor added to the project, we'll need to add a few references to the library through our code to bring\ninto scope. In our <code>index.html</code> file, let's add the required JavaScript bundle just above the closing <code>&#x3C;/body></code> tag:</p>\n<h4>index.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark\"><code data-language=\"html\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">&#x3C;!</span><span style=\"color:#85E89D\">doctype</span><span style=\"color:#B392F0\"> html</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">html</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">head</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">        &#x3C;!-- Meta and CSS references --></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    &#x3C;/</span><span style=\"color:#85E89D\">head</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">body</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">        &#x3C;!-- Existing bootstrapped HTML --></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">        &#x3C;!-- Fluxor JS dependencies --></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;</span><span style=\"color:#85E89D\">script</span><span style=\"color:#B392F0\"> src</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"_content/Fluxor.Blazor.Web/scripts/index.js\"</span><span style=\"color:#E1E4E8\">>&#x3C;/</span><span style=\"color:#85E89D\">script</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    &#x3C;/</span><span style=\"color:#85E89D\">body</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#85E89D\">html</span><span style=\"color:#E1E4E8\">></span></span></code></pre></figure>\n<p>With our JS references in scope, let's add a project reference to our <code>_Imports.razor</code> file below all of our other\nimported namespaces</p>\n<h3>_Imports.razor</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">@</span><span style=\"color:#F97583\">*</span><span style=\"color:#F97583\"> ..</span><span style=\"color:#E1E4E8\">.existing project references </span><span style=\"color:#F97583\">*</span><span style=\"color:#E1E4E8\">@</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@using Fluxor</span></span></code></pre></figure>\n<p>Now, in our <code>Program.cs</code> entry point file, let's add Fluxor to the DI container so we can utilize its services\nthroughout our components:</p>\n<h4>Program.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\">// Imported namespaces...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#F97583\"> async</span><span style=\"color:#B392F0\"> Task</span><span style=\"color:#B392F0\"> Main</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">[] </span><span style=\"color:#B392F0\">args</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            var</span><span style=\"color:#B392F0\"> builder</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> WebAssemblyHostBuilder.</span><span style=\"color:#B392F0\">CreateDefault</span><span style=\"color:#E1E4E8\">(args);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            builder.RootComponents.</span><span style=\"color:#B392F0\">Add</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">App</span><span style=\"color:#E1E4E8\">>(</span><span style=\"color:#9ECBFF\">\"app\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            builder.Services.</span><span style=\"color:#B392F0\">AddTransient</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">sp</span><span style=\"color:#F97583\"> =></span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> HttpClient</span><span style=\"color:#E1E4E8\"> { BaseAddress </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> new</span><span style=\"color:#B392F0\"> Uri</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"https://jsonplaceholder.typicode.com\"</span><span style=\"color:#E1E4E8\">) });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">            // Add Fluxor</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            builder.Services.</span><span style=\"color:#B392F0\">AddFluxor</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">options</span><span style=\"color:#F97583\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                options.</span><span style=\"color:#B392F0\">ScanAssemblies</span><span style=\"color:#E1E4E8\">(Assembly.</span><span style=\"color:#B392F0\">GetExecutingAssembly</span><span style=\"color:#E1E4E8\">());</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                options.</span><span style=\"color:#B392F0\">UseReduxDevTools</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">            await</span><span style=\"color:#E1E4E8\"> builder.</span><span style=\"color:#B392F0\">Build</span><span style=\"color:#E1E4E8\">().</span><span style=\"color:#B392F0\">RunAsync</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Notice I've also updated the base URI our default HTTP client instance points to (defaults to the project host) to the\nJSON Placeholder base API address in <code>https://jsonplaceholder.typicode.com</code>. In a later post, we'll refactor this HTTP\nservice instance to\na <a href=\"https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests\">typed HTTP client</a>\ninstance; for now, this will do just fine. Along with adding our Fluxor instance to the DI container, we've also told it\nto enable Redux Dev Tools that will allow us to see, in realtime, our flux workflow as we interact with our application,\nwhere we'll be able to debug, time travel between state transitions, and a few other powerful features that come in\nhandy when working with flux-based frontend applications.</p>\n<p>Lastly, let's add a reference to the flux store that will serve as the source of record for our entire application,\ncontaining all current stateful information, within <code>App.razor</code></p>\n<h4>App.razor</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#E1E4E8\">Fluxor.Blazor.Web.StoreInitializer </span><span style=\"color:#F97583\">/></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#B392F0\">Router</span><span style=\"color:#B392F0\"> AppAssembly</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"@typeof(Program).Assembly\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">Found Context</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"routeData\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">RouteView RouteData</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"@routeData\"</span><span style=\"color:#E1E4E8\"> DefaultLayout</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"@typeof(MainLayout)\"</span><span style=\"color:#F97583\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;/</span><span style=\"color:#E1E4E8\">Found</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">NotFound</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">LayoutView Layout</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"@typeof(MainLayout)\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            &#x3C;</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">Sorry, </span><span style=\"color:#B392F0\">there</span><span style=\"color:#E1E4E8\">'</span><span style=\"color:#B392F0\">s</span><span style=\"color:#B392F0\"> nothing</span><span style=\"color:#B392F0\"> at</span><span style=\"color:#B392F0\"> this</span><span style=\"color:#B392F0\"> address</span><span style=\"color:#E1E4E8\">.&#x3C;/</span><span style=\"color:#B392F0\">p</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;/</span><span style=\"color:#B392F0\">LayoutView</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    &#x3C;/</span><span style=\"color:#B392F0\">NotFound</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#B392F0\">Router</span><span style=\"color:#E1E4E8\">></span></span></code></pre></figure>\n<p>At the top, we've added a reference to Fluxor's <code>StoreInitializer</code> that will bootstrap our state container,\namong <a href=\"https://github.com/mrpmorris/Fluxor/blob/master/Source/Fluxor.Blazor.Web/StoreInitializer.cs\">a few other things</a>,\nbut I'll let the curious folks parse through the lifecycle hooks to get a feel of what it does for us.</p>\n<p>With Fluxor ready to roll, let's take a few minutes to talk shop about the center of attention and the entire reason for\nthis series, flux.</p>\n<h2>Flux in a nutshell</h2>\n<p><img src=\"/images/state-management-with-blazor-using-fluxor/part-1/flux-in-a-nutshell.png\" alt=\"Flux_flow\"></p>\n<p>In my totally awesome flowchart, I've outlined the big ideas with flux and what an application's architecture, using the\ndesign pattern, might look like. We'll go through each key term in the flux lexicon, but to skim the top, there are six\nkey terms you'll hear frequently when using any flux/redux library:</p>\n<ul>\n<li><strong>Dispatcher</strong> - Nothing more than a request delegator of sorts, this guy/gal is in charge of issuing actions anytime\na user decides to do something on our page</li>\n<li><strong>Actions</strong> - A metadata container containing information about <em>what</em> the user did and what our application should do\nafter the user has performed the interaction with our page to kick off our flux pipeline</li>\n<li><strong>Side Effects</strong> - As subscribers to dispatched actions, I like to think of effects as listeners of specific actions,\nperforming resulting tasks based on what action was just issued</li>\n<li><strong>Reducers</strong> - Simple pure methods whose only job is to take state <em>in</em>, and spit state <em>out</em> by way of\nnon-destructive mutation, i.e. taking our current state object in, examining what action was just dispatched and how\nthe state should be transformed, and spitting out a <em>new</em> state object with said transformations</li>\n<li><strong>State</strong> - A snapshot of the currently rendered page, containing any and all data our application is concerned about\nat that point in time</li>\n<li><strong>Store</strong> - The central piece, our store is the state container, holding on to all current slices of state that all\ncomponents ultimately subscribe to and react to any store changes accordingly when the store notifies listeners\nthere's been an update</li>\n</ul>\n<p>Let's break each of those down in correlation to the flux application flowchart above, starting at step 1:</p>\n<ol>\n<li>To kick things off, a user of our web application lands on our site, in absolute awe of our CSS ability, and wants to\ninteract with the page. In our example scenario, let's pretend our user clicks a button that ultimately navigates\nthem to another page that will have some data loaded from an external API in a table</li>\n<li>When the user clicks the button to kick off the workflow, we tie said button click to a <strong>dispatcher</strong> that, you\nguessed it, <em>dispatches</em> an action that contains the metadata related to \"hey, the user just pressed this button\"</li>\n<li>With the action in flight, we've kicked off our flux cycle that will eventually end up in a state mutation that will\ncontain the aforementioned API data our components will pull in and render on the page for the user</li>\n<li>A <strong>side effect</strong> that listens for specific button clicks is notified the button they're interested in was clicked,\nand that they should make (in our case) an HTTP network call to the API in question to retrieve some data</li>\n<li>As our button click action fires off, a <strong>reducer</strong> listening for that specific button click evaluates the current\nstate and determines <em>what</em> the new state should look like. In our case, we've issued a kickoff action, so the\nreducer might mutate our current state to produce a new state that contains a boolean flag notifying components\nthere's an API call in progress</li>\n<li>This new state is then set within our flux <strong>store</strong>, causing a notification to fire off to all concerned components\nthat \"hey, there's a new piece of state!\" and cause our pages to render accordingly to what conditional state\nproperties they might be interested in (possibly rendering a loading spinner, for our case)</li>\n</ol>\n<p>Whew, that's quite a bit for just making a simple API call. You might be asking the question, however, due to the\nunfortunate limit on the speed of light, what happens when the API call returns? Our state has already been set from the\ninitial kickoff button click, so how do we get the data that has now been returned from the API to display on the page?\nI'm glad you asked. <strong>Side effects</strong> themselves also have the ability to dispatch actions, kicking off the entire flux\ncycle anew, and there's a common pattern in flux to issue <em>success</em> and <em>failure</em> commands (somewhat debated, as I fall\ninto this camp to keep clean action separation) from effects given the response to a blocking action (like an external\nnetwork call, file I/O, etc.). When our side effect has confirmed the network call came back successfully with the data\nin question, we can dispatch <em>another</em> action containing said data, that will ultimately kick off this cycle once more,\nreach a reducer waiting to be notified for that particular success action, and produce a new state with the data\ncontained from the action, which will then be set within our store where our components will be notified once again\ncausing them to re-render.</p>\n<p>Okay, let's catch our breath here for a sec, as that was more, or less, flux in a nutshell. At this point, we should\nprobably ask ourselves the question: why even bother with flux? That's quite a bit going on, only to become increasingly\nmore complex the more interaction we add to an application. While we could probably answer that a few different ways,\none of my favorite reasons for using flux/redux in any frontend application is <em>predictable state transitions</em>. In other\nwords, using flux/redux, we <em>reduce</em> the number of states our site can have and find ourselves less and less wondering \"\nhow in the <em>heck</em> did that happen?\"</p>\n<p>Take for example a modern Angular application. A large application will have tens of hundreds (yes, you heard that\nright) of components all dynamically interacting with middle-tier data storage services that call other services that\nmake network calls, etc. and are used all over the place. Your middle-tier data storage service (in flux/redux, this\nwould be your state) might be used by many components, all independently interacting with this singular service, and\nmight unknowingly effect <em>another</em> reliant component's local rendered state without any notification. This happens quite\noften in large Angular projects without redux providers, and at scale, can cause a lot of unnecessary headache.</p>\n<h2>Back to business</h2>\n<p>Okay, now that we've covered the syllabus for flux 101, let's jump into the code and put these things to practice. I've\nremoved the <code>Counter.razor</code>, <code>FetchData.razor</code>, and <code>SurveyPrompt.razor</code> pages simply because we don't need them, and\nI've updated our <code>NavMenu.razor</code> component to reflect those changes:</p>\n<h4>NavMenu.razor</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#B392F0\">div</span><span style=\"color:#B392F0\"> class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"top-row pl-4 navbar navbar-dark\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">a class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"navbar-brand\"</span><span style=\"color:#E1E4E8\"> href</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">StateManagementWithFluxor</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">a</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">button class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"navbar-toggler\"</span><span style=\"color:#E1E4E8\"> @onclick</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"ToggleNavMenu\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">span class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"navbar-toggler-icon\"</span><span style=\"color:#F97583\">>&#x3C;/</span><span style=\"color:#E1E4E8\">span</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;/</span><span style=\"color:#E1E4E8\">button</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#E1E4E8\">div class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"@NavMenuCssClass\"</span><span style=\"color:#E1E4E8\"> @onclick</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"ToggleNavMenu\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">ul class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"nav flex-column\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">li class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"nav-item px-3\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            &#x3C;</span><span style=\"color:#E1E4E8\">NavLink class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"nav-link\"</span><span style=\"color:#E1E4E8\"> href</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"\"</span><span style=\"color:#E1E4E8\"> Match</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"NavLinkMatch.All\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">span class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"oi oi-home\"</span><span style=\"color:#E1E4E8\"> aria</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">hidden</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"true\"</span><span style=\"color:#F97583\">>&#x3C;/</span><span style=\"color:#E1E4E8\">span</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> Home</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            &#x3C;/</span><span style=\"color:#E1E4E8\">NavLink</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;/</span><span style=\"color:#E1E4E8\">li</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">li class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"nav-item px-3\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            &#x3C;</span><span style=\"color:#E1E4E8\">NavLink class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"nav-link\"</span><span style=\"color:#E1E4E8\"> href</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"todos\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">span class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"oi oi-list-rich\"</span><span style=\"color:#E1E4E8\"> aria</span><span style=\"color:#F97583\">-</span><span style=\"color:#E1E4E8\">hidden</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"true\"</span><span style=\"color:#F97583\">>&#x3C;/</span><span style=\"color:#E1E4E8\">span</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> Todos</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            &#x3C;/</span><span style=\"color:#E1E4E8\">NavLink</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;/</span><span style=\"color:#E1E4E8\">li</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;/</span><span style=\"color:#E1E4E8\">ul</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@code {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Nothing new here...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>I've added a hyperlink to a new route, <code>/todos</code>, and to accommodate, let's go ahead and create a new page under\nthe <code>Pages</code> folder called <code>Todos.razor</code> with the following markup:</p>\n<h4>Todos.razor</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">@inherits Fluxor.Blazor.Web.Components.FluxorComponent</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@page </span><span style=\"color:#9ECBFF\">\"/todos\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#B392F0\">h3</span><span style=\"color:#B392F0\"> class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"text-center mb-3\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">Todos</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">h3</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@code {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    protected override </span><span style=\"color:#F97583\">void</span><span style=\"color:#B392F0\"> OnInitialized</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        base</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">OnInitialized</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Inside <code>Todos.razor</code>, we've inherited from a <code>FluxorComponent</code>, which in turn inherits from a <code>ComponentBase</code>, which,\nagain you've guessed, serves as the parent for all <code>.razor</code> pages in a Blazor application. Inheriting from\na <code>FluxorComponent</code> allows us to call its implmentation of <code>OnInitialized()</code>, the first lifecycle hook a <code>.razor</code> page\ngoes through during its rendering process.</p>\n<p>If we start up our application now, either by hitting F5 in Visual Studio, or running <code>dotnet watch run</code> from the\ncommand line, we nothing particularly exciting on our site just yet (just a a landing page and one route-able page).\nWith our central flux architecture in place, let's go ahead and start wiring things up. First, let's create a model that\nwill house the response from our network calls to the JSON Placeholder API. Let's create a <code>Models</code> folder in the root\nof our project, and underneath that, let's add a <code>Todos</code> folder as well. In our <code>Todos</code> directory, let's create\na <code>TodoDto.cs</code> class file with the following content:</p>\n<h4>TodoDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Models</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> TodoDto</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> Id</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">? </span><span style=\"color:#B392F0\">Title</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> bool</span><span style=\"color:#B392F0\"> Completed</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> int</span><span style=\"color:#B392F0\"> UserId</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">set</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Nothing super exciting here, only to note that for this project, I've enabled nullable reference types (see\nour <code>.csproj</code> file) and the compiler will complain if I we're to mark the <code>Title</code> as a <code>string</code> type rather than a\nnullable <code>string?</code> type without an explicit constructor initializing it's value. The ASP.NET Core HTTP client class is\nresponsible for serializing requests and deserializing responses. While it's perfectly fine for our requests to be\nimmutable data types (which we'll be doing throughout this series), upon deserialization from an HTTP response, the\nframework will internally call our model's setters, so we need to make them publicly available.</p>\n<p>With our response model taken care of, let's go ahead and wire up our first application workflow: retrieving a list of\ntodos.</p>\n<h3>Defining our first action</h3>\n<p>If we call the JSON Placeholder API <code>/todos</code> endpoint, we'll see the following response:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark\"><code data-language=\"json\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">[</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        \"userId\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        \"id\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        \"title\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"delectus aut autem\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        \"completed\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">false</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        \"userId\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        \"id\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        \"title\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"quis ut nam facilis et officia qui\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        \"completed\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">false</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Repeat 100 times...</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">]</span></span></code></pre></figure>\n<p>We'll need to define a piece of state to hold the API response for the list of todos so that we can display it on the\ntodos page. Let's start be defining our todos state that we'll be interacting with throughout our application. At the\nroot of our project, let's create a <code>Store</code> folder, and underneath that, let's add a <code>State</code> directory. You're free use\nany flux/redux folder structure you feel comfortable with, but I tend to take an opinionated approach similar to the\nfollowing file structure:</p>\n<pre><code>/Store\n    /Features\n        /Feature1\n            /Actions\n            /Reducers\n            /Effects\n            Feature1.cs\n        /Feature2\n            /Actions\n            /Reducers\n            /Effects\n            Feature2.cs\n    /State\n        FeatureState1.cs\n        FeatureState2.cs\n</code></pre>\n<p>To set ourselves up for ease of feature extension in the future, let's define a <code>RootState.cs</code> class file that will hold\ncommon feature state properties (loading flags, common errors, etc.):</p>\n<h4>RootState.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">State</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> abstract</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> RootState</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> RootState</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">bool</span><span style=\"color:#B392F0\"> isLoading</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">? </span><span style=\"color:#B392F0\">currentErrorMessage</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            (IsLoading, CurrentErrorMessage) </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> (isLoading, currentErrorMessage);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> bool</span><span style=\"color:#B392F0\"> IsLoading</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">? </span><span style=\"color:#B392F0\">CurrentErrorMessage</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> bool</span><span style=\"color:#B392F0\"> HasCurrentErrors</span><span style=\"color:#F97583\"> =></span><span style=\"color:#F97583\"> !</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">IsNullOrWhiteSpace</span><span style=\"color:#E1E4E8\">(CurrentErrorMessage);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Exactly as mentioned above, our <code>RootState</code> will serve the purpose of playing the parent to all feature state slices\nwhere we'll be able to define common properties. In large applications, you might have multiple feature\nstates (<code>TodosState.cs</code>, <code>ArticlesState.cs</code>, <code>UsersState.cs</code>, etc.) so defining a common state for all to descend from\nallows us to build in shared state properties without duplicating such properties across multiple states. Notice we've\nmarked this class as <code>abstract</code> to convey the intent to our fellow developers that this class should be inherited from,\nnot instantiated on its own.</p>\n<p>With our common state defined, let's add a <code>TodosState.cs</code> file inside of our <code>State</code> subfolder to contain all of our\nrelevant state properties:</p>\n<h4>TodosState.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Models</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Collections</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Generic</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">State</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> TodosState</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">RootState</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> TodosState</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">bool</span><span style=\"color:#B392F0\"> isLoading</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">? </span><span style=\"color:#B392F0\">currentErrorMessage</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">IEnumerable</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">TodoDto</span><span style=\"color:#E1E4E8\">>? </span><span style=\"color:#B392F0\">currentTodos</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">TodoDto</span><span style=\"color:#E1E4E8\">? </span><span style=\"color:#B392F0\">currentTodo</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            : </span><span style=\"color:#79B8FF\">base</span><span style=\"color:#E1E4E8\">(isLoading, currentErrorMessage)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            CurrentTodos </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> currentTodos;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            CurrentTodo </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> currentTodo;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> IEnumerable</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">TodoDto</span><span style=\"color:#E1E4E8\">>? </span><span style=\"color:#B392F0\">CurrentTodos</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> TodoDto</span><span style=\"color:#E1E4E8\">? </span><span style=\"color:#B392F0\">CurrentTodo</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Descending from our <code>RootState</code> we construct an immutable state object (i.e. no setters on any properties) and define\ntwo feature specific properties: <code>CurrentTodos</code> and <code>CurrentTodo</code>. <code>CurrentTodos</code> will hold the most recent list of\ntodos returned from the JSON Placeholder API's <code>/todos</code> endpoint, with <code>CurrentTodo</code> holding the most recent todo\nreturned from the <code>/todos/:id</code> endpoint. Again, I've declared these explicitly as nullable, since there may be points in\nour application's lifecycle that we'll have yet to interact with any APIs, and no data will be presently available\nwithin our store.</p>\n<p>With our state objects defined, let's define our first feature. Inside the <code>Store</code> folder, let's add a <code>Features</code>\nfolder, and within that, a <code>Todos</code> folder. Again, sticking to the saforementioned file structure, let's add\na <code>TodosFeature.cs</code> file underneath our <code>Features</code> folder:</p>\n<h4>TodosFeature.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> Fluxor</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">State</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> TodosFeature</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">Feature</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">TodosState</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> override</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> GetName</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">=></span><span style=\"color:#9ECBFF\"> \"Todos\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        protected</span><span style=\"color:#F97583\"> override</span><span style=\"color:#B392F0\"> TodosState</span><span style=\"color:#B392F0\"> GetInitialState</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">=></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            new</span><span style=\"color:#B392F0\"> TodosState</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">false</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Descending from <code>Feature&#x3C;TodosState></code>, this tells Fluxor at startup (during its initial assembly scanning) that this\nwill be a store feature named <code>Todos</code> that will house a <code>TodosState</code> object. Later when we look at our current state\nwith Redux Dev Tools, we'll see that our store is nothing more than a JSON object containing a <code>Todos</code> node with all the\nproperties we've defined in the <code>TodosState</code> class. Fluxor needs to know what initial state our todos feature slice\nshould have, so we add a constructor to initialize an initial state object. Some people might cringe when they\nsee <code>null</code> being explicitly passed to a constructor, but thanks to C#'s nullable reference type, we're telling our\nfellow developers that our intent is to express the absence of those properties, and before dereferencing those\nproperties in a component, the compiler will warn them if they do not check for <code>null</code> before doing so. Pretty cool,\nhuh?</p>\n<p>With our first feature defined, let's create our first workflow. Let's create an <code>Actions</code> folder underneath our <code>Todos</code>\ndirectory and add one more folder called <code>LoadTodos</code> underneath our newly created <code>Actions</code> folder. In our <code>LoadTodos</code>\nsubfolder, let's create three classes: <code>LoadTodosAction.cs</code>, <code>LoadTodosSuccessAction.cs</code>,\nand <code>LoadTodosFailureAction.cs</code> action:</p>\n<h4>LoadTodosAction.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Actions</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">LoadTodos</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> LoadTodosAction</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<h4>LoadTodosSuccessAction.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Models</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Collections</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Generic</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Actions</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">LoadTodos</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> LoadTodosSuccessAction</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> LoadTodosSuccessAction</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">IEnumerable</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">TodoDto</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">todos</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Todos </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> todos;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> IEnumerable</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">TodoDto</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<h4>LoadTodosFailureAction.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Shared</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Actions</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Actions</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">LoadTodos</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> LoadTodosFailureAction</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">FailureAction</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> LoadTodosFailureAction</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> errorMessage</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            : </span><span style=\"color:#79B8FF\">base</span><span style=\"color:#E1E4E8\">(errorMessage)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<ul>\n<li>Our <code>LoadTodosAction.cs</code> class contains no logic, and is used for nothing more that a typed action for the flux\npipeline to signal to its subscribers of the <code>LoadTodos</code> workflow. Kickoff actions can contain metadata and we'll see\nthis when we retrieve todo details by ID.</li>\n<li>Our <code>LoadTodosSuccessAction.cs</code> class contains a list of non-nullable <code>TodoDto</code> items that will act as the transport\nobject moving the JSON Placeholder API response into our flux store.</li>\n<li>Our <code>LoadTodosFailureAction.cs</code> class will trigger an error workflow, allowing us to gracefully respond to any network\nfailures or errors returned from the API to be propagated back to our components.</li>\n</ul>\n<p>Notice I've also defined a <code>FailureAction.cs</code> class that acts as the root for all failure actions. For our simple\napplication, failure actions will more often that not contain some type of error identifier (in our case, a message, but\ncould also contain an ID), and I've defined it in a <code>Shared</code> feature folder underneath an <code>Actions</code> subdirectory:</p>\n<h4>Features/Shared/Actions/FailureAction.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Shared</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Actions</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> abstract</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> FailureAction</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        protected</span><span style=\"color:#B392F0\"> FailureAction</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#B392F0\"> errorMessage</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            ErrorMessage </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> errorMessage;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> string</span><span style=\"color:#B392F0\"> ErrorMessage</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#F97583\">get</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Again, this <code>abstract</code> class tells other developers that this should be seen as the common failure action all failure\nactions should descend from, so we can reuse common error properties (message, ID, etc.). With our action defined, let's\ncreate a reducer to help set the pieces of state according to dispatched action. Underneath the <code>Todos</code> feature folder,\nlet's add a <code>Reducers</code> folder with a <code>LoadTodosActionsReducer.cs</code> class:</p>\n<h4>LoadTodosActionsReducer.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> Fluxor</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Actions</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">LoadTodos</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">State</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Reducers</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> LoadTodosActionsReducer</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        [</span><span style=\"color:#B392F0\">ReducerMethod</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#B392F0\"> TodosState</span><span style=\"color:#B392F0\"> ReduceLoadTodosAction</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">TodosState</span><span style=\"color:#B392F0\"> state</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">LoadTodosAction</span><span style=\"color:#B392F0\"> _</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            new</span><span style=\"color:#B392F0\"> TodosState</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">true</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#E1E4E8\">, state.CurrentTodo);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        [</span><span style=\"color:#B392F0\">ReducerMethod</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#B392F0\"> TodosState</span><span style=\"color:#B392F0\"> ReduceLoadTodosSuccessAction</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">TodosState</span><span style=\"color:#B392F0\"> state</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">LoadTodosSuccessAction</span><span style=\"color:#B392F0\"> action</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            new</span><span style=\"color:#B392F0\"> TodosState</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">false</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#E1E4E8\">, action.Todos, state.CurrentTodo);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        [</span><span style=\"color:#B392F0\">ReducerMethod</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#B392F0\"> TodosState</span><span style=\"color:#B392F0\"> ReduceLoadTodosFailureAction</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">TodosState</span><span style=\"color:#B392F0\"> state</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">LoadTodosFailureAction</span><span style=\"color:#B392F0\"> action</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            new</span><span style=\"color:#B392F0\"> TodosState</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">false</span><span style=\"color:#E1E4E8\">, action.ErrorMessage, </span><span style=\"color:#79B8FF\">null</span><span style=\"color:#E1E4E8\">, state.CurrentTodo);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Our reducer class is simply just a <code>static</code> object with <code>static</code> methods invoked at runtime that takes in the current\nfeature slice state, and returns a new <code>TodosState</code> object based on any relevant data contained within the action that\ncaused the reducer method to be invoked.</p>\n<ul>\n<li>The <code>ReduceLoadTodosAction</code> method causes our reducer to create a new state with the <code>IsLoading</code> flag set to <code>true</code>,\ntelling components there's currently an API call in flight. Since our current action workflow is just dealing with\ngathering a list of todos and does not effect the currently selected todo piece of state, we set whatever\nthe <code>CurrentTodo</code> property was from the old state on the new state as to not effect any components concerned with that\nparticular property.</li>\n<li>The <code>ReduceLoadTodosSuccessAction</code> method returns a new state setting the <code>IsLoading</code> to <code>false</code> letting components\nknow our API call has completed, and we set the <code>CurrentTodos</code> state property to the <code>Todo</code> property dereferenced from\nthe <code>LoadTodosSuccessAction</code> passed in. We'll see how this property is initially populated in\nthe <code>LoadTodosSuccessAction</code> class shortly.</li>\n<li>The <code>ReduceLoadTodosFailureAction</code> method again sets the <code>IsLoading</code> flag to <code>false</code> for the reasons mentioned above,\nand we populate the <code>CurrentErrors</code> property on our state so that our components may react accordingly to the API\nfailure.</li>\n</ul>\n<p>With our reducer defined, let's go ahead and create a side effect that will do the work of calling the API and\ndispatching the success or failure action based on its response. Again, back in our <code>Features/Todos</code> subfolder, let's\nadd an <code>Effects</code> folder with a <code>LoadTodosEffect.cs</code> class:</p>\n<h4>LoadTodosEffect.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> Fluxor</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> Microsoft</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Extensions</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Logging</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Models</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Actions</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">LoadTodos</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Collections</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Generic</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Net</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Http</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Net</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Http</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> System</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Threading</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Tasks</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Effects</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> LoadTodosEffect</span><span style=\"color:#E1E4E8\"> : </span><span style=\"color:#B392F0\">Effect</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">LoadTodosAction</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        private</span><span style=\"color:#F97583\"> readonly</span><span style=\"color:#B392F0\"> ILogger</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">LoadTodosEffect</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">_logger</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        private</span><span style=\"color:#F97583\"> readonly</span><span style=\"color:#B392F0\"> HttpClient</span><span style=\"color:#B392F0\"> _httpClient</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> LoadTodosEffect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">ILogger</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">LoadTodosEffect</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">logger</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">HttpClient</span><span style=\"color:#B392F0\"> httpClient</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            (_logger, _httpClient) </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> (logger, httpClient);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        protected</span><span style=\"color:#F97583\"> override</span><span style=\"color:#F97583\"> async</span><span style=\"color:#B392F0\"> Task</span><span style=\"color:#B392F0\"> HandleAsync</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">LoadTodosAction</span><span style=\"color:#B392F0\"> action</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">IDispatcher</span><span style=\"color:#B392F0\"> dispatcher</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            try</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                _logger.</span><span style=\"color:#B392F0\">LogInformation</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Loading todos...\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">                // Add a little extra latency for dramatic effect...</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                await</span><span style=\"color:#E1E4E8\"> Task.</span><span style=\"color:#B392F0\">Delay</span><span style=\"color:#E1E4E8\">(TimeSpan.</span><span style=\"color:#B392F0\">FromMilliseconds</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">));</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                var</span><span style=\"color:#B392F0\"> todosResponse</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> _httpClient.</span><span style=\"color:#B392F0\">GetFromJsonAsync</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">IEnumerable</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">TodoDto</span><span style=\"color:#E1E4E8\">>>(</span><span style=\"color:#9ECBFF\">\"todos\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                _logger.</span><span style=\"color:#B392F0\">LogInformation</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Todos loaded successfully!\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                dispatcher.</span><span style=\"color:#B392F0\">Dispatch</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">new</span><span style=\"color:#B392F0\"> LoadTodosSuccessAction</span><span style=\"color:#E1E4E8\">(todosResponse));</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            catch</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#B392F0\">Exception</span><span style=\"color:#B392F0\"> e</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                _logger.</span><span style=\"color:#B392F0\">LogError</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">$\"Error loading todos, reason: {</span><span style=\"color:#E1E4E8\">e</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">Message</span><span style=\"color:#9ECBFF\">}\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                dispatcher.</span><span style=\"color:#B392F0\">Dispatch</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">new</span><span style=\"color:#B392F0\"> LoadTodosFailureAction</span><span style=\"color:#E1E4E8\">(e.Message));</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Let's break this code down:</p>\n<ul>\n<li>First, we descend from Fluxor's <code>Effect&#x3C;TAction></code> class, with our <code>TAction</code> generic type being our <code>LoadTodosAction</code>\nclass so this effect knows to invoke its <code>HandleAsync</code> method whenever that action is dispatched</li>\n<li>Fluxor scans our assembly for all classes descending from <code>Effect&#x3C;TAction></code> and adds them to the DI container, so we\nhave the ease of injecting dependencies at runtime</li>\n<li>We inject an <code>HttpClient</code> instance and a logger into the class using an expression bodied tuple constructor (some C#\nsyntactic sugar)</li>\n<li><code>HandleAsync</code> ships with an <code>IDispatcher</code> instance for us to utilize to issue more actions inside our effect</li>\n<li>We make the API call using the injected <code>HttpClient</code> instance, and use the <code>GetFromJsonAsync&#x3C;TResponse></code> extension\nmethod from the <code>System.Net.Http</code> namespace the .NET team has so generously provided us to make the HTTP call and\ndeserialize the response into our <code>TodoDto</code> list</li>\n<li>If all goes well and the API call is successful, we issue another action in the form of a <code>LoadTodosSuccessAction</code>\nclass constructed with the endpoint's response</li>\n<li>If there's any exceptions thrown, we'll <code>catch</code> and log the error, as well as issue a failure action with the\nexception message</li>\n</ul>\n<p>Recall the flux pipeline mentioned earlier. Throughout our list retrieval process, we'll be going through two iterations\nof dispatcher > action > effect/reducer > store:</p>\n<ol>\n<li>(Initial) <code>LoadTodosAction</code> > <code>LoadTodosEffect</code> / <code>LoadTodosActionsReducer</code> > <code>TodosState</code> set in the store</li>\n<li>(Post API call) <code>LoadTodosSuccessAction</code>/<code>LoadTodosFailureAction</code> > <code>LoadTodosActionsReducer</code> > <code>TodosState</code> set in\nthe store</li>\n</ol>\n<p>In the first iteration, we fire our initial action to signal to our application to call to the API and retrieve some\ndata, with the following iteration being the outcome of the API call. When the API call completes and another action is\nissued, either the success or failure actions, we'll again invoke the proper reducer method to produce a new slice of\nfeature state in store with either the loaded data for components to access, or an error message for the components to\ndisplay back to the user.</p>\n<p>With our actions, reducer, and side effect defined, let's add one more service to help with dispatching actions that our\ncomponents will be able to inject and use accordingly: our <code>StateFacade.cs</code> service:</p>\n<h4>StateFacade.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> Fluxor</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> Microsoft</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Extensions</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Logging</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Actions</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">LoadTodoDetail</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Store</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Features</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Todos</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Actions</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">LoadTodos</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> StateFacade</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        private</span><span style=\"color:#F97583\"> readonly</span><span style=\"color:#B392F0\"> ILogger</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StateFacade</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">_logger</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        private</span><span style=\"color:#F97583\"> readonly</span><span style=\"color:#B392F0\"> IDispatcher</span><span style=\"color:#B392F0\"> _dispatcher</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#B392F0\"> StateFacade</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">ILogger</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StateFacade</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#B392F0\">logger</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">IDispatcher</span><span style=\"color:#B392F0\"> dispatcher</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            (_logger, _dispatcher) </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> (logger, dispatcher);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> void</span><span style=\"color:#B392F0\"> LoadTodos</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            _logger.</span><span style=\"color:#B392F0\">LogInformation</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Issuing action to load todos...\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            _dispatcher.</span><span style=\"color:#B392F0\">Dispatch</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">new</span><span style=\"color:#B392F0\"> LoadTodosAction</span><span style=\"color:#E1E4E8\">());</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Before we break this code down, let's discuss why we might want to use a facade, and furthermore, what the heck even is\na \"facade.\"</p>\n<h4>Decoupling components from flux</h4>\n<p>With flux being a proven robust frontend application architecture, in large codebases, you'll most likely have hundreds\nof different actions with many different feature state slices in a store. For those with Redux Dev Tools installed, if\nyou we're to navigate to <a href=\"https://reddit.com\">Reddit</a> with the dev console Redux tab open, you'll see the reddit store\ncontains roughly 50 or so different state slices, each complexly nested with various pieces of that particular state's\nnode. In Redux, there's an idea used quite often called the <em>facade pattern</em> that provides a layer of separation between\nour view components and our store interactions. As we tend to think of backend architectures in various layers, the\ngrowing complexity of the frontend can be thought of in the same way, with a layered architecture to encapsulate the\nvarious features of an application.</p>\n<p><img src=\"/images/state-management-with-blazor-using-fluxor/part-1/facade_redirection.png\" alt=\"facade\"></p>\n<p>If we consider the rendered view our user interacts with as the innermost layer akin to the domain layer in onion\narchitecture, then our flux implementation for state management would be a low-level detail in charge of providing the\ndata for those view components. If we think of the classic onion diagram, outermost dependencies should always point\ninward, implying that our rendered views should not be concerned with, or even care, how the data they display is given\nto them. We simply give our views read-only access to the store for them to treat as the source of record; how the data\ngets there is none of their concern.</p>\n<p>By providing a facade interface between our components and the flux cycle, our components do not need to know about\nindividual actions, only workflows concerning what data they need. For simple applications like ours, it may be a bit\noverkill, but I would argue in large complex applications, adding a facade layer does provide the benefit of\nimplementation details being shrouded from the view components and allowing us to rework actions and workflows without\nbreaking our contracts between the view layer and the flux layer.</p>\n<p>Alright, now back to our regularly scheduled program.</p>\n<h3>Back to business</h3>\n<p>With our facade in place, our <code>.razor</code> components now need only to inject the <code>StateFacade</code> and whatever feature slice\nstate they're concerned about to render their markup. As we're adding a service, we also need to add it to the DI\ncontainer. Back in our <code>Program.cs</code>:</p>\n<h4>Program.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\">// Existing namespaces...</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">using</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Services</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">namespace</span><span style=\"color:#B392F0\"> StateManagementWithFluxor</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    public</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        public</span><span style=\"color:#F97583\"> static</span><span style=\"color:#F97583\"> async</span><span style=\"color:#B392F0\"> Task</span><span style=\"color:#B392F0\"> Main</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">[] </span><span style=\"color:#B392F0\">args</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">            // Previous services being wired up...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">            // Add custom application services</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            builder.Services.</span><span style=\"color:#B392F0\">AddScoped</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StateFacade</span><span style=\"color:#E1E4E8\">>();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">            await</span><span style=\"color:#E1E4E8\"> builder.</span><span style=\"color:#B392F0\">Build</span><span style=\"color:#E1E4E8\">().</span><span style=\"color:#B392F0\">RunAsync</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>We've added our <code>StateFacade</code> as a scoped service available for injection anew every time the service is plucked from\nthe DI container and injected at runtime into a <code>.razor</code> page.</p>\n<h3>Putting it all together</h3>\n<p>With our feature, actions, reducers, side effect, and store defined and ready to go, let's FINALLY start writing some\nmarkup to display all this darn data. First, let's open up our <code>MainLayout.razor</code> file and have it inherit from\na <code>FluxorComponent</code> as it'll be housing components interacting with pieces of state that involve event handlers, and\nwill be in need of proper disposal later in the series:</p>\n<h4>MainLayout.razor</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">@inherits Fluxor.Blazor.Web.Components.FluxorLayout</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#B392F0\">div</span><span style=\"color:#B392F0\"> class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"sidebar\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">NavMenu </span><span style=\"color:#F97583\">/></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#E1E4E8\">div class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"main\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">div class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"top-row px-4\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">a href</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"http://blazor.net\"</span><span style=\"color:#E1E4E8\"> target</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"_blank\"</span><span style=\"color:#E1E4E8\"> class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"ml-md-auto\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">About</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">a</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">div class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"content px-4\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        @Body</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@code {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    protected override </span><span style=\"color:#F97583\">void</span><span style=\"color:#B392F0\"> OnInitialized</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        base</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">OnInitialized</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>We've add the <code>@inherits Fluxor.Blazor.Web.Components.FluxorLayout</code> directive so that we can call <code>FluxorLayout</code>'s\nimplementation of the <code>OnInitialized()</code> lifecycle hook similarly to our <code>Todos.razor</code> file. With this in place, let's\nopen up our <code>Todos.razor</code> page again and add some markup, as well as the injected services we'll need to properly render\nthe data:</p>\n<h4>Todos.razor</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"github-dark\"><code data-language=\"csharp\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">@inherits Fluxor.Blazor.Web.Components.FluxorComponent</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@page </span><span style=\"color:#9ECBFF\">\"/todos\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@using StateManagementWithFluxor.Store.State</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@using StateManagementWithFluxor.Services</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@inject IState</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#E1E4E8\">TodosState</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> TodosState</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@inject StateFacade Facade</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#B392F0\">h3</span><span style=\"color:#B392F0\"> class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"text-center mb-3\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">Todos</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">h3</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">@if</span><span style=\"color:#E1E4E8\"> (TodosState.Value.IsLoading)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">div class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"d-flex flex-row justify-content-center\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">div class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"spinner-border\"</span><span style=\"color:#E1E4E8\"> role</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"status\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            &#x3C;</span><span style=\"color:#E1E4E8\">span class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"sr-only\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">Loading</span><span style=\"color:#F97583\">..</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">span</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;/</span><span style=\"color:#E1E4E8\">div</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">else </span><span style=\"color:#B392F0\">if</span><span style=\"color:#E1E4E8\"> (TodosState.Value.HasCurrentErrors)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">span</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">Whoops</span><span style=\"color:#F97583\">!</span><span style=\"color:#E1E4E8\"> Looks like an issue occurred loading todos </span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">span</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">else </span><span style=\"color:#B392F0\">if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#E1E4E8\">(TodosState.Value.CurrentTodos </span><span style=\"color:#F97583\">is</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">&#x26;&#x26;</span><span style=\"color:#E1E4E8\"> TodosState.Value.CurrentTodos.</span><span style=\"color:#B392F0\">Any</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;</span><span style=\"color:#E1E4E8\">table class</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"table table-hover\"</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">thead</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            &#x3C;</span><span style=\"color:#E1E4E8\">tr</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">th scope</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"col\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">ID</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">th</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">th scope</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"col\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">Title</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">th</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">th scope</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"col\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">Completed</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">th</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">th scope</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"col\"</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">User ID</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">th</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            &#x3C;/</span><span style=\"color:#E1E4E8\">tr</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;/</span><span style=\"color:#E1E4E8\">thead</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#E1E4E8\">tbody</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">            @foreach</span><span style=\"color:#E1E4E8\"> (var todo </span><span style=\"color:#F97583\">in</span><span style=\"color:#E1E4E8\"> TodosState.Value.CurrentTodos.</span><span style=\"color:#B392F0\">Take</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">10</span><span style=\"color:#E1E4E8\">))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                &#x3C;</span><span style=\"color:#E1E4E8\">tr</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                    &#x3C;</span><span style=\"color:#E1E4E8\">td</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">@todo.Id</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">td</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                    &#x3C;</span><span style=\"color:#E1E4E8\">td</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">@todo.Title</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">td</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                    &#x3C;</span><span style=\"color:#E1E4E8\">td</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">@todo.Completed</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">td</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                    &#x3C;</span><span style=\"color:#E1E4E8\">td</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">@todo.UserId</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#E1E4E8\">td</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                &#x3C;/</span><span style=\"color:#E1E4E8\">tr</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        &#x3C;/</span><span style=\"color:#E1E4E8\">tbody</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    &#x3C;/</span><span style=\"color:#E1E4E8\">table</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">@code {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    protected override </span><span style=\"color:#F97583\">void</span><span style=\"color:#B392F0\"> OnInitialized</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">        // Issue the load todos command, if no current todos have been loaded</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        if</span><span style=\"color:#E1E4E8\"> (TodosState.Value.CurrentTodos </span><span style=\"color:#F97583\">is</span><span style=\"color:#79B8FF\"> null</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Facade.</span><span style=\"color:#B392F0\">LoadTodos</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        base</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">OnInitialized</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Finally, we've got some testable markup! Using some simple Bootstrap (feel free to use your favorite CSS provider,\nyou'll have to pry Bootstrap out of my cold, dead hands), we've added a table to display our todos, taking only the\nfirst 10 for brevity, as well as some logic to load todos using our <code>StateFacade</code> with the line <code>Facade.LoadTodos();</code>.\nOur Todos component has no concern with <em>how</em> the todos are loaded or what actions are involved, it's only concerned\nabout issuing a command to get the todos loaded into the store. If we to fire up our application once more and navigate\nto the <code>Todos</code> nav item (open your dev console to the Network tab), we should see an API call being made to the <code>todos</code>\nendpoint, a loading spinner spinning for just a few seconds, and then... a todo list!</p>\n<p>Let's explore a little using Redux Dev Tools (download for your favorite browser). After you installed the addon, let's\nhead back to the home page and refresh the application with the <code>Redux</code> tab selected in the dev console. Right off the\nbat, we see three actions being issued:</p>\n<ul>\n<li><code>@@INIT</code> - Redux Dev Tool's internal action</li>\n<li><code>StoreInitializedAction</code> - Recall the <code>&#x3C;Fluxor.Blazor.Web.StoreInitializer /></code> component we added to <code>App.razor</code>, this\nis Fluxor initializing our feature states from the <code>Feature&#x3C;TState></code> found during assembly scanning and setting up our\ndefault states from the <code>GetInitialState()</code> method</li>\n<li><code>GoAction</code> - Fluxor's internal navigation action that sets the <code>@routing</code> piece of state on our store with the <code>Uri</code>\nnode within it (we'll hook into this action as well in a later post)</li>\n</ul>\n<p>Now, if we navigate to <code>Todos</code> on the side nav, we should see three more actions being issued in the following order:</p>\n<ul>\n<li>Another <code>GoAction</code> issued internally by Fluxor</li>\n<li>Our <code>LoadTodosAction</code> we defined earlier</li>\n<li>And finally, our <code>LoadTodosSuccessAction</code> containing the todo items returned from the API (click on the <code>Action</code> tab\non the action in the list and you see see our <code>Todo</code> property underneath the <code>Payload</code> property)</li>\n</ul>\n<p>If we click on the <code>LoadTodosSuccessAction</code> on the action list and then the <code>State</code> tab, we should see our <code>Todos</code>\nfeature slice node with a <code>CurrentTodos</code> node that contains an array of all the todo items returned from the API!</p>\n<p>You might be asking the question - how does the page know to render the list? Recall the <code>IState&#x3C;TodosState> State</code>\ndirective we injected into our <code>Todos.razor</code> page - because we've inheried from a <code>FluxorComponent</code>, when we\ncall <code>OnInitialized()</code>, our component subscribes to state changes of the injected state type (<code>TodosState</code> in our case),\nand when a new state is set (from reducers producing a new state on an issued action), Blazor's built\nin <code>StateHasChanged()</code> is called for us, forcing components to re-render their markup accordingly. The hard work is done\nfor us, while we get to sit back and gaze at our beautiful todos in all their glory.</p>\n<h3>Wrapping up</h3>\n<p>So far, we've seen what flux is, why we would want to use it in a single page application, and how to setup Fluxor with\nBlazor. For brevity, I've also added a workflow to retrieve todos by ID, but I'll leave the implementation details up to\nthe reader (take a look a the source\ncode <a href=\"https://github.com/JoeyMckenzie/StateManagementWithFluxor/tree/feature/todos-part-1\">here</a> to see exactly how I've\ndone it - nothing crazy, just a new page with some more actions, reducers, and effects). We've seen how using Redux Dev\nTools, we're able to peek into the workflow step-by-step of our application and observe incremental state changes, and\nlater, we'll see the real power of Dev Tools in time travel state transitions.</p>\n<p>Next up, we'll implement some CRUD operations and make a few improvements to our current implementation, but for now,\nwe'll call that a day. Cheers!</p>"
  },
  "_id": "2020/state-management-with-fluxor-blazor-part-1.md",
  "_raw": {
    "sourceFilePath": "2020/state-management-with-fluxor-blazor-part-1.md",
    "sourceFileName": "state-management-with-fluxor-blazor-part-1.md",
    "sourceFileDir": "2020",
    "contentType": "markdown",
    "flattenedPath": "2020/state-management-with-fluxor-blazor-part-1"
  },
  "type": "Post",
  "url": "/blog/2020/state-management-with-fluxor-blazor-part-1"
}