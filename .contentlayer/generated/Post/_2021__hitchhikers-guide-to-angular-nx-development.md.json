{
  "title": "Hitchhiker's guide to Angular development with Nx",
  "description": "The answer is simple... 42 (projects in the same monorepo).",
  "pubDate": "2021-11-11T08:00:00.000Z",
  "category": "angular",
  "heroImage": "/images/hitchhikers-guide-to-nx/nx-meme.jpg",
  "draft": false,
  "keywords": [
    "angular",
    "nx",
    "typescript"
  ],
  "body": {
    "raw": "\nAs developers, we love reusability: components, modules, CSS, code snippets,\nlibraries, you name it... if it can be made generic, one can safely bet that\na friendly developer will at some point attempt a Herculean effort to do so. Enter\nthe monorepo - a development style aimed at encouraging reusability, common versioning, and\nimproved developer experience when working on large teams. While there are quite a few benefits\nof working within a single repository for multiple projects, those aforementioned are just a _few_ of the many perks.\nAs I continue to veer off the .NET blogging path for a bit, I thought it would\nfun to write a bit about my favorite development tool lately in the JS/TS realm, [Nx](https://nx.dev/).\n\n## What is Nx?\n\nNx is a tool developed by [Nrwl](https://nrwl.io/) to empower development promoting the reuse of code for applications\nall developed within the same repository or workspace.\nUsing Nx, we can create independent applications all with their own separate lines of business, project domains, CI/CD\nprocesses, etc. all while developing common\ndependencies for those applications to consume all within the same repository. I won't cover in-depth what\nexactly a monorepo is and why you should consider using the development paradigm on your team, as there\nare a plethora of articles explaining their existence by developers much, _much_ smarter than myself.\n\n## Monorepos at a glance\n\nWhen developing within a monorepo, we can independently write entirely separate applications that deal with separate\nconcerns while developing their common dependencies at the same time, with the payoff being reusability of shared\ncomponents and modules\nas far as the eye can see.\n\nTake, for example, a common business application for your organization's users that may have two sides of the same\nshared coin -\na user facing [insert your org's line of business] application, with an org internal admin-based application\nto help manage users with what the application may be dealing with.\n\nIn the case of the almighty todo-based app, a user facing todo application may be deployed out to the DMZ allowing users\nto add, update, and manage their todo items.\nThen the fateful day comes where upper management decides they would like an admin tool built for the company's\nbusiness analysts to assist with users' todos, allowing for reporting on certain types of todos, managing a user's todo\nshould it require a little assistance, etc.\n\nFrom an architectural standpoint, while it may be tempting to develop such functionality into the same user facing\napplication with some sort of heightened privilege given to certain users to access\nthe admin functionality, one might argue that such functionality is an entirely separate concern in comparison to what\nour existing users of our todo application expect.\nSo we make the decision to rip out common code, components, modules, etc. and put them in a separate shared repository\nthat both the todos app and admin todos app pull in\nas a dependency into their, again, separately maintained projects. Three projects, three separate repositories, three\nindividual build/deployment pipelines, and the list goes on.\n\nAs much fun as it sounds managing and maintaining what are essentially three separate projects, there's a lot of work\nbeing done in our previous scenario. Wouldn't it be great\nto simply development all of our code in the same place? Enter the monorepo.\n\n## Nx at a glance\n\nWhile Nx may seem to be well suited for the JS/TS world, it is a language agnostic toolkit with lots\nof [community plugins](https://nx.dev/community) for varying\nlanguages, frameworks, and ecosystems. I like to think of Nx as a metaframework, or a framework to help manage your\nframework specific libraries and applications with\nwell-defined conventions, all while bringing modern tools we developers love baked into your workspace (Jest, ESLint,\nStorybook, etc.). Again, while Nx is itself an entire\nrealm of knowledge one can easily spend an entire day reading about, for our purposes of this article, we'll only touch\non a few of the many\ntools Nx gives us while developing our applications all within the same repository.\n\nTo keep things simple, let's use our previous example of building out a todos application using Angular to see how we\nmight\ncleanly architect such an application. Our game plan will be something like:\n\n-   One todo application, serving as nothing more than a glorified dependency injection container/puppeteer for the\n    libraries it depends on\n-   Separate libraries that each have a single concern - state management, UI, and utilities\n\nWhile it might be tempting to throw everything into our single todo application in place of separate libraries,\nwe should make it a point to keep our applications as simple as possible, offloading most of our dependencies into\nscoped\nlibraries and modules each with a designated purpose. What does this mean in practice? Let's look at an example\narchitecture\nwe'll emulate while developing our applications within an Nx monorepo:\n\n```shell\n\\apps\n  \\todos\n\\libs\n  \\todos\n    \\ui\n    \\features\n    \\services\n```\n\nWe're effectively building a single entry point for our users into our codebase - our todos app. Our todos app, in terms\nof an Angular project, will exist as nothing more than the container for dependencies, assets, and environment specific\nsettings. By offloading UI components, services,\ncore business logic and the like, we build in contextual boundaries to our todos application in the form\nof dependent modules that each deal with their individual concerns, while exposing only the pieces that are\nrequired through their public API. In plain English, all this means is that the primary todo application\ndoes not concern itself with how its dependencies are implemented - only that they _are_ implemented\nin some form.\n\nFrom an Angular code perspective, this means our todos application will look, at its core, like this:\n\n```shell\n\\todos\n  \\src\n    \\app\n      app.component.html\n      app.component.ts\n      app.module.ts\n```\n\nAbout as bare bones as an Angular project can get, our todos app serves again as nothing more than a coordinator of\ninjected services, dependencies, and modules. This means no `\\components`, `\\services`, `\\state` folders, or any other\ncore logic that is required for our app to run.\n\nWith our precursor to monorepos with Nx out of the way, let's jump into some code!\n\n## Getting started\n\nto kick things off, let's create our Nx workspace, preset to Angular:\n\n```shell\nnpx create-nx-workspace@latest exploring-nx --preset=angular\n```\n\n> As of this writing, opting for the latest workspace generator will use Nx 13 alongside Angular 13\n\nNx will kick off, creating our workspace and prompting for a few inputs from us on the command line.\nOnce the process completes, let's go ahead and take a look at what Nx generates for us:\n\n-   An `apps` directory containing our applications that will ultimately be the interface for our users into our code\n-   A `libs` directory that will eventually contain all of our independent library code each dealing with a specific\n    concern\n-   A `tools` directory serving as the home base for custom in-house development scripts and custom workspace generators\n-   A bunch of config files that assist in wiring up apps, libs, devtools, and the like (don't worry too much about these\n    for now)\n\nFor our purpose, we'll only be concerned with our todos app and the libraries it depends on. Nx provides\nsome modern developer tooling in ESLint and Prettier to help keep our codebase properly linted and formatted, along with\nswapping out Karma for Jest and attaching an e2e integration project to our todos app using Cypress. All that out\nof the box... pretty cool, huh?\n\nOur current workspace structure should look something like the following:\n\n```shell\n\\apps\n  \\todos\n  \\todos-e2e\n\\libs\n\\tools\n```\n\nFor now, we'll only be working in the `apps` and `libs` directory to keep things simple.\nTo start scaffolding out our libraries that will ultimately power our todos app, let's create a directory\nin our `libs` folder called `shared`. I find it conventionally easiest to namespace\nlibraries similar to the apps they serve - in this case, we would have created a `todos` folder under our\n`libs` folder, but for reasons we'll see in the next post (_foreshadowing intensifies_), we'll put this\nunder our common namespace so we can access all of the todos code from other applications as well.\n\nWhile we _could_ just start dropping libraries directly into the `libs` directory, I've found that as the Nx apps I work\non begin to scale, it's often helpful to namespace your libraries in\naccordance to which applications they serve. In our case, we only have one `todos` app, but\nas we begin to add to our workspace, our namespaced `libs` will shine, neatly organizing our\ncode in a sane manner.\n\n## Generating libraries\n\nNow, to generate an Nx library specific to Angular, Nx provides an amazing CLI to assist\nin scaffolding our apps and libs. I often turn to the official Nx VS Code\nplugin, [Nx Console](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console),\nto help facilitate scaffolding my projects as it provides an awesome interface to see all of the\navailable options to us while building out our code.\n\nLet's take a minute to discuss our `libs` strategy to help us keep things organized within our `shared` library:\n\n-   We'll create a `features` folder that will contain our state management code\n-   Next we'll add a `services` library that will _service_ as our primary data fetching module\n-   Finally, we'll create a `ui` folder that will container two sub-libraries in `pages` and `components` (more on this\n    separation later)\n\nI use the terms library and folder in the above list _not_ interchangeably - I like to further refine\nmy workspace namespaces by including nested folders inside my `libs` directories where it makes sense.\nFor our case, we'll have multiple features as we'll see later, so let's create a space for all individual\ndomains we'll be working with.\n\nTo kick things off, let's generate a couple of libraries to see what this looks like in action:\n\n```shell\n# To generate our shared todos state management library\nnx g @nrwl/angular:library todos --directory shared/features\n\n# To generate our shared services library\nnx g @nrwl/angular:library services --directory shared\n\n# To generate our shared ui libraries\nnx g @nrwl/angular:library components --directory shared/ui\nnx g @nrwl/angular:library pages --directory shared/ui\n```\n\nWith each containing the following, respectively:\n\n-   _features_: will house our state management code utilizing NgRx\n-   _services_: our HTTP layer, will be in charge of calling out to our API to fetch data\n-   _components_: our home for dumb components, or simple Angular components that solely take in `@Input()` to spit out on\n    the page\n-   _pages_: Angular components that compose our smaller, dumb components feeding them the data they'll need to generate\n    their markup\n\n## Architectural boundaries made easy\n\nWith our libraries in place, let's run through what our chain of dependencies will look like. Our main todos application\nwill, once again, act as the orchestrator binding our libraries together in order to access code throughout our\nworkspace. The added\nbenefit of offloading any and all complex logic out of our main apps and into libs is the ability to work independently\nin areas\nof code that do not need to be affected by changes from other areas. In plain English, we put all of our app code in\nlibs and make our\napps as thin as possible from a logic point of view.\n\nFor starters, our todos app will take a dependency on the `pages` library, as it contains the wrapper components that\naggregate\nour smaller, dumb components passing in the data required for those UI components to render things on the page. This\nmeans\nour `pages` library will take a dependency on our `components` lib and the todos state management library to facilitate\ndispatching\nactions to retrieve data that our UI components need. From a code perspective, let's import the required modules into\ntheir respective places.\n\nFirst, in `app.module.ts` in the todos app, let's import the `pages` module:\n\n#### app.module.ts\n\n```ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ENVIRONMENT } from '@exploring-nx/shared/features/settings';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        StoreModule.forRoot({}),\n        EffectsModule.forRoot([]),\n        StoreDevtoolsModule.instrument({\n            maxAge: 25,\n        }),\n    ],\n    bootstrap: [AppComponent],\n    providers: [\n        {\n            provide: ENVIRONMENT,\n            useValue: environment,\n        },\n    ],\n})\nexport class AppModule {}\n```\n\nI've added a the NgRx require modules and an `AppRoutingModule`, with contents being:\n\n#### app-routing.module.ts\n\n```ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        RouterModule.forRoot([\n            {\n                path: '',\n                loadChildren: () =>\n                    import('@exploring-nx/shared/ui/pages').then(\n                        (m) => m.SharedUiPagesModule,\n                    ),\n            },\n        ]),\n    ],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\nNothing too out of the ordinary here, just doing our normal lazy module loading utilizing the `pages` library. Things to\nnote in `app.module.ts` is the `environment` provider, as we look under the covers is nothing more than just a shared\nprovider\nused to import environment settings specific to our todos application and having them available to our downstream\nlibraries (think sharing whatever is in `environment.ts` to services, components, etc.).\n\nFor our `SharedUiPagesModule`, let's look at the module file to see what imports we'll use:\n\n#### shared-ui-pages.module.ts\n\n```ts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { SharedFeaturesTodosModule } from '@exploring-nx/shared/features/todos';\nimport { SharedUiComponentsModule } from '@exploring-nx/shared/ui/components';\n\nimport { TodosComponent } from './todos/todos.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        SharedFeaturesTodosModule,\n        SharedUiComponentsModule,\n        RouterModule.forChild([\n            {\n                path: '',\n                component: TodosComponent,\n            },\n        ]),\n    ],\n    declarations: [TodosComponent],\n})\nexport class SharedUiPagesModule {}\n```\n\nWe see that our `pages` library takes on two additional dependencies in `SharedFeaturesTodosModule`, our state\nmanagement library for todos, and\n`SharedUiComponentsModule`. Now for my favorite about Nx, and a little surprise for whiteboard meeting guys like myself,\ngo ahead and run the following:\n\n```shell\nnx dep-graph\n```\n\n...and in your browser window you should the following (after clicking a few checkboxes):\n\n![dep graph](/images/hitchhikers-guide-to-nx/todos_dep_graph.png)\n\nBehold, the almighty dependency graph in all of its glory! Using Nx, not only\ndo we get a conventionalized approach to mono-repository development,\nwe get dep graphs! Dependency graphs allow us to _visually_ see the linking between libraries\nand their consuming applications, helping us to make more informed decisions about\nwhere things should be, and which areas are responsible for their respective domain.\n\nFrom our dep graph above, we see that our todos app, the ultimate entry point into\nthe heart of our application, has a single dependency on our `pages` library, which itself\nwires together the lower level details that our higher level policies do not necessarily need\nto know the inner workings of. In essence, we've done nothing more than implement simple ports\nand adapters.\n\n## Implementing state\n\nOkay, I promise that _now_ we'll actually write some code. As I previously mentioned,\nI'll be using [NgRx](https://ngrx.io/) to facilitate my application state. Now we could also using nothing more than\nsimple services-over-`Observables`, and you're more than welcome to. I love NgRx and the, again, convention it brings to\nAngular state management, and simply just a preference.\n\nThere are great resources and plenty of articles on NgRx, and I'll defer to those interested in learning\nNgRx in depth to them. For those familiar with flux/redux-like development, let's create the following in a\n`+state` folder nesting in our `shared/features/todos` project underneath the `src/lib` subdirectory (\nsubdirectory-ception):\n\n-   `todos.reducer.ts`: your typical reducer function that defines our state and which mutations it can take on to form\n    new state\n-   `todos.actions.ts`: all of the dispatch-able operations that can affect which shape our state takes\n-   `todos.selectors.ts`: slices of (memoized) state to reference across components\n-   `todos.effects.ts`: tasks performed when certain actions are `dispatch()`ed, also known as side effects\n-   `todos.facade.ts`: an encapsulating service to be used from higher level modules, serving as the API into our state (\n    more or less)\n\nTo keep this post in a readable _state_ <sub>no pun intended</sub>, I'll leave the gorey details for the reader to\nexplore [here](https://github.com/JoeyMckenzie/exploring-nx/tree/main/libs/shared/features/todos/src/lib/%2Bstate).\nWe'll save a more in-depth post on NgRx for a rainy day.\n\n> Nx provides NgRx state generators that come with NgRx Entity bolted in, but for our simple use case, we'll manually\n> create our state files\n\n## Utilizing todos state\n\nWith our state in place, we're ready to wire everything up to our todos application and finally spit some todo items out\non the screen. In the name of keeping everything simple, we'll put our component logic in a single `todos` component\nthat we'll house within our shared `pages` library to open ourselves up for reusability later on. Using Nx, let's\ngenerate a component:\n\n```shell\nnx g @nrwl/angular:component todos --project shared-ui-pages\n```\n\nUsing Nx, we can generate Angular components in a manner similar to the Angular CLI, with the added benefit of targeting\ncomponent generation for specified apps and libraries. In our `todos.component.ts`, let's utilize our todos state logic\nto start loading in todos:\n\n#### todos.component.ts\n\n```ts\nimport { Component, OnInit } from '@angular/core';\nimport { SettingsFacade } from '@exploring-nx/shared/features/settings';\nimport { TodosFacade } from '@exploring-nx/shared/features/todos';\n\n@Component({\n    selector: 'exploring-nx-todos',\n    templateUrl: './todos.component.html',\n})\nexport class TodosComponent implements OnInit {\n    loading$ = this.todosFacade.loading$;\n    todos$ = this.todosFacade.availableTodos$;\n\n    constructor(\n        private todosFacade: TodosFacade,\n        private settingsFacade: SettingsFacade,\n    ) {}\n\n    ngOnInit() {\n        this.settingsFacade.loadSettings();\n    }\n\n    onLoadClicked() {\n        this.todosFacade.loadTodos();\n    }\n}\n```\n\nSince we've already wired up our state module as a dependency to the `pages` library (see `shared-ui-pages.module.ts`),\nwe shouldn't have any errors during runtime. With our code behind done, let's add some markup:\n\n#### todos.component.html\n\n```html\n<div class=\"flex min-h-screen flex-col items-center justify-center\">\n    <p class=\"pb-4\">Loading: {{ loading$ | async }}</p>\n    <button\n        type=\"button\"\n        (click)=\"onLoadClicked()\"\n        class=\"inline-flex items-center rounded-md bg-indigo-600 px-6 py-3 text-white hover:bg-indigo-700\"\n    >\n        Load todos\n    </button>\n\n    <div class=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div class=\"inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8\">\n            <div\n                class=\"overflow-hidden border-b border-gray-200 shadow sm:rounded-lg\"\n            >\n                <exploring-nx-todos-list\n                    [todos]=\"(todos$ | async) ?? []\"\n                ></exploring-nx-todos-list>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\nOur `todos` page component takes on the responsibility of loading in todos once a user has clicked the Tailwind-styled\nbutton. We also have another feature responsible for dealing with application-wide settings (think environment names,\nbase URLs, dark mode enabled, etc.). I'll again spare the reader and leave a link to the\nimplementation [here](https://github.com/JoeyMckenzie/exploring-nx/tree/main/libs/shared/features/settings/src/lib/%2Bstate).\nThe settings library is yet another NgRx-based state lib that serves as nothing more than an additional state slice as\nwe'll see in our Redux Devtools when the application is running.\n\nWe'll add a few more components to keep things bite size and avoid component bloat:\n\n```shell\n# Generates a wrapper component that will consume todos into a table\nnx g @nrwl/angular:component todos-list --project shared-ui-pages\n\n# Generates a component that will take in todo items output on the wrapping table component\nnx g @nrwl/angular:component todos-list-item --project shared-ui-pages\n```\n\nIn our `todos-list` component, let's add the following:\n\n#### todos.component.ts\n\n```ts\nimport { Component, HostBinding, Input } from '@angular/core';\nimport { Todo } from '@exploring-nx/shared/models';\n\n@Component({\n    selector: 'exploring-nx-todos-list',\n    templateUrl: './todos-list.component.html',\n})\nexport class TodosListComponent {\n    @HostBinding('class') class = 'pt-6 flex flex-col';\n    @Input() todos: Todo[] = [];\n}\n```\n\nNext, the markup:\n\n#### todos-list.component-html\n\n```html\n<table class=\"min-w-full divide-y divide-gray-200\">\n    <thead class=\"bg-gray-50\">\n        <tr>\n            <th\n                scope=\"col\"\n                class=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\n            >\n                ID\n            </th>\n            <th\n                scope=\"col\"\n                class=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\n            >\n                Title\n            </th>\n            <th\n                scope=\"col\"\n                class=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\n            >\n                User ID\n            </th>\n            <th\n                scope=\"col\"\n                class=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\n            >\n                Completed\n            </th>\n            <th scope=\"col\" class=\"relative px-6 py-3\">\n                <span class=\"sr-only\">Edit</span>\n            </th>\n        </tr>\n    </thead>\n    <tbody class=\"divide-y divide-gray-200 bg-white\">\n        <tr\n            *ngFor=\"let todo of todos\"\n            exploring-nx-todos-list-item\n            [todo]=\"todo\"\n        ></tr>\n    </tbody>\n</table>\n```\n\nAs we mentioned earlier, `pages` wire together `components` which we treat as simple consumers of data - nothing more,\nnothing less. With our todos page component responsible for initiating the loading of todos in state, our consuming\ncomponents take the todos as `Input()`s and render markup to display the data on the page. Keeping this separation\nallows us to more easily test our components in isolation from page components, as they are solely pure components in\nthe sense of taking in information, and spitting out HTML on the other side. Our unit tests can be as simple as testing\nwith different inputs to see how our output is effected, with no service dependency mocking overhead!\n\nNow for our `todo-list-item` component:\n\n#### todos-list-item.component.ts\n\n```ts\nimport { Component, Input } from '@angular/core';\nimport { Todo } from '@exploring-nx/shared/models';\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: '[exploring-nx-todos-list-item]',\n    templateUrl: './todos-list-item.component.html',\n})\nexport class TodosListItemComponent {\n    @Input() todo?: Todo;\n}\n```\n\nAnd the markup:\n\n#### todos-list-item.component.html\n\n```html\n<td class=\"whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900\">\n    {{ todo?.id }}\n</td>\n<td class=\"whitespace-nowrap px-6 py-4 text-sm text-gray-500\">\n    {{ todo?.title }}\n</td>\n<td class=\"whitespace-nowrap px-6 py-4 text-sm text-gray-500\">\n    {{ todo?.userId }}\n</td>\n<td class=\"whitespace-nowrap px-6 py-4 text-sm text-gray-500\">\n    <input\n        type=\"checkbox\"\n        [defaultChecked]=\"todo?.completed\"\n        class=\"h-4 w-4 rounded text-indigo-600\"\n    />\n</td>\n```\n\nOne thing to note with our component structure here is that we're using a `@HostBinding()` in the wrapper component to\ntell Angular what class the parent container element should have, and our `todos-list-item` similarly uses a component\nselector to allow us to generate `<tr>` tags without containing elements generated by Angular. This is all done in the\nname of HTML styling semantics for Tailwind to style our components correctly and is entirely optional, as certain\nbrowser specs designate `<table>`s to have an expected structure (`<tr>`s expect `<td>`s as the only child element, for\ninstance).\n\n## Running apps locally\n\nNow that we've cranked out all the necessary code to run our application, let's go ahead and spin it up so we can see\nwhat loading todos in action looks like. From your favorite command line, go ahead and run the following to boot up the\nAngular server for our todos app:\n\n```shell\nnx serve todos\n```\n\nand we should see the typical output that is displayed when running a similar `ng serve` command in a single project\nAngular workspace. Once our application is finished building and served for the browser, go ahead and navigate\nto `localhost:4200` with your Redux Devtools open in the dev console. Live action demo:\n\n[Exploring Nx with todos](/images/hitchhikers-guide-to-nx/exploring_nx_todos.webm)\n\nWe've got ourselves a working todo application built with Nx and composable shared libraries! Since we've built out our\ntodos libraries in common form, _any_ application we wish to write in the future has access to all of the code that\npowers our todos app - no code duplication required, and two entirely separate/independent applications coexisting in\nthe same workspace. Pretty cool, huh?\n\nIn a later post, we'll explore adding multiple types of applications to an Nx repository reusing our todos code that we'\nve written so far. Until next time, friends!\n",
    "html": "<p>As developers, we love reusability: components, modules, CSS, code snippets,\nlibraries, you name it... if it can be made generic, one can safely bet that\na friendly developer will at some point attempt a Herculean effort to do so. Enter\nthe monorepo - a development style aimed at encouraging reusability, common versioning, and\nimproved developer experience when working on large teams. While there are quite a few benefits\nof working within a single repository for multiple projects, those aforementioned are just a <em>few</em> of the many perks.\nAs I continue to veer off the .NET blogging path for a bit, I thought it would\nfun to write a bit about my favorite development tool lately in the JS/TS realm, <a href=\"https://nx.dev/\">Nx</a>.</p>\n<h2>What is Nx?</h2>\n<p>Nx is a tool developed by <a href=\"https://nrwl.io/\">Nrwl</a> to empower development promoting the reuse of code for applications\nall developed within the same repository or workspace.\nUsing Nx, we can create independent applications all with their own separate lines of business, project domains, CI/CD\nprocesses, etc. all while developing common\ndependencies for those applications to consume all within the same repository. I won't cover in-depth what\nexactly a monorepo is and why you should consider using the development paradigm on your team, as there\nare a plethora of articles explaining their existence by developers much, <em>much</em> smarter than myself.</p>\n<h2>Monorepos at a glance</h2>\n<p>When developing within a monorepo, we can independently write entirely separate applications that deal with separate\nconcerns while developing their common dependencies at the same time, with the payoff being reusability of shared\ncomponents and modules\nas far as the eye can see.</p>\n<p>Take, for example, a common business application for your organization's users that may have two sides of the same\nshared coin -\na user facing [insert your org's line of business] application, with an org internal admin-based application\nto help manage users with what the application may be dealing with.</p>\n<p>In the case of the almighty todo-based app, a user facing todo application may be deployed out to the DMZ allowing users\nto add, update, and manage their todo items.\nThen the fateful day comes where upper management decides they would like an admin tool built for the company's\nbusiness analysts to assist with users' todos, allowing for reporting on certain types of todos, managing a user's todo\nshould it require a little assistance, etc.</p>\n<p>From an architectural standpoint, while it may be tempting to develop such functionality into the same user facing\napplication with some sort of heightened privilege given to certain users to access\nthe admin functionality, one might argue that such functionality is an entirely separate concern in comparison to what\nour existing users of our todo application expect.\nSo we make the decision to rip out common code, components, modules, etc. and put them in a separate shared repository\nthat both the todos app and admin todos app pull in\nas a dependency into their, again, separately maintained projects. Three projects, three separate repositories, three\nindividual build/deployment pipelines, and the list goes on.</p>\n<p>As much fun as it sounds managing and maintaining what are essentially three separate projects, there's a lot of work\nbeing done in our previous scenario. Wouldn't it be great\nto simply development all of our code in the same place? Enter the monorepo.</p>\n<h2>Nx at a glance</h2>\n<p>While Nx may seem to be well suited for the JS/TS world, it is a language agnostic toolkit with lots\nof <a href=\"https://nx.dev/community\">community plugins</a> for varying\nlanguages, frameworks, and ecosystems. I like to think of Nx as a metaframework, or a framework to help manage your\nframework specific libraries and applications with\nwell-defined conventions, all while bringing modern tools we developers love baked into your workspace (Jest, ESLint,\nStorybook, etc.). Again, while Nx is itself an entire\nrealm of knowledge one can easily spend an entire day reading about, for our purposes of this article, we'll only touch\non a few of the many\ntools Nx gives us while developing our applications all within the same repository.</p>\n<p>To keep things simple, let's use our previous example of building out a todos application using Angular to see how we\nmight\ncleanly architect such an application. Our game plan will be something like:</p>\n<ul>\n<li>One todo application, serving as nothing more than a glorified dependency injection container/puppeteer for the\nlibraries it depends on</li>\n<li>Separate libraries that each have a single concern - state management, UI, and utilities</li>\n</ul>\n<p>While it might be tempting to throw everything into our single todo application in place of separate libraries,\nwe should make it a point to keep our applications as simple as possible, offloading most of our dependencies into\nscoped\nlibraries and modules each with a designated purpose. What does this mean in practice? Let's look at an example\narchitecture\nwe'll emulate while developing our applications within an Nx monorepo:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">\\apps</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \\todos</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">\\libs</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \\todos</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \\ui</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \\features</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \\services</span></span></code></pre></figure>\n<p>We're effectively building a single entry point for our users into our codebase - our todos app. Our todos app, in terms\nof an Angular project, will exist as nothing more than the container for dependencies, assets, and environment specific\nsettings. By offloading UI components, services,\ncore business logic and the like, we build in contextual boundaries to our todos application in the form\nof dependent modules that each deal with their individual concerns, while exposing only the pieces that are\nrequired through their public API. In plain English, all this means is that the primary todo application\ndoes not concern itself with how its dependencies are implemented - only that they <em>are</em> implemented\nin some form.</p>\n<p>From an Angular code perspective, this means our todos application will look, at its core, like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">\\todos</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \\src</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \\app</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">      app.component.html</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">      app.component.ts</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">      app.module.ts</span></span></code></pre></figure>\n<p>About as bare bones as an Angular project can get, our todos app serves again as nothing more than a coordinator of\ninjected services, dependencies, and modules. This means no <code>\\components</code>, <code>\\services</code>, <code>\\state</code> folders, or any other\ncore logic that is required for our app to run.</p>\n<p>With our precursor to monorepos with Nx out of the way, let's jump into some code!</p>\n<h2>Getting started</h2>\n<p>to kick things off, let's create our Nx workspace, preset to Angular:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npx</span><span style=\"color:#C98A7D\"> create-nx-workspace@latest</span><span style=\"color:#C98A7D\"> exploring-nx</span><span style=\"color:#C99076\"> --preset=angular</span></span></code></pre></figure>\n<blockquote>\n<p>As of this writing, opting for the latest workspace generator will use Nx 13 alongside Angular 13</p>\n</blockquote>\n<p>Nx will kick off, creating our workspace and prompting for a few inputs from us on the command line.\nOnce the process completes, let's go ahead and take a look at what Nx generates for us:</p>\n<ul>\n<li>An <code>apps</code> directory containing our applications that will ultimately be the interface for our users into our code</li>\n<li>A <code>libs</code> directory that will eventually contain all of our independent library code each dealing with a specific\nconcern</li>\n<li>A <code>tools</code> directory serving as the home base for custom in-house development scripts and custom workspace generators</li>\n<li>A bunch of config files that assist in wiring up apps, libs, devtools, and the like (don't worry too much about these\nfor now)</li>\n</ul>\n<p>For our purpose, we'll only be concerned with our todos app and the libraries it depends on. Nx provides\nsome modern developer tooling in ESLint and Prettier to help keep our codebase properly linted and formatted, along with\nswapping out Karma for Jest and attaching an e2e integration project to our todos app using Cypress. All that out\nof the box... pretty cool, huh?</p>\n<p>Our current workspace structure should look something like the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">\\apps</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \\todos</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \\todos-e2e</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">\\libs</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">\\tools</span></span></code></pre></figure>\n<p>For now, we'll only be working in the <code>apps</code> and <code>libs</code> directory to keep things simple.\nTo start scaffolding out our libraries that will ultimately power our todos app, let's create a directory\nin our <code>libs</code> folder called <code>shared</code>. I find it conventionally easiest to namespace\nlibraries similar to the apps they serve - in this case, we would have created a <code>todos</code> folder under our\n<code>libs</code> folder, but for reasons we'll see in the next post (<em>foreshadowing intensifies</em>), we'll put this\nunder our common namespace so we can access all of the todos code from other applications as well.</p>\n<p>While we <em>could</em> just start dropping libraries directly into the <code>libs</code> directory, I've found that as the Nx apps I work\non begin to scale, it's often helpful to namespace your libraries in\naccordance to which applications they serve. In our case, we only have one <code>todos</code> app, but\nas we begin to add to our workspace, our namespaced <code>libs</code> will shine, neatly organizing our\ncode in a sane manner.</p>\n<h2>Generating libraries</h2>\n<p>Now, to generate an Nx library specific to Angular, Nx provides an amazing CLI to assist\nin scaffolding our apps and libs. I often turn to the official Nx VS Code\nplugin, <a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\">Nx Console</a>,\nto help facilitate scaffolding my projects as it provides an awesome interface to see all of the\navailable options to us while building out our code.</p>\n<p>Let's take a minute to discuss our <code>libs</code> strategy to help us keep things organized within our <code>shared</code> library:</p>\n<ul>\n<li>We'll create a <code>features</code> folder that will contain our state management code</li>\n<li>Next we'll add a <code>services</code> library that will <em>service</em> as our primary data fetching module</li>\n<li>Finally, we'll create a <code>ui</code> folder that will container two sub-libraries in <code>pages</code> and <code>components</code> (more on this\nseparation later)</li>\n</ul>\n<p>I use the terms library and folder in the above list <em>not</em> interchangeably - I like to further refine\nmy workspace namespaces by including nested folders inside my <code>libs</code> directories where it makes sense.\nFor our case, we'll have multiple features as we'll see later, so let's create a space for all individual\ndomains we'll be working with.</p>\n<p>To kick things off, let's generate a couple of libraries to see what this looks like in action:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># To generate our shared todos state management library</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:library</span><span style=\"color:#C98A7D\"> todos</span><span style=\"color:#C99076\"> --directory</span><span style=\"color:#C98A7D\"> shared/features</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># To generate our shared services library</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:library</span><span style=\"color:#C98A7D\"> services</span><span style=\"color:#C99076\"> --directory</span><span style=\"color:#C98A7D\"> shared</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># To generate our shared ui libraries</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:library</span><span style=\"color:#C98A7D\"> components</span><span style=\"color:#C99076\"> --directory</span><span style=\"color:#C98A7D\"> shared/ui</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:library</span><span style=\"color:#C98A7D\"> pages</span><span style=\"color:#C99076\"> --directory</span><span style=\"color:#C98A7D\"> shared/ui</span></span></code></pre></figure>\n<p>With each containing the following, respectively:</p>\n<ul>\n<li><em>features</em>: will house our state management code utilizing NgRx</li>\n<li><em>services</em>: our HTTP layer, will be in charge of calling out to our API to fetch data</li>\n<li><em>components</em>: our home for dumb components, or simple Angular components that solely take in <code>@Input()</code> to spit out on\nthe page</li>\n<li><em>pages</em>: Angular components that compose our smaller, dumb components feeding them the data they'll need to generate\ntheir markup</li>\n</ul>\n<h2>Architectural boundaries made easy</h2>\n<p>With our libraries in place, let's run through what our chain of dependencies will look like. Our main todos application\nwill, once again, act as the orchestrator binding our libraries together in order to access code throughout our\nworkspace. The added\nbenefit of offloading any and all complex logic out of our main apps and into libs is the ability to work independently\nin areas\nof code that do not need to be affected by changes from other areas. In plain English, we put all of our app code in\nlibs and make our\napps as thin as possible from a logic point of view.</p>\n<p>For starters, our todos app will take a dependency on the <code>pages</code> library, as it contains the wrapper components that\naggregate\nour smaller, dumb components passing in the data required for those UI components to render things on the page. This\nmeans\nour <code>pages</code> library will take a dependency on our <code>components</code> lib and the todos state management library to facilitate\ndispatching\nactions to retrieve data that our UI components need. From a code perspective, let's import the required modules into\ntheir respective places.</p>\n<p>First, in <code>app.module.ts</code> in the todos app, let's import the <code>pages</code> module:</p>\n<h4>app.module.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NgModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> BrowserModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/platform-browser</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ENVIRONMENT</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/features/settings</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> EffectsModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/effects</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> StoreModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> StoreDevtoolsModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store-devtools</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> environment</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../environments/environment</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> AppRoutingModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./app-routing.module</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> AppComponent</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./app.component</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">NgModule</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    declarations</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">AppComponent</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    imports</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BrowserModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        AppRoutingModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        StoreModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forRoot</span><span style=\"color:#666666\">({}),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        EffectsModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forRoot</span><span style=\"color:#666666\">([]),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        StoreDevtoolsModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">instrument</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            maxAge</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">25</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    bootstrap</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">AppComponent</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providers</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            provide</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">ENVIRONMENT</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            useValue</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">environment</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> AppModule</span><span style=\"color:#666666\"> {}</span></span></code></pre></figure>\n<p>I've added a the NgRx require modules and an <code>AppRoutingModule</code>, with contents being:</p>\n<h4>app-routing.module.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NgModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> RouterModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/router</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">NgModule</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    imports</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        RouterModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forRoot</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                path</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                loadChildren</span><span style=\"color:#666666\">: () =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                    import</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@exploring-nx/shared/ui/pages</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">then</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        (</span><span style=\"color:#BD976A\">m</span><span style=\"color:#666666\">) => </span><span style=\"color:#BD976A\">m</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">SharedUiPagesModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    ),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    exports</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">RouterModule</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> AppRoutingModule</span><span style=\"color:#666666\"> {}</span></span></code></pre></figure>\n<p>Nothing too out of the ordinary here, just doing our normal lazy module loading utilizing the <code>pages</code> library. Things to\nnote in <code>app.module.ts</code> is the <code>environment</code> provider, as we look under the covers is nothing more than just a shared\nprovider\nused to import environment settings specific to our todos application and having them available to our downstream\nlibraries (think sharing whatever is in <code>environment.ts</code> to services, components, etc.).</p>\n<p>For our <code>SharedUiPagesModule</code>, let's look at the module file to see what imports we'll use:</p>\n<h4>shared-ui-pages.module.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NgModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> CommonModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/common</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> RouterModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/router</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> SharedFeaturesTodosModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/features/todos</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> SharedUiComponentsModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/ui/components</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> TodosComponent</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./todos/todos.component</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">NgModule</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    imports</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        CommonModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        SharedFeaturesTodosModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        SharedUiComponentsModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        RouterModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forChild</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                path</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                component</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">TodosComponent</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    declarations</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">TodosComponent</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> SharedUiPagesModule</span><span style=\"color:#666666\"> {}</span></span></code></pre></figure>\n<p>We see that our <code>pages</code> library takes on two additional dependencies in <code>SharedFeaturesTodosModule</code>, our state\nmanagement library for todos, and\n<code>SharedUiComponentsModule</code>. Now for my favorite about Nx, and a little surprise for whiteboard meeting guys like myself,\ngo ahead and run the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> dep-graph</span></span></code></pre></figure>\n<p>...and in your browser window you should the following (after clicking a few checkboxes):</p>\n<p><img src=\"/images/hitchhikers-guide-to-nx/todos_dep_graph.png\" alt=\"dep graph\"></p>\n<p>Behold, the almighty dependency graph in all of its glory! Using Nx, not only\ndo we get a conventionalized approach to mono-repository development,\nwe get dep graphs! Dependency graphs allow us to <em>visually</em> see the linking between libraries\nand their consuming applications, helping us to make more informed decisions about\nwhere things should be, and which areas are responsible for their respective domain.</p>\n<p>From our dep graph above, we see that our todos app, the ultimate entry point into\nthe heart of our application, has a single dependency on our <code>pages</code> library, which itself\nwires together the lower level details that our higher level policies do not necessarily need\nto know the inner workings of. In essence, we've done nothing more than implement simple ports\nand adapters.</p>\n<h2>Implementing state</h2>\n<p>Okay, I promise that <em>now</em> we'll actually write some code. As I previously mentioned,\nI'll be using <a href=\"https://ngrx.io/\">NgRx</a> to facilitate my application state. Now we could also using nothing more than\nsimple services-over-<code>Observables</code>, and you're more than welcome to. I love NgRx and the, again, convention it brings to\nAngular state management, and simply just a preference.</p>\n<p>There are great resources and plenty of articles on NgRx, and I'll defer to those interested in learning\nNgRx in depth to them. For those familiar with flux/redux-like development, let's create the following in a\n<code>+state</code> folder nesting in our <code>shared/features/todos</code> project underneath the <code>src/lib</code> subdirectory (\nsubdirectory-ception):</p>\n<ul>\n<li><code>todos.reducer.ts</code>: your typical reducer function that defines our state and which mutations it can take on to form\nnew state</li>\n<li><code>todos.actions.ts</code>: all of the dispatch-able operations that can affect which shape our state takes</li>\n<li><code>todos.selectors.ts</code>: slices of (memoized) state to reference across components</li>\n<li><code>todos.effects.ts</code>: tasks performed when certain actions are <code>dispatch()</code>ed, also known as side effects</li>\n<li><code>todos.facade.ts</code>: an encapsulating service to be used from higher level modules, serving as the API into our state (\nmore or less)</li>\n</ul>\n<p>To keep this post in a readable <em>state</em> no pun intended, I'll leave the gorey details for the reader to\nexplore <a href=\"https://github.com/JoeyMckenzie/exploring-nx/tree/main/libs/shared/features/todos/src/lib/%2Bstate\">here</a>.\nWe'll save a more in-depth post on NgRx for a rainy day.</p>\n<blockquote>\n<p>Nx provides NgRx state generators that come with NgRx Entity bolted in, but for our simple use case, we'll manually\ncreate our state files</p>\n</blockquote>\n<h2>Utilizing todos state</h2>\n<p>With our state in place, we're ready to wire everything up to our todos application and finally spit some todo items out\non the screen. In the name of keeping everything simple, we'll put our component logic in a single <code>todos</code> component\nthat we'll house within our shared <code>pages</code> library to open ourselves up for reusability later on. Using Nx, let's\ngenerate a component:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:component</span><span style=\"color:#C98A7D\"> todos</span><span style=\"color:#C99076\"> --project</span><span style=\"color:#C98A7D\"> shared-ui-pages</span></span></code></pre></figure>\n<p>Using Nx, we can generate Angular components in a manner similar to the Angular CLI, with the added benefit of targeting\ncomponent generation for specified apps and libraries. In our <code>todos.component.ts</code>, let's utilize our todos state logic\nto start loading in todos:</p>\n<h4>todos.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> SettingsFacade</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/features/settings</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> TodosFacade</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/features/todos</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">exploring-nx-todos</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./todos.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TodosComponent</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnInit</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    loading$</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">todosFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">loading$</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    todos$</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">todosFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">availableTodos$</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> todosFacade</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">TodosFacade</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> settingsFacade</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">SettingsFacade</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnInit</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">settingsFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">loadSettings</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    onLoadClicked</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">todosFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">loadTodos</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Since we've already wired up our state module as a dependency to the <code>pages</code> library (see <code>shared-ui-pages.module.ts</code>),\nwe shouldn't have any errors during runtime. With our code behind done, let's add some markup:</p>\n<h4>todos.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex min-h-screen flex-col items-center justify-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">pb-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Loading: {{ loading$ | async }}</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        (click)</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">onLoadClicked()</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex items-center rounded-md bg-indigo-600 px-6 py-3 text-white hover:bg-indigo-700</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        Load todos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">overflow-hidden border-b border-gray-200 shadow sm:rounded-lg</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">exploring-nx-todos-list</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    [todos]</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">(todos$ | async) ?? []</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                >&#x3C;/</span><span style=\"color:#4D9375\">exploring-nx-todos-list</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>Our <code>todos</code> page component takes on the responsibility of loading in todos once a user has clicked the Tailwind-styled\nbutton. We also have another feature responsible for dealing with application-wide settings (think environment names,\nbase URLs, dark mode enabled, etc.). I'll again spare the reader and leave a link to the\nimplementation <a href=\"https://github.com/JoeyMckenzie/exploring-nx/tree/main/libs/shared/features/settings/src/lib/%2Bstate\">here</a>.\nThe settings library is yet another NgRx-based state lib that serves as nothing more than an additional state slice as\nwe'll see in our Redux Devtools when the application is running.</p>\n<p>We'll add a few more components to keep things bite size and avoid component bloat:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># Generates a wrapper component that will consume todos into a table</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:component</span><span style=\"color:#C98A7D\"> todos-list</span><span style=\"color:#C99076\"> --project</span><span style=\"color:#C98A7D\"> shared-ui-pages</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Generates a component that will take in todo items output on the wrapping table component</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:component</span><span style=\"color:#C98A7D\"> todos-list-item</span><span style=\"color:#C99076\"> --project</span><span style=\"color:#C98A7D\"> shared-ui-pages</span></span></code></pre></figure>\n<p>In our <code>todos-list</code> component, let's add the following:</p>\n<h4>todos.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HostBinding</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Input</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Todo</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/models</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">exploring-nx-todos-list</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./todos-list.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TodosListComponent</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    @</span><span style=\"color:#80A665\">HostBinding</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">class</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">pt-6 flex flex-col</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    @</span><span style=\"color:#80A665\">Input</span><span style=\"color:#666666\">()</span><span style=\"color:#BD976A\"> todos</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Todo</span><span style=\"color:#666666\">[] =</span><span style=\"color:#666666\"> [];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Next, the markup:</p>\n<h4>todos-list.component-html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">table</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">min-w-full divide-y divide-gray-200</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">thead</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-gray-50</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">th</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                ID</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">th</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                Title</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">th</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                User ID</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">th</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                Completed</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">relative px-6 py-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sr-only</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Edit</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">thead</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">tbody</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">divide-y divide-gray-200 bg-white</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">tr</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            *ngFor</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">let todo of todos</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            exploring-nx-todos-list-item</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            [todo]</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        >&#x3C;/</span><span style=\"color:#4D9375\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">tbody</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">table</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>As we mentioned earlier, <code>pages</code> wire together <code>components</code> which we treat as simple consumers of data - nothing more,\nnothing less. With our todos page component responsible for initiating the loading of todos in state, our consuming\ncomponents take the todos as <code>Input()</code>s and render markup to display the data on the page. Keeping this separation\nallows us to more easily test our components in isolation from page components, as they are solely pure components in\nthe sense of taking in information, and spitting out HTML on the other side. Our unit tests can be as simple as testing\nwith different inputs to see how our output is effected, with no service dependency mocking overhead!</p>\n<p>Now for our <code>todo-list-item</code> component:</p>\n<h4>todos-list-item.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Input</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Todo</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/models</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // eslint-disable-next-line @angular-eslint/component-selector</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">[exploring-nx-todos-list-item]</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./todos-list-item.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TodosListItemComponent</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    @</span><span style=\"color:#80A665\">Input</span><span style=\"color:#666666\">()</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Todo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>And the markup:</p>\n<h4>todos-list-item.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">td</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    {{ todo?.id }}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">td</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">whitespace-nowrap px-6 py-4 text-sm text-gray-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    {{ todo?.title }}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">td</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">whitespace-nowrap px-6 py-4 text-sm text-gray-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    {{ todo?.userId }}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">td</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">whitespace-nowrap px-6 py-4 text-sm text-gray-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">input</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">checkbox</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        [defaultChecked]</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo?.completed</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">h-4 w-4 rounded text-indigo-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">td</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>One thing to note with our component structure here is that we're using a <code>@HostBinding()</code> in the wrapper component to\ntell Angular what class the parent container element should have, and our <code>todos-list-item</code> similarly uses a component\nselector to allow us to generate <code>&#x3C;tr></code> tags without containing elements generated by Angular. This is all done in the\nname of HTML styling semantics for Tailwind to style our components correctly and is entirely optional, as certain\nbrowser specs designate <code>&#x3C;table></code>s to have an expected structure (<code>&#x3C;tr></code>s expect <code>&#x3C;td></code>s as the only child element, for\ninstance).</p>\n<h2>Running apps locally</h2>\n<p>Now that we've cranked out all the necessary code to run our application, let's go ahead and spin it up so we can see\nwhat loading todos in action looks like. From your favorite command line, go ahead and run the following to boot up the\nAngular server for our todos app:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> serve</span><span style=\"color:#C98A7D\"> todos</span></span></code></pre></figure>\n<p>and we should see the typical output that is displayed when running a similar <code>ng serve</code> command in a single project\nAngular workspace. Once our application is finished building and served for the browser, go ahead and navigate\nto <code>localhost:4200</code> with your Redux Devtools open in the dev console. Live action demo:</p>\n<p><a href=\"/images/hitchhikers-guide-to-nx/exploring_nx_todos.webm\">Exploring Nx with todos</a></p>\n<p>We've got ourselves a working todo application built with Nx and composable shared libraries! Since we've built out our\ntodos libraries in common form, <em>any</em> application we wish to write in the future has access to all of the code that\npowers our todos app - no code duplication required, and two entirely separate/independent applications coexisting in\nthe same workspace. Pretty cool, huh?</p>\n<p>In a later post, we'll explore adding multiple types of applications to an Nx repository reusing our todos code that we'\nve written so far. Until next time, friends!</p>"
  },
  "_id": "2021/hitchhikers-guide-to-angular-nx-development.md",
  "_raw": {
    "sourceFilePath": "2021/hitchhikers-guide-to-angular-nx-development.md",
    "sourceFileName": "hitchhikers-guide-to-angular-nx-development.md",
    "sourceFileDir": "2021",
    "contentType": "markdown",
    "flattenedPath": "2021/hitchhikers-guide-to-angular-nx-development"
  },
  "type": "Post",
  "url": "/blog/2021/hitchhikers-guide-to-angular-nx-development"
}