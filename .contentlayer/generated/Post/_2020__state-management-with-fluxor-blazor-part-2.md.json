{
  "title": "State Management with Blazor using Fluxor (Part 2)",
  "description": "Use Fluxor to encapsulate the business logic of our Blazor apps and build clean view components.",
  "pubDate": "2020-07-26T07:00:00.000Z",
  "category": "blazor",
  "heroImage": "/images/state-management-with-blazor-using-fluxor/part-2/fluxor_meme_small.jpg",
  "draft": false,
  "keywords": [
    "state management",
    "flux",
    "c#",
    ".net"
  ],
  "body": {
    "raw": "\nMemes aside, if you've been following along with our flux-ified Blazor project, you may have noticed the plethora of\ninitial, success, and failure action types. While this may seem like overkill to some, by creating this separation of\nconcern between action types, we ensure each action has a _single_ responsibility in the flux workflow. If (read: when)\nour business requirements change that cause us to modify existing actions, we can do so without fear of unintentionally\nbreaking another workflow that might reuse the same action. It's like I always say, \"when in doubt, create a new\naction.\"\n\n## Continuing where we left off\n\nIn our [last post](/images/fluxor-state-management-with-blazor-part-1/), we discussed what the flux design pattern is,\nwhat problems it seeks to solve, and how to integrate it with Blazor using the Fluxor library. So far, we've created two\naction workflows to interact with the JSON Placeholder API: a todo list retrieve workflow and a todo retrieval by ID\nworkflow. With the help of a few services and effects, we successfully implemented the R of our CRUD operations using\nactions, reducers, and our central application store to allow our components to simply get only the state features they\ncare about and display them on the page. In this (hopefully shorter) post, we'll do a bit of service refactoring and add\na few more CRUD operations to give us a functioning application that'll allow us to interface with the todos from the\nJSON Placeholder API.\n\n## Refactoring to typed HTTP services\n\nTo kick things off, let's start by refactoring how we've been calling the API. So far, we've been injecting\nan `HttpClient` instance directly into our effects with the help of the DI container from\nthe `Microsoft.Extensions.DependencyInjection` library. A more robust, unit test-able approach would be to utilize a\ncentralized service that contains the `HttpClient` instance injected into it so that we can configure a single client\ninstance to our liking (attach headers, set base paths, etc.) and funnel all external network calls into a single place,\nrather than have `HttpClient`s spread throughout all of our flux effects. In our `Services` folder at the root of our\nproject, let's add a file named `JsonPlaceholderApiService.cs` with the following code:\n\n### JsonPlaceholderApiService.cs\n\n```csharp\nusing Microsoft.Extensions.Logging;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Services\n{\n    public class JsonPlaceholderApiService\n    {\n        private readonly ILogger<JsonPlaceholderApiService> _logger;\n        private readonly HttpClient _httpClient;\n\n        public JsonPlaceholderApiService(ILogger<JsonPlaceholderApiService> logger, HttpClient httpClient) =>\n            (_logger, _httpClient) = (logger, httpClient);\n\n        public Task<TResponse> GetAsync<TResponse>(string path)\n        {\n            _logger.LogInformation($\"GET: Retrieving resource of type {typeof(TResponse).Name}\");\n            return _httpClient.GetFromJsonAsync<TResponse>(path);\n        }\n\n        public Task<HttpResponseMessage> PostAsync<TBody>(string path, TBody body)\n        {\n            _logger.LogInformation($\"POST: Creating resource of type {typeof(TBody).Name}\");\n            return _httpClient.PostAsJsonAsync(path, body);\n        }\n\n        public Task<HttpResponseMessage> PutAsync<TBody>(string path, TBody body)\n        {\n            _logger.LogInformation($\"PUT: Updating resource of type {typeof(TBody).Name}\");\n            return _httpClient.PutAsJsonAsync(path, body);\n        }\n\n        public Task<HttpResponseMessage> DeleteAsync(string path)\n        {\n            _logger.LogInformation(\"DELETE: Removing resource\");\n            return _httpClient.DeleteAsync(path);\n        }\n    }\n}\n```\n\nWith our centralized HTTP service in place, we've effectively created\na [typed client](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-3.1) that we\ncan configure within the DI container to inject into our effects, with a configured HTTP client service wired up at\nruntime. Back in our `Program.cs`, we'll need to add a service reference to our `JsonPlaceholderApiService`, but before\ndoing so, let's add a package reference to the `Microsoft.Extensions.Http` NuGet package so that we can properly\nconfigure the HTTP client that will be injected into this service. I'm using Visual Studio's package manager to add the\nreference to our project, but feel free to use the command line (`dotnet add package Microsoft.Extensions.Http`), or the\nPackage Manager console (`Install-Package Microsoft.Extensions.Http`). Once we've successfully added the package, let's\nadd the following code to `Program.cs`:\n\n### Program.cs\n\n```csharp\nusing System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Fluxor;\nusing System.Reflection;\nusing StateManagementWithFluxor.Services;\nusing System.Net.Mime;\n\nnamespace StateManagementWithFluxor\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n\n            // Add Fluxor\n            builder.Services.AddFluxor(options =>\n            {\n                options.ScanAssemblies(Assembly.GetExecutingAssembly());\n                options.UseReduxDevTools();\n            });\n\n            // Add custom application services\n            builder.Services.AddScoped<StateFacade>();\n            builder.Services.AddHttpClient<JsonPlaceholderApiService>(client =>\n            {\n                client.DefaultRequestHeaders.Add(\"Content-Control\", $\"{MediaTypeNames.Application.Json}; charset=utf-8\");\n                client.BaseAddress = new Uri(\"https://jsonplaceholder.typicode.com\");\n            });\n\n            await builder.Build().RunAsync();\n        }\n    }\n}\n```\n\nFrom the above, we can see that we've added the line `builder.Services.AddHttpClient<JsonPlaceholderApiService>`\nconfiguring the `HttpClient` instance that will be injected into the API service for us at runtime. Every time\na `JsonPlaceholderApiService` instance is requested at runtime within our effects, the DI container will inject a\nconfigured `HttpClient` instance with the base address we've pointed to here and the default headers on each request.\nWith our API service wired up, let's go ahead and add some markup to allow users to create todos. When creating a todo\nand sending the corresponding POST request to JSON Placeholder API, we won't actually be creating a resource on the\nserver (we'll see the consequences of this later).\n\nThe Placeholder API is simply just that - a dummy API that acts as a placeholder for realtime requests and responses.\nOur create request will send back a 201 with the created todo resource. We'll take that todo and simply append it to our\ncurrent list of todos and re-render the list within our `Todos.razor` component to reflect the addition of the newly\ncreated todo. In a real world scenario, this isn't really something you'd want to be doing on the frontend. A better\nsolution, and more common in practice, would be to send a create request to a downstream server from the client, and\nupon a successful status returned from the server, we'd send another request to the server to retrieve the list again\nthat should contain our newly created resource. There's a few reason as to why we would implement the design in this\nway, but a bit irrelevant and out of scope for this post.\n\nLet's go ahead create a `Components` folder at our solution root and within that directory, let's add a razor file\ncalled `CreateTodoForm.razor` with the following markup:\n\n### CreateTodoForm.razor\n\n```csharp\n@inherits Fluxor.Blazor.Web.Components.FluxorComponent\n\n@using StateManagementWithFluxor.Models.Todos.Validation\n@using StateManagementWithFluxor.Services\n\n@inject StateFacade Facade\n\n<EditForm Model=\"validationModel\" OnValidSubmit=\"HandleValidSubmit\">\n    <DataAnnotationsValidator />\n    <div class=\"d-flex flex-column align-items-center\">\n        <ValidationSummary />\n    </div>\n\n    <div class=\"d-flex flex-row justify-content-center\">\n        <div class=\"form-group px-2\">\n            <label for=\"create-todo-title\">Title</label>\n            <InputText  id=\"create-todo-title\"  @bind-Value=\"validationModel.Title\" class=\"form-control\"/>\n        </div>\n        <div class=\"form-group px-2\">\n            <label for=\"create-todo-completed\">User ID</label>\n            <InputNumber ParsingErrorMessage=\"That is not a valid user ID\" id=\"create-todo-user-id\" @bind-Value=\"validationModel.UserId\" class=\"form-control\"/>\n        </div>\n        <div class=\"form-group px-2 mt-3 d-flex flex-column align-items-center\">\n            <label for=\"create-todo-completed\">Completed?</label>\n            <InputCheckbox id=\"create-todo-completed\" @bind-Value=\"validationModel.Completed\" class=\"form-check\"/>\n        </div>\n    </div>\n\n    <div class=\"pt-2 d-flex flex-row justify-content-center\">\n        <button class=\"btn btn-primary\" type=\"submit\">Create</button>\n    </div>\n</EditForm>\n\n\n@code {\n\n    private CreateOrUpdateTodoValidationModel validationModel = new CreateOrUpdateTodoValidationModel();\n\n    protected override void OnInitialized()\n    {\n        validationModel.UserId = 1;\n\n        base.OnInitialized();\n    }\n\n    private void HandleValidSubmit()\n    {\n        // We use the bang operator (!) to tell the compiler we'll know this string field will not be null\n        Facade.CreateTodo(validationModel.Title!, validationModel.Completed, validationModel.UserId);\n    }\n\n}\n```\n\nIn our `CreateTodoForm.razor` component, we're simply just adding a bit of form markup to allow users to input a todo\ntitle, user ID, and the current status of the todo (done/not done). We're using Blazor's built-in `EditForm` to perform\nfield validations on our model that we'll ultimately send to the server containing the todo data, again letting these\nbuilt-in Blazor tools handle the heavy input validation lifting for us. Using the `DataAnnotationsValidator`\nand `ValidationSummary` components, we're able to dynamically render validation messages when the user input does not\nmeet our criteria for handling form submission. Using a little Bootstrap, we'll be able to display our error messages in\na somewhat pleasant manner as well.\n\nNotice that we've added a new model type with the `CreateOrUpdateTodoValidationModel` reference that will have it's\nproperties `set` as we've bound it to our `EditForm` using the `Model` attribute. Let's go ahead and add a `Validation`\nfolder underneath the `Todos` feature folder within our `Models` directory. Within the `Validation` folder, let's add\nthe `CreateOrUpdateTodoValidationModel.cs` class file:\n\n### CreateOrUpdateTodoValidationModel.cs\n\n```csharp\nusing System.ComponentModel.DataAnnotations;\n\nnamespace StateManagementWithFluxor.Models.Todos.Validation\n{\n    public class CreateOrUpdateTodoValidationModel\n    {\n        [Required(AllowEmptyStrings = false, ErrorMessage = \"Your todo must have a title\")]\n        public string? Title { get; set; }\n\n        [Required(ErrorMessage = \"Status of this todo is required\")]\n        public bool Completed { get; set; }\n\n        [Required(ErrorMessage = \"User ID associated with this todo is required\")]\n        [Range(1, 100)]\n        public int UserId { get; set; }\n    }\n}\n```\n\nUsing .NET's `System.ComponentModel.DataAnnotations` library, we add a few `Required` attributes to each of the\nproperties, with an additional `Range` attribute on the `UserId` to enforce users stay within the 1 to 100 user ID\nvalues. While it might seem a bit overkill to add this validation model when we could just simply bind each of the\nproperties to a model to be sent off to a server, we have to keep in mind that we don't want our models to\nbecome [god objects](https://en.wikipedia.org/wiki/God_object). If you've ever worked on a large enterprise codebase,\nyou've more than likely seen this at some point or another - API models reused across multiple endpoint request payloads\ntrying to fit the mold everywhere, \"helper\" classes that only \"help\" you magically break this unintentionally when\nmaking slight changes, and the list goes on. Our request models and validation models should be responsible for one\nthing, and one thing only - the `CreateOrUpdateTodoValidationModel` is only concerned about validating input.\n\nBack in our `CreateTodoForm.razor` with the `EditForm` referencing our `validationModel`, we bind each of the properties\nwithin the `validationModel` to an input tag. Luckily for us, the .NET team has provider a few nice custom input\ncomponents when dealing with `EditForm`s within our application. We bind each of the `Title`, `Completed`, and `UserId`\nproperties to a wrapping input component in `InputText`, `InputCheckbox`, and `InputNumber` respectively. Adding a\nfew `form-control` Bootstrap classes and we've got a semi-decent looking form!\n\nIn our `OnInitialized` component lifecycle method, we initialize the user ID to 1 since the rendered markup with be\na `type=\"number\"` input. We've also added another method to our `StateFacade` service with `CreateTodo` - let's go ahead\nand add that to the facade:\n\n### StateFacade.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Models.Todos.Dtos;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo;\n\n\nnamespace StateManagementWithFluxor.Services\n{\n    public class StateFacade\n    {\n        // Previous constructor and methods...\n\n        public void CreateTodo(string title, bool completed, int userId)\n        {\n            // Construct our validated todo\n            var todoDto = new CreateOrUpdateTodoDto(title, completed, userId);\n\n            _logger.LogInformation($\"Issuing action to create todo [{title}] for user [{userId}]\");\n            _dispatcher.Dispatch(new CreateTodoAction(todoDto));\n        }\n    }\n}\n```\n\nIf you're curious about why we've added this \"facade\" service, I mention the reasons for doing so in the first post.\nOur `CreateTodo` method simply constructs a `CreateOrUpdateTodoDto` immutable request model and issues\na `CreateTodoAction` with it as the payload. Let's add each of those classes to their respective folders:\n\n### Models/Todos/Dtos/CreateOrUpdateTodoDto.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Models.Todos.Dtos\n{\n    public class CreateOrUpdateTodoDto\n    {\n        public CreateOrUpdateTodoDto(string title, bool completed, int userId) =>\n            (Title, Completed, UserId) = (title, completed, userId);\n\n        public string Title { get; }\n\n        public bool Completed { get; }\n\n        public int UserId { get; }\n    }\n}\n```\n\n### Store/Features/Todos/Actions/CreateTodo/CreateTodoAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos.Dtos;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo\n{\n    public class CreateTodoAction\n    {\n        public CreateTodoAction(CreateOrUpdateTodoDto todo) =>\n            Todo = todo;\n\n        public CreateOrUpdateTodoDto Todo { get; }\n    }\n}\n```\n\nWith our newly created action `CreateTodoAction`, let's add our success and failure actions while we're here before\ncreating the reducer methods that will subscribe to these actions:\n\n### CreateTodoSuccessAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos.Dtos;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo\n{\n    public class CreateTodoSuccessAction\n    {\n        public CreateTodoSuccessAction(TodoDto todo) =>\n            Todo = todo;\n\n        public TodoDto Todo { get; }\n    }\n}\n```\n\n### CreateTodoFailureAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Store.Features.Shared.Actions;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo\n{\n    public class CreateTodoFailureAction : FailureAction\n    {\n        public CreateTodoFailureAction(string errorMessage)\n            : base(errorMessage)\n        {\n        }\n    }\n}\n```\n\nRecall from our previous post that we created a common `FailureAction` for all of our failure type actions to descend\nfrom, allowing us to store common error properties within this shared action for all failure actions to tap into. With\nour create action in place, let's add a reducer to our our `Reducers` directory within our todos feature folder to\nhandle the create actions:\n\n### Store/Features/Reducers/CreateTodoActionsReducer.cs\n\n```csharp\nusing Fluxor;\nusing StateManagementWithFluxor.Models.Todos.Dtos;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo;\nusing StateManagementWithFluxor.Store.State;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Reducers\n{\n    public static class CreateTodoActionsReducer\n    {\n        [ReducerMethod]\n        public static TodosState ReduceCreateTodoAction(TodosState state, CreateTodoAction _) =>\n            new TodosState(true, null, state.CurrentTodos, state.CurrentTodo);\n\n        [ReducerMethod]\n        public static TodosState ReduceCreateTodoSuccessAction(TodosState state, CreateTodoSuccessAction action)\n        {\n            // Grab a reference to the current todo list, or initialize one if we do not currently have any loaded\n            var currentTodos = state.CurrentTodos is null ?\n                new List<TodoDto>() :\n                state.CurrentTodos.ToList();\n\n            // Add the newly created todo to our list and sort by ID\n            currentTodos.Add(action.Todo);\n            currentTodos = currentTodos\n                .OrderBy(t => t.Id)\n                .ToList();\n\n            return new TodosState(false, null, currentTodos, state.CurrentTodo);\n        }\n\n        [ReducerMethod]\n        public static TodosState ReduceCreateTodoFailureAction(TodosState state, CreateTodoFailureAction action) =>\n            new TodosState(false, action.ErrorMessage, state.CurrentTodos, state.CurrentTodo);\n    }\n}\n```\n\nWhen an initial `CreateTodoAction` is dispatched, we set the `TodoState` with the loading property set to true and the\nexisting todos and selected todo, as we don't want to alter the current state those actions ultimately produce as our\ncreate workflow has no concern with either workflow. Upon a successful creation, i.e. the API returning a successful 201\nstatus code back to us, we'll produce a _new_ `TodosState` by appending the newly created todo item to a copy of the\ncurrent list of todos, and set the sorted list within the constructor of the `TodosState` object. Finally, upon\na `CreateTodoFailureAction` being dispatched, we keep the currently loaded todos piece of state intact, making sure to\nproduce a new `TodosState` containing an error that we issued the failure action with.\n\nWith our reducer in place, we'll need to add a side effect (if you're a little fuzzy on the flux workflow, checkout the\nfirst post) that will do the actual calling of the API using our `JsonPlaceholderApiService` and issue either a success,\nor failure, action based on the response. In our `Effects` directory underneath our todos feature folder, let's add\na `CreateTodoEffect.cs` file:\n\n### CreateTodoEffect.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Models.Todos.Dtos;\nusing StateManagementWithFluxor.Services;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects.CreateTodo\n{\n    public class CreateTodoEffect : Effect<CreateTodoAction>\n    {\n        private readonly ILogger<CreateTodoEffect> _logger;\n        private readonly JsonPlaceholderApiService _apiService;\n\n        public CreateTodoEffect(ILogger<CreateTodoEffect> logger, JsonPlaceholderApiService httpClient) =>\n            (_logger, _apiService) = (logger, httpClient);\n\n        protected override async Task HandleAsync(CreateTodoAction action, IDispatcher dispatcher)\n        {\n            try\n            {\n                _logger.LogInformation($\"Creating todo {action.Todo}...\");\n                var createResponse = await _apiService.PostAsync(\"todos\", action.Todo);\n\n                if (!createResponse.IsSuccessStatusCode)\n                {\n                    throw new HttpRequestException($\"Error creating todo: {createResponse.ReasonPhrase}\");\n                }\n\n                _logger.LogInformation(\"Todo created successfully!\");\n                var createdTodo = await createResponse.Content.ReadFromJsonAsync<TodoDto>();\n                dispatcher.Dispatch(new CreateTodoSuccessAction(createdTodo));\n            }\n            catch (Exception e)\n            {\n                _logger.LogError($\"Could not create todo, reason: {e.Message}\");\n                dispatcher.Dispatch(new CreateTodoFailureAction(e.Message));\n            }\n        }\n    }\n}\n```\n\nNothing too out of the ordinary here, but let's do a quick code breakdown:\n\n-   We inject a logger and our API service from the DI container, using an expression-bodied tuple constructor (C#\n    syntactic sugar)\n-   Using our API service, we call the `PostAsync` method passing in the todo from the `CreateTodoAction` payload\n    and `await` for the response\n-   If we get back a good looking 201, we'll go ahead and dispatch a `CreateTodoSuccessAction` with the todo response\n    returned from the API as the payload\n-   Upon any unchecked exceptions, or any non-successful status code returned from the server, we'll dispatch an error\n    action with the corresponding error message from the exception\n\nWith our create workflow in place, let's go ahead and add our `CreateTodoForm.razor` component to our `Todos.razor`\npage. In the markup section of `Todos.razor`, we'll replace the current markup with the following:\n\n### Todos.razor\n\n```csharp\n<h3 class=\"text-center mb-3\">Todos</h3>\n\n@if (TodosState.Value.IsLoading)\n{\n    <div class=\"d-flex flex-row justify-content-center\">\n        <div class=\"spinner-border\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span>\n        </div>\n    </div>\n}\nelse if (TodosState.Value.HasCurrentErrors || TodosState.Value.CurrentTodos is null)\n{\n    <div class=\"d-flex flex-column align-items-center\">\n        <span class=\"py-2\">Whoops! Looks like an issue occurred loading todos :(</span>\n        <button class=\"btn btn-info py-2\" @onclick=\"() => Facade.LoadTodos()\">Reload Todos</button>\n    </div>\n}\nelse if (!TodosState.Value.CurrentTodos.Any())\n{\n    <CreateTodoForm />\n\n    <div class=\"d-flex flex-column align-items-center mt-2\">\n        <span class=\"py-2\">Looks like there's no todos...</span>\n        <button class=\"btn btn-info py-2\" @onclick=\"() => Facade.LoadTodos()\">Reload Todos</button>\n    </div>\n}\nelse\n{\n    <CreateTodoForm />\n\n    <table class=\"table table-hover mt-2\">\n        <thead>\n            <tr class=\"text-center\">\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Title</th>\n                <th scope=\"col\">Completed</th>\n                <th scope=\"col\">User ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var todo in TodosState.Value.CurrentTodos)\n            {\n                <tr style=\"cursor: pointer;\" class=\"text-center\" @onclick=\"() => NavigateToTodoDetail(todo.Id)\">\n                    <td>@todo.Id</td>\n                    <td>@todo.Title</td>\n                    <td>@todo.Completed</td>\n                    <td>@todo.UserId</td>\n                </tr>\n            }\n        </tbody>\n    </table>\n}\n```\n\nWe've added a reference to our create todo form with the `<CreateTodoForm />` markup component in this razor page, so\nwhen we navigate to the page, we should see a simple form after the todos have been loaded from the API:\n\n![Create_todo_Form](/images/state-management-with-blazor-using-fluxor/part-2/create_todo_Form.png)\n\nNotice we've added the `<CreateTodoForm />` component in two sections of our markup, once when a rendered list is pulled\nfrom the store, and again when there are no todos loaded available in state. With the help of Fluxor, we can easily\nrender these conditional pieces of markup based on our current state value, tapping into `TodosState.Value` to access\nour properties we've added to that particular piece of state.\nInternally, [Fluxor](https://github.com/mrpmorris/Fluxor/blob/master/Source/Fluxor.Blazor.Web/Components/FluxorComponent.cs#L29)\nwill call `StateHasChanged` for us when we have components descending from a `FluxorComponent` anytime the our store\npublished a new `TodosState` (triggered by the store), signaling Blazor to re-render the current markup based on our\nnew `TodosState` value. If you're familiar with Angular, `StateHasChanged` is the analog to the `ChangeDetectorRef`\nservice commonly utilized by Angular components that turn off automatic change detection\nwhen `ChangeDetectionStrategy.OnPush` is used for that component's change detection strategy.\n\nWith our form in place, let's test our create workflow to make sure everything works as expected. With Redux Dev Tools\nopen in the dev console, let's go ahead and fire up our application. When it's up and running, navigate to the `Todos`\nnav menu item, and we should a few actions fire off, namely the `LoadTodosAction` and the `LoadTodosSuccessAction` (\nhopefully). Inspecting these actions, we can look at the action payloads, the current `Todos` state value, and the\ncomputed diff between states once the action was dispatched. If we fill in some values for the create todo form on the\ntop of the page and hit the submit button, we should again see two more actions dispatched in the form\nof `CreateTodoAction` carrying the form data we entered in the action payload, and a\ncorresponding `CreateTodoSuccessAction` computed state diff with an extra todo item added to the `CurrentTodos` property\nstate. The change should then be reflected in our table, since the store pushed out two corresponding `TodosState`\nchanges, causing Blazor to re-render its current markup twice and rendering the corresponding HTML based on the values\nwithin our `TodosState`.\n\n## Updating todos\n\nWith our create workflow in place, let's iron out our update workflow. Since we've already put in place our retrieve\nworkflows, all we really need to do is add a bit code code to the `TodoDetail.razor` page to allow users to modify the\ntodo values when they've been selected from the todos table. To kick things off, let's add some actions for updating a\ntodo. In our `Actions` folder within our `Todos` feature folder, let's add an `UpdateTodo` folder. Inside that\ndirectory, we'll add three actions corresponding to the kickoff, success, and failure actions:\n\n### UpdateTodoAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos.Dtos;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo\n{\n    public class UpdateTodoAction\n    {\n        public UpdateTodoAction(int id, CreateOrUpdateTodoDto todo) =>\n            (Id, Todo) = (id, todo);\n\n        public int Id { get; }\n\n        public CreateOrUpdateTodoDto Todo { get; }\n    }\n}\n```\n\n### UpdateTodoSuccessAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos.Dtos;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo\n{\n    public class UpdateTodoSuccessAction\n    {\n        public UpdateTodoSuccessAction(TodoDto todo) =>\n            Todo = todo;\n\n        public TodoDto Todo { get; }\n    }\n}\n```\n\n### UpdateTodoFailureAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Store.Features.Shared.Actions;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo\n{\n    public class UpdateTodoFailureAction : FailureAction\n    {\n        public UpdateTodoFailureAction(string errorMessage)\n            : base(errorMessage)\n        {\n        }\n    }\n}\n```\n\nSimilar to our create workflow, we've allowed users to update todos using our `CreateOrUpdateTodoDto` class we created\nto keep consistent with the properties they can use to create and update todos. With our actions in place, let's add the\ncorresponding reducer methods that will compute the state upon dispatch of these actions. In our `Reducers` folder,\nlet's add an `UpdateTodoActionsReducer.cs` class file:\n\n### UpdateTodoActionsReducer.cs\n\n```csharp\nusing Fluxor;\nusing StateManagementWithFluxor.Models.Todos.Dtos;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo;\nusing StateManagementWithFluxor.Store.State;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Reducers\n{\n    public static class UpdateTodoActionsReducer\n    {\n        [ReducerMethod]\n        public static TodosState ReduceUpdateTodoAction(TodosState state, UpdateTodoAction _) =>\n            new TodosState(true, null, state.CurrentTodos, state.CurrentTodo);\n\n        [ReducerMethod]\n        public static TodosState ReduceUpdateTodoSuccessAction(TodosState state, UpdateTodoSuccessAction action)\n        {\n            // If the current todos list is null, set the state with a new list containing the updated todo\n            if (state.CurrentTodos is null)\n            {\n                return new TodosState(false, null, new List<TodoDto> { action.Todo }, state.CurrentTodo);\n            }\n\n            // Rather than mutating in place, let's construct a new list and add our updated item\n            var updatedList = state.CurrentTodos\n                .Where(t => t.Id != action.Todo.Id)\n                .ToList();\n\n            // Add the todo and sort the list\n            updatedList.Add(action.Todo);\n            updatedList = updatedList\n                .OrderBy(t => t.Id)\n                .ToList();\n\n            return new TodosState(false, null, updatedList, null);\n        }\n\n        [ReducerMethod]\n        public static TodosState ReduceUpdateTodoFailureAction(TodosState state, UpdateTodoFailureAction action) =>\n            new TodosState(false, action.ErrorMessage, state.CurrentTodos, state.CurrentTodo);\n    }\n}\n```\n\nNothing too exciting with our `ReduceUpdateTodoAction` and `ReduceUpdateTodoFailureAction` state reducers, as they\nsimply compute a new `TodosState` based on the action payload. Upon a successful update action being dispatched,\nour `ReduceUpdateTodoSuccessAction` will create a new list based on the `CurrentTodos` values, excluding the value we've\nupdated, add the updated todo from the `UpdateTodoSuccessAction` payload, and create a new `TodosState` with this new\nlist. Again, we probably wouldn't do this in a real world production application, where we might opt instead to recall\nthe API to rehydrate the current list view.\n\nWith our reducer in place, let's add a couple side effects for the `UpdateTodoAction` and `UpdateTodoSuccessAction`\nbeing dispatched. In our `Effects` folder, let's add an `UpdateTodo` subfolder with two effects, `UpdateTodoEffect.cs`\nand `UpdateTodoSuccessEffect.cs`:\n\n### UpdateTodoEffect.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Models.Todos.Dtos;\nusing StateManagementWithFluxor.Services;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects.UpdateTodoEffect\n{\n    public class UpdateTodoEffect : Effect<UpdateTodoAction>\n    {\n        private readonly ILogger<UpdateTodoEffect> _logger;\n        private readonly JsonPlaceholderApiService _apiService;\n\n        public UpdateTodoEffect(ILogger<UpdateTodoEffect> logger, JsonPlaceholderApiService httpClient) =>\n            (_logger, _apiService) = (logger, httpClient);\n\n        protected override async Task HandleAsync(UpdateTodoAction action, IDispatcher dispatcher)\n        {\n            try\n            {\n                _logger.LogInformation($\"Updating todo {action.Id}...\");\n                var updateResponse = await _apiService.PutAsync($\"todos/{action.Id}\", action.Todo);\n\n                if (!updateResponse.IsSuccessStatusCode)\n                {\n                    throw new HttpRequestException($\"Error updating todo: {updateResponse.ReasonPhrase}\");\n                }\n\n                _logger.LogInformation(\"Todo updated successfully!\");\n                var updatedTodo = await updateResponse.Content.ReadFromJsonAsync<TodoDto>();\n                dispatcher.Dispatch(new UpdateTodoSuccessAction(updatedTodo));\n            }\n            catch (Exception e)\n            {\n                _logger.LogError($\"Could not update todo, reason: {e.Message}\");\n                dispatcher.Dispatch(new UpdateTodoFailureAction(e.Message));\n            }\n        }\n    }\n}\n```\n\n### UpdateTodoSuccessEffect.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects.UpdateTodoEffect\n{\n    public class UpdateTodoSuccessEffect : Effect<UpdateTodoSuccessAction>\n    {\n        private readonly ILogger<UpdateTodoSuccessEffect> _logger;\n        private readonly NavigationManager _navigation;\n\n        public UpdateTodoSuccessEffect(ILogger<UpdateTodoSuccessEffect> logger, NavigationManager navigation) =>\n            (_logger, _navigation) = (logger, navigation);\n\n        protected override Task HandleAsync(UpdateTodoSuccessAction action, IDispatcher dispatcher)\n        {\n            _logger.LogInformation(\"Updated todo successfully, navigating back to todo listing...\");\n            _navigation.NavigateTo(\"todos\");\n\n            return Task.CompletedTask;\n        }\n    }\n}\n```\n\nOur `UpdateTodoEffect.cs` utilizes our `JsonPlaceholderApiService` to make a PUT call to the API using the action's\npayload (our `CreateOrUpdateTodoDto` object), and issues an update success action upon a successful response from the\nAPI. In our `UpdateTodoSuccessEffect`, we navigate the user back to the todos page, where the list should now display\nthe updated values we've just entered and submitted on the todo details form. We choose to navigate users back to the\ntodos page only on a successful action dispatched, rather than navigating users back regardless, as we want to inform\nusers of unexpected errors while still on the details page before navigating back to the page. We're also controlling\nthe user's navigation, building in predictable UX for the user rather than having them navigate back manually, or\nnavigating else where in our application that we might not expect during this workflow.\n\nWith our core flux workflow in place for the update actions, let's add a method to our `StateFacade` so that we can\nissue these actions from our `TodosDetail.razor` page. In our `StateFacade` service:\n\n### StateFacade.cs\n\n```csharp\n// Previously existing imported namespaces...\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo;\n\nnamespace StateManagementWithFluxor.Services\n{\n    public class StateFacade\n    {\n        // Previous facade methods...\n\n        public void UpdateTodo(int id, string title, bool completed, int userId)\n        {\n            // Construct our validated todo\n            var todoDto = new CreateOrUpdateTodoDto(title, completed, userId);\n\n            _logger.LogInformation($\"Issuing action to update todo {id}\");\n            _dispatcher.Dispatch(new UpdateTodoAction(id, todoDto));\n        }\n    }\n}\n```\n\nWith our `UpdateTodo` facade method in place, let's finally add to the markup in `TodoDetail.razor` to dispatch the\nupdate action and allow users to modify the currently selected todo values:\n\n### TodoDetail.razor\n\n```csharp\n@inherits Fluxor.Blazor.Web.Components.FluxorComponent\n\n@page \"/todos/{todoId}\"\n\n@using StateManagementWithFluxor.Models.Todos.Validation\n@using StateManagementWithFluxor.Store.State\n@using StateManagementWithFluxor.Services\n\n@inject IState<TodosState> TodosState\n@inject StateFacade Facade\n\n<h3 class=\"text-center mb-3\">Detail for todo item @TodoId</h3>\n\n@if (TodosState.Value.IsLoading)\n{\n    <div class=\"d-flex flex-row justify-content-center\">\n        <div class=\"spinner-border\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span>\n        </div>\n    </div>\n}\nelse if (TodosState.Value.HasCurrentErrors || TodosState.Value.CurrentTodo is null)\n{\n    <div class=\"d-flex flex-column align-items-center\">\n        <span>Whoops! Looks like an issue occurred loading todos :(</span>\n        <div class=\"py-3\">\n            <a class=\"btn btn-primary\" href=\"/todos\">Back to Todos</a>\n        </div>\n    </div>\n}\nelse\n{\n    <EditForm Model=\"validationModel\" OnValidSubmit=\"HandleValidSubmit\">\n        <DataAnnotationsValidator />\n        <div class=\"d-flex flex-column align-items-center\">\n            <ValidationSummary />\n        </div>\n\n        <div class=\"d-flex flex-column align-items-center py-1\">\n            <div class=\"d-flex flex-row py-2\">\n                <strong>ID</strong>: @TodosState.Value.CurrentTodo.Id\n            </div>\n            <div class=\"py-2 d-flex flex-row align-items-center\">\n                <strong class=\"px-2\">Completed:</strong>\n                <InputCheckbox class=\"form-check\" @bind-Value=\"validationModel.Completed\" />\n            </div>\n            <div class=\"py-2 d-flex flex-row align-items-center\">\n                <strong class=\"px-2\">User:</strong>\n                <InputNumber class=\"form-control\" @bind-Value=\"validationModel.UserId\"/>\n            </div>\n            <div class=\"py-2 d-flex flex-row align-items-center\">\n                <strong class=\"px-2\">Title:</strong>\n                <InputText class=\"form-control\" @bind-Value=\"validationModel.Title\"/>\n            </div>\n\n            <div class=\"d-flex flex-row justify-content-center pt-2\">\n                <button type=\"submit\" class=\"btn btn-secondary\">Update</button>\n                <span class=\"px-2\"></span>\n                <button class=\"btn btn-danger\">Delete</button>\n            </div>\n\n            <div class=\"py-3\">\n                <a class=\"btn btn-primary\" href=\"/todos\">Back to Todos</a>\n            </div>\n        </div>\n    </EditForm>\n\n}\n\n@code {\n\n    private CreateOrUpdateTodoValidationModel validationModel = new CreateOrUpdateTodoValidationModel();\n\n    [Parameter]\n    public string? TodoId { get; set; }\n\n    protected override void OnInitialized()\n    {\n        // Load the todo detail on initial page navigation\n        if (int.TryParse(TodoId, out var parsedId))\n        {\n            Facade.LoadTodoById(parsedId);\n        }\n\n        // Register a state change to assign the validation fields\n        TodosState.StateChanged += (sender, state) =>\n        {\n            if (state.CurrentTodo is null)\n            {\n                return;\n            }\n\n            validationModel.Title = state.CurrentTodo.Title;\n            validationModel.Completed = state.CurrentTodo.Completed;\n            validationModel.UserId = state.CurrentTodo.UserId;\n\n            StateHasChanged();\n        };\n\n        base.OnInitialized();\n    }\n\n    protected override void Dispose(bool disposing)\n    {\n        base.Dispose(disposing);\n    }\n\n    private void HandleValidSubmit()\n    {\n        // We use the bang operator (!) to tell the compiler we'll know this string field will not be null\n        Facade.UpdateTodo(TodosState.Value.CurrentTodo!.Id, validationModel.Title!, validationModel.Completed, validationModel.UserId);\n    }\n\n}\n```\n\nSince we've changed quite a few things in this detail page, let's do a quick code breakdown:\n\n-   First, we've added an `EditForm` to handle validating the user's input when updating values similar to how we've setup\n    our `CreateTodoForm.razor` component\n-   We've added a `CreateOrUpdateTodoValidationModel` validation model that will react to user input and display any\n    validation errors with the help of the `<DataAnnotationsValidator />` and `<ValidationSummary />` built-in Blazor\n    components\n-   We've modified our `OnInitialized` lifecycle method to react to state changes so we can reassign the validation model\n    fields from the current todo fields and trigger an additional `StateHasChanged()` event to tell Blazor to re-render\n    the markup to reflect these changes within the inputs of the form\n-   Since we're subscribing to additional state changes outside of the scope of Fluxor, we need make sure to manually\n    dispose of our component to avoid memory leaks; again, if you're familiar with Angular, this is similar to destroying\n    your observable subscriptions when a component is disposed\n-   Upon a valid submit, we'll issue the `UpdateTodo` facade method that will dispatch the `UpdateTodoAction` and kickoff\n    the update workflow\n\nAwesome, now that our todo detail page has been updated, if we select a todo from the todos table, we should now be able\nto update that particular todo's values and see those changes reflected back in the table once we hit submit (and the\nAPI responds successfully). I'll leave it as an exercise for the reader to see what actions are dispatched in the Redux\nDev Tools console panel and inspect the actions, payloads, and diffs that are computed.\n\n## Deleting todos\n\nWith the light at the end of the tunnel now within sight, we just need to add one more workflow to delete todos.\nThankfully, most of the internal plumbing we've already done, so we'll only have to hookup the delete actions to the\ndelete button we've added to our detail page. Let's start by adding a `DeleteTodos` folder within our `Actions`\ndirectory, with three actions in `DeleteTodoAction.cs`, `DeleteTodoSuccessAction.cs`, `DeleteTodoFailureAction.cs`:\n\n### DeleteTodoAction.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo\n{\n    public class DeleteTodoAction\n    {\n        public DeleteTodoAction(int id) =>\n            Id = id;\n\n        public int Id { get; }\n    }\n}\n```\n\n### DeleteTodoSuccessAction.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo\n{\n    public class DeleteTodoSuccessAction\n    {\n        public DeleteTodoSuccessAction(int id) =>\n            Id = id;\n\n        public int Id { get; }\n    }\n}\n```\n\n### DeleteTodoFailureAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Store.Features.Shared.Actions;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo\n{\n    public class DeleteTodoFailureAction : FailureAction\n    {\n        public DeleteTodoFailureAction(string errorMessage)\n            : base(errorMessage)\n        {\n        }\n    }\n}\n```\n\nFrom the above actions, we see that we're simply only transporting the todo ID in the kickoff and success action\npayloads, as we only need a reference to the ID to remove the todo from our list. While it _might_ be tempting to reuse\nthe kickoff and success actions as they are effectively the same class, the overhead of adding actions is rather small\nand doesn't add much complexity. If our requirements change, maybe the business analysts want a message transmitted upon\na successful delete, we'll only be refactoring a single action sub-workflow (the success flow for the delete todo\nworkflow) with zero fear of unintentionally breaking the kickoff sub-workflow. With our actions in place, let's add our\nlast reducer in our `Reducers` folder with `DeleteTodoActionsReducer.cs`:\n\n### DeleteTodoActionsReducer.cs\n\n```csharp\nusing Fluxor;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo;\nusing StateManagementWithFluxor.Store.State;\nusing System.Linq;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Reducers\n{\n    public static class DeleteTodoActionsReducer\n    {\n        [ReducerMethod]\n        public static TodosState ReduceDeleteTodoAction(TodosState state, DeleteTodoAction _) =>\n            new TodosState(true, null, state.CurrentTodos, state.CurrentTodo);\n\n        [ReducerMethod]\n        public static TodosState ReduceDeleteTodoSuccessAction(TodosState state, DeleteTodoSuccessAction action)\n        {\n            // Return the default state if no list of todos is found\n            if (state.CurrentTodos is null)\n            {\n                return new TodosState(false, null, null, state.CurrentTodo);\n            }\n\n            // Create a new list with all todo items excluding the todo with the deleted ID\n            var updatedTodos = state.CurrentTodos.Where(t => t.Id != action.Id);\n\n            return new TodosState(false, null, updatedTodos, state.CurrentTodo);\n        }\n\n        [ReducerMethod]\n        public static TodosState ReduceDeleteTodoFailureAction(TodosState state, DeleteTodoFailureAction action) =>\n            new TodosState(false, action.ErrorMessage, state.CurrentTodos, state.CurrentTodo);\n    }\n}\n```\n\nAgain, nothing special with our `ReduceDeleteTodoAction` and `ReduceDeleteTodoFailureAction`, as they're simply just\ncomputing action-based stated. With our `ReduceDeleteTodoSuccessAction`, we grab a reference to a list with the help of\nLINQ containing all todos excluding the todo who's ID matches the ID from the issued action. Using this newly created\nlist, we'll create a new `TodosState` using this list and notify our components. With our reducer in place, let's add a\nfew side effects to help with calling the API with `DeleteTodoEffect.cs` and `DeleteTodoSuccessEffect.cs`. In\nour `Effects` folder, let's add a `DeleteTodos` subfolder with the following classes:\n\n### DeleteTodoEffect.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Services;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo;\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects.DeleteTodo\n{\n    public class DeleteTodoEffect : Effect<DeleteTodoAction>\n    {\n        private readonly ILogger<DeleteTodoEffect> _logger;\n        private readonly JsonPlaceholderApiService _apiService;\n\n        public DeleteTodoEffect(ILogger<DeleteTodoEffect> logger, JsonPlaceholderApiService apiService) =>\n            (_logger, _apiService) = (logger, apiService);\n\n        protected override async Task HandleAsync(DeleteTodoAction action, IDispatcher dispatcher)\n        {\n            try\n            {\n                _logger.LogInformation($\"Deleting todo {action.Id}...\");\n                var deleteResponse = await _apiService.DeleteAsync($\"todos/{action.Id}\");\n\n                if (!deleteResponse.IsSuccessStatusCode)\n                {\n                    throw new HttpRequestException($\"Error deleting todo: {deleteResponse.ReasonPhrase}\");\n                }\n\n                _logger.LogInformation($\"Todo deleted successfully!\");\n                dispatcher.Dispatch(new DeleteTodoSuccessAction(action.Id));\n            }\n            catch (Exception e)\n            {\n                _logger.LogError($\"Could not create todo, reason: {e.Message}\");\n                dispatcher.Dispatch(new DeleteTodoFailureAction(e.Message));\n            }\n        }\n    }\n}\n```\n\n### DeleteTodoSuccessEffect.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects\n{\n    public class DeleteTodoSuccessEffect : Effect<DeleteTodoSuccessAction>\n    {\n        private readonly ILogger<DeleteTodoSuccessEffect> _logger;\n        private readonly NavigationManager _navigation;\n\n        public DeleteTodoSuccessEffect(ILogger<DeleteTodoSuccessEffect> logger, NavigationManager navigation) =>\n            (_logger, _navigation) = (logger, navigation);\n\n        protected override Task HandleAsync(DeleteTodoSuccessAction action, IDispatcher dispatcher)\n        {\n            _logger.LogInformation(\"Deleted todo successfully, navigating back to todo listing...\");\n            _navigation.NavigateTo(\"todos\");\n\n            return Task.CompletedTask;\n        }\n    }\n}\n```\n\nWith our `DeleteTodoEffect`, we setup an eerily similar workflow to our other issued actions, simply using our API\nservice to call the DELETE endpoint with the ID from the action's payload. On a successful response we'll issue the\nsuccess action that will trigger the `DeleteTodoSuccessEffect` to fire off, navigating the user back to the todos page\nwith a new version of the table without the todo we just deleted. Again, we use effects as a form of navigation control\nto selectively guide users around our application in a predicable manner. With our effects in place, let's add a facade\nmethod to help facilitate the dispatching of the delete actions from our components. Back in our `StateFacade` service:\n\n### StateFacade.cs\n\n```csharp\n// Previously existing imported namespaces...\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo;\n\nnamespace StateManagementWithFluxor.Services\n{\n    public class StateFacade\n    {\n        // Previous facade methods...\n\n        public void DeleteTodo(int id)\n        {\n            _logger.LogInformation($\"Issuing action to delete todo {id}\");\n            _dispatcher.Dispatch(new DeleteTodoAction(id));\n        }\n    }\n}\n```\n\nWith our facade method in place, let's finally add the interaction to the delete button on our todo detail page with\njust a simple `@onclick` event handler within our `EditForm` markup block:\n\n### TodoDetail.razor\n\n```csharp\n<EditForm Model=\"validationModel\" OnValidSubmit=\"HandleValidSubmit\">\n    <DataAnnotationsValidator />\n    <div class=\"d-flex flex-column align-items-center\">\n        <ValidationSummary />\n    </div>\n\n    <div class=\"d-flex flex-column align-items-center py-1\">\n        <div class=\"d-flex flex-row py-2\">\n            <strong>ID</strong>: @TodosState.Value.CurrentTodo.Id\n        </div>\n        <div class=\"py-2 d-flex flex-row align-items-center\">\n            <strong class=\"px-2\">Completed:</strong>\n            <InputCheckbox class=\"form-check\" @bind-Value=\"validationModel.Completed\" />\n        </div>\n        <div class=\"py-2 d-flex flex-row align-items-center\">\n            <strong class=\"px-2\">User:</strong>\n            <InputNumber class=\"form-control\" @bind-Value=\"validationModel.UserId\"/>\n        </div>\n        <div class=\"py-2 d-flex flex-row align-items-center\">\n            <strong class=\"px-2\">Title:</strong>\n            <InputText class=\"form-control\" @bind-Value=\"validationModel.Title\"/>\n        </div>\n\n        <div class=\"d-flex flex-row justify-content-center pt-2\">\n            <button type=\"submit\" class=\"btn btn-secondary\">Update</button>\n            <span class=\"px-2\"></span>\n            <button class=\"btn btn-danger\" @onclick=\"() => Facade.DeleteTodo(TodosState.Value.CurrentTodo.Id)\">Delete</button>\n        </div>\n\n        <div class=\"py-3\">\n            <a class=\"btn btn-primary\" href=\"/todos\">Back to Todos</a>\n        </div>\n    </div>\n</EditForm>\n```\n\nNotice we've only just added the `@onclick=\"() => Facade.DeleteTodo(TodosState.Value.CurrentTodo.Id)\"` event handler to\nthe delete button to fire off the initial delete action based on the ID of the currently displayed todo.\n\nWhew... that was quite a bit of code. Let's sit back and enjoy the fruits of our labor and test out the delete workflow.\nIf we navigate to the todos page to see the list of displayed todos, go ahead and select a todo. Once we're navigated to\nthe detail page, with the Redux Dev tools console open, go ahead and hit the delete button. What actions do we see\nissued in the console? Checkout the diffs and the action payloads for a little extra credit. Once we see\nthe `DeleteTodoSuccessAction` issued, we're navigated back to our todos page and see the table has been updated to\nreflect the removal of our todo! Pretty cool, huh?\n\n### Wrapping up\n\nIn the final stretch, we've seen one strategy for implementing CRUD workflows with the help of Fluxor in our Blazor\napplications. Bringing the redux experience to Blazor empowers us .NET developers to build bulletproof and predictable\nBlazor applications simplifying the complex problem of state management on the frontend, bringing a tried-and-true\ndesign patter in flux along with us. Feel free to play around with the code we've written so far, and maybe even improve\nthe workflows we already have set in place (see what happens when you reload the todo detail with a selected todo and\ntry to delete it). All the code we've written so far is available\non [GitHub](https://github.com/JoeyMckenzie/StateManagementWithFluxor) for those following along. Next up, we'll explore\nautomated integration testing on our todos application using Cypress to help further strengthen our codebase and provide\nyet another tool we can bring into the development process to assist with bulletproofing our workflows, along with a few\nconsiderations and potential refactors we could make with our current application architecture to make it a bit more\nrobust.\n\nUntil next time, friends!\n",
    "html": "<p>Memes aside, if you've been following along with our flux-ified Blazor project, you may have noticed the plethora of\ninitial, success, and failure action types. While this may seem like overkill to some, by creating this separation of\nconcern between action types, we ensure each action has a <em>single</em> responsibility in the flux workflow. If (read: when)\nour business requirements change that cause us to modify existing actions, we can do so without fear of unintentionally\nbreaking another workflow that might reuse the same action. It's like I always say, \"when in doubt, create a new\naction.\"</p>\n<h2>Continuing where we left off</h2>\n<p>In our <a href=\"/images/fluxor-state-management-with-blazor-part-1/\">last post</a>, we discussed what the flux design pattern is,\nwhat problems it seeks to solve, and how to integrate it with Blazor using the Fluxor library. So far, we've created two\naction workflows to interact with the JSON Placeholder API: a todo list retrieve workflow and a todo retrieval by ID\nworkflow. With the help of a few services and effects, we successfully implemented the R of our CRUD operations using\nactions, reducers, and our central application store to allow our components to simply get only the state features they\ncare about and display them on the page. In this (hopefully shorter) post, we'll do a bit of service refactoring and add\na few more CRUD operations to give us a functioning application that'll allow us to interface with the todos from the\nJSON Placeholder API.</p>\n<h2>Refactoring to typed HTTP services</h2>\n<p>To kick things off, let's start by refactoring how we've been calling the API. So far, we've been injecting\nan <code>HttpClient</code> instance directly into our effects with the help of the DI container from\nthe <code>Microsoft.Extensions.DependencyInjection</code> library. A more robust, unit test-able approach would be to utilize a\ncentralized service that contains the <code>HttpClient</code> instance injected into it so that we can configure a single client\ninstance to our liking (attach headers, set base paths, etc.) and funnel all external network calls into a single place,\nrather than have <code>HttpClient</code>s spread throughout all of our flux effects. In our <code>Services</code> folder at the root of our\nproject, let's add a file named <code>JsonPlaceholderApiService.cs</code> with the following code:</p>\n<h3>JsonPlaceholderApiService.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">JsonPlaceholderApiService</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> HttpClient</span><span style=\"color:#80A665\"> _httpClient</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> JsonPlaceholderApiService</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">JsonPlaceholderApiService</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> HttpClient</span><span style=\"color:#80A665\"> httpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> httpClient</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> GetAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">>(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> path</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">GET: Retrieving resource of type </span><span style=\"color:#666666\">{</span><span style=\"color:#CB7676\">typeof</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">).</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetFromJsonAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">>(</span><span style=\"color:#BD976A\">path</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HttpResponseMessage</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> PostAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TBody</span><span style=\"color:#666666\">>(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> path</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TBody</span><span style=\"color:#80A665\"> body</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">POST: Creating resource of type </span><span style=\"color:#666666\">{</span><span style=\"color:#CB7676\">typeof</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TBody</span><span style=\"color:#666666\">).</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PostAsJsonAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">path</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HttpResponseMessage</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> PutAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TBody</span><span style=\"color:#666666\">>(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> path</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TBody</span><span style=\"color:#80A665\"> body</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">PUT: Updating resource of type </span><span style=\"color:#666666\">{</span><span style=\"color:#CB7676\">typeof</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TBody</span><span style=\"color:#666666\">).</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PutAsJsonAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">path</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HttpResponseMessage</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> DeleteAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> path</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">DELETE: Removing resource</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">path</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our centralized HTTP service in place, we've effectively created\na <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-3.1\">typed client</a> that we\ncan configure within the DI container to inject into our effects, with a configured HTTP client service wired up at\nruntime. Back in our <code>Program.cs</code>, we'll need to add a service reference to our <code>JsonPlaceholderApiService</code>, but before\ndoing so, let's add a package reference to the <code>Microsoft.Extensions.Http</code> NuGet package so that we can properly\nconfigure the HTTP client that will be injected into this service. I'm using Visual Studio's package manager to add the\nreference to our project, but feel free to use the command line (<code>dotnet add package Microsoft.Extensions.Http</code>), or the\nPackage Manager console (<code>Install-Package Microsoft.Extensions.Http</code>). Once we've successfully added the package, let's\nadd the following code to <code>Program.cs</code>:</p>\n<h3>Program.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">AspNetCore</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Components</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">WebAssembly</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Hosting</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reflection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Mime</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> builder</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> WebAssemblyHostBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">args</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">RootComponents</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">App</span><span style=\"color:#666666\">>(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">app</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add Fluxor</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFluxor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">options</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                options</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ScanAssemblies</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">Assembly</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetExecutingAssembly</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                options</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UseReduxDevTools</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add custom application services</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddScoped</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StateFacade</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddHttpClient</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">JsonPlaceholderApiService</span><span style=\"color:#666666\">>(</span><span style=\"color:#80A665\">client</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                client</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">DefaultRequestHeaders</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Content-Control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> $\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">MediaTypeNames</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Application</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Json</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">; charset=utf-8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                client</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BaseAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Uri</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://jsonplaceholder.typicode.com</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> builder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Build</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">RunAsync</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>From the above, we can see that we've added the line <code>builder.Services.AddHttpClient&#x3C;JsonPlaceholderApiService></code>\nconfiguring the <code>HttpClient</code> instance that will be injected into the API service for us at runtime. Every time\na <code>JsonPlaceholderApiService</code> instance is requested at runtime within our effects, the DI container will inject a\nconfigured <code>HttpClient</code> instance with the base address we've pointed to here and the default headers on each request.\nWith our API service wired up, let's go ahead and add some markup to allow users to create todos. When creating a todo\nand sending the corresponding POST request to JSON Placeholder API, we won't actually be creating a resource on the\nserver (we'll see the consequences of this later).</p>\n<p>The Placeholder API is simply just that - a dummy API that acts as a placeholder for realtime requests and responses.\nOur create request will send back a 201 with the created todo resource. We'll take that todo and simply append it to our\ncurrent list of todos and re-render the list within our <code>Todos.razor</code> component to reflect the addition of the newly\ncreated todo. In a real world scenario, this isn't really something you'd want to be doing on the frontend. A better\nsolution, and more common in practice, would be to send a create request to a downstream server from the client, and\nupon a successful status returned from the server, we'd send another request to the server to retrieve the list again\nthat should contain our newly created resource. There's a few reason as to why we would implement the design in this\nway, but a bit irrelevant and out of scope for this post.</p>\n<p>Let's go ahead create a <code>Components</code> folder at our solution root and within that directory, let's add a razor file\ncalled <code>CreateTodoForm.razor</code> with the following markup:</p>\n<h3>CreateTodoForm.razor</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">@inherits</span><span style=\"color:#BD976A\"> Fluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Blazor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Web</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Components</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">FluxorComponent</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Validation</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@inject</span><span style=\"color:#BD976A\"> StateFacade</span><span style=\"color:#BD976A\"> Facade</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">EditForm</span><span style=\"color:#80A665\"> Model</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> OnValidSubmit</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">HandleValidSubmit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">DataAnnotationsValidator</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">ValidationSummary</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-group px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">label</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">label</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputText</span><span style=\"color:#BD976A\">  id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\">  @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-group px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">label</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">User</span><span style=\"color:#BD976A\"> ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">label</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputNumber</span><span style=\"color:#BD976A\"> ParsingErrorMessage</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">That is not a valid user ID</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-user-id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.UserId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-group px-2 mt-3 d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">label</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">label</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputCheckbox</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-check</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">pt-2 d-flex flex-row justify-content-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-primary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">submit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Create</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">EditForm</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@code</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    private</span><span style=\"color:#BD976A\"> CreateOrUpdateTodoValidationModel</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoValidationModel</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    protected</span><span style=\"color:#BD976A\"> override</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> OnInitialized</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C99076\">        base</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">OnInitialized</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    private</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> HandleValidSubmit</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // We use the bang operator (!) to tell the compiler we'll know this string field will not be null</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Facade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateTodo</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>In our <code>CreateTodoForm.razor</code> component, we're simply just adding a bit of form markup to allow users to input a todo\ntitle, user ID, and the current status of the todo (done/not done). We're using Blazor's built-in <code>EditForm</code> to perform\nfield validations on our model that we'll ultimately send to the server containing the todo data, again letting these\nbuilt-in Blazor tools handle the heavy input validation lifting for us. Using the <code>DataAnnotationsValidator</code>\nand <code>ValidationSummary</code> components, we're able to dynamically render validation messages when the user input does not\nmeet our criteria for handling form submission. Using a little Bootstrap, we'll be able to display our error messages in\na somewhat pleasant manner as well.</p>\n<p>Notice that we've added a new model type with the <code>CreateOrUpdateTodoValidationModel</code> reference that will have it's\nproperties <code>set</code> as we've bound it to our <code>EditForm</code> using the <code>Model</code> attribute. Let's go ahead and add a <code>Validation</code>\nfolder underneath the <code>Todos</code> feature folder within our <code>Models</code> directory. Within the <code>Validation</code> folder, let's add\nthe <code>CreateOrUpdateTodoValidationModel.cs</code> class file:</p>\n<h3>CreateOrUpdateTodoValidationModel.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">ComponentModel</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DataAnnotations</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Validation</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoValidationModel</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Required</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">AllowEmptyStrings</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> ErrorMessage</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Your todo must have a title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> Title</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Required</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">ErrorMessage</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Status of this todo is required</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> Completed</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Required</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">ErrorMessage</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">User ID associated with this todo is required</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Range</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 100</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> UserId</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Using .NET's <code>System.ComponentModel.DataAnnotations</code> library, we add a few <code>Required</code> attributes to each of the\nproperties, with an additional <code>Range</code> attribute on the <code>UserId</code> to enforce users stay within the 1 to 100 user ID\nvalues. While it might seem a bit overkill to add this validation model when we could just simply bind each of the\nproperties to a model to be sent off to a server, we have to keep in mind that we don't want our models to\nbecome <a href=\"https://en.wikipedia.org/wiki/God_object\">god objects</a>. If you've ever worked on a large enterprise codebase,\nyou've more than likely seen this at some point or another - API models reused across multiple endpoint request payloads\ntrying to fit the mold everywhere, \"helper\" classes that only \"help\" you magically break this unintentionally when\nmaking slight changes, and the list goes on. Our request models and validation models should be responsible for one\nthing, and one thing only - the <code>CreateOrUpdateTodoValidationModel</code> is only concerned about validating input.</p>\n<p>Back in our <code>CreateTodoForm.razor</code> with the <code>EditForm</code> referencing our <code>validationModel</code>, we bind each of the properties\nwithin the <code>validationModel</code> to an input tag. Luckily for us, the .NET team has provider a few nice custom input\ncomponents when dealing with <code>EditForm</code>s within our application. We bind each of the <code>Title</code>, <code>Completed</code>, and <code>UserId</code>\nproperties to a wrapping input component in <code>InputText</code>, <code>InputCheckbox</code>, and <code>InputNumber</code> respectively. Adding a\nfew <code>form-control</code> Bootstrap classes and we've got a semi-decent looking form!</p>\n<p>In our <code>OnInitialized</code> component lifecycle method, we initialize the user ID to 1 since the rendered markup with be\na <code>type=\"number\"</code> input. We've also added another method to our <code>StateFacade</code> service with <code>CreateTodo</code> - let's go ahead\nand add that to the facade:</p>\n<h3>StateFacade.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> StateFacade</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Previous constructor and methods...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> CreateTodo</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> title</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> userId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Construct our validated todo</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> todoDto</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> userId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Issuing action to create todo [</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">] for user [</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">userId</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">]</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">todoDto</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>If you're curious about why we've added this \"facade\" service, I mention the reasons for doing so in the first post.\nOur <code>CreateTodo</code> method simply constructs a <code>CreateOrUpdateTodoDto</code> immutable request model and issues\na <code>CreateTodoAction</code> with it as the payload. Let's add each of those classes to their respective folders:</p>\n<h3>Models/Todos/Dtos/CreateOrUpdateTodoDto.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateOrUpdateTodoDto</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> title</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> userId</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> UserId</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> userId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Title</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> Completed</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> UserId</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>Store/Features/Todos/Actions/CreateTodo/CreateTodoAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateTodoAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">CreateOrUpdateTodoDto</span><span style=\"color:#80A665\"> todo</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Todo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span><span style=\"color:#80A665\"> Todo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our newly created action <code>CreateTodoAction</code>, let's add our success and failure actions while we're here before\ncreating the reducer methods that will subscribe to these actions:</p>\n<h3>CreateTodoSuccessAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateTodoSuccessAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#80A665\"> todo</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Todo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> TodoDto</span><span style=\"color:#80A665\"> Todo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>CreateTodoFailureAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Shared</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateTodoFailureAction</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> FailureAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            :</span><span style=\"color:#C99076\"> base</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Recall from our previous post that we created a common <code>FailureAction</code> for all of our failure type actions to descend\nfrom, allowing us to store common error properties within this shared action for all failure actions to tap into. With\nour create action in place, let's add a reducer to our our <code>Reducers</code> directory within our todos feature folder to\nhandle the create actions:</p>\n<h3>Store/Features/Reducers/CreateTodoActionsReducer.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">State</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reducers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateTodoActionsReducer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceCreateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CreateTodoAction</span><span style=\"color:#80A665\"> _</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceCreateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CreateTodoSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Grab a reference to the current todo list, or initialize one if we do not currently have any loaded</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> currentTodos</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#CB7676\"> ?</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">>()</span><span style=\"color:#CB7676\"> :</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add the newly created todo to our list and sort by ID</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            currentTodos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            currentTodos</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> currentTodos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">OrderBy</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">t</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> t</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> currentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceCreateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CreateTodoFailureAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ErrorMessage</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>When an initial <code>CreateTodoAction</code> is dispatched, we set the <code>TodoState</code> with the loading property set to true and the\nexisting todos and selected todo, as we don't want to alter the current state those actions ultimately produce as our\ncreate workflow has no concern with either workflow. Upon a successful creation, i.e. the API returning a successful 201\nstatus code back to us, we'll produce a <em>new</em> <code>TodosState</code> by appending the newly created todo item to a copy of the\ncurrent list of todos, and set the sorted list within the constructor of the <code>TodosState</code> object. Finally, upon\na <code>CreateTodoFailureAction</code> being dispatched, we keep the currently loaded todos piece of state intact, making sure to\nproduce a new <code>TodosState</code> containing an error that we issued the failure action with.</p>\n<p>With our reducer in place, we'll need to add a side effect (if you're a little fuzzy on the flux workflow, checkout the\nfirst post) that will do the actual calling of the API using our <code>JsonPlaceholderApiService</code> and issue either a success,\nor failure, action based on the response. In our <code>Effects</code> directory underneath our todos feature folder, let's add\na <code>CreateTodoEffect.cs</code> file:</p>\n<h3>CreateTodoEffect.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateTodoEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">CreateTodoAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">CreateTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> _apiService</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateTodoEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">CreateTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> httpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> httpClient</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">CreateTodoAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            try</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Creating todo </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Todo</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> createResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PostAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">createResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsSuccessStatusCode</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> HttpRequestException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Error creating todo: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">createResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">ReasonPhrase</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Todo created successfully!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> createdTodo</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> createResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Content</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ReadFromJsonAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">createdTodo</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            catch</span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">Exception</span><span style=\"color:#80A665\"> e</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogError</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Could not create todo, reason: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Message</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too out of the ordinary here, but let's do a quick code breakdown:</p>\n<ul>\n<li>We inject a logger and our API service from the DI container, using an expression-bodied tuple constructor (C#\nsyntactic sugar)</li>\n<li>Using our API service, we call the <code>PostAsync</code> method passing in the todo from the <code>CreateTodoAction</code> payload\nand <code>await</code> for the response</li>\n<li>If we get back a good looking 201, we'll go ahead and dispatch a <code>CreateTodoSuccessAction</code> with the todo response\nreturned from the API as the payload</li>\n<li>Upon any unchecked exceptions, or any non-successful status code returned from the server, we'll dispatch an error\naction with the corresponding error message from the exception</li>\n</ul>\n<p>With our create workflow in place, let's go ahead and add our <code>CreateTodoForm.razor</code> component to our <code>Todos.razor</code>\npage. In the markup section of <code>Todos.razor</code>, we'll replace the current markup with the following:</p>\n<h3>Todos.razor</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">h3</span><span style=\"color:#80A665\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center mb-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">h3</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">@if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsLoading</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">spinner-border</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> role</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">status</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sr-only</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Loading</span><span style=\"color:#CB7676\">..</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span><span style=\"color:#80A665\"> if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">HasCurrentErrors</span><span style=\"color:#CB7676\"> ||</span><span style=\"color:#BD976A\"> TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Whoops</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\"> Looks</span><span style=\"color:#BD976A\"> like</span><span style=\"color:#BD976A\"> an</span><span style=\"color:#BD976A\"> issue</span><span style=\"color:#BD976A\"> occurred</span><span style=\"color:#BD976A\"> loading</span><span style=\"color:#BD976A\"> todos</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#666666\">(&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-info py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @onclick</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">() => Facade.LoadTodos()</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Reload</span><span style=\"color:#BD976A\"> Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span><span style=\"color:#80A665\"> if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Any</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">CreateTodoForm</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center mt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Looks</span><span style=\"color:#BD976A\"> like</span><span style=\"color:#BD976A\"> there</span><span style=\"color:#666666\">'</span><span style=\"color:#C98A7D\">s no todos...&#x3C;/span</span><span style=\"color:#FDAEB7;font-style:italic\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-info py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @onclick</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">() => Facade.LoadTodos()</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Reload</span><span style=\"color:#BD976A\"> Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">CreateTodoForm</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">table</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">table table-hover mt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">thead</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">User</span><span style=\"color:#BD976A\"> ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">thead</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">tbody</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            @foreach</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">var</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#CB7676\"> in</span><span style=\"color:#BD976A\"> TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#BD976A\"> style</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">cursor: pointer;</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @onclick</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">() => NavigateToTodoDetail(todo.Id)</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">tbody</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">table</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We've added a reference to our create todo form with the <code>&#x3C;CreateTodoForm /></code> markup component in this razor page, so\nwhen we navigate to the page, we should see a simple form after the todos have been loaded from the API:</p>\n<p><img src=\"/images/state-management-with-blazor-using-fluxor/part-2/create_todo_Form.png\" alt=\"Create_todo_Form\"></p>\n<p>Notice we've added the <code>&#x3C;CreateTodoForm /></code> component in two sections of our markup, once when a rendered list is pulled\nfrom the store, and again when there are no todos loaded available in state. With the help of Fluxor, we can easily\nrender these conditional pieces of markup based on our current state value, tapping into <code>TodosState.Value</code> to access\nour properties we've added to that particular piece of state.\nInternally, <a href=\"https://github.com/mrpmorris/Fluxor/blob/master/Source/Fluxor.Blazor.Web/Components/FluxorComponent.cs#L29\">Fluxor</a>\nwill call <code>StateHasChanged</code> for us when we have components descending from a <code>FluxorComponent</code> anytime the our store\npublished a new <code>TodosState</code> (triggered by the store), signaling Blazor to re-render the current markup based on our\nnew <code>TodosState</code> value. If you're familiar with Angular, <code>StateHasChanged</code> is the analog to the <code>ChangeDetectorRef</code>\nservice commonly utilized by Angular components that turn off automatic change detection\nwhen <code>ChangeDetectionStrategy.OnPush</code> is used for that component's change detection strategy.</p>\n<p>With our form in place, let's test our create workflow to make sure everything works as expected. With Redux Dev Tools\nopen in the dev console, let's go ahead and fire up our application. When it's up and running, navigate to the <code>Todos</code>\nnav menu item, and we should a few actions fire off, namely the <code>LoadTodosAction</code> and the <code>LoadTodosSuccessAction</code> (\nhopefully). Inspecting these actions, we can look at the action payloads, the current <code>Todos</code> state value, and the\ncomputed diff between states once the action was dispatched. If we fill in some values for the create todo form on the\ntop of the page and hit the submit button, we should again see two more actions dispatched in the form\nof <code>CreateTodoAction</code> carrying the form data we entered in the action payload, and a\ncorresponding <code>CreateTodoSuccessAction</code> computed state diff with an extra todo item added to the <code>CurrentTodos</code> property\nstate. The change should then be reflected in our table, since the store pushed out two corresponding <code>TodosState</code>\nchanges, causing Blazor to re-render its current markup twice and rendering the corresponding HTML based on the values\nwithin our <code>TodosState</code>.</p>\n<h2>Updating todos</h2>\n<p>With our create workflow in place, let's iron out our update workflow. Since we've already put in place our retrieve\nworkflows, all we really need to do is add a bit code code to the <code>TodoDetail.razor</code> page to allow users to modify the\ntodo values when they've been selected from the todos table. To kick things off, let's add some actions for updating a\ntodo. In our <code>Actions</code> folder within our <code>Todos</code> feature folder, let's add an <code>UpdateTodo</code> folder. Inside that\ndirectory, we'll add three actions corresponding to the kickoff, success, and failure actions:</p>\n<h3>UpdateTodoAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span><span style=\"color:#80A665\"> todo</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Todo</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">id</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span><span style=\"color:#80A665\"> Todo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>UpdateTodoSuccessAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoSuccessAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#80A665\"> todo</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Todo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> TodoDto</span><span style=\"color:#80A665\"> Todo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>UpdateTodoFailureAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Shared</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoFailureAction</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> FailureAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            :</span><span style=\"color:#C99076\"> base</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Similar to our create workflow, we've allowed users to update todos using our <code>CreateOrUpdateTodoDto</code> class we created\nto keep consistent with the properties they can use to create and update todos. With our actions in place, let's add the\ncorresponding reducer methods that will compute the state upon dispatch of these actions. In our <code>Reducers</code> folder,\nlet's add an <code>UpdateTodoActionsReducer.cs</code> class file:</p>\n<h3>UpdateTodoActionsReducer.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">State</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reducers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoActionsReducer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceUpdateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> UpdateTodoAction</span><span style=\"color:#80A665\"> _</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceUpdateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> UpdateTodoSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If the current todos list is null, set the state with a new list containing the updated todo</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\"> },</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Rather than mutating in place, let's construct a new list and add our updated item</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updatedList</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">Where</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">t</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> t</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add the todo and sort the list</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedList</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedList</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> updatedList</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">OrderBy</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">t</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> t</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> updatedList</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceUpdateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> UpdateTodoFailureAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ErrorMessage</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too exciting with our <code>ReduceUpdateTodoAction</code> and <code>ReduceUpdateTodoFailureAction</code> state reducers, as they\nsimply compute a new <code>TodosState</code> based on the action payload. Upon a successful update action being dispatched,\nour <code>ReduceUpdateTodoSuccessAction</code> will create a new list based on the <code>CurrentTodos</code> values, excluding the value we've\nupdated, add the updated todo from the <code>UpdateTodoSuccessAction</code> payload, and create a new <code>TodosState</code> with this new\nlist. Again, we probably wouldn't do this in a real world production application, where we might opt instead to recall\nthe API to rehydrate the current list view.</p>\n<p>With our reducer in place, let's add a couple side effects for the <code>UpdateTodoAction</code> and <code>UpdateTodoSuccessAction</code>\nbeing dispatched. In our <code>Effects</code> folder, let's add an <code>UpdateTodo</code> subfolder with two effects, <code>UpdateTodoEffect.cs</code>\nand <code>UpdateTodoSuccessEffect.cs</code>:</p>\n<h3>UpdateTodoEffect.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodoEffect</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> _apiService</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateTodoEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> httpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> httpClient</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">UpdateTodoAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            try</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Updating todo </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> updateResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PutAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">todos/</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">updateResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsSuccessStatusCode</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> HttpRequestException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Error updating todo: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">updateResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">ReasonPhrase</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Todo updated successfully!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> updatedTodo</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> updateResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Content</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ReadFromJsonAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> UpdateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">updatedTodo</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            catch</span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">Exception</span><span style=\"color:#80A665\"> e</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogError</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Could not update todo, reason: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> UpdateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Message</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>UpdateTodoSuccessEffect.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">AspNetCore</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Components</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodoEffect</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoSuccessEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoSuccessAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoSuccessEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> NavigationManager</span><span style=\"color:#80A665\"> _navigation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateTodoSuccessEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoSuccessEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> NavigationManager</span><span style=\"color:#80A665\"> navigation</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _navigation</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> navigation</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">UpdateTodoSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Updated todo successfully, navigating back to todo listing...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _navigation</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">NavigateTo</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> Task</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CompletedTask</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our <code>UpdateTodoEffect.cs</code> utilizes our <code>JsonPlaceholderApiService</code> to make a PUT call to the API using the action's\npayload (our <code>CreateOrUpdateTodoDto</code> object), and issues an update success action upon a successful response from the\nAPI. In our <code>UpdateTodoSuccessEffect</code>, we navigate the user back to the todos page, where the list should now display\nthe updated values we've just entered and submitted on the todo details form. We choose to navigate users back to the\ntodos page only on a successful action dispatched, rather than navigating users back regardless, as we want to inform\nusers of unexpected errors while still on the details page before navigating back to the page. We're also controlling\nthe user's navigation, building in predictable UX for the user rather than having them navigate back manually, or\nnavigating else where in our application that we might not expect during this workflow.</p>\n<p>With our core flux workflow in place for the update actions, let's add a method to our <code>StateFacade</code> so that we can\nissue these actions from our <code>TodosDetail.razor</code> page. In our <code>StateFacade</code> service:</p>\n<h3>StateFacade.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// Previously existing imported namespaces...</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> StateFacade</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Previous facade methods...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> UpdateTodo</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> title</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> userId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Construct our validated todo</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> todoDto</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> userId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Issuing action to update todo </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> UpdateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">id</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> todoDto</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our <code>UpdateTodo</code> facade method in place, let's finally add to the markup in <code>TodoDetail.razor</code> to dispatch the\nupdate action and allow users to modify the currently selected todo values:</p>\n<h3>TodoDetail.razor</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">@inherits</span><span style=\"color:#BD976A\"> Fluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Blazor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Web</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Components</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">FluxorComponent</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@page</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">/todos/{todoId}</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Validation</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@inject</span><span style=\"color:#BD976A\"> IState</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\"> TodosState</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@inject</span><span style=\"color:#BD976A\"> StateFacade</span><span style=\"color:#BD976A\"> Facade</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">h3</span><span style=\"color:#80A665\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center mb-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Detail</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#BD976A\"> item</span><span style=\"color:#BD976A\"> @TodoId</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">h3</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">@if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsLoading</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">spinner-border</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> role</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">status</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sr-only</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Loading</span><span style=\"color:#CB7676\">..</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span><span style=\"color:#80A665\"> if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">HasCurrentErrors</span><span style=\"color:#CB7676\"> ||</span><span style=\"color:#BD976A\"> TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Whoops</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\"> Looks</span><span style=\"color:#BD976A\"> like</span><span style=\"color:#BD976A\"> an</span><span style=\"color:#BD976A\"> issue</span><span style=\"color:#BD976A\"> occurred</span><span style=\"color:#BD976A\"> loading</span><span style=\"color:#BD976A\"> todos</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#666666\">(&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">a</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-primary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Back</span><span style=\"color:#BD976A\"> to</span><span style=\"color:#BD976A\"> Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">EditForm</span><span style=\"color:#BD976A\"> Model</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> OnValidSubmit</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">HandleValidSubmit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">DataAnnotationsValidator</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">ValidationSummary</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center py-1</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> @TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">InputCheckbox</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-check</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">User</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">InputNumber</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.UserId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Title</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">InputText</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center pt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">submit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-secondary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Update</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-danger</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Delete</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">a</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-primary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Back</span><span style=\"color:#BD976A\"> to</span><span style=\"color:#BD976A\"> Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">EditForm</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@code</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    private</span><span style=\"color:#BD976A\"> CreateOrUpdateTodoValidationModel</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoValidationModel</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    [</span><span style=\"color:#BD976A\">Parameter</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#CB7676\">?</span><span style=\"color:#BD976A\"> TodoId</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> get</span><span style=\"color:#DBD7CAEE\">; </span><span style=\"color:#BD976A\">set</span><span style=\"color:#DBD7CAEE\">; </span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    protected</span><span style=\"color:#BD976A\"> override</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> OnInitialized</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Load the todo detail on initial page navigation</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">TryParse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">TodoId</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> out</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> parsedId</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Facade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LoadTodoById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">parsedId</span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Register a state change to assign the validation fields</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StateChanged</span><span style=\"color:#CB7676\"> +=</span><span style=\"color:#666666\"> (</span><span style=\"color:#80A665\">sender</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            StateHasChanged</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C99076\">        base</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">OnInitialized</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    protected</span><span style=\"color:#BD976A\"> override</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">bool</span><span style=\"color:#BD976A\"> disposing</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        base</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">disposing</span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    private</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> HandleValidSubmit</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // We use the bang operator (!) to tell the compiler we'll know this string field will not be null</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Facade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UpdateTodo</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Since we've changed quite a few things in this detail page, let's do a quick code breakdown:</p>\n<ul>\n<li>First, we've added an <code>EditForm</code> to handle validating the user's input when updating values similar to how we've setup\nour <code>CreateTodoForm.razor</code> component</li>\n<li>We've added a <code>CreateOrUpdateTodoValidationModel</code> validation model that will react to user input and display any\nvalidation errors with the help of the <code>&#x3C;DataAnnotationsValidator /></code> and <code>&#x3C;ValidationSummary /></code> built-in Blazor\ncomponents</li>\n<li>We've modified our <code>OnInitialized</code> lifecycle method to react to state changes so we can reassign the validation model\nfields from the current todo fields and trigger an additional <code>StateHasChanged()</code> event to tell Blazor to re-render\nthe markup to reflect these changes within the inputs of the form</li>\n<li>Since we're subscribing to additional state changes outside of the scope of Fluxor, we need make sure to manually\ndispose of our component to avoid memory leaks; again, if you're familiar with Angular, this is similar to destroying\nyour observable subscriptions when a component is disposed</li>\n<li>Upon a valid submit, we'll issue the <code>UpdateTodo</code> facade method that will dispatch the <code>UpdateTodoAction</code> and kickoff\nthe update workflow</li>\n</ul>\n<p>Awesome, now that our todo detail page has been updated, if we select a todo from the todos table, we should now be able\nto update that particular todo's values and see those changes reflected back in the table once we hit submit (and the\nAPI responds successfully). I'll leave it as an exercise for the reader to see what actions are dispatched in the Redux\nDev Tools console panel and inspect the actions, payloads, and diffs that are computed.</p>\n<h2>Deleting todos</h2>\n<p>With the light at the end of the tunnel now within sight, we just need to add one more workflow to delete todos.\nThankfully, most of the internal plumbing we've already done, so we'll only have to hookup the delete actions to the\ndelete button we've added to our detail page. Let's start by adding a <code>DeleteTodos</code> folder within our <code>Actions</code>\ndirectory, with three actions in <code>DeleteTodoAction.cs</code>, <code>DeleteTodoSuccessAction.cs</code>, <code>DeleteTodoFailureAction.cs</code>:</p>\n<h3>DeleteTodoAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>DeleteTodoSuccessAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoSuccessAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>DeleteTodoFailureAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Shared</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoFailureAction</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> FailureAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            :</span><span style=\"color:#C99076\"> base</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>From the above actions, we see that we're simply only transporting the todo ID in the kickoff and success action\npayloads, as we only need a reference to the ID to remove the todo from our list. While it <em>might</em> be tempting to reuse\nthe kickoff and success actions as they are effectively the same class, the overhead of adding actions is rather small\nand doesn't add much complexity. If our requirements change, maybe the business analysts want a message transmitted upon\na successful delete, we'll only be refactoring a single action sub-workflow (the success flow for the delete todo\nworkflow) with zero fear of unintentionally breaking the kickoff sub-workflow. With our actions in place, let's add our\nlast reducer in our <code>Reducers</code> folder with <code>DeleteTodoActionsReducer.cs</code>:</p>\n<h3>DeleteTodoActionsReducer.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">State</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reducers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoActionsReducer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceDeleteTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> DeleteTodoAction</span><span style=\"color:#80A665\"> _</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceDeleteTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> DeleteTodoSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Return the default state if no list of todos is found</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create a new list with all todo items excluding the todo with the deleted ID</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updatedTodos</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Where</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">t</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> t</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> updatedTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceDeleteTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> DeleteTodoFailureAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ErrorMessage</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Again, nothing special with our <code>ReduceDeleteTodoAction</code> and <code>ReduceDeleteTodoFailureAction</code>, as they're simply just\ncomputing action-based stated. With our <code>ReduceDeleteTodoSuccessAction</code>, we grab a reference to a list with the help of\nLINQ containing all todos excluding the todo who's ID matches the ID from the issued action. Using this newly created\nlist, we'll create a new <code>TodosState</code> using this list and notify our components. With our reducer in place, let's add a\nfew side effects to help with calling the API with <code>DeleteTodoEffect.cs</code> and <code>DeleteTodoSuccessEffect.cs</code>. In\nour <code>Effects</code> folder, let's add a <code>DeleteTodos</code> subfolder with the following classes:</p>\n<h3>DeleteTodoEffect.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> _apiService</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteTodoEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> apiService</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> apiService</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">DeleteTodoAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            try</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Deleting todo </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> deleteResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">todos/</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">deleteResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsSuccessStatusCode</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> HttpRequestException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Error deleting todo: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">deleteResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">ReasonPhrase</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Todo deleted successfully!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> DeleteTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            catch</span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">Exception</span><span style=\"color:#80A665\"> e</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogError</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Could not create todo, reason: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> DeleteTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Message</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>DeleteTodoSuccessEffect.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">AspNetCore</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Components</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoSuccessEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoSuccessAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoSuccessEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> NavigationManager</span><span style=\"color:#80A665\"> _navigation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteTodoSuccessEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoSuccessEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> NavigationManager</span><span style=\"color:#80A665\"> navigation</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _navigation</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> navigation</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">DeleteTodoSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Deleted todo successfully, navigating back to todo listing...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _navigation</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">NavigateTo</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> Task</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CompletedTask</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our <code>DeleteTodoEffect</code>, we setup an eerily similar workflow to our other issued actions, simply using our API\nservice to call the DELETE endpoint with the ID from the action's payload. On a successful response we'll issue the\nsuccess action that will trigger the <code>DeleteTodoSuccessEffect</code> to fire off, navigating the user back to the todos page\nwith a new version of the table without the todo we just deleted. Again, we use effects as a form of navigation control\nto selectively guide users around our application in a predicable manner. With our effects in place, let's add a facade\nmethod to help facilitate the dispatching of the delete actions from our components. Back in our <code>StateFacade</code> service:</p>\n<h3>StateFacade.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// Previously existing imported namespaces...</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> StateFacade</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Previous facade methods...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> DeleteTodo</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Issuing action to delete todo </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> DeleteTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">id</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our facade method in place, let's finally add the interaction to the delete button on our todo detail page with\njust a simple <code>@onclick</code> event handler within our <code>EditForm</code> markup block:</p>\n<h3>TodoDetail.razor</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">EditForm</span><span style=\"color:#80A665\"> Model</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> OnValidSubmit</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">HandleValidSubmit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">DataAnnotationsValidator</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">ValidationSummary</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center py-1</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> @TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputCheckbox</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-check</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">User</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputNumber</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.UserId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Title</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputText</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center pt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">submit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-secondary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Update</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-danger</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @onclick</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">() => Facade.DeleteTodo(TodosState.Value.CurrentTodo.Id)</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Delete</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">a</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-primary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Back</span><span style=\"color:#BD976A\"> to</span><span style=\"color:#BD976A\"> Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">EditForm</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>Notice we've only just added the <code>@onclick=\"() => Facade.DeleteTodo(TodosState.Value.CurrentTodo.Id)\"</code> event handler to\nthe delete button to fire off the initial delete action based on the ID of the currently displayed todo.</p>\n<p>Whew... that was quite a bit of code. Let's sit back and enjoy the fruits of our labor and test out the delete workflow.\nIf we navigate to the todos page to see the list of displayed todos, go ahead and select a todo. Once we're navigated to\nthe detail page, with the Redux Dev tools console open, go ahead and hit the delete button. What actions do we see\nissued in the console? Checkout the diffs and the action payloads for a little extra credit. Once we see\nthe <code>DeleteTodoSuccessAction</code> issued, we're navigated back to our todos page and see the table has been updated to\nreflect the removal of our todo! Pretty cool, huh?</p>\n<h3>Wrapping up</h3>\n<p>In the final stretch, we've seen one strategy for implementing CRUD workflows with the help of Fluxor in our Blazor\napplications. Bringing the redux experience to Blazor empowers us .NET developers to build bulletproof and predictable\nBlazor applications simplifying the complex problem of state management on the frontend, bringing a tried-and-true\ndesign patter in flux along with us. Feel free to play around with the code we've written so far, and maybe even improve\nthe workflows we already have set in place (see what happens when you reload the todo detail with a selected todo and\ntry to delete it). All the code we've written so far is available\non <a href=\"https://github.com/JoeyMckenzie/StateManagementWithFluxor\">GitHub</a> for those following along. Next up, we'll explore\nautomated integration testing on our todos application using Cypress to help further strengthen our codebase and provide\nyet another tool we can bring into the development process to assist with bulletproofing our workflows, along with a few\nconsiderations and potential refactors we could make with our current application architecture to make it a bit more\nrobust.</p>\n<p>Until next time, friends!</p>"
  },
  "_id": "2020/state-management-with-fluxor-blazor-part-2.md",
  "_raw": {
    "sourceFilePath": "2020/state-management-with-fluxor-blazor-part-2.md",
    "sourceFileName": "state-management-with-fluxor-blazor-part-2.md",
    "sourceFileDir": "2020",
    "contentType": "markdown",
    "flattenedPath": "2020/state-management-with-fluxor-blazor-part-2"
  },
  "type": "Post",
  "url": "/blog/2020/state-management-with-fluxor-blazor-part-2"
}