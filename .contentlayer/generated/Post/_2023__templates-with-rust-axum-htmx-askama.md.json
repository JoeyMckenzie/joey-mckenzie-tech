{
  "title": "Back to the server with Rust, Axum, and htmx",
  "description": "(Insert meme about React devs rediscovering the magic of PHP and ASP).",
  "pubDate": "2023-07-11T07:00:00.000Z",
  "category": "rust",
  "heroImage": "/images/rust-axum-htmx-templates-with-askama/htmx_meme.jpg",
  "draft": false,
  "keywords": [
    "rust",
    "templates",
    "askama"
  ],
  "body": {
    "raw": "\nI'm finally back from paternity leave and I had quite a blast messing around with a few Rust libraries during my time\noff in an attempt\nto build a website (web app?) going back to basics. I'm somewhat JS'd out as of late and was looking\nfor some way to integrate [htmx](https://htmx.org/) with templates in a similar vein to\nGo's [html templates](https://pkg.go.dev/html/template/).\nI was pleasantly surprised at how easily I was able to duct tape [axum's](https://github.com/tokio-rs/axum/) static file\nserving leveraging\n[askama](https://github.com/djc/askama/) as a templating engine of sorts.\n\nCoupled with htmx and [Tailwind](https://tailwindcss.com/), I was able to find a workflow for site building using the\ntools I wanted, with\nthe best part being _entirely_ JS-free (on the surface, at least). I should preface this as **not** an advertisement for\nJS's demise, but simply an alternative approach to the development of Rust-backed web apps.\n\n## The stack\n\nTo kick things off, let's run through the bits we'll utilize to build a relatively straightforward application that\nserves\nstatic HTML but with reactivity powered by htmx. Our sandbox will look something like:\n\n-   Rust (for obvious reasons)\n-   Axum for serving static assets and powering the backend API\n-   Askama for HTML templating - think shared layouts, scripts, CSS, etc.\n-   htmx for reactivity on the UI\n-   Tailwind, because my brain is too smooth now to do CSS myself\n\nRAAHT-stack? THARA? Not sure, gonna need to workshop the acronym a bit.\n\n## Getting started\n\nLet's start by spinning up a new Rust binary:\n\n```shell\n$ cargo new --bin with-axum-htmx-askama && cd with-axum-htmx-askama\n     Created binary (application) `with-axum-htmx-askama` package\n```\n\nNext, let's bring in the stuff we'll need to start building,\n\n```shell\n$ cargo add askama # our templating engine\n$ cargo add axum # our web/file server\n$ cargo add tokio --features full # async runtime\n\n# let's add tracing for sanity\n$ cargo add tracing\n$ cargo add tracing-subscriber --features env-filter\n\n# finally, let's add tower to utilize the file serving capabilities\n$ cargo add tower\n$ cargo add tower-http --features fs\n```\n\nOkay, got our dependencies installed, now let's scaffold out `main.rs` with a basic router and tracing setup:\n\n```rust\nuse tracing::info;\nuse tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};\n\n#[tokio::main]\nasync fn main() {\n    tracing_subscriber::registry()\n        .with(\n            tracing_subscriber::EnvFilter::try_from_default_env()\n                .unwrap_or_else(|_| \"with_axum_htmx_askama=debug\".into()),\n        )\n        .with(tracing_subscriber::fmt::layer())\n        .init();\n\n    info!(\"hello, web server!\");\n}\n```\n\nAnd running a quick sanity check:\n\n```shell\n$ cargo run\n# things compiling...\n2023-06-13T06:21:03.461354Z  INFO with_axum_htmx_askama: hello, web server!\n```\n\nSweet, we're up and running with logging! Before we jump into our router, we should probably figure out _what_ exactly\nwe'll be serving.\nFor our templates, we'll tap into askama to help axum route endpoints to serve static HTML. Askama defaults to looking\nfor templates\nin a `/templates` directory at the project root, let's add that now with a bit of markup:\n\n#### templates/hello.html\n\n```html\n<h1>Howdy!</h1>\n```\n\nAnd back in `main.rs`, let's add an axum route to serve this file:\n\n```rust\nuse anyhow::Context;\nuse askama::Template;\nuse axum::{\n    http::StatusCode,\n    response::{Html, IntoResponse, Response},\n    routing::get,\n    Router,\n};\nuse tracing::info;\nuse tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    tracing_subscriber::registry()\n        .with(\n            tracing_subscriber::EnvFilter::try_from_default_env()\n                .unwrap_or_else(|_| \"with_axum_htmx_askama=debug\".into()),\n        )\n        .with(tracing_subscriber::fmt::layer())\n        .init();\n\n    info!(\"initializing router...\");\n\n    let router = Router::new().route(\"/\", get(hello));\n    let port = 8000_u16;\n    let addr = std::net::SocketAddr::from(([0, 0, 0, 0], port));\n\n    info!(\"router initialized, now listening on port {}\", port);\n\n    axum::Server::bind(&addr)\n        .serve(router.into_make_service())\n        .await\n        .context(\"error while starting server\")?;\n\n    Ok(())\n}\n\nasync fn hello() -> impl IntoResponse {\n    let template = HelloTemplate {};\n    HtmlTemplate(template)\n}\n\n#[derive(Template)]\n#[template(path = \"hello.html\")]\nstruct HelloTemplate;\n\n/// A wrapper type that we'll use to encapsulate HTML parsed by askama into valid HTML for axum to serve.\nstruct HtmlTemplate<T>(T);\n\n/// Allows us to convert Askama HTML templates into valid HTML for axum to serve in the response.\nimpl<T> IntoResponse for HtmlTemplate<T>\nwhere\n    T: Template,\n{\n    fn into_response(self) -> Response {\n        // Attempt to render the template with askama\n        match self.0.render() {\n            // If we're able to successfully parse and aggregate the template, serve it\n            Ok(html) => Html(html).into_response(),\n            // If we're not, return an error or some bit of fallback HTML\n            Err(err) => (\n                StatusCode::INTERNAL_SERVER_ERROR,\n                format!(\"Failed to render template. Error: {}\", err),\n            )\n                .into_response(),\n        }\n    }\n}\n```\n\nOkay, so we fleshed out our router quite a bit and added a few types to help us serve\nthe HTML askama will stitch together for us (more on that in a bit).\n\nWe have a simple base route that serves the `hello.html` file we have in our `templates/` directory,\nthough askama is also able to pass render-able data to these HTML files in a template-like fashion.\nLuckily for us, askama provides the `#[template(path = \"path/to/html\")]` macro, assuming your HTML\nfiles are in the `templates/` directory. This is also configurable, but the defaults will do for now. Running the server\nlocally:\n\n```shell\n$ cargo run\n    # stuff compiling...\n2023-06-13T06:47:23.018937Z  INFO with_axum_htmx_askama: initializing router...\n2023-06-13T06:47:23.019361Z  INFO with_axum_htmx_askama: router initialized, now listening on port 8000\n```\n\nWe have some basic logs that reassure successful startup, and if we navigate to `localhost:8000` in our favorite\nbrowser:\n\n![landing page](/images/rust-axum-htmx-templates-with-askama/landing_page.png)\n\nWe've got ourselves a landing page!\n\n## Integrating Tailwind\n\nNow, this isn't the most _exciting_ landing page, so let's spruce this up a bit to make it look like it's not from 1996.\nI'm gonna be using [Tailwind](https://tailwindcss.com/) mostly because I'm a CSS sellout and love really, really, really\nlong\nclass names on my elements.\n\nTailwind helpfully provides a plethora of integration guides for any number of tech stacks. Unfortunately, Rust-based\nstatic\nfile serving with axum isn't on the list. The good news, however, is that we can rely on the most basic of Tailwind\nstrategies\nto bring in some sweet styles.\n\nIf you're not familiar with Tailwind, take a look at the docs and the philosophy behind its design system. There are\nsome pretty\nneat optimizations we'll tap into, and one of the reasons I love Tailwind is for\nthe [utility tree-shaking/minification](https://tailwindcss.com/docs/optimizing-for-production) of CSS\nthat it'll do to ensure our bundled styles are as small as possible. No one needs 70 MB of CSS shipped to their\nbrowser (if you're reading this, Rob, you know what you did).\n\nWe're going to rely on a few npm packages, so we'll need to spin up a simple `package.json` file to help us bring in\nTailwind and eventually Prettier to make things look nice on our templates. Using pnpm:\n\n```shell\n$ pnpm init\nWrote to ~/with-axum-htmx-askama/package.json\n\n{\n  \"name\": \"with-axum-htmx-askama\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\nWith our package manifest in place, let's add a few things to it. I'm using pnpm, though npm and yarn will suffice:\n\n```shell\npnpm add -D tailwindcss prettier prettier-plugin-tailwindcss\n```\n\nAnd let's clean up `package.json` to remove the things we won't need:\n\n```json\n{\n    \"name\": \"with-axum-htmx-askama\",\n    \"version\": \"1.0.0\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n        \"prettier\": \"^2.8.8\",\n        \"prettier-plugin-tailwindcss\": \"^0.3.0\",\n        \"tailwindcss\": \"^3.3.2\"\n    }\n}\n```\n\nI'm using Prettier to keep things nicely formatted, so I'll add a quick script to keep our templates tidy:\n\n```json\n{\n    \"name\": \"with-axum-htmx-askama\",\n    \"version\": \"1.0.0\",\n    \"license\": \"ISC\",\n    \"scripts\": {\n        \"format\": \"prettier --write --ignore-unknown .\"\n    },\n    \"devDependencies\": {\n        \"prettier\": \"^2.8.8\",\n        \"prettier-plugin-tailwindcss\": \"^0.3.0\",\n        \"tailwindcss\": \"^3.3.2\"\n    }\n}\n```\n\nNow we can format from the terminal to our heart's content:\n\n```shell\n$ pnpm format\n\npackage.json 340ms\npnpm-lock.yaml 159ms\ntemplates/hello.html 371ms\n```\n\nLet's spice up our template now. Back in `hello.html`, let's flesh this page out a bit more\nto be more of a fully functional HTML file we'd expect to serve to the browser, including assets:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <link href=\"/assets/main.css\" rel=\"stylesheet\" />\n        <link href=\"https://rsms.me/inter/inter.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        <h1>Howdy!</h1>\n    </body>\n</html>\n```\n\nI've added two `link`s to CSS files, one for the Inter font... because why not.\n\n![inter meme](/images/rust-axum-htmx-templates-with-askama/inter_meme.jpg)\n\nThe other `link` is to a CSS file that doesn't exist (yet). This CSS file will contain the compiled output Tailwind's\nCLI spits out for us after scanning\nthe HTML files in our `/templates` directory and determining which utility\nclasses are not needed helping us reduce the bundled CSS file size that will ship to our users' browsers. Pretty neat,\nhuh?\n\nNow as I mentioned, this will be a file that is _generated_ and not necessarily included by default. First, we need to\nadd a CSS file Tailwind\nwill use to generate the utilities our HTML templates will use. Let's create a `styles/tailwind.css` file:\n\n#### styles/tailwind.css\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nWe'll use the CLI to read this file as input, scan which utilities are\nbeing used by our HTML, and output the optimized stylesheet to be served. Let's run our first pass:\n\n```shell\n$ pnpm dlx tailwindcss -i styles/tailwind.css -o assets/main.css --watch\n\nRebuilding...\n\nwarn - No utility classes were detected in your source files. If this is unexpected, double-check the `content` option in your Tailwind CSS configuration.\nwarn - https://tailwindcss.com/docs/content-configuration\n\nDone in 74ms.\n```\n\nNice! Though not very exciting, as Tailwind didn't detect any utility classes to purge as we don't have a configuration\nfile for it to read pointing to the markup. Let's add one:\n\n```shell\n$ pnpm dlx tailwindcss init\n\nCreated Tailwind CSS config file: tailwind.config.js\n```\n\nAnd let's adjust the `tailwind.config.js` file that was generated for us:\n\n```js\nconst { fontFamily } = require('tailwindcss/defaultTheme');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    content: ['./templates/*.html'],\n    theme: {\n        extend: {\n            fontFamily: {\n                sans: ['Inter var', ...fontFamily.sans],\n            },\n        },\n    },\n};\n```\n\nI'm also going to rename the extension to `.cjs` to make eslint happy.\nIf you're unfamiliar with Tailwind, essentially this is just a configuration file telling Tailwind where to look for\nutility classes\nfor treeshaking ones we're not using. We're also overriding the default sans font with the Inter font so we can look\nlike a legit Series B startup\non our landing page.\n\nNow if we run the Tailwind CLI again, we'll get the same message. If we spin up our server,\nnothing has changed either. One last step: we need to tell axum to serve our `assets/` directory so our compiled\nTailwind CSS file is available for our template to use.\n\nBack in `main.rs`, let's a `tower` service route to serve everything under the `assets/` folder:\n\n```rust\nuse anyhow::Context;\nuse askama::Template;\nuse axum::{\n    http::StatusCode,\n    response::{Html, IntoResponse, Response},\n    routing::get,\n    Router,\n};\nuse tower_http::services::ServeDir;\nuse tracing::info;\nuse tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    // Setup stuff...\n\n    // We could also read our port in from the environment as well\n    let assets_path = std::env::current_dir().unwrap();\n    let port = 8000_u16;\n    let addr = std::net::SocketAddr::from(([0, 0, 0, 0], port));\n    let router = Router::new().route(\"/\", get(hello)).nest_service(\n        \"/assets\",\n        ServeDir::new(format!(\"{}/assets\", assets_path.to_str().unwrap())),\n    );\n\n    // Other stuff...\n}\n\n// Other stuff...\n```\n\nThe key here is the `assets_path` and the chain call to `.nest_service()`, telling\naxum to serve an `/assets` route with all the files underneath that directory locally. Now if we start our server, we\nshould see our `Howdy!` text looks a bit different:\n\n![with Inter font](/images/rust-axum-htmx-templates-with-askama/with_inter.png)\n\nWe've got Inter font! Let's spice this up even more with some colored text. In our `hello.html` template, let's add a\ntext color class:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <link href=\"/assets/main.css\" rel=\"stylesheet\" />\n        <link href=\"https://rsms.me/inter/inter.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        <h1 class=\"text-green-500\">Howdy!</h1>\n    </body>\n</html>\n```\n\nI've been running my processes in the back, both the Tailwind CLI and our\naxum server with the help of [cargo-watch](https://crates.io/crates/cargo-watch), so any changes I make to our Rust code\nor HTML templates will automatically be detected. Refreshing the page, we should see green text. Sweet!\n\n# Extending templates\n\nOur current template generation is missing one key piece in template\ninheritance. If we were to add additional axum routes that\nserved HTML, we would need to include `<head>` tags for each file. Not a great developer experience, as we want to have\ntemplates extend a base markup file that includes all of our common head metadata like links, tags, etc.\n\nLuckily, askama [has us covered](https://djc.github.io/askama/template_syntax.html#template-inheritance) with what we\nneed. Using template inheritance, we can define base template layouts that our individual route templates will extend.\nTo make\nlife easier so we can avoid having to write the same boilerplate HTML in each template we'll serve, let's create\na `base.html` file:\n\n### templates/base.html\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <link href=\"/assets/main.css\" rel=\"stylesheet\" />\n        <link href=\"https://rsms.me/inter/inter.css\" rel=\"stylesheet\" />\n        <!-- Allow any inheriting page to set it's own title -->\n        <title>{% block title %}{{ title }}{% endblock %}</title>\n\n        <!-- Allow any inheriting page to extend head with additional assets -->\n        {% block head %}{% endblock %}\n    </head>\n    <body>\n        <div id=\"content\">\n            <!-- Inheriting pages will have their content rendered here, similar to app root in React, Angular, etc. -->\n            {% block content %}{% endblock %}\n        </div>\n    </body>\n</html>\n```\n\nWith our base template in place, let's clean up our `hello.html` file a bit:\n\n### templates/hello.html\n\n```html\n<!-- prettier-ignore -->\n{% extends \"base.html\" %}\n\n{% block title %}Hello!{% endblock %}\n\n{% block content %}\n<h1 class=\"text-green-500\">Howdy!</h1>\n{% endblock %}\n```\n\nNote the ignore statement for prettier to skip formatting this file for now - default prettier doesn't do a great job\nat formatting templated HTML files but I'm sure there's a plugin out there to include to fix this that I'm simply\ntoo lazy to search for.\n\nSince we've kept our server running and have Tailwind compiling output assets in watch mode for us, we should be able\nto navigate back to `localhost:8000` and notice there's no change to our page, still displaying the green \"Howdy!\" text.\nThis is exactly what we expect, though we now have base templates that each of our pages can include!\n\nTo prove that we've now got a nice extendable page model, let's add another page with a link on our home page that\nroutes\nto this new page that I'll cleverly name `/another-page` with its even more cleverly associated\ntemplate `another-page.html`:\n\n### templates/another-page.html\n\n```html\n<!-- prettier-ignore -->\n{% extends \"base.html\" %}\n\n{% block title %}Another page!{% endblock %}\n\n{% block content %}\n<h1 class=\"font-bold text-indigo-500\">Another page</h1>\n{% endblock %}\n```\n\nLet's add an axum route to serve this template with users hit the `/another-page` frontend route:\n\n### main.rs\n\n```rust\n// Imports and such...\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    // Other stuff...\n\n    let router = Router::new()\n        .route(\"/\", get(hello))\n        .route(\"/another-page\", get(another_page))\n        .nest_service(\n            \"/assets\",\n            ServeDir::new(format!(\"{}/assets\", assets_path.to_str().unwrap())),\n        );\n\n    // More stuff...\n}\n\n// Other templates...\n\nasync fn another_page() -> impl IntoResponse {\n    let template = AnotherPageTemplate {};\n    HtmlTemplate(template)\n}\n\n#[derive(Template)]\n#[template(path = \"another-page.html\")]\nstruct AnotherPageTemplate;\n```\n\nIf we manually route to this page, we should it in the browser:\n\n![another page](/images/rust-axum-htmx-templates-with-askama/another_page.png)\n\nAs another sanity check, take a look at the CSS Tailwind is outputting in our `assets/` directory, namely taking a look\nat the tail end (no pun intended) of the file:\n\n### assets/main.css\n\n```css\n/ / More classes... .font-bold {\n    font-weight: 700;\n}\n\n.text-green-500 {\n    --tw-text-opacity: 1;\n    color: rgb(34 197 94 / var(--tw-text-opacity));\n}\n\n.text-indigo-500 {\n    --tw-text-opacity: 1;\n    color: rgb(99 102 241 / var(--tw-text-opacity));\n}\n```\n\nTailwind is _only_ including the utilities it sees in our template files, namely the colors we've included and the bold\nfont we've slapped on the text of our `/another-page` route. Pretty neat, huh?\n\nLet's spice our templates up with some routes. In our `hello.html` let's add a link:\n\n```html\n<!-- prettier-ignore -->\n{% extends \"base.html\" %}\n\n{% block title %}Hello!{% endblock %}\n\n{% block content %}\n<div class=\"inline-flex flex-row space-x-2\">\n    <h1 class=\"text-green-500\">Howdy!</h1>\n    <a\n        href=\"/another-page\"\n        class=\"text-indigo-500 underline hover:text-indigo-300\"\n        >Another page</a\n    >\n</div>\n{% endblock %}\n```\n\nNothing special going on here, just spicing up the look of our link and adding some padding between the two elements.\nRefreshing the home page, we should see a new link pop up:\n\n![another page](/images/rust-axum-htmx-templates-with-askama/to_another_page.png)\n\nand clicking the link, we route to our newly added `/another-page` page! More importantly, take note of how we're only\nincluding\nthe relevant markup for each page. The power of templates compels you!\n\n## Bringing in the functionality\n\nOkay, so we have a web server serving static HTML, good-looking assets with the help of Tailwind, and an extendable page\nmodel... let's fit the last piece of the web dev DX puzzle by bringing interactive functionality to our pages with the\nhelp of htmx. With htmx, we can do all the JavaScript-y things we would normally see as first-class functionality in a\nmodern frontend framework, but in the comfort of our HTML. No need to submit form data to our backend and reload the\npage\nbetween transitions, htmx will do the work for us!\n\nSince htmx brings modern UI goodness to standard hypertext, we don't need to worry about writing form handlers, fetching\ndata via AJAX, etc. While htmx brings a lot to the plate, let's start small and simply grab some data from an API and\nreplace\nsome elements on the screen with it.\n\nEven better, htmx is small in size and easily pluggable into our current setup. Let's bring it in as a `<script>` tag\nto our base layout so all pages have access to it:\n\n### templates/base.html\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <link href=\"/assets/main.css\" rel=\"stylesheet\" />\n        <link href=\"https://rsms.me/inter/inter.css\" rel=\"stylesheet\" />\n        <!-- Allow any inheriting page to set it's own title -->\n        <title>{% block title %}{{ title }}{% endblock %}</title>\n\n        <!-- htmx from the unpkg CDN - your mileage may vary -->\n        <script src=\"https://unpkg.com/htmx.org@1.9.2\"></script>\n\n        <!-- Allow any inheriting page to extend head with additional assets -->\n        {% block head %}{% endblock %}\n    </head>\n    <body>\n        <div id=\"content\">\n            <!-- Inheriting pages will have their content rendered here, similar to app root in React, Angular, etc. -->\n            {% block content %}{% endblock %}\n        </div>\n    </body>\n</html>\n```\n\nWith htmx included, we'll add a button on our homepage that will ping one of our server endpoints for some data. We\ndon't have purely backend endpoints yet - all of our axum routes serve HTML. Let's mount\na subrouter that will include endpoints that return some JSON data for our UI to consume.\n\nTo note, we'll load htmx from unpkg, a handy npm package CDN. Keep in mind you'll probably want to fetch this packages\nduring production deployments to avoid unpkg outages (which happens more than I'm sure the maintainers care to admit).\n\nIf we refresh the landing page, again assuming were still using cargo-watch to run the server and crack open the network\ntab, we should the htmx JS loaded by the browser. Before we get to our markup, let's add an axum route that returns some\ntext for us to display:\n\n#### main.rs\n\n```rust\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    // Other stuff...\n    let api_router = Router::new().route(\"/hello\", get(hello_from_the_server));\n\n    let router = Router::new()\n        .nest(\"/api\", api_router)\n        .route(\"/\", get(hello))\n        .route(\"/another-page\", get(another_page))\n        .nest_service(\n            \"/assets\",\n            ServeDir::new(format!(\"{}/assets\", assets_path.to_str().unwrap())),\n        );\n\n    // More stuff...\n}\n\n// Other handlers...\n\nasync fn hello_from_the_server() -> &'static str {\n    \"Hello!\"\n}\n```\n\nWe've effectively added a subrouter underneath the parent `/api` route. The example here is pretty trivial, and we'll\nspice things up here shortly. With our server now able to serve data at specific\nendpoints, let's do a quick sanity check. In another terminal:\n\n```shell\n$ curl -l https://localhost:8000/api/hello\nHello!%\n```\n\nWe're serving data, now let's wire this up to a button click. On our homepage, let's add a spruced up Tailwind button:\n\n#### templates/hello.html\n\n```html\n<!-- prettier-ignore -->\n{% extends \"base.html\" %}\n\n{% block title %}Hello!{% endblock %}\n\n{% block content %}\n<div class=\"inline-flex flex-row space-x-2 px-8 py-4\">\n    <h1 class=\"text-green-500\">Howdy!</h1>\n    <a\n        href=\"/another-page\"\n        class=\"text-indigo-500 underline hover:text-indigo-300\"\n        >Another page</a\n    >\n    <button\n        type=\"button\"\n        hx-get=\"/api/hello\"\n        hx-swap=\"innerHtml\"\n        class=\"rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n    >\n        Say hello\n    </button>\n</div>\n{% endblock %}\n```\n\nI've added a button with the `hx-get` htmx directive to signal that when this button is clicked, send a GET\nto `/api/hello` at the current running domain and `hx-swap` the inner HTML (the button text) with whatever comes back. A\nquick page refresh and we should see our updated home route:\n\n![with button](/images/rust-axum-htmx-templates-with-askama/with_button.png)\n\nI'm a bit claustrophobic, so I added some padding to give our UI elements some room to breathe. With the network tab\nopen, if we click the button, we see some magic happen - a GET is fired and our button text is updated with the `Hello!`\ntext returned from the server. Sweet!\n\nOkay... static text returned from the server is fascinating and all, but let's make something a bit more functional.\nWith htmx, we can define\nactions that return HTML and dynamically swap and replace elements on the UI with the retrieved markup (flashback to my\nJEE days). Let's spit\nsome row data back to the homepage from the server using an endpoint that returns another template. Let's add a cool\nTailwind'y form so revolutionary in terms of data-driven APIs, it may just get me one of those mythical FAANG jobs\neveryone keeps talking about.\n\nTailwind has some pretty neat utilities, and I'm gonna go ahead and bring in the forms package to help create some nice\nlooking inputs:\n\n```shell\n$ pnpm add @tailwindcss/forms\n```\n\nOnce that's installed, let's update our `tailwind.config.cjs` file:\n\n```js\nconst { fontFamily } = require('tailwindcss/defaultTheme');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    content: ['./templates/*.html'],\n    theme: {\n        extend: {\n            fontFamily: {\n                sans: ['Inter var', ...fontFamily.sans],\n            },\n        },\n    },\n    plugins: [require('@tailwindcss/forms')],\n};\n```\n\nNow that our utility has been added, let's create a `todo-form.html` file in our `templates/` directory with a good\nlooking form input:\n\n```html\n<form class=\"max-w-md\">\n    <label for=\"todo\" class=\"block text-sm font-medium leading-6 text-gray-900\"\n        >Todo</label\n    >\n    <div class=\"mt-2 inline-flex flex-row space-x-2\">\n        <input\n            type=\"text\"\n            name=\"todo\"\n            id=\"todo\"\n            class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n            placeholder=\"Replace frontend with htmx\"\n        />\n        <button\n            type=\"button\"\n            class=\"rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n        >\n            Add\n        </button>\n    </div>\n</form>\n```\n\nNow we're not extending the base layout since we'll take the lazy way out and simply add it to our home page. Again,\naskama\nprovides a jinja-like `include` tag we can throw on our `hello.html` template:\n\n```html\n<!-- prettier-ignore -->\n{% extends \"base.html\" %}\n\n{% block title %}Hello!{% endblock %}\n\n{% block content %}\n<div class=\"inline-flex flex-row space-x-2\">\n    <h1 class=\"text-green-500\">Howdy!</h1>\n    <a\n        href=\"/another-page\"\n        class=\"text-indigo-500 underline hover:text-indigo-300\"\n        >Another page</a\n    >\n    <button\n        type=\"button\"\n        hx-get=\"/api/hello\"\n        hx-swap=\"innerHtml\"\n        class=\"rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n    >\n        Say hello\n    </button>\n</div>\n\n{% include \"todo-form.html\" %} {% endblock %}\n```\n\nA quick page refresh and our home route now includes a single input form and button:\n\n![updated page](/images/rust-axum-htmx-templates-with-askama/updated_home.png)\n\nAs we add todos, we'll want them to appear beneath the input box and keep appending to it as we add more. We're not\nexactly\nbuilding the next Facebook, so we can keep our implementation simple. We need some way to keep track of todos, and we'll\nwant to manage that with our axum server so we can maintain a list of todos that will act as our persistence mechanism.\nLet's\nadd some state to hold the todo information:\n\n### main.rs\n\n```rust\nstruct AppState {\n    todos: Mutex<Vec<String>>,\n}\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    // Other stuff...\n\n    let app_state = Arc::new(AppState {\n        todos: Mutex::new(vec![]),\n    });\n\n    // We could also read our port in from the environment as well\n    let assets_path = std::env::current_dir().unwrap();\n    let port = 8000_u16;\n    let addr = std::net::SocketAddr::from(([0, 0, 0, 0], port));\n\n    let api_router = Router::new()\n        .route(\"/hello\", get(hello_from_the_server))\n        .route(\"/todos\", post(add_todo))\n        .with_state(app_state);\n\n    // Other stuff...\n}\n```\n\nWe add `AppState` that holds a `Vec` of todos as strings locked behind a `Mutex`. Now, this is not exactly a PSA for\nproper\nstate management with axum - we're cutting a lot of corners here to keep things streamlined. Because `AppState` can be\nshared\nacross threads thanks to being wrapped with `Arc`, we'll need to do our due diligence of locking the todo list before\nattempting\nto add more todays. With our state added as an extension to our API router, let's add the `add_todo` route to do just\nthat:\n\n```rust\n#[derive(Template)]\n#[template(path = \"todo-list.html\")]\nstruct TodoList {\n    todos: Vec<String>,\n}\n\nasync fn add_todo(\n    State(state): State<Arc<AppState>>,\n    Form(todo): Form<TodoRequest>,\n) -> impl IntoResponse {\n    let mut lock = state.todos.lock().unwrap();\n    lock.push(todo.todo);\n\n    let template = TodoList {\n        todos: lock.clone(),\n    };\n\n    HtmlTemplate(template)\n}\n```\n\nI've also added a `todo-list.html` template that will use the todo data we've acquired behind our lock. Let's add that\nto our `templates/` directory:\n\n```html\n{% for todo in todos %}\n<p class=\"text-lg\">{{ todo }}</p>\n{% endfor %}\n```\n\nUsing askama's templating, we pass in the todos list and iterate over them generating a `<p>` tag for each todo. We'll\nneed\nto paint the HTML returned by our `add_todo` route, so let's append it to the end of our `todo-form.html` markup:\n\n```html\n<form\n    hx-post=\"/api/todos\"\n    hx-target=\"#todos\"\n    hx-swap=\"innerHTML\"\n    class=\"max-w-md\"\n>\n    <label for=\"todo\" class=\"block text-sm font-medium leading-6 text-gray-900\"\n        >Todo</label\n    >\n    <div class=\"mt-2 inline-flex flex-row space-x-2\">\n        <input\n            type=\"text\"\n            name=\"todo\"\n            id=\"todo\"\n            class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n            placeholder=\"Replace frontend with htmx\"\n        />\n        <button\n            type=\"submit\"\n            class=\"rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n        >\n            Add\n        </button>\n    </div>\n</form>\n<div id=\"todos\" />\n```\n\nI've sprinkled in some htmx directives with `hx-post`, `hx-target`, and `hx-swap` as well:\n\n-   `hx-post` tells our form submission _where_ to send the form data as a POST request too\n-   `hx-target` is the element we want to mutate after we get a response\n-   `hx-swap=\"innerHTML\"` means we'll drop the hypertext returned from our `add_todo` handler as a child element of\n    our `<div id=\"todos\" />` tag\n\nWith our Tailwind and axum server processes still running in watch mode, we should be good to start trying things out\nnow.\nWith our homepage refreshed, we can start [adding todos](/images/rust-axum-htmx-templates-with-askama/full_demo.mp4).\nI've\nexpanded\nthe network while we create a few todos to show off htmx making form requests for us and returning the askama templated\nhypertext back to us.\nBadda bing, badda boom, and we've got some todos!\n\n## Wrapping up\n\nWeb dev (for me, at least) just got a lot more fun thanks to Rust, askama, axum and htmx. While our sample here is a bit\nlight on functionality, I've written a more fleshed out version available\non [GitHub](https://github.com/JoeyMckenzie/axum-htmx-templates/tree/main) that includes a more opinionated approach to\norganizing templates, page routes, and ready to host on a provider like [Fly](https://fly.io) with a ready-to-go\nDockerfile.\n\nUntil next time, friends!\n",
    "html": "<p>I'm finally back from paternity leave and I had quite a blast messing around with a few Rust libraries during my time\noff in an attempt\nto build a website (web app?) going back to basics. I'm somewhat JS'd out as of late and was looking\nfor some way to integrate <a href=\"https://htmx.org/\">htmx</a> with templates in a similar vein to\nGo's <a href=\"https://pkg.go.dev/html/template/\">html templates</a>.\nI was pleasantly surprised at how easily I was able to duct tape <a href=\"https://github.com/tokio-rs/axum/\">axum's</a> static file\nserving leveraging\n<a href=\"https://github.com/djc/askama/\">askama</a> as a templating engine of sorts.</p>\n<p>Coupled with htmx and <a href=\"https://tailwindcss.com/\">Tailwind</a>, I was able to find a workflow for site building using the\ntools I wanted, with\nthe best part being <em>entirely</em> JS-free (on the surface, at least). I should preface this as <strong>not</strong> an advertisement for\nJS's demise, but simply an alternative approach to the development of Rust-backed web apps.</p>\n<h2>The stack</h2>\n<p>To kick things off, let's run through the bits we'll utilize to build a relatively straightforward application that\nserves\nstatic HTML but with reactivity powered by htmx. Our sandbox will look something like:</p>\n<ul>\n<li>Rust (for obvious reasons)</li>\n<li>Axum for serving static assets and powering the backend API</li>\n<li>Askama for HTML templating - think shared layouts, scripts, CSS, etc.</li>\n<li>htmx for reactivity on the UI</li>\n<li>Tailwind, because my brain is too smooth now to do CSS myself</li>\n</ul>\n<p>RAAHT-stack? THARA? Not sure, gonna need to workshop the acronym a bit.</p>\n<h2>Getting started</h2>\n<p>Let's start by spinning up a new Rust binary:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> new</span><span style=\"color:#C99076\"> --bin</span><span style=\"color:#C98A7D\"> with-axum-htmx-askama</span><span style=\"color:#666666\"> &#x26;&#x26;</span><span style=\"color:#B8A965\"> cd</span><span style=\"color:#C98A7D\"> with-axum-htmx-askama</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">     Created</span><span style=\"color:#C98A7D\"> binary</span><span style=\"color:#DBD7CAEE\"> (application) </span><span style=\"color:#666666\">`</span><span style=\"color:#80A665\">with-axum-htmx-askama</span><span style=\"color:#666666\">`</span><span style=\"color:#80A665\"> package</span></span></code></pre></figure>\n<p>Next, let's bring in the stuff we'll need to start building,</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> askama</span><span style=\"color:#758575DD\"> # our templating engine</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> axum</span><span style=\"color:#758575DD\"> # our web/file server</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tokio</span><span style=\"color:#C99076\"> --features</span><span style=\"color:#C98A7D\"> full</span><span style=\"color:#758575DD\"> # async runtime</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># let's add tracing for sanity</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tracing</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tracing-subscriber</span><span style=\"color:#C99076\"> --features</span><span style=\"color:#C98A7D\"> env-filter</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># finally, let's add tower to utilize the file serving capabilities</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tower</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tower-http</span><span style=\"color:#C99076\"> --features</span><span style=\"color:#C98A7D\"> fs</span></span></code></pre></figure>\n<p>Okay, got our dependencies installed, now let's scaffold out <code>main.rs</code> with a basic router and tracing setup:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">layer</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberExt</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> util</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberInitExt</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">registry</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">EnvFilter</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">try_from_default_env</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">unwrap_or_else</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">_</span><span style=\"color:#CB7676\">|</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">with_axum_htmx_askama=debug</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">layer</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">init</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">hello, web server!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>And running a quick sanity check:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># things compiling...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">2023-06-13T06:21:03.461354Z</span><span style=\"color:#C98A7D\">  INFO</span><span style=\"color:#C98A7D\"> with_axum_htmx_askama:</span><span style=\"color:#C98A7D\"> hello,</span><span style=\"color:#C98A7D\"> web</span><span style=\"color:#C98A7D\"> server!</span></span></code></pre></figure>\n<p>Sweet, we're up and running with logging! Before we jump into our router, we should probably figure out <em>what</em> exactly\nwe'll be serving.\nFor our templates, we'll tap into askama to help axum route endpoints to serve static HTML. Askama defaults to looking\nfor templates\nin a <code>/templates</code> directory at the project root, let's add that now with a bit of markup:</p>\n<h4>templates/hello.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>And back in <code>main.rs</code>, let's add an axum route to serve this file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Context</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> askama</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Template</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    http</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">StatusCode</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#5DA994\">Html</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#666666\">},</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    routing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Router</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">layer</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberExt</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> util</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberInitExt</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;()></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">registry</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">EnvFilter</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">try_from_default_env</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">unwrap_or_else</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">_</span><span style=\"color:#CB7676\">|</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">with_axum_htmx_askama=debug</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">layer</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">init</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">initializing router...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 8000_</span><span style=\"color:#5DA994\">u16</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> addr</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">net</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SocketAddr</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from</span><span style=\"color:#666666\">(([</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">],</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">router initialized, now listening on port </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Server</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">bind</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">addr</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">serve</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_make_service</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">context</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">error while starting server</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> hello</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#4D9375\"> impl</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> template</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> HelloTemplate</span><span style=\"color:#666666\"> {};</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    HtmlTemplate</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">template</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Template</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">template</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">path </span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">hello.html</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> HelloTemplate</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// A wrapper type that we'll use to encapsulate HTML parsed by askama into valid HTML for axum to serve.</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> HtmlTemplate</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">>(</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// Allows us to convert Askama HTML templates into valid HTML for axum to serve in the response.</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">></span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> HtmlTemplate</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">where</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    T</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Template</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> into_response</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Attempt to render the template with askama</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        match</span><span style=\"color:#C99076\"> self</span><span style=\"color:#CB7676\">.</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">render</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If we're able to successfully parse and aggregate the template, serve it</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">html</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#80A665\"> Html</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">html</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_response</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If we're not, return an error or some bit of fallback HTML</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            Err</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">err</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">                StatusCode</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">INTERNAL_SERVER_ERROR</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Failed to render template. Error: </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> err</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">into_response</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Okay, so we fleshed out our router quite a bit and added a few types to help us serve\nthe HTML askama will stitch together for us (more on that in a bit).</p>\n<p>We have a simple base route that serves the <code>hello.html</code> file we have in our <code>templates/</code> directory,\nthough askama is also able to pass render-able data to these HTML files in a template-like fashion.\nLuckily for us, askama provides the <code>#[template(path = \"path/to/html\")]</code> macro, assuming your HTML\nfiles are in the <code>templates/</code> directory. This is also configurable, but the defaults will do for now. Running the server\nlocally:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    # stuff compiling...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">2023-06-13T06:47:23.018937Z</span><span style=\"color:#C98A7D\">  INFO</span><span style=\"color:#C98A7D\"> with_axum_htmx_askama:</span><span style=\"color:#C98A7D\"> initializing</span><span style=\"color:#C98A7D\"> router...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">2023-06-13T06:47:23.019361Z</span><span style=\"color:#C98A7D\">  INFO</span><span style=\"color:#C98A7D\"> with_axum_htmx_askama:</span><span style=\"color:#C98A7D\"> router</span><span style=\"color:#C98A7D\"> initialized,</span><span style=\"color:#C98A7D\"> now</span><span style=\"color:#C98A7D\"> listening</span><span style=\"color:#C98A7D\"> on</span><span style=\"color:#C98A7D\"> port</span><span style=\"color:#4C9A91\"> 8000</span></span></code></pre></figure>\n<p>We have some basic logs that reassure successful startup, and if we navigate to <code>localhost:8000</code> in our favorite\nbrowser:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/landing_page.png\" alt=\"landing page\"></p>\n<p>We've got ourselves a landing page!</p>\n<h2>Integrating Tailwind</h2>\n<p>Now, this isn't the most <em>exciting</em> landing page, so let's spruce this up a bit to make it look like it's not from 1996.\nI'm gonna be using <a href=\"https://tailwindcss.com/\">Tailwind</a> mostly because I'm a CSS sellout and love really, really, really\nlong\nclass names on my elements.</p>\n<p>Tailwind helpfully provides a plethora of integration guides for any number of tech stacks. Unfortunately, Rust-based\nstatic\nfile serving with axum isn't on the list. The good news, however, is that we can rely on the most basic of Tailwind\nstrategies\nto bring in some sweet styles.</p>\n<p>If you're not familiar with Tailwind, take a look at the docs and the philosophy behind its design system. There are\nsome pretty\nneat optimizations we'll tap into, and one of the reasons I love Tailwind is for\nthe <a href=\"https://tailwindcss.com/docs/optimizing-for-production\">utility tree-shaking/minification</a> of CSS\nthat it'll do to ensure our bundled styles are as small as possible. No one needs 70 MB of CSS shipped to their\nbrowser (if you're reading this, Rob, you know what you did).</p>\n<p>We're going to rely on a few npm packages, so we'll need to spin up a simple <code>package.json</code> file to help us bring in\nTailwind and eventually Prettier to make things look nice on our templates. Using pnpm:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> init</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Wrote</span><span style=\"color:#C98A7D\"> to</span><span style=\"color:#C98A7D\"> ~/with-axum-htmx-askama/package.json</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"name\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">with-axum-htmx-askama</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"version\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">1.0.0</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"description\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"main\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">index.js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"scripts\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \"test\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">echo </span><span style=\"color:#C99076\">\\\"</span><span style=\"color:#C98A7D\">Error: no test specified</span><span style=\"color:#C99076\">\\\"</span><span style=\"color:#C98A7D\"> &#x26;&#x26; exit 1</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">  }</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"keywords\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#DBD7CAEE\"> [],</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"author\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"license\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">ISC</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>With our package manifest in place, let's add a few things to it. I'm using pnpm, though npm and yarn will suffice:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">pnpm</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C99076\"> -D</span><span style=\"color:#C98A7D\"> tailwindcss</span><span style=\"color:#C98A7D\"> prettier</span><span style=\"color:#C98A7D\"> prettier-plugin-tailwindcss</span></span></code></pre></figure>\n<p>And let's clean up <code>package.json</code> to remove the things we won't need:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">name</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">with-axum-htmx-askama</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">version</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">1.0.0</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">license</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">ISC</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">devDependencies</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">prettier</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^2.8.8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">prettier-plugin-tailwindcss</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^0.3.0</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">tailwindcss</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^3.3.2</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I'm using Prettier to keep things nicely formatted, so I'll add a quick script to keep our templates tidy:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">name</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">with-axum-htmx-askama</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">version</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">1.0.0</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">license</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">ISC</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">scripts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">format</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">prettier --write --ignore-unknown .</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">devDependencies</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">prettier</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^2.8.8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">prettier-plugin-tailwindcss</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^0.3.0</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">tailwindcss</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^3.3.2</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now we can format from the terminal to our heart's content:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> format</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">package.json</span><span style=\"color:#4C9A91\"> 340</span><span style=\"color:#C98A7D\">ms</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">pnpm-lock.yaml</span><span style=\"color:#4C9A91\"> 159</span><span style=\"color:#C98A7D\">ms</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">templates/hello.html</span><span style=\"color:#4C9A91\"> 371</span><span style=\"color:#C98A7D\">ms</span></span></code></pre></figure>\n<p>Let's spice up our template now. Back in <code>hello.html</code>, let's flesh this page out a bit more\nto be more of a fully functional HTML file we'd expect to serve to the browser, including assets:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;!</span><span style=\"color:#4D9375\">doctype</span><span style=\"color:#BD976A\"> html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">html</span><span style=\"color:#BD976A\"> lang</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/assets/main.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://rsms.me/inter/inter.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>I've added two <code>link</code>s to CSS files, one for the Inter font... because why not.</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/inter_meme.jpg\" alt=\"inter meme\"></p>\n<p>The other <code>link</code> is to a CSS file that doesn't exist (yet). This CSS file will contain the compiled output Tailwind's\nCLI spits out for us after scanning\nthe HTML files in our <code>/templates</code> directory and determining which utility\nclasses are not needed helping us reduce the bundled CSS file size that will ship to our users' browsers. Pretty neat,\nhuh?</p>\n<p>Now as I mentioned, this will be a file that is <em>generated</em> and not necessarily included by default. First, we need to\nadd a CSS file Tailwind\nwill use to generate the utilities our HTML templates will use. Let's create a <code>styles/tailwind.css</code> file:</p>\n<h4>styles/tailwind.css</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"css\" data-theme=\"vitesse-dark\"><code data-language=\"css\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#4D9375\">tailwind</span><span style=\"color:#DBD7CAEE\"> base</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#4D9375\">tailwind</span><span style=\"color:#DBD7CAEE\"> components</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#4D9375\">tailwind</span><span style=\"color:#DBD7CAEE\"> utilities</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>We'll use the CLI to read this file as input, scan which utilities are\nbeing used by our HTML, and output the optimized stylesheet to be served. Let's run our first pass:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> dlx</span><span style=\"color:#C98A7D\"> tailwindcss</span><span style=\"color:#C99076\"> -i</span><span style=\"color:#C98A7D\"> styles/tailwind.css</span><span style=\"color:#C99076\"> -o</span><span style=\"color:#C98A7D\"> assets/main.css</span><span style=\"color:#C99076\"> --watch</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Rebuilding...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">warn</span><span style=\"color:#C98A7D\"> -</span><span style=\"color:#C98A7D\"> No</span><span style=\"color:#C98A7D\"> utility</span><span style=\"color:#C98A7D\"> classes</span><span style=\"color:#C98A7D\"> were</span><span style=\"color:#C98A7D\"> detected</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#C98A7D\"> your</span><span style=\"color:#C98A7D\"> source</span><span style=\"color:#C98A7D\"> files.</span><span style=\"color:#C98A7D\"> If</span><span style=\"color:#C98A7D\"> this</span><span style=\"color:#C98A7D\"> is</span><span style=\"color:#C98A7D\"> unexpected,</span><span style=\"color:#C98A7D\"> double-check</span><span style=\"color:#C98A7D\"> the</span><span style=\"color:#666666\"> `</span><span style=\"color:#80A665\">content</span><span style=\"color:#666666\">`</span><span style=\"color:#80A665\"> option</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#C98A7D\"> your</span><span style=\"color:#C98A7D\"> Tailwind</span><span style=\"color:#C98A7D\"> CSS</span><span style=\"color:#C98A7D\"> configuration.</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">warn</span><span style=\"color:#C98A7D\"> -</span><span style=\"color:#C98A7D\"> https://tailwindcss.com/docs/content-configuration</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Done</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#4C9A91\"> 74</span><span style=\"color:#C98A7D\">ms.</span></span></code></pre></figure>\n<p>Nice! Though not very exciting, as Tailwind didn't detect any utility classes to purge as we don't have a configuration\nfile for it to read pointing to the markup. Let's add one:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> dlx</span><span style=\"color:#C98A7D\"> tailwindcss</span><span style=\"color:#C98A7D\"> init</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Created</span><span style=\"color:#C98A7D\"> Tailwind</span><span style=\"color:#C98A7D\"> CSS</span><span style=\"color:#C98A7D\"> config</span><span style=\"color:#C98A7D\"> file:</span><span style=\"color:#C98A7D\"> tailwind.config.js</span></span></code></pre></figure>\n<p>And let's adjust the <code>tailwind.config.js</code> file that was generated for us:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"js\" data-theme=\"vitesse-dark\"><code data-language=\"js\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">const</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> fontFamily</span><span style=\"color:#666666\"> }</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> require</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">tailwindcss/defaultTheme</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/** </span><span style=\"color:#666666\">@</span><span style=\"color:#4D9375\">type</span><span style=\"color:#666666\"> {</span><span style=\"color:#5DA994\">import('tailwindcss').Config</span><span style=\"color:#666666\">}</span><span style=\"color:#758575DD\"> */</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">module</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">exports</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    content</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./templates/*.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    theme</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        extend</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            fontFamily</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                sans</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Inter var</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> ...</span><span style=\"color:#BD976A\">fontFamily</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">sans</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>I'm also going to rename the extension to <code>.cjs</code> to make eslint happy.\nIf you're unfamiliar with Tailwind, essentially this is just a configuration file telling Tailwind where to look for\nutility classes\nfor treeshaking ones we're not using. We're also overriding the default sans font with the Inter font so we can look\nlike a legit Series B startup\non our landing page.</p>\n<p>Now if we run the Tailwind CLI again, we'll get the same message. If we spin up our server,\nnothing has changed either. One last step: we need to tell axum to serve our <code>assets/</code> directory so our compiled\nTailwind CSS file is available for our template to use.</p>\n<p>Back in <code>main.rs</code>, let's a <code>tower</code> service route to serve everything under the <code>assets/</code> folder:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Context</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> askama</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Template</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    http</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">StatusCode</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#5DA994\">Html</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#666666\">},</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    routing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Router</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tower_http</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">services</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ServeDir</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">layer</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberExt</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> util</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberInitExt</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;()></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Setup stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // We could also read our port in from the environment as well</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> assets_path</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">env</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">current_dir</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 8000_</span><span style=\"color:#5DA994\">u16</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> addr</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">net</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SocketAddr</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from</span><span style=\"color:#666666\">(([</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">],</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello</span><span style=\"color:#666666\">))</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">nest_service</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        ServeDir</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> assets_path</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_str</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">())),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">// Other stuff...</span></span></code></pre></figure>\n<p>The key here is the <code>assets_path</code> and the chain call to <code>.nest_service()</code>, telling\naxum to serve an <code>/assets</code> route with all the files underneath that directory locally. Now if we start our server, we\nshould see our <code>Howdy!</code> text looks a bit different:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/with_inter.png\" alt=\"with Inter font\"></p>\n<p>We've got Inter font! Let's spice this up even more with some colored text. In our <code>hello.html</code> template, let's add a\ntext color class:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;!</span><span style=\"color:#4D9375\">doctype</span><span style=\"color:#BD976A\"> html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">html</span><span style=\"color:#BD976A\"> lang</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/assets/main.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://rsms.me/inter/inter.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-green-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>I've been running my processes in the back, both the Tailwind CLI and our\naxum server with the help of <a href=\"https://crates.io/crates/cargo-watch\">cargo-watch</a>, so any changes I make to our Rust code\nor HTML templates will automatically be detected. Refreshing the page, we should see green text. Sweet!</p>\n<h1>Extending templates</h1>\n<p>Our current template generation is missing one key piece in template\ninheritance. If we were to add additional axum routes that\nserved HTML, we would need to include <code>&#x3C;head></code> tags for each file. Not a great developer experience, as we want to have\ntemplates extend a base markup file that includes all of our common head metadata like links, tags, etc.</p>\n<p>Luckily, askama <a href=\"https://djc.github.io/askama/template_syntax.html#template-inheritance\">has us covered</a> with what we\nneed. Using template inheritance, we can define base template layouts that our individual route templates will extend.\nTo make\nlife easier so we can avoid having to write the same boilerplate HTML in each template we'll serve, let's create\na <code>base.html</code> file:</p>\n<h3>templates/base.html</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;!</span><span style=\"color:#4D9375\">doctype</span><span style=\"color:#BD976A\"> html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">html</span><span style=\"color:#BD976A\"> lang</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/assets/main.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://rsms.me/inter/inter.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Allow any inheriting page to set it's own title --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">title</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">{% block title %}{{ title }}{% endblock %}</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">title</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Allow any inheriting page to extend head with additional assets --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        {% block head %}{% endblock %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">content</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            &#x3C;!-- Inheriting pages will have their content rendered here, similar to app root in React, Angular, etc. --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            {% block content %}{% endblock %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>With our base template in place, let's clean up our <code>hello.html</code> file a bit:</p>\n<h3>templates/hello.html</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- prettier-ignore --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% extends \"base.html\" %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block title %}Hello!{% endblock %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block content %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-green-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% endblock %}</span></span></code></pre></figure>\n<p>Note the ignore statement for prettier to skip formatting this file for now - default prettier doesn't do a great job\nat formatting templated HTML files but I'm sure there's a plugin out there to include to fix this that I'm simply\ntoo lazy to search for.</p>\n<p>Since we've kept our server running and have Tailwind compiling output assets in watch mode for us, we should be able\nto navigate back to <code>localhost:8000</code> and notice there's no change to our page, still displaying the green \"Howdy!\" text.\nThis is exactly what we expect, though we now have base templates that each of our pages can include!</p>\n<p>To prove that we've now got a nice extendable page model, let's add another page with a link on our home page that\nroutes\nto this new page that I'll cleverly name <code>/another-page</code> with its even more cleverly associated\ntemplate <code>another-page.html</code>:</p>\n<h3>templates/another-page.html</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- prettier-ignore --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% extends \"base.html\" %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block title %}Another page!{% endblock %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block content %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">font-bold text-indigo-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Another page</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% endblock %}</span></span></code></pre></figure>\n<p>Let's add an axum route to serve this template with users hit the <code>/another-page</code> frontend route:</p>\n<h3>main.rs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// Imports and such...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;()></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/another-page</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">another_page</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">nest_service</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            ServeDir</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> assets_path</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_str</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">())),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // More stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">// Other templates...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> another_page</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#4D9375\"> impl</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> template</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> AnotherPageTemplate</span><span style=\"color:#666666\"> {};</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    HtmlTemplate</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">template</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Template</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">template</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">path </span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">another-page.html</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> AnotherPageTemplate</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>If we manually route to this page, we should it in the browser:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/another_page.png\" alt=\"another page\"></p>\n<p>As another sanity check, take a look at the CSS Tailwind is outputting in our <code>assets/</code> directory, namely taking a look\nat the tail end (no pun intended) of the file:</p>\n<h3>assets/main.css</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"css\" data-theme=\"vitesse-dark\"><code data-language=\"css\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#DBD7CAEE\">/ / More classes... </span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">font-bold</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    font-weight</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 700</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">text-green-500</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    --tw-text-opacity</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    color</span><span style=\"color:#666666\">:</span><span style=\"color:#B8A965\"> rgb</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">34</span><span style=\"color:#4C9A91\"> 197</span><span style=\"color:#4C9A91\"> 94</span><span style=\"color:#DBD7CAEE\"> / </span><span style=\"color:#B8A965\">var</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">--tw-text-opacity</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">text-indigo-500</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    --tw-text-opacity</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    color</span><span style=\"color:#666666\">:</span><span style=\"color:#B8A965\"> rgb</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">99</span><span style=\"color:#4C9A91\"> 102</span><span style=\"color:#4C9A91\"> 241</span><span style=\"color:#DBD7CAEE\"> / </span><span style=\"color:#B8A965\">var</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">--tw-text-opacity</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Tailwind is <em>only</em> including the utilities it sees in our template files, namely the colors we've included and the bold\nfont we've slapped on the text of our <code>/another-page</code> route. Pretty neat, huh?</p>\n<p>Let's spice our templates up with some routes. In our <code>hello.html</code> let's add a link:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- prettier-ignore --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% extends \"base.html\" %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block title %}Hello!{% endblock %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block content %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex flex-row space-x-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-green-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/another-page</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-indigo-500 underline hover:text-indigo-300</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span><span style=\"color:#DBD7CAEE\">Another page</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% endblock %}</span></span></code></pre></figure>\n<p>Nothing special going on here, just spicing up the look of our link and adding some padding between the two elements.\nRefreshing the home page, we should see a new link pop up:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/to_another_page.png\" alt=\"another page\"></p>\n<p>and clicking the link, we route to our newly added <code>/another-page</code> page! More importantly, take note of how we're only\nincluding\nthe relevant markup for each page. The power of templates compels you!</p>\n<h2>Bringing in the functionality</h2>\n<p>Okay, so we have a web server serving static HTML, good-looking assets with the help of Tailwind, and an extendable page\nmodel... let's fit the last piece of the web dev DX puzzle by bringing interactive functionality to our pages with the\nhelp of htmx. With htmx, we can do all the JavaScript-y things we would normally see as first-class functionality in a\nmodern frontend framework, but in the comfort of our HTML. No need to submit form data to our backend and reload the\npage\nbetween transitions, htmx will do the work for us!</p>\n<p>Since htmx brings modern UI goodness to standard hypertext, we don't need to worry about writing form handlers, fetching\ndata via AJAX, etc. While htmx brings a lot to the plate, let's start small and simply grab some data from an API and\nreplace\nsome elements on the screen with it.</p>\n<p>Even better, htmx is small in size and easily pluggable into our current setup. Let's bring it in as a <code>&#x3C;script></code> tag\nto our base layout so all pages have access to it:</p>\n<h3>templates/base.html</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;!</span><span style=\"color:#4D9375\">doctype</span><span style=\"color:#BD976A\"> html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">html</span><span style=\"color:#BD976A\"> lang</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/assets/main.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://rsms.me/inter/inter.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Allow any inheriting page to set it's own title --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">title</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">{% block title %}{{ title }}{% endblock %}</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">title</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- htmx from the unpkg CDN - your mileage may vary --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">script</span><span style=\"color:#BD976A\"> src</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://unpkg.com/htmx.org@1.9.2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>&#x3C;/</span><span style=\"color:#4D9375\">script</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Allow any inheriting page to extend head with additional assets --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        {% block head %}{% endblock %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">content</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            &#x3C;!-- Inheriting pages will have their content rendered here, similar to app root in React, Angular, etc. --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            {% block content %}{% endblock %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>With htmx included, we'll add a button on our homepage that will ping one of our server endpoints for some data. We\ndon't have purely backend endpoints yet - all of our axum routes serve HTML. Let's mount\na subrouter that will include endpoints that return some JSON data for our UI to consume.</p>\n<p>To note, we'll load htmx from unpkg, a handy npm package CDN. Keep in mind you'll probably want to fetch this packages\nduring production deployments to avoid unpkg outages (which happens more than I'm sure the maintainers care to admit).</p>\n<p>If we refresh the landing page, again assuming were still using cargo-watch to run the server and crack open the network\ntab, we should the htmx JS loaded by the browser. Before we get to our markup, let's add an axum route that returns some\ntext for us to display:</p>\n<h4>main.rs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;()></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> api_router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/hello</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello_from_the_server</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">nest</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/api</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> api_router</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/another-page</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">another_page</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">nest_service</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            ServeDir</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> assets_path</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_str</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">())),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // More stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">// Other handlers...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> hello_from_the_server</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#666666\">'</span><span style=\"color:#5DA994\">static</span><span style=\"color:#5DA994\"> str</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#C98A7D\">Hello!</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We've effectively added a subrouter underneath the parent <code>/api</code> route. The example here is pretty trivial, and we'll\nspice things up here shortly. With our server now able to serve data at specific\nendpoints, let's do a quick sanity check. In another terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D\"> https://localhost:8000/api/hello</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Hello!%</span></span></code></pre></figure>\n<p>We're serving data, now let's wire this up to a button click. On our homepage, let's add a spruced up Tailwind button:</p>\n<h4>templates/hello.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- prettier-ignore --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% extends \"base.html\" %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block title %}Hello!{% endblock %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block content %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex flex-row space-x-2 px-8 py-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-green-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/another-page</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-indigo-500 underline hover:text-indigo-300</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span><span style=\"color:#DBD7CAEE\">Another page</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        hx-get</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/api/hello</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        hx-swap</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">innerHtml</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        Say hello</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% endblock %}</span></span></code></pre></figure>\n<p>I've added a button with the <code>hx-get</code> htmx directive to signal that when this button is clicked, send a GET\nto <code>/api/hello</code> at the current running domain and <code>hx-swap</code> the inner HTML (the button text) with whatever comes back. A\nquick page refresh and we should see our updated home route:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/with_button.png\" alt=\"with button\"></p>\n<p>I'm a bit claustrophobic, so I added some padding to give our UI elements some room to breathe. With the network tab\nopen, if we click the button, we see some magic happen - a GET is fired and our button text is updated with the <code>Hello!</code>\ntext returned from the server. Sweet!</p>\n<p>Okay... static text returned from the server is fascinating and all, but let's make something a bit more functional.\nWith htmx, we can define\nactions that return HTML and dynamically swap and replace elements on the UI with the retrieved markup (flashback to my\nJEE days). Let's spit\nsome row data back to the homepage from the server using an endpoint that returns another template. Let's add a cool\nTailwind'y form so revolutionary in terms of data-driven APIs, it may just get me one of those mythical FAANG jobs\neveryone keeps talking about.</p>\n<p>Tailwind has some pretty neat utilities, and I'm gonna go ahead and bring in the forms package to help create some nice\nlooking inputs:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> @tailwindcss/forms</span></span></code></pre></figure>\n<p>Once that's installed, let's update our <code>tailwind.config.cjs</code> file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"js\" data-theme=\"vitesse-dark\"><code data-language=\"js\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">const</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> fontFamily</span><span style=\"color:#666666\"> }</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> require</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">tailwindcss/defaultTheme</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/** </span><span style=\"color:#666666\">@</span><span style=\"color:#4D9375\">type</span><span style=\"color:#666666\"> {</span><span style=\"color:#5DA994\">import('tailwindcss').Config</span><span style=\"color:#666666\">}</span><span style=\"color:#758575DD\"> */</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">module</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">exports</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    content</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./templates/*.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    theme</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        extend</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            fontFamily</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                sans</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Inter var</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> ...</span><span style=\"color:#BD976A\">fontFamily</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">sans</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    plugins</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#80A665\">require</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@tailwindcss/forms</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>Now that our utility has been added, let's create a <code>todo-form.html</code> file in our <code>templates/</code> directory with a good\nlooking form input:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">form</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">max-w-md</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">label</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">block text-sm font-medium leading-6 text-gray-900</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span><span style=\"color:#DBD7CAEE\">Todo</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">label</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-2 inline-flex flex-row space-x-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">input</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            name</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            placeholder</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Replace frontend with htmx</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Add</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">form</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>Now we're not extending the base layout since we'll take the lazy way out and simply add it to our home page. Again,\naskama\nprovides a jinja-like <code>include</code> tag we can throw on our <code>hello.html</code> template:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- prettier-ignore --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% extends \"base.html\" %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block title %}Hello!{% endblock %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block content %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex flex-row space-x-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-green-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/another-page</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-indigo-500 underline hover:text-indigo-300</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span><span style=\"color:#DBD7CAEE\">Another page</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        hx-get</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/api/hello</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        hx-swap</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">innerHtml</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        Say hello</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% include \"todo-form.html\" %} {% endblock %}</span></span></code></pre></figure>\n<p>A quick page refresh and our home route now includes a single input form and button:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/updated_home.png\" alt=\"updated page\"></p>\n<p>As we add todos, we'll want them to appear beneath the input box and keep appending to it as we add more. We're not\nexactly\nbuilding the next Facebook, so we can keep our implementation simple. We need some way to keep track of todos, and we'll\nwant to manage that with our axum server so we can maintain a list of todos that will act as our persistence mechanism.\nLet's\nadd some state to hold the todo information:</p>\n<h3>main.rs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> AppState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    todos</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Mutex</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Vec</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">String</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;()></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> app_state</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Arc</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">AppState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        todos</span><span style=\"color:#CB7676\">:</span><span style=\"color:#80A665\"> Mutex</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">vec!</span><span style=\"color:#666666\">[]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // We could also read our port in from the environment as well</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> assets_path</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">env</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">current_dir</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 8000_</span><span style=\"color:#5DA994\">u16</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> addr</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">net</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SocketAddr</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from</span><span style=\"color:#666666\">(([</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">],</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> api_router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/hello</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello_from_the_server</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> post</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">add_todo</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_state</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">app_state</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We add <code>AppState</code> that holds a <code>Vec</code> of todos as strings locked behind a <code>Mutex</code>. Now, this is not exactly a PSA for\nproper\nstate management with axum - we're cutting a lot of corners here to keep things streamlined. Because <code>AppState</code> can be\nshared\nacross threads thanks to being wrapped with <code>Arc</code>, we'll need to do our due diligence of locking the todo list before\nattempting\nto add more todays. With our state added as an extension to our API router, let's add the <code>add_todo</code> route to do just\nthat:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Template</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">template</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">path </span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">todo-list.html</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> TodoList</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    todos</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Vec</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">String</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> add_todo</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">AppState</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Form</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">todo</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Form</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoRequest</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#4D9375\"> impl</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#CB7676\"> mut</span><span style=\"color:#BD976A\"> lock</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">todos</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">lock</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    lock</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">push</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">todo</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> template</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> TodoList</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        todos</span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> lock</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">clone</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    HtmlTemplate</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">template</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I've also added a <code>todo-list.html</code> template that will use the todo data we've acquired behind our lock. Let's add that\nto our <code>templates/</code> directory:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% for todo in todos %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-lg</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">{{ todo }}</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% endfor %}</span></span></code></pre></figure>\n<p>Using askama's templating, we pass in the todos list and iterate over them generating a <code>&#x3C;p></code> tag for each todo. We'll\nneed\nto paint the HTML returned by our <code>add_todo</code> route, so let's append it to the end of our <code>todo-form.html</code> markup:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">form</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    hx-post</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/api/todos</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    hx-target</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">#todos</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    hx-swap</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">innerHTML</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">max-w-md</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">label</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">block text-sm font-medium leading-6 text-gray-900</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span><span style=\"color:#DBD7CAEE\">Todo</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">label</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-2 inline-flex flex-row space-x-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">input</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            name</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            placeholder</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Replace frontend with htmx</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">submit</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Add</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">form</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666;font-style:italic\"> /</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>I've sprinkled in some htmx directives with <code>hx-post</code>, <code>hx-target</code>, and <code>hx-swap</code> as well:</p>\n<ul>\n<li><code>hx-post</code> tells our form submission <em>where</em> to send the form data as a POST request too</li>\n<li><code>hx-target</code> is the element we want to mutate after we get a response</li>\n<li><code>hx-swap=\"innerHTML\"</code> means we'll drop the hypertext returned from our <code>add_todo</code> handler as a child element of\nour <code>&#x3C;div id=\"todos\" /></code> tag</li>\n</ul>\n<p>With our Tailwind and axum server processes still running in watch mode, we should be good to start trying things out\nnow.\nWith our homepage refreshed, we can start <a href=\"/images/rust-axum-htmx-templates-with-askama/full_demo.mp4\">adding todos</a>.\nI've\nexpanded\nthe network while we create a few todos to show off htmx making form requests for us and returning the askama templated\nhypertext back to us.\nBadda bing, badda boom, and we've got some todos!</p>\n<h2>Wrapping up</h2>\n<p>Web dev (for me, at least) just got a lot more fun thanks to Rust, askama, axum and htmx. While our sample here is a bit\nlight on functionality, I've written a more fleshed out version available\non <a href=\"https://github.com/JoeyMckenzie/axum-htmx-templates/tree/main\">GitHub</a> that includes a more opinionated approach to\norganizing templates, page routes, and ready to host on a provider like <a href=\"https://fly.io\">Fly</a> with a ready-to-go\nDockerfile.</p>\n<p>Until next time, friends!</p>"
  },
  "_id": "2023/templates-with-rust-axum-htmx-askama.md",
  "_raw": {
    "sourceFilePath": "2023/templates-with-rust-axum-htmx-askama.md",
    "sourceFileName": "templates-with-rust-axum-htmx-askama.md",
    "sourceFileDir": "2023",
    "contentType": "markdown",
    "flattenedPath": "2023/templates-with-rust-axum-htmx-askama"
  },
  "type": "Post",
  "url": "/blog/2023/templates-with-rust-axum-htmx-askama"
}