{
  "title": "Learning to fly with Rust and Postgres",
  "description": "If it can be Dockerized, it can be deployed.",
  "pubDate": "2023-04-05T07:00:00.000Z",
  "category": "rust",
  "heroImage": "/images/learning-to-fly-rust-postgres/fly_meme.jpg",
  "draft": false,
  "keywords": [
    "rust",
    "postgres",
    "fly.io"
  ],
  "body": {
    "raw": "\nAfter a long weekend of random life events, I decided I needed to scratch an itch to learn something new. I've been\nwriting a lot serverless [Lambda's](https://aws.amazon.com/lambda/) lately and wanted to jump back into a more managed\nworkflow with a new tool I have yet to use, though seems to be getting a lot of hype in [fly.io](https://fly.io/). I've\nbeen hearing quite a bit within the community about the love developers have for fly due to its ease of deployment and\nideology about app servers centralizing on the idea of simply just deploying projects based on a Dockerfile. I do my\nfair share of Docker management at work and on side projects, so why not take fly for a spin?\n\n## Getting started with Fly\n\nFly seems like the perfect approach to get app servers up and running quickly. Simply spin up a project in a\nlanguage/framework of your choice, write a sensible Dockerfile fit for running on a server, and deploy to fly's platform\nto just have things _work_. Most of my workflow nowadays involves maintaining servers and applications through a variety\nof different tools, though mainly AWS stuff. I've been looking for a reason to de-AWS my side projects and found this\nthe perfect opportunity to do so by deploying a mighty simple Rust app sitting atop a Postgres database.\n\nLuckily enough, fly offers a hosted [Postgres option](https://fly.io/docs/postgres/) that is just another fly app within\nour cluster that our other fly app servers can talk to. Fly makes it clear, though, that this is not\na [fully managed database solution](https://fly.io/docs/postgres/getting-started/what-you-should-know/), as opposed to\nsomething like [PlanetScale](https://planetscale.com/), so your mileage may vary if you're looking to maintain a\ndatabase without being expected to put on a DBA hat now and again.\n\nTo get up and running, fly offers a rather nice [CLI](https://fly.io/docs/hands-on/install-flyctl/) to help manage our\napp servers and account. Let's start by installing it on our local machine. I'll be using brew with WSL2, so a quick:\n\n```shell\n> brew install flyctl\n```\n\nshould do the trick. Now that we've got the CLI installed, go ahead and log in with `fly auth login` and follow the\nlogin prompts in the browser the CLI opens. Once we've authenticated, we should be good to start spinning up some apps.\n\n## Creating a Postgres instance\n\nSince we'll be building a simple web app with a bit of persistence, let's go ahead and spin up our Postgres instance:\n\n```shell\n> fly postgres create\n```\n\nFollow the prompts, naming your database whatever seems appropriate and choosing the development configuration as we\ndon't necessarily need high availability for a toy project. After fly does a bit of initialization, we should see\nsomething like:\n\n```shell\nPostgres cluster wandering-cloud-1281 created\n  Username:    postgres\n  Password:    {{password}}\n  Hostname:    {{hostname}}\n  Flycast:     {{flycast}}\n  Proxy port:  5432\n  Postgres port:  5433\n  Connection string: postgres://postgres:{{password}}@{{server}}:5432\n\nSave your credentials in a secure place -- you won't be able to see them again!\n```\n\nin the console. Let's verify we're able to connect. As of this writing, there's a bit more configuration\nneeded [connect to your instance externally](https://fly.io/docs/postgres/connecting/connecting-external/) through a\nclient like pgAdmin, but luckily `flyctl` has us covered allowing us to connect to our internal instance through the\nCLI. Let's connect and verify we can run some queries:\n\n```shell\n> fly postgres connect -a <your instance name>\nConnecting to <ip>... complete\npsql (15.2 (Debian 15.2-1.pgdg110+1))\nType \"help\" for help.\n\n> postgres=# \\dt *.*\n                           List of relations\n       Schema       |           Name           |    Type     |  Owner\n--------------------+--------------------------+-------------+----------\n information_schema | sql_features             | table       | postgres\n information_schema | sql_implementation_info  | table       | postgres\n information_schema | sql_parts                | table       | postgres\n information_schema | sql_sizing               | table       | postgres\n pg_catalog         | pg_aggregate             | table       | postgres\n pg_catalog         | pg_am                    | table       | postgres\n pg_catalog         | pg_amop                  | table       | postgres\n```\n\nRunning a quick `\\dt *.*`. We should see a list of tables with various bits of metadata about their schema, type, owner,\nand name. Sweet!\n\n## Bootstrapping our service\n\nNext, let's spin up a bare-bones Rust web app. I'll be using [axum](https://docs.rs/axum/latest/axum/) as my framework,\nbut feel free to use your own:\n\n```shell\n> cargo new flying-with-rust-and-postgres\n# and once cargo is done with it's thing, let's add axum\n> cargo add axum\n# and while we're at it, let's grab tokio too\n> cargo add tokio --features full\n```\n\nNow that we've got our project bootstrapped, let's crack open `main.rs` and scaffold out a simple route:\n\n```rust\nuse std::net::SocketAddr;\n\nuse axum::{routing::get, Router};\n\nasync fn howdy() -> &'static str {\n    \"Well, hello there partner!\"\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Require a port to run, we can configure this with fly\n    let port = std::env::var(\"PORT\")?\n        .parse::<u16>()\n        .expect(\"port is not valid\");\n\n    let router = Router::new().route(\"/howdy\", get(howdy));\n\n    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed\n    let addr = SocketAddr::from(([0, 0, 0, 0], port));\n    axum::Server::bind(&addr)\n        .serve(router.into_make_service())\n        .await\n        .unwrap();\n\n    Ok(())\n}\n\n```\n\nLet's spin this thing up to make sure we've got water flowing through the pipes, so to speak:\n\n```shell\n> PORT=8080 cargo run\n\n# in another terminal...\n> curl -l http://localhost:8080/howdy\nWell, hello there partner!\n```\n\nNice! We've got the (arguably) world's most simple API ready to roll, now let's get this thing into fly.\n\n## Dockerizing our app\n\nI'll be the first to admit I'm _far_ from an experience Docker aficionado - most of my daily Docker work is within the\n.NET realm. With that said, since all fly needs is a Dockerfile to get started, let's add one to the root of our project\nwith a simple configuration, doing what we can to compress the size here and there:\n\n```shell\n# All credit goes to https://fasterthanli.me/articles/remote-development-with-rust-on-fly-io#what-the-heck-is-fly-io-for-even\n# for an an awesome walkthrough of Dockerfiles for rust, this is more or less a direct copy pasta with a few minor tweaks\n\n# After containerization, this manages to come in at a whopping ~155mb, still a bit to we could optimize but this should do for now\n\n# Stage one - copy over our build files for compilation, including workspace and .env files\nFROM rust:1-slim-bullseye AS build\n\nWORKDIR /app\n\nCOPY . .\n\n# On rebuilds, we explicitly cache our rust build dependencies to speed things up\nRUN --mount=type=cache,target=/app/target \\\n    --mount=type=cache,target=/usr/local/cargo/registry \\\n    --mount=type=cache,target=/usr/local/cargo/git \\\n    --mount=type=cache,target=/usr/local/rustup \\\n    set -eux; \\\n    # We'll use nightly because we like to go fast and break things\n    rustup install nightly; \\\n    cargo build --release; \\\n    # Compress debug symbols, squeezing the size just a bit more\n    objcopy --compress-debug-sections target/release/flying-with-rust-and-postgres ./server\n\n# Stage two - we'll utilize a second container to run our built binary from our first container - slim containers!\nFROM debian:bullseye-slim as deploy\n\n# Let's install all the necessary runtime tools on the container\nRUN set -eux; \\\n    export DEBIAN_FRONTEND=noninteractive; \\\n    apt update; \\\n    apt install -y --no-install-recommends bind9-dnsutils iputils-ping iproute2 curl ca-certificates htop; \\\n    apt clean autoclean; \\\n    apt autoremove -y; \\\n    rm -rf /var/lib/{apt,dpkg,cache,log}/;\n\n# Let's work from a self contained directory for all of our deployment needs\nWORKDIR /deploy\n\n# We need the artifact from the build container, so let's grab it\nCOPY --from=build /app/server ./\n\n# Let's expose port 80 as we'll need fly's internal port mapping also assumes 80\nEXPOSE 80\n\n# Finally, boot up the API\nCMD [\"./server\"]\n```\n\nWith our Dockerfile in place, let's build this bad boy:\n\n```shell\n> docker build . -t flying_with_rust_and_postgres\n```\n\nAfter a lengthy initial build (successive builds will be quicker thanks to the bits of caching we threw in there), we\ncan spin up our container locally and verify we're still looking good from a server perspective:\n\n```shell\n> docker run -d \\\n    -p 8080:8080 \\ # expose the container's port to match what our axum server will listen under\n    -e PORT=8008 \\ # the required env var to configure our axum port\n    --name flying_with_rust_and_postgres \\ # gives this container a name to stop and start\n    -it flying_with_rust_and_postgres # tags this container\n```\n\nAfter a few seconds, we should the container ID spit out in the terminal, and if we send through another request:\n\n```shell\n> curl -l http://localhost:8080/howdy\nWell, hello there partner!\n```\n\nOur app is running in a containerized manner, now let's get this thing deployed!\n\n## Deploying to fly\n\nAlright, I _did_ mention I was using this post as an excuse to learn fly, so let's figure out what the deployment story\nlooks like. There's gotta be _something_ in the CLI, right? Let's do a bit of trial and error:\n\n```shell\n> fly\nThis is flyctl, the Fly.io command line interface.\n\nHere's a few commands to get you started:\n  fly launch      Launch a new application\n  fly apps        Create and manage apps\n  fly postgres    Create and manage Postgres databases\n  fly redis       Create and manage Redis databases\n  fly machines    Create and manage individual Fly.io machines\n\nIf you need help along the way:\n  fly help            Display a complete list of commands\n  fly help <command>  Display help for a specific command, e.g. 'fly help launch'\n\nVisit https://fly.io/docs for additional documentation & guides\n```\n\nOkay... `fly launch` looks promising, let's check it out:\n\n```shell\n> fly help launch\nCreate and configure a new app from source code or a Docker image.\n\nUsage:\n  flyctl launch [flags]\n\nFlags:\n      # ...a bunch of options and whatnot\n```\n\nAlright, this looks like _exactly_ what we need. We have a Dockerfile, and all we need is to put this thing on a fly app\nserver. Let's take it for a spin:\n\n```shell\n> fly launch\n```\n\nWe get asked a bunch of questions, like what we want the app named, where it should be located, etc. Fly asks if we want\na Postgres instance - let's decline that for now as we have already one in place. What's even neater is that fly\ngenerates a config file for us in the `fly.toml` file that now appears in our editor:\n\n```toml\n# fly.toml file generated for flying-with-rust-and-postgres on 2023-04-03T14:09:56-07:00\n\napp = \"flying-with-rust-and-postgres\"\nkill_signal = \"SIGINT\"\nkill_timeout = 5\nprimary_region = \"lax\"\nprocesses = []\n\n[env]\n\n[experimental]\n  auto_rollback = true\n\n[[services]]\n  http_checks = []\n  internal_port = 80\n  processes = [\"app\"]\n  protocol = \"tcp\"\n  script_checks = []\n  [services.concurrency]\n    hard_limit = 25\n    soft_limit = 20\n    type = \"connections\"\n\n  [[services.ports]]\n    force_https = true\n    handlers = [\"http\"]\n    port = 80\n\n  [[services.ports]]\n    handlers = [\"tls\", \"http\"]\n    port = 443\n\n  [[services.tcp_checks]]\n    grace_period = \"1s\"\n    interval = \"15s\"\n    restart_limit = 0\n    timeout = \"2s\"\n```\n\nWe wait a bit, and check the console as we sit on the edge of our seats in anticipation of a successful deployment,\nand... it failed. Well, shoot. Let's take a look at the logs:\n\n```shell\n> fly logs\n\n# ...after a bit of sifting, we see something familiar\n[info]Preparing to run: `./server` as root\n[info]Error: NotPresent\n```\n\nAn error at startup? Oh! We didn't pass a port environment variable, so let's add that to our fly config:\n\n```toml\n# other configs...\n[env]\nPORT = \"80\"\n```\n\nFor production, we want to listen on port 80 as the default API port (versus 8080 locally). While we're at it, let's\nalso expose port 443 in our Dockerfile to satisfy SSL:\n\n```dockerfile\n# Previous setup...\n\n# Let's expose port 80 as we'll need fly's internal port mapping also assumes 80\nEXPOSE 80\nEXPOSE 443\n\n# Finally, boot up the API\nCMD [\"./server\"]\n```\n\nOkay, the second time's a charm:\n\n```shell\n> fly deploy\n```\n\nAnd after a few seconds (thanks to our layer caching), we should see a message about our app being deployed\nsuccessfully! A quick `fly logs` confirms it with a bunch of green in the terminal, but let's do a quick sanity check:\n\n```shell\n> curl -l https://flying-with-rust-and-postgres.fly.dev/howdy\nWell, hello there partner!\n```\n\nNice! Now anytime we make changes, we can `fly deploy` to have the reflected on our production. In reality, we'd hook\nthis up to CI, but I'll leave that as an exercise for the reader.\n\n## Task-ifying local development\n\nNow with the hard part out of the way, let's get back to the code. Because we'll be iterating, building docker\ncontainers, deploying, etc. _and_ because I can never remember all the docker flags I need to pass when\nbuilding/running/starting/stopping containers _and_ because I'm lazy, I'm going to add a `Makefile` (pause for audible\ngasp). There are better alternatives for Rust projects like [`cargo-make`](https://github.com/sagiegurari/cargo-make),\nbut our use case is simple enough here as we only need to manage docker. Let's add one to the root of our project:\n\n```shell\nPORT = 8080\nTAG = flying_with_rust_and_postgres\n\n.PHONY: build\nbuild:\n    docker build . -t $(TAG)\n\n.PHONY: run\nrun:\n    docker run -d \\\n    -p $(PORT):$(PORT) \\\n    -e PORT=$(PORT) \\\n    --name $(TAG) \\\n    -it $(TAG)\n\n.PHONY: stop\nstop:\n    docker stop $(TAG)\n\n.PHONY: start\nstart:\n    docker start $(TAG)\n```\n\nNow, with a simple `make build` or `make run`, we can rebuild and restart our container a bit easier. I'm using `PHONY`\ntargets here, as I'm using `make` as a glorified task runner rather than building outputs.\n\nOkay, so back to where we left off. We want to explore integrating fly apps with Postgres, but only our _deployed_ fly\napps can talk to our Postgres instance, which is a good thing - I don't want to do local development against production\ndata. Let's spin up a local development database with Postgres using docker by adding a few tasks to our `Makefile`:\n\n```shell\nDB_PORT = 5432\n\n# Other tasks...\n\n.PHONY: db-run\ndb-run:\n    docker run -d \\\n     -p $(DB_PORT):$(DB_PORT) \\\n     -e POSTGRES_PASSWORD=mySuperSecretPassword! \\\n     --name fly_demo_db \\\n     postgres\n\n.PHONY: db-start\ndb-start:\n    docker start fly_demo_db\n\n.PHONY: db-stop\ndb-stop:\n    docker stop fly_demo_db\n```\n\nNow we can spin up a local development database with a simple `make db-run`and subsequently,`make db-start`\nand `make db-stop` to start/stop it when needed. I should note that I'm only using `make` here to facilitate docker\ntasks as there are a handful of flags, local variables, and whatnot. `cargo` and `fly` are simple enough commands that\nwe don't necessarily need to add task runners for them.\n\n## Where we're going... we'll need persistence\n\nSo we're going to talk to a database from our Rust code. There are _quite_ a few great crates to facilitate doing this,\nand purely out of selfish preference, I'm going to use [`sqlx`](https://crates.io/crates/sqlx). `sqlx` is simple,\nstraightforward, compile-time safe, and at the end of the day, it's just SQL. This isn't a post about sqlx - we'll save\nthat for a rainy day.\n\nWith that schpiel out of the way, let's add sqlx with the `runtime-tokio-rustls` and `migrate` features along\nwith `postgres`:\n\n```shell\n> cargo add sqlx --features runtime-tokio-rustls, migrate, postgres\n```\n\nSpecifically, `migrate` will allow us to use migrations to keep our local development database in sync with our\nproduction database, as again, only our fly apps can actually communicate with our Postgres instance (if you're\nunwilling to pay). To make our migration story even easier, let's add\nthe [`sqlx-cli`](https://crates.io/crates/sqlx-cli) to help us manage migrations.\n\n```shell\n# We're only using Postgres, so we need just a subset of all features\n> cargo install sqlx-cli --no-default-features --features rustls, postgres\n```\n\nAfter it's installed, let's add a `.env` file that the sqlx CLI will look for when running and applying migrations:\n\n### .env\n\n```shell\nDATABASE_URL=postgres://postgres:mySuperSecretPassword@localhost:5432/postgres?sslmode=disable\n```\n\nWe'll slap a `sslmode=disable` here since we're only using this connection string locally. When we deploy, we'll need to\noverride this in our fly configuration at some point. Now that we've got the sqlx CLI installed, let's spin up a fresh\nmigration.\n\nTo spice things up a bit, rather than your standard issue `todo` example, let's create a `beer_logs` table to track\njournal entries of amazing beers we've drunk (somehow, that seems much more grammatically worse than \"drank\"):\n\n```shell\n> sqlx migrate add add_beer_logs_table\n\nCreating migrations/20230403232851_add_beer_logs_table.sql\n\nCongratulations on creating your first migration!\n\nDid you know you can embed your migrations in your application binary?\nOn startup, after creating your database connection or pool, add:\n\nsqlx::migrate!().run(<&your_pool OR &mut your_connection>).await?;\n\nNote that the compiler won't pick up new migrations if no Rust source files have changed.\nYou can create a Cargo build script to work around this with `sqlx migrate build-script`.\n\nSee: https://docs.rs/sqlx/0.5/sqlx/macro.migrate.html\n```\n\nNice! We've got a `/migrations` folder added, let's add some SQL to the script:\n\n```sql\n-- Add migration script here\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\nCREATE TABLE beer_logs (\n    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name TEXT NOT NULL,\n    notes TEXT NOT NULL,\n);\n```\n\nI'm using `UUID`s instead of integer-based for a variety of reasons, and whose discussion is out of scope for our\npurposes, atop the fact that people much smarter than myself can reason about doing so better than I can. Since we'll be\nusing UUIDs for keys, we'll need to add `uuid` as a sqlx feature in our manifest file. Now that we've fleshed out our\nmigration, let's apply it:\n\n```shell\n> sqlx migrate run\nApplied 20230403232851/migrate add beer logs table (71.391042ms)\n```\n\nSweet! If we inspect the database using your tool of choice, we should see two tables:\n\n-   `_sqlx_migrations` - the migration management table\n-   `beer_logs` - the journal table we created\n\nWe're going to need the same schema applied to our production database, so let's add a bit of code to apply migrations\nprogrammatically when our application starts up. Back in `main.rs`:\n\n```rust\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Require a port and connection string to run, we can configure these with fly\n    let connection_string = std::env::var(\"DATABASE_URL\").expect(\"connection pool was not found\");\n    let port = std::env::var(\"PORT\")?\n        .parse::<u16>()\n        .expect(\"port is not valid\");\n\n    println!(\"Initializing connection pool...\");\n\n    let pool = PgPoolOptions::new()\n        .max_connections(5)\n        .connect(&connection_string)\n        .await?;\n\n    println!(\"Connection pool initialized, running migrations...\");\n\n    sqlx::migrate!().run(&pool).await?;\n\n    println!(\"Migrations successfully applied!\");\n\n    let router = Router::new().route(\"/howdy\", get(howdy));\n\n    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed\n    let addr = SocketAddr::from(([0, 0, 0, 0], port));\n    axum::Server::bind(&addr)\n        .serve(router.into_make_service())\n        .await\n        .unwrap();\n\n    Ok(())\n}\n```\n\nWe've added a few lines to import a `DATABASE_URL` environment variable and run migrations, with the default being\nmigrations mapped to whatever is underneath the `/migrations` folder. We've also sprinkled in a few `println!()`s as a\npoor man's version of [tracing](https://crates.io/crates/tracing), but for our purposes here will suffice. If we spin up\nour server now with `cargo run`, we should see a relatively boring console as our migrations have already been manually\napplied using the CLI:\n\n```\n> PORT=8080 postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable cargo run\n\nFinished dev [unoptimized + debuginfo] target(s) in 0.12s\n Running `target/debug/flying-with-rust-and-postgres`\nRunning migrations...\nMigrations successfully applied!\n```\n\nTo sanity check, if we drop the tables (using your DB interface of choice) and spin up the server, we should see the\nsuccess message again. Now, it's going to be a bit annoying to have to punch in our environment variables, so let's add\na `make` task:\n\n```makefile\n# Existing environment variables...\nCONNECTION_STRING = postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable\n\n.PHONY: run-server\nrun-server:\n PORT=$(PORT) DATABASE_URL=$(CONNECTION_STRING) cargo run\n```\n\nWe could also use [`dotenvy`](https://crates.io/crates/dotenvy), though we only have a couple variables to manage for\nnow. Starting up with a `make run-server` does the trick:\n\n```shell\n> make run-server\n\nPORT=8080 DATABASE_URL=postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable cargo run\n   Compiling flying-with-rust-and-postgres v0.1.0 (~/flying-with-rust-and-postgres)\n    Finished dev [unoptimized + debuginfo] target(s) in 5.51s\n     Running `target/debug/flying-with-rust-and-postgres`\nInitializing connection pool...\nConnection pool initialized, running migrations...\nMigrations successfully applied!\n```\n\n## Keeping schema in sync\n\nSince we've created a table in development, let's do the work to get our production database on fly in the same state.\nSince our production database is hosted on fly, we need to adjust the `DATABASE_URL` application expects. Let's update\nthat within our `fly.toml` configuration:\n\n```toml\n[env]\nPORT = \"80\"\nDATABASE_URL = \"postgres://postgres:<your password@<your host>:5432/postgres?sslmode=disable\"\n```\n\nAgain, I'm disabling SSL because I'm ~~cheap~~ not holding possession of a valid cert to secure connections between my\napp server and the database. Obviously, DO NOT do this in a production scenario - for our purposes, simply serving over\ninsecure ports will do.\n\nNow, if we deploy our application with a `fly deploy`, we should see some good logs:\n\n```shell\n> fly deploy\n\n# A bunch of other logs...\n[info]Initializing connection pool...\n[info]Connection pool initialized, running migrations...\n[info]Migrations successfully applied!\n[info]Health check on port 80 is now passing.\n[info]Shutting down virtual machine\n[info]Sending signal SIGINT to main child process w/ PID 520\n[info]Starting clean up.\n[info]Shutting down virtual machine\n[info]Sending signal SIGINT to main child process w/ PID 520\n[info]Starting clean up.\n```\n\nKey to note here are the simple logs we output for migrations and clean server start. We're all set to now FINALLY write\nsome application code!\n\n## Logging beers\n\nWe set out to create a simple journal application to log the fantastic beers we've had so far. Let's add a route to\ncreate journals in `main.rs`:\n\n```rust\n#[derive(Deserialize, Debug)]\nstruct LogBeerRequest {\n    pub name: String,\n    pub notes: String,\n}\n\n#[derive(Serialize)]\nstruct LogBeerResponse {\n    pub id: Uuid,\n}\n\nasync fn create_log(\n    State(state): State<Arc<AppState>>,\n    Json(beer_notes_request): Json<LogBeerRequest>,\n) -> Json<LogBeerResponse> {\n    println!(\n        \"Received request to create beer log {:?}\",\n        beer_notes_request\n    );\n\n    let result = query_as!(\n        LogBeerResponse,\n        r\"\n        INSERT INTO beer_logs (name, notes)\n        VALUES ($1, $2)\n        RETURNING id\n        \",\n        beer_notes_request.name,\n        beer_notes_request.notes\n    )\n    .fetch_one(&state.pool)\n    .await\n    // DON'T panic in production... this is not an endorsement!\n    .unwrap_or_else(|_| panic!(\"inserting beer log {:?} failed\", beer_notes_request));\n\n    Json(result)\n}\n```\n\nOur log handler will simply take input, dump data into the `beer_logs` table, and return the ID of the created row. Now,\nwe're _obviously_ glossing over a few things here like proper error and response handling, injecting persistence\nconcerns at the API surface, etc. but we'll save those discussions for another day.\n\nWe're also using sqlx's `Uuid` type, so we'll need to add it as a `feature` to our dependencies, along with the `uuid`\npackage so we can reliably serialize the UUID type for requests and responses.\n\nWe're passing in some [axum `State`](https://docs.rs/axum/latest/axum/#sharing-state-with-handlers) with our\ninternal `AppState`, which we'll use to wrap our database connection pool in a safe manner:\n\n```rust\nstruct AppState {\n    pool: PgPool,\n}\n\n// And updating `main.rs`...\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Previous setup...\n\n    // Create a bit of state to share the connection pool and spint up the router\n    let state = AppState { pool };\n    let router = Router::new()\n        .route(\"/howdy\", get(howdy))\n        .route(\"/logs\", post(create_log))\n        .with_state(Arc::new(state));\n\n    println!(\"Router initialized, now listening on port {}\", port);\n\n    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed\n    let addr = SocketAddr::from(([0, 0, 0, 0], port));\n    axum::Server::bind(&addr)\n        .serve(router.into_make_service())\n        .await\n        .unwrap();\n\n    Ok(())\n}\n```\n\nNow if we rebuild and spin up our server and send a request through:\n\n```shell\n> make run-server\n\nPORT=8080 DATABASE_URL=postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable cargo run\n   Compiling flying-with-rust-and-postgres v0.1.0 (/home/jmckenzie/projects/rust/joey-mckenzie-tech/samples/flying-with-rust-and-postgres)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.23s\n     Running `target/debug/flying-with-rust-and-postgres`\nInitializing connection pool...\nConnection pool initialized, running migrations...\nMigrations successfully applied! Initializing router...\nRouter initialized, now listening on port 8080\n\n# In another terminal...\n> curl --header \"Content-Type: application/json\" \\\n--request POST \\\n--data '{\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}' \\\nhttp://localhost:8080/logs\n\n{\"id\":\"06845f6d-2647-4312-9753-a89ed61cd792\"}\n\n# And back in our server logs...\nReceived request to create beer log LogBeerRequest { name: \"Pliny the Elder\", notes: \"Like drinking the nectar of the gods...\" }\n```\n\nWe've got a response! While we could manually verify the row was inserted with some queries, let's add an endpoint to\nretrieve rows when given an ID:\n\n```rust\nasync fn get_log(State(state): State<Arc<AppState>>, Path(id): Path<Uuid>) -> Json<LogBeerRequest> {\n    println!(\"Received request to retrieve beer log {}\", id);\n\n    let result = query_as!(\n        LogBeerRequest,\n        r\"\n        SELECT id, name, notes FROM beer_logs\n        WHERE id = $1\n        \",\n        id,\n    )\n    .fetch_one(&state.pool)\n    .await\n    // DON'T panic in production... this is not an endorsement!\n    .unwrap_or_else(|_| panic!(\"retrieving beer log {:?} failed\", id));\n\n    Json(result)\n}\n```\n\nAnd now let's update `main.rs` to add a route to handle retrieving logs:\n\n```rust\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Previous setup...\n\n    // Create a bit of state to share the connection pool and spint up the router\n    let state = AppState { pool };\n    let router = Router::new()\n        .route(\"/howdy\", get(howdy))\n        .route(\"/logs\", post(create_log))\n        .route(\"/logs/:id\", get(get_log))\n        .with_state(Arc::new(state));\n\n    // Other stuff...\n}\n```\n\nNow if we bounce our server and send a request through using the previously created log:\n\n```shell\n> curl -l http://localhost:8080/logs/06845f6d-2647-4312-9753-a89ed61cd792\n\n{\"id\":\"06845f6d-2647-4312-9753-a89ed61cd792\",\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}\n```\n\nWe've got logs! Again, we're cutting a few corners here that we would most definitely want to handle in a more\nreal-world scenario, but for now, we've got a pretty good-looking (though bare-bones) beer-logging journal API. Let's\nget this thing deployed!\n\n## Back to fly\n\nOur fully fleshed-out server should look something like:\n\n```rust\nuse std::{net::SocketAddr, sync::Arc};\n\nuse axum::{\n    extract::{Path, State},\n    routing::{get, post},\n    Json, Router,\n};\nuse serde::{Deserialize, Serialize};\nuse sqlx::{postgres::PgPoolOptions, query_as, PgPool};\nuse uuid::Uuid;\n\nstruct AppState {\n    pool: PgPool,\n}\n\n#[derive(Deserialize, Serialize, Debug)]\nstruct LogBeerRequest {\n    pub name: String,\n    pub notes: String,\n}\n\n#[derive(Serialize)]\nstruct LogBeerResponse {\n    pub id: Uuid,\n}\n\nasync fn howdy() -> &'static str {\n    \"Well, hello there partner!\"\n}\n\nasync fn create_log(\n    State(state): State<Arc<AppState>>,\n    Json(beer_notes_request): Json<LogBeerRequest>,\n) -> Json<LogBeerResponse> {\n    println!(\n        \"Received request to create beer log {:?}\",\n        beer_notes_request\n    );\n\n    let result = query_as!(\n        LogBeerResponse,\n        r\"\n        INSERT INTO beer_logs (name, notes)\n        VALUES ($1, $2)\n        RETURNING id\n        \",\n        beer_notes_request.name,\n        beer_notes_request.notes\n    )\n    .fetch_one(&state.pool)\n    .await\n    // DON'T panic in production... this is not an endorsement!\n    .unwrap_or_else(|_| panic!(\"inserting beer log {:?} failed\", beer_notes_request));\n\n    Json(result)\n}\n\nasync fn get_log(State(state): State<Arc<AppState>>, Path(id): Path<Uuid>) -> Json<LogBeerRequest> {\n    println!(\"Received request to retrieve beer log {}\", id);\n\n    let result = query_as!(\n        LogBeerRequest,\n        r\"\n        SELECT name, notes FROM beer_logs\n        WHERE id = $1\n        \",\n        id,\n    )\n    .fetch_one(&state.pool)\n    .await\n    // DON'T panic in production... this is not an endorsement!\n    .unwrap_or_else(|_| panic!(\"retrieving beer log {:?} failed\", id));\n\n    Json(result)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Require a port and connection string to run, we can configure these with fly\n    let connection_string = std::env::var(\"DATABASE_URL\").expect(\"connection pool was not found\");\n    let port = std::env::var(\"PORT\")?\n        .parse::<u16>()\n        .expect(\"port is not valid\");\n\n    println!(\"Initializing connection pool...\");\n\n    let pool = PgPoolOptions::new()\n        .max_connections(5)\n        .connect(&connection_string)\n        .await?;\n    println!(\"Connection pool initialized, running migrations...\");\n\n    sqlx::migrate!(\"./migrations\").run(&pool).await?;\n\n    println!(\"Migrations successfully applied! Initializing router...\");\n\n    // Create a bit of state to share the connection pool and spint up the router\n    let state = AppState { pool };\n    let router = Router::new()\n        .route(\"/howdy\", get(howdy))\n        .route(\"/logs\", post(create_log))\n        .route(\"/logs/:id\", get(get_log))\n        .with_state(Arc::new(state));\n\n    println!(\"Router initialized, now listening on port {}\", port);\n\n    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed\n    let addr = SocketAddr::from(([0, 0, 0, 0], port));\n    axum::Server::bind(&addr)\n        .serve(router.into_make_service())\n        .await\n        .unwrap();\n\n    Ok(())\n}\n```\n\nSince we're copying over all the files in our Dockerfile except for the `/target` output folder, our deployment process\nshould be bringing over our `/migrations` folder as well. One issue we'll run into, though, will be that our builds\nmight fail as sqlx will attempt to run compile-time checks against the target database that it won't necessarily have\nthe connectivity to at build-time. Let's add the `offline` feature to our manifest file, then run a\nquick `cargo sqlx prepare` in the terminal to cache the database metadata our `query_as!()` macros need to run those\ncompile-time checks.\n\nWe should now see a `sqlx-data.json` file at the root of our project with some data about the tables, compiled queries,\nand a few other things. Again, since we're copying everything over during the container build process, we'll get this\nfile included by default. To get our docker builds successfully running, we'll need to do one of two things:\n\n-   Add the `SQLX_OFFLINE` environment variable to our `.env` file\n-   OR, tell docker to ignore `.env` files while copying over from source\n\nWe'll go with option one, as there might be environment variables we'll want to load in eventually other than the\ndatabase URL, so we'll tell sqlx to use the cached metadata when building. Our `.env` file should look something like\nthis:\n\n```shell\nDATABASE_URL=postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable\nSQLX_OFFLINE=true\n```\n\nNow if we build our container locally with a `make build` our build should run through successfully, giving us the green\nlight to deploy to fly. Let's do that now:\n\n```shell\n> fly deploy\n\n# After a sifting through the build logs, we should see...\n1 desired, 1 placed, 1 healthy, 0 unhealthy [health checks: 1 total] --> v15 deployed successfully\n```\n\nYour version may vary, but we've got fly's stamp of approval that the deployment was successful. Let's verify we're up\nand running with a few `curl`s:\n\n```shell\n> curl --header \"Content-Type: application/json\" \\\n--request POST \\\n--data '{\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}' \\\nhttps://flying-with-rust-and-postgres.fly.dev/logs\n\n{\"id\":\"551a31a1-c7c0-4893-9185-7340a5bf31b3\"}\n\n# Now taking our ID and querying for the log...\n\ncurl -l https://flying-with-rust-and-postgres.fly.dev/logs/551a31a1-c7c0-4893-9185-7340a5bf31b3\n\n{\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}\n```\n\nAnd just like, we're up and running with fly, Rust, and Postgres!\n\n## Wrapping up\n\nIn my quest for a developer-friendly hosting platform, I've been thoroughly satisfied with what fly offers. I'm excited\nto see what I can build, and without a doubt, I'll be looking for more excuses to host whatever I can with the platform.\n\nAll of the code we wrote today you can find within\nmy [blog samples](https://github.com/JoeyMckenzie/joey-mckenzie-tech/tree/main/samples/with-fly-postgres).\n\nUntil next time, friends!\n",
    "html": "<p>After a long weekend of random life events, I decided I needed to scratch an itch to learn something new. I've been\nwriting a lot serverless <a href=\"https://aws.amazon.com/lambda/\">Lambda's</a> lately and wanted to jump back into a more managed\nworkflow with a new tool I have yet to use, though seems to be getting a lot of hype in <a href=\"https://fly.io/\">fly.io</a>. I've\nbeen hearing quite a bit within the community about the love developers have for fly due to its ease of deployment and\nideology about app servers centralizing on the idea of simply just deploying projects based on a Dockerfile. I do my\nfair share of Docker management at work and on side projects, so why not take fly for a spin?</p>\n<h2>Getting started with Fly</h2>\n<p>Fly seems like the perfect approach to get app servers up and running quickly. Simply spin up a project in a\nlanguage/framework of your choice, write a sensible Dockerfile fit for running on a server, and deploy to fly's platform\nto just have things <em>work</em>. Most of my workflow nowadays involves maintaining servers and applications through a variety\nof different tools, though mainly AWS stuff. I've been looking for a reason to de-AWS my side projects and found this\nthe perfect opportunity to do so by deploying a mighty simple Rust app sitting atop a Postgres database.</p>\n<p>Luckily enough, fly offers a hosted <a href=\"https://fly.io/docs/postgres/\">Postgres option</a> that is just another fly app within\nour cluster that our other fly app servers can talk to. Fly makes it clear, though, that this is not\na <a href=\"https://fly.io/docs/postgres/getting-started/what-you-should-know/\">fully managed database solution</a>, as opposed to\nsomething like <a href=\"https://planetscale.com/\">PlanetScale</a>, so your mileage may vary if you're looking to maintain a\ndatabase without being expected to put on a DBA hat now and again.</p>\n<p>To get up and running, fly offers a rather nice <a href=\"https://fly.io/docs/hands-on/install-flyctl/\">CLI</a> to help manage our\napp servers and account. Let's start by installing it on our local machine. I'll be using brew with WSL2, so a quick:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> brew install flyctl</span></span></code></pre></figure>\n<p>should do the trick. Now that we've got the CLI installed, go ahead and log in with <code>fly auth login</code> and follow the\nlogin prompts in the browser the CLI opens. Once we've authenticated, we should be good to start spinning up some apps.</p>\n<h2>Creating a Postgres instance</h2>\n<p>Since we'll be building a simple web app with a bit of persistence, let's go ahead and spin up our Postgres instance:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> fly postgres create</span></span></code></pre></figure>\n<p>Follow the prompts, naming your database whatever seems appropriate and choosing the development configuration as we\ndon't necessarily need high availability for a toy project. After fly does a bit of initialization, we should see\nsomething like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">Postgres</span><span style=\"color:#9ECBFF\"> cluster</span><span style=\"color:#9ECBFF\"> wandering-cloud-1281</span><span style=\"color:#9ECBFF\"> created</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  Username:</span><span style=\"color:#9ECBFF\">    postgres</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  Password:</span><span style=\"color:#9ECBFF\">    {{password}}</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  Hostname:</span><span style=\"color:#9ECBFF\">    {{hostname}}</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  Flycast:</span><span style=\"color:#9ECBFF\">     {{flycast}}</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  Proxy</span><span style=\"color:#9ECBFF\"> port:</span><span style=\"color:#79B8FF\">  5432</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  Postgres</span><span style=\"color:#9ECBFF\"> port:</span><span style=\"color:#79B8FF\">  5433</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  Connection</span><span style=\"color:#9ECBFF\"> string:</span><span style=\"color:#9ECBFF\"> postgres://postgres:{{password}}@{{server}}:5432</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Save</span><span style=\"color:#9ECBFF\"> your</span><span style=\"color:#9ECBFF\"> credentials</span><span style=\"color:#9ECBFF\"> in</span><span style=\"color:#9ECBFF\"> a</span><span style=\"color:#9ECBFF\"> secure</span><span style=\"color:#9ECBFF\"> place</span><span style=\"color:#79B8FF\"> --</span><span style=\"color:#9ECBFF\"> you</span><span style=\"color:#9ECBFF\"> won't be able to see them again!</span></span></code></pre></figure>\n<p>in the console. Let's verify we're able to connect. As of this writing, there's a bit more configuration\nneeded <a href=\"https://fly.io/docs/postgres/connecting/connecting-external/\">connect to your instance externally</a> through a\nclient like pgAdmin, but luckily <code>flyctl</code> has us covered allowing us to connect to our internal instance through the\nCLI. Let's connect and verify we can run some queries:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> fly postgres connect -a </span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#E1E4E8\">your instance name</span><span style=\"color:#F97583\">></span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Connecting</span><span style=\"color:#9ECBFF\"> to</span><span style=\"color:#F97583\"> &#x3C;</span><span style=\"color:#9ECBFF\">i</span><span style=\"color:#E1E4E8\">p</span><span style=\"color:#F97583\">></span><span style=\"color:#9ECBFF\">...</span><span style=\"color:#9ECBFF\"> complete</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">psql</span><span style=\"color:#E1E4E8\"> (15.2 (Debian </span><span style=\"color:#79B8FF\">15.2</span><span style=\"color:#9ECBFF\">-1.pgdg110+1</span><span style=\"color:#E1E4E8\">))</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Type</span><span style=\"color:#9ECBFF\"> \"help\"</span><span style=\"color:#9ECBFF\"> for</span><span style=\"color:#9ECBFF\"> help.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> postgres=# </span><span style=\"color:#79B8FF\">\\d</span><span style=\"color:#E1E4E8\">t </span><span style=\"color:#F97583\">*</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#F97583\">*</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">                           List</span><span style=\"color:#9ECBFF\"> of</span><span style=\"color:#9ECBFF\"> relations</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">       Schema</span><span style=\"color:#F97583\">       |</span><span style=\"color:#B392F0\">           Name</span><span style=\"color:#F97583\">           |</span><span style=\"color:#B392F0\">    Type</span><span style=\"color:#F97583\">     |</span><span style=\"color:#B392F0\">  Owner</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">--------------------+--------------------------+-------------+----------</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\"> information_schema</span><span style=\"color:#F97583\"> |</span><span style=\"color:#B392F0\"> sql_features</span><span style=\"color:#F97583\">             |</span><span style=\"color:#B392F0\"> table</span><span style=\"color:#F97583\">       |</span><span style=\"color:#B392F0\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\"> information_schema</span><span style=\"color:#F97583\"> |</span><span style=\"color:#B392F0\"> sql_implementation_info</span><span style=\"color:#F97583\">  |</span><span style=\"color:#B392F0\"> table</span><span style=\"color:#F97583\">       |</span><span style=\"color:#B392F0\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\"> information_schema</span><span style=\"color:#F97583\"> |</span><span style=\"color:#B392F0\"> sql_parts</span><span style=\"color:#F97583\">                |</span><span style=\"color:#B392F0\"> table</span><span style=\"color:#F97583\">       |</span><span style=\"color:#B392F0\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\"> information_schema</span><span style=\"color:#F97583\"> |</span><span style=\"color:#B392F0\"> sql_sizing</span><span style=\"color:#F97583\">               |</span><span style=\"color:#B392F0\"> table</span><span style=\"color:#F97583\">       |</span><span style=\"color:#B392F0\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\"> pg_catalog</span><span style=\"color:#F97583\">         |</span><span style=\"color:#B392F0\"> pg_aggregate</span><span style=\"color:#F97583\">             |</span><span style=\"color:#B392F0\"> table</span><span style=\"color:#F97583\">       |</span><span style=\"color:#B392F0\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\"> pg_catalog</span><span style=\"color:#F97583\">         |</span><span style=\"color:#B392F0\"> pg_am</span><span style=\"color:#F97583\">                    |</span><span style=\"color:#B392F0\"> table</span><span style=\"color:#F97583\">       |</span><span style=\"color:#B392F0\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\"> pg_catalog</span><span style=\"color:#F97583\">         |</span><span style=\"color:#B392F0\"> pg_amop</span><span style=\"color:#F97583\">                  |</span><span style=\"color:#B392F0\"> table</span><span style=\"color:#F97583\">       |</span><span style=\"color:#B392F0\"> postgres</span></span></code></pre></figure>\n<p>Running a quick <code>\\dt *.*</code>. We should see a list of tables with various bits of metadata about their schema, type, owner,\nand name. Sweet!</p>\n<h2>Bootstrapping our service</h2>\n<p>Next, let's spin up a bare-bones Rust web app. I'll be using <a href=\"https://docs.rs/axum/latest/axum/\">axum</a> as my framework,\nbut feel free to use your own:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> cargo new flying-with-rust-and-postgres</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># and once cargo is done with it's thing, let's add axum</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> cargo add axum</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># and while we're at it, let's grab tokio too</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> cargo add tokio --features full</span></span></code></pre></figure>\n<p>Now that we've got our project bootstrapped, let's crack open <code>main.rs</code> and scaffold out a simple route:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">net</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">SocketAddr</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">routing</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">get, </span><span style=\"color:#B392F0\">Router</span><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> howdy</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#E1E4E8\">'</span><span style=\"color:#B392F0\">static</span><span style=\"color:#B392F0\"> str</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">    \"Well, hello there partner!\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[tokio</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;(), </span><span style=\"color:#B392F0\">Box</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">dyn</span><span style=\"color:#E1E4E8\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">error</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">>> {</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Require a port to run, we can configure this with fly</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> port </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">env</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">var</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"PORT\"</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">?</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">parse</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">u16</span><span style=\"color:#E1E4E8\">>()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"port is not valid\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/howdy\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(howdy));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> addr </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> SocketAddr</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">from</span><span style=\"color:#E1E4E8\">(([</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">], port));</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Server</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">bind</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">addr)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">serve</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into_make_service</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .await</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">unwrap</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<p>Let's spin this thing up to make sure we've got water flowing through the pipes, so to speak:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> PORT=8080 cargo run</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># in another terminal...</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> curl -l http://localhost:8080/howdy</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Well,</span><span style=\"color:#9ECBFF\"> hello</span><span style=\"color:#9ECBFF\"> there</span><span style=\"color:#9ECBFF\"> partner!</span></span></code></pre></figure>\n<p>Nice! We've got the (arguably) world's most simple API ready to roll, now let's get this thing into fly.</p>\n<h2>Dockerizing our app</h2>\n<p>I'll be the first to admit I'm <em>far</em> from an experience Docker aficionado - most of my daily Docker work is within the\n.NET realm. With that said, since all fly needs is a Dockerfile to get started, let's add one to the root of our project\nwith a simple configuration, doing what we can to compress the size here and there:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\"># All credit goes to https://fasterthanli.me/articles/remote-development-with-rust-on-fly-io#what-the-heck-is-fly-io-for-even</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># for an an awesome walkthrough of Dockerfiles for rust, this is more or less a direct copy pasta with a few minor tweaks</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># After containerization, this manages to come in at a whopping ~155mb, still a bit to we could optimize but this should do for now</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># Stage one - copy over our build files for compilation, including workspace and .env files</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">FROM</span><span style=\"color:#9ECBFF\"> rust:1-slim-bullseye</span><span style=\"color:#9ECBFF\"> AS</span><span style=\"color:#9ECBFF\"> build</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">WORKDIR</span><span style=\"color:#9ECBFF\"> /app</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">COPY</span><span style=\"color:#9ECBFF\"> .</span><span style=\"color:#9ECBFF\"> .</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># On rebuilds, we explicitly cache our rust build dependencies to speed things up</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">RUN</span><span style=\"color:#79B8FF\"> --mount=type=cache,target=/app/target</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">    --mount=type=cache,target=/usr/local/cargo/registry</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">    --mount=type=cache,target=/usr/local/cargo/git</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">    --mount=type=cache,target=/usr/local/rustup</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">    set</span><span style=\"color:#79B8FF\"> -eux</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#79B8FF\">\\</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    # We'll use nightly because we like to go fast and break things</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    rustup</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> nightly</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#79B8FF\">\\</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    cargo</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#79B8FF\"> --release</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#79B8FF\">\\</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    # Compress debug symbols, squeezing the size just a bit more</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    objcopy</span><span style=\"color:#79B8FF\"> --compress-debug-sections</span><span style=\"color:#9ECBFF\"> target/release/flying-with-rust-and-postgres</span><span style=\"color:#9ECBFF\"> ./server</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># Stage two - we'll utilize a second container to run our built binary from our first container - slim containers!</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">FROM</span><span style=\"color:#9ECBFF\"> debian:bullseye-slim</span><span style=\"color:#9ECBFF\"> as</span><span style=\"color:#9ECBFF\"> deploy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># Let's install all the necessary runtime tools on the container</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">RUN</span><span style=\"color:#9ECBFF\"> set</span><span style=\"color:#79B8FF\"> -eux</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#79B8FF\">\\</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    export</span><span style=\"color:#E1E4E8\"> DEBIAN_FRONTEND</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">noninteractive</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#79B8FF\">\\</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    apt</span><span style=\"color:#9ECBFF\"> update</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#79B8FF\">\\</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    apt</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#79B8FF\"> -y</span><span style=\"color:#79B8FF\"> --no-install-recommends</span><span style=\"color:#9ECBFF\"> bind9-dnsutils</span><span style=\"color:#9ECBFF\"> iputils-ping</span><span style=\"color:#9ECBFF\"> iproute2</span><span style=\"color:#9ECBFF\"> curl</span><span style=\"color:#9ECBFF\"> ca-certificates</span><span style=\"color:#9ECBFF\"> htop</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#79B8FF\">\\</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    apt</span><span style=\"color:#9ECBFF\"> clean</span><span style=\"color:#9ECBFF\"> autoclean</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#79B8FF\">\\</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    apt</span><span style=\"color:#9ECBFF\"> autoremove</span><span style=\"color:#79B8FF\"> -y</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#79B8FF\">\\</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    rm</span><span style=\"color:#79B8FF\"> -rf</span><span style=\"color:#9ECBFF\"> /var/lib/{apt,dpkg,cache,log}/</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># Let's work from a self contained directory for all of our deployment needs</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">WORKDIR</span><span style=\"color:#9ECBFF\"> /deploy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># We need the artifact from the build container, so let's grab it</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">COPY</span><span style=\"color:#79B8FF\"> --from=build</span><span style=\"color:#9ECBFF\"> /app/server</span><span style=\"color:#9ECBFF\"> ./</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># Let's expose port 80 as we'll need fly's internal port mapping also assumes 80</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">EXPOSE</span><span style=\"color:#79B8FF\"> 80</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># Finally, boot up the API</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">CMD</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">\"./server\"</span><span style=\"color:#E1E4E8\">]</span></span></code></pre></figure>\n<p>With our Dockerfile in place, let's build this bad boy:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> docker build </span><span style=\"color:#79B8FF\">.</span><span style=\"color:#E1E4E8\"> -t flying_with_rust_and_postgres</span></span></code></pre></figure>\n<p>After a lengthy initial build (successive builds will be quicker thanks to the bits of caching we threw in there), we\ncan spin up our container locally and verify we're still looking good from a server perspective:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> docker run -d \\</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    -p</span><span style=\"color:#79B8FF\"> 8080</span><span style=\"color:#9ECBFF\">:8080</span><span style=\"color:#79B8FF\"> \\ </span><span style=\"color:#9ECBFF\">#</span><span style=\"color:#9ECBFF\"> expose</span><span style=\"color:#9ECBFF\"> the</span><span style=\"color:#9ECBFF\"> container's port to match what our axum server will listen under</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">    -e PORT=8008 \\ # the required env var to configure our axum port</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">    --name flying_with_rust_and_postgres \\ # gives this container a name to stop and start</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">    -it flying_with_rust_and_postgres # tags this container</span></span></code></pre></figure>\n<p>After a few seconds, we should the container ID spit out in the terminal, and if we send through another request:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> curl -l http://localhost:8080/howdy</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Well,</span><span style=\"color:#9ECBFF\"> hello</span><span style=\"color:#9ECBFF\"> there</span><span style=\"color:#9ECBFF\"> partner!</span></span></code></pre></figure>\n<p>Our app is running in a containerized manner, now let's get this thing deployed!</p>\n<h2>Deploying to fly</h2>\n<p>Alright, I <em>did</em> mention I was using this post as an excuse to learn fly, so let's figure out what the deployment story\nlooks like. There's gotta be <em>something</em> in the CLI, right? Let's do a bit of trial and error:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> fly</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">This</span><span style=\"color:#9ECBFF\"> is</span><span style=\"color:#9ECBFF\"> flyctl,</span><span style=\"color:#9ECBFF\"> the</span><span style=\"color:#9ECBFF\"> Fly.io</span><span style=\"color:#9ECBFF\"> command</span><span style=\"color:#9ECBFF\"> line</span><span style=\"color:#9ECBFF\"> interface.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Here</span><span style=\"color:#B392F0\">'s a few commands to get you started:</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  fly launch      Launch a new application</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  fly apps        Create and manage apps</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  fly postgres    Create and manage Postgres databases</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  fly redis       Create and manage Redis databases</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  fly machines    Create and manage individual Fly.io machines</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">If you need help along the way:</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  fly help            Display a complete list of commands</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  fly help &#x3C;command>  Display help for a specific command, e.g. '</span><span style=\"color:#B392F0\">fly</span><span style=\"color:#9ECBFF\"> help</span><span style=\"color:#9ECBFF\"> launch'</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">Visit https://fly.io/docs for additional documentation &#x26; guides</span></span></code></pre></figure>\n<p>Okay... <code>fly launch</code> looks promising, let's check it out:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> fly help launch</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Create</span><span style=\"color:#9ECBFF\"> and</span><span style=\"color:#9ECBFF\"> configure</span><span style=\"color:#9ECBFF\"> a</span><span style=\"color:#9ECBFF\"> new</span><span style=\"color:#9ECBFF\"> app</span><span style=\"color:#9ECBFF\"> from</span><span style=\"color:#9ECBFF\"> source</span><span style=\"color:#9ECBFF\"> code</span><span style=\"color:#9ECBFF\"> or</span><span style=\"color:#9ECBFF\"> a</span><span style=\"color:#9ECBFF\"> Docker</span><span style=\"color:#9ECBFF\"> image.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Usage:</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  flyctl</span><span style=\"color:#9ECBFF\"> launch</span><span style=\"color:#E1E4E8\"> [flags]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Flags:</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">      # ...a bunch of options and whatnot</span></span></code></pre></figure>\n<p>Alright, this looks like <em>exactly</em> what we need. We have a Dockerfile, and all we need is to put this thing on a fly app\nserver. Let's take it for a spin:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> fly launch</span></span></code></pre></figure>\n<p>We get asked a bunch of questions, like what we want the app named, where it should be located, etc. Fly asks if we want\na Postgres instance - let's decline that for now as we have already one in place. What's even neater is that fly\ngenerates a config file for us in the <code>fly.toml</code> file that now appears in our editor:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark\"><code data-language=\"toml\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\"># fly.toml file generated for flying-with-rust-and-postgres on 2023-04-03T14:09:56-07:00</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">app = </span><span style=\"color:#9ECBFF\">\"flying-with-rust-and-postgres\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">kill_signal = </span><span style=\"color:#9ECBFF\">\"SIGINT\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">kill_timeout = </span><span style=\"color:#79B8FF\">5</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">primary_region = </span><span style=\"color:#9ECBFF\">\"lax\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">processes = []</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">env</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">experimental</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">  auto_rollback = </span><span style=\"color:#79B8FF\">true</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[[</span><span style=\"color:#B392F0\">services</span><span style=\"color:#E1E4E8\">]]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">  http_checks = []</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">  internal_port = </span><span style=\"color:#79B8FF\">80</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">  processes = [</span><span style=\"color:#9ECBFF\">\"app\"</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">  protocol = </span><span style=\"color:#9ECBFF\">\"tcp\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">  script_checks = []</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">  [</span><span style=\"color:#B392F0\">services</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">concurrency</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    hard_limit = </span><span style=\"color:#79B8FF\">25</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    soft_limit = </span><span style=\"color:#79B8FF\">20</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    type = </span><span style=\"color:#9ECBFF\">\"connections\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">  [[</span><span style=\"color:#B392F0\">services</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">ports</span><span style=\"color:#E1E4E8\">]]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    force_https = </span><span style=\"color:#79B8FF\">true</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    handlers = [</span><span style=\"color:#9ECBFF\">\"http\"</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    port = </span><span style=\"color:#79B8FF\">80</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">  [[</span><span style=\"color:#B392F0\">services</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">ports</span><span style=\"color:#E1E4E8\">]]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    handlers = [</span><span style=\"color:#9ECBFF\">\"tls\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"http\"</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    port = </span><span style=\"color:#79B8FF\">443</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">  [[</span><span style=\"color:#B392F0\">services</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">tcp_checks</span><span style=\"color:#E1E4E8\">]]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    grace_period = </span><span style=\"color:#9ECBFF\">\"1s\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    interval = </span><span style=\"color:#9ECBFF\">\"15s\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    restart_limit = </span><span style=\"color:#79B8FF\">0</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    timeout = </span><span style=\"color:#9ECBFF\">\"2s\"</span></span></code></pre></figure>\n<p>We wait a bit, and check the console as we sit on the edge of our seats in anticipation of a successful deployment,\nand... it failed. Well, shoot. Let's take a look at the logs:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> fly logs</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># ...after a bit of sifting, we see something familiar</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Preparing to run: </span><span style=\"color:#9ECBFF\">`</span><span style=\"color:#B392F0\">./server</span><span style=\"color:#9ECBFF\">`</span><span style=\"color:#B392F0\"> as</span><span style=\"color:#9ECBFF\"> root</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Error: NotPresent</span></span></code></pre></figure>\n<p>An error at startup? Oh! We didn't pass a port environment variable, so let's add that to our fly config:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark\"><code data-language=\"toml\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\"># other configs...</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">env</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">PORT = </span><span style=\"color:#9ECBFF\">\"80\"</span></span></code></pre></figure>\n<p>For production, we want to listen on port 80 as the default API port (versus 8080 locally). While we're at it, let's\nalso expose port 443 in our Dockerfile to satisfy SSL:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"dockerfile\" data-theme=\"github-dark\"><code data-language=\"dockerfile\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\"># Previous setup...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># Let's expose port 80 as we'll need fly's internal port mapping also assumes 80</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">EXPOSE</span><span style=\"color:#E1E4E8\"> 80</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">EXPOSE</span><span style=\"color:#E1E4E8\"> 443</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># Finally, boot up the API</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">CMD</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">\"./server\"</span><span style=\"color:#E1E4E8\">]</span></span></code></pre></figure>\n<p>Okay, the second time's a charm:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> fly deploy</span></span></code></pre></figure>\n<p>And after a few seconds (thanks to our layer caching), we should see a message about our app being deployed\nsuccessfully! A quick <code>fly logs</code> confirms it with a bunch of green in the terminal, but let's do a quick sanity check:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> curl -l https://flying-with-rust-and-postgres.fly.dev/howdy</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Well,</span><span style=\"color:#9ECBFF\"> hello</span><span style=\"color:#9ECBFF\"> there</span><span style=\"color:#9ECBFF\"> partner!</span></span></code></pre></figure>\n<p>Nice! Now anytime we make changes, we can <code>fly deploy</code> to have the reflected on our production. In reality, we'd hook\nthis up to CI, but I'll leave that as an exercise for the reader.</p>\n<h2>Task-ifying local development</h2>\n<p>Now with the hard part out of the way, let's get back to the code. Because we'll be iterating, building docker\ncontainers, deploying, etc. <em>and</em> because I can never remember all the docker flags I need to pass when\nbuilding/running/starting/stopping containers <em>and</em> because I'm lazy, I'm going to add a <code>Makefile</code> (pause for audible\ngasp). There are better alternatives for Rust projects like <a href=\"https://github.com/sagiegurari/cargo-make\"><code>cargo-make</code></a>,\nbut our use case is simple enough here as we only need to manage docker. Let's add one to the root of our project:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">PORT</span><span style=\"color:#9ECBFF\"> =</span><span style=\"color:#79B8FF\"> 8080</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">TAG</span><span style=\"color:#9ECBFF\"> =</span><span style=\"color:#9ECBFF\"> flying_with_rust_and_postgres</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">.PHONY:</span><span style=\"color:#9ECBFF\"> build</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">build:</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    docker</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#9ECBFF\"> .</span><span style=\"color:#79B8FF\"> -t</span><span style=\"color:#9ECBFF\"> $(</span><span style=\"color:#B392F0\">TAG</span><span style=\"color:#9ECBFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">.PHONY:</span><span style=\"color:#9ECBFF\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">run:</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    docker</span><span style=\"color:#9ECBFF\"> run</span><span style=\"color:#79B8FF\"> -d</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">    -p</span><span style=\"color:#9ECBFF\"> $(</span><span style=\"color:#B392F0\">PORT</span><span style=\"color:#9ECBFF\">):$(</span><span style=\"color:#B392F0\">PORT</span><span style=\"color:#9ECBFF\">)</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">    -e</span><span style=\"color:#9ECBFF\"> PORT=$(</span><span style=\"color:#B392F0\">PORT</span><span style=\"color:#9ECBFF\">)</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">    --name</span><span style=\"color:#9ECBFF\"> $(</span><span style=\"color:#B392F0\">TAG</span><span style=\"color:#9ECBFF\">)</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">    -it</span><span style=\"color:#9ECBFF\"> $(</span><span style=\"color:#B392F0\">TAG</span><span style=\"color:#9ECBFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">.PHONY:</span><span style=\"color:#9ECBFF\"> stop</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">stop:</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    docker</span><span style=\"color:#9ECBFF\"> stop</span><span style=\"color:#9ECBFF\"> $(</span><span style=\"color:#B392F0\">TAG</span><span style=\"color:#9ECBFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">.PHONY:</span><span style=\"color:#9ECBFF\"> start</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">start:</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    docker</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> $(</span><span style=\"color:#B392F0\">TAG</span><span style=\"color:#9ECBFF\">)</span></span></code></pre></figure>\n<p>Now, with a simple <code>make build</code> or <code>make run</code>, we can rebuild and restart our container a bit easier. I'm using <code>PHONY</code>\ntargets here, as I'm using <code>make</code> as a glorified task runner rather than building outputs.</p>\n<p>Okay, so back to where we left off. We want to explore integrating fly apps with Postgres, but only our <em>deployed</em> fly\napps can talk to our Postgres instance, which is a good thing - I don't want to do local development against production\ndata. Let's spin up a local development database with Postgres using docker by adding a few tasks to our <code>Makefile</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">DB_PORT</span><span style=\"color:#9ECBFF\"> =</span><span style=\"color:#79B8FF\"> 5432</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># Other tasks...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">.PHONY:</span><span style=\"color:#9ECBFF\"> db-run</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">db-run:</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    docker</span><span style=\"color:#9ECBFF\"> run</span><span style=\"color:#79B8FF\"> -d</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">     -p</span><span style=\"color:#9ECBFF\"> $(</span><span style=\"color:#B392F0\">DB_PORT</span><span style=\"color:#9ECBFF\">):$(</span><span style=\"color:#B392F0\">DB_PORT</span><span style=\"color:#9ECBFF\">)</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">     -e</span><span style=\"color:#9ECBFF\"> POSTGRES_PASSWORD=mySuperSecretPassword!</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">     --name</span><span style=\"color:#9ECBFF\"> fly_demo_db</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">     postgres</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">.PHONY:</span><span style=\"color:#9ECBFF\"> db-start</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">db-start:</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    docker</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> fly_demo_db</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">.PHONY:</span><span style=\"color:#9ECBFF\"> db-stop</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">db-stop:</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    docker</span><span style=\"color:#9ECBFF\"> stop</span><span style=\"color:#9ECBFF\"> fly_demo_db</span></span></code></pre></figure>\n<p>Now we can spin up a local development database with a simple <code>make db-run</code>and subsequently,<code>make db-start</code>\nand <code>make db-stop</code> to start/stop it when needed. I should note that I'm only using <code>make</code> here to facilitate docker\ntasks as there are a handful of flags, local variables, and whatnot. <code>cargo</code> and <code>fly</code> are simple enough commands that\nwe don't necessarily need to add task runners for them.</p>\n<h2>Where we're going... we'll need persistence</h2>\n<p>So we're going to talk to a database from our Rust code. There are <em>quite</em> a few great crates to facilitate doing this,\nand purely out of selfish preference, I'm going to use <a href=\"https://crates.io/crates/sqlx\"><code>sqlx</code></a>. <code>sqlx</code> is simple,\nstraightforward, compile-time safe, and at the end of the day, it's just SQL. This isn't a post about sqlx - we'll save\nthat for a rainy day.</p>\n<p>With that schpiel out of the way, let's add sqlx with the <code>runtime-tokio-rustls</code> and <code>migrate</code> features along\nwith <code>postgres</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> cargo add sqlx --features runtime-tokio-rustls, migrate, postgres</span></span></code></pre></figure>\n<p>Specifically, <code>migrate</code> will allow us to use migrations to keep our local development database in sync with our\nproduction database, as again, only our fly apps can actually communicate with our Postgres instance (if you're\nunwilling to pay). To make our migration story even easier, let's add\nthe <a href=\"https://crates.io/crates/sqlx-cli\"><code>sqlx-cli</code></a> to help us manage migrations.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\"># We're only using Postgres, so we need just a subset of all features</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> cargo install sqlx-cli --no-default-features --features rustls, postgres</span></span></code></pre></figure>\n<p>After it's installed, let's add a <code>.env</code> file that the sqlx CLI will look for when running and applying migrations:</p>\n<h3>.env</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">DATABASE_URL</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">postgres://postgres:mySuperSecretPassword@localhost:5432/postgres?sslmode=disable</span></span></code></pre></figure>\n<p>We'll slap a <code>sslmode=disable</code> here since we're only using this connection string locally. When we deploy, we'll need to\noverride this in our fly configuration at some point. Now that we've got the sqlx CLI installed, let's spin up a fresh\nmigration.</p>\n<p>To spice things up a bit, rather than your standard issue <code>todo</code> example, let's create a <code>beer_logs</code> table to track\njournal entries of amazing beers we've drunk (somehow, that seems much more grammatically worse than \"drank\"):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> sqlx migrate add add_beer_logs_table</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Creating</span><span style=\"color:#9ECBFF\"> migrations/20230403232851_add_beer_logs_table.sql</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Congratulations</span><span style=\"color:#9ECBFF\"> on</span><span style=\"color:#9ECBFF\"> creating</span><span style=\"color:#9ECBFF\"> your</span><span style=\"color:#9ECBFF\"> first</span><span style=\"color:#9ECBFF\"> migration!</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Did</span><span style=\"color:#9ECBFF\"> you</span><span style=\"color:#9ECBFF\"> know</span><span style=\"color:#9ECBFF\"> you</span><span style=\"color:#9ECBFF\"> can</span><span style=\"color:#9ECBFF\"> embed</span><span style=\"color:#9ECBFF\"> your</span><span style=\"color:#9ECBFF\"> migrations</span><span style=\"color:#9ECBFF\"> in</span><span style=\"color:#9ECBFF\"> your</span><span style=\"color:#9ECBFF\"> application</span><span style=\"color:#9ECBFF\"> binary?</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">On</span><span style=\"color:#9ECBFF\"> startup,</span><span style=\"color:#9ECBFF\"> after</span><span style=\"color:#9ECBFF\"> creating</span><span style=\"color:#9ECBFF\"> your</span><span style=\"color:#9ECBFF\"> database</span><span style=\"color:#9ECBFF\"> connection</span><span style=\"color:#9ECBFF\"> or</span><span style=\"color:#9ECBFF\"> pool,</span><span style=\"color:#9ECBFF\"> add:</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">sqlx::migrate!</span><span style=\"color:#E1E4E8\">().run(</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#E1E4E8\">&#x26;</span><span style=\"color:#B392F0\">your_pool</span><span style=\"color:#9ECBFF\"> OR</span><span style=\"color:#E1E4E8\"> &#x26;</span><span style=\"color:#B392F0\">mut</span><span style=\"color:#9ECBFF\"> your_connectio</span><span style=\"color:#E1E4E8\">n</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">).await</span><span style=\"color:#F97583\">?</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Note</span><span style=\"color:#9ECBFF\"> that</span><span style=\"color:#9ECBFF\"> the</span><span style=\"color:#9ECBFF\"> compiler</span><span style=\"color:#9ECBFF\"> won't pick up new migrations if no Rust source files have changed.</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">You can create a Cargo build script to work around this with `sqlx migrate build-script`.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">See: https://docs.rs/sqlx/0.5/sqlx/macro.migrate.html</span></span></code></pre></figure>\n<p>Nice! We've got a <code>/migrations</code> folder added, let's add some SQL to the script:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"sql\" data-theme=\"github-dark\"><code data-language=\"sql\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\">-- Add migration script here</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">CREATE</span><span style=\"color:#E1E4E8\"> EXTENSION </span><span style=\"color:#F97583\">IF</span><span style=\"color:#F97583\"> NOT</span><span style=\"color:#F97583\"> EXISTS</span><span style=\"color:#9ECBFF\"> \"uuid-ossp\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">CREATE</span><span style=\"color:#F97583\"> TABLE</span><span style=\"color:#B392F0\"> beer_logs</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    id uuid </span><span style=\"color:#F97583\">PRIMARY KEY</span><span style=\"color:#F97583\"> DEFAULT</span><span style=\"color:#E1E4E8\"> uuid_generate_v4(),</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    name</span><span style=\"color:#F97583\"> TEXT</span><span style=\"color:#F97583\"> NOT NULL</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    notes </span><span style=\"color:#F97583\">TEXT</span><span style=\"color:#F97583\"> NOT NULL</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">);</span></span></code></pre></figure>\n<p>I'm using <code>UUID</code>s instead of integer-based for a variety of reasons, and whose discussion is out of scope for our\npurposes, atop the fact that people much smarter than myself can reason about doing so better than I can. Since we'll be\nusing UUIDs for keys, we'll need to add <code>uuid</code> as a sqlx feature in our manifest file. Now that we've fleshed out our\nmigration, let's apply it:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> sqlx migrate run</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Applied</span><span style=\"color:#79B8FF\"> 20230403232851</span><span style=\"color:#9ECBFF\">/migrate</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#9ECBFF\"> beer</span><span style=\"color:#9ECBFF\"> logs</span><span style=\"color:#9ECBFF\"> table</span><span style=\"color:#E1E4E8\"> (71.391042ms)</span></span></code></pre></figure>\n<p>Sweet! If we inspect the database using your tool of choice, we should see two tables:</p>\n<ul>\n<li><code>_sqlx_migrations</code> - the migration management table</li>\n<li><code>beer_logs</code> - the journal table we created</li>\n</ul>\n<p>We're going to need the same schema applied to our production database, so let's add a bit of code to apply migrations\nprogrammatically when our application starts up. Back in <code>main.rs</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[tokio</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;(), </span><span style=\"color:#B392F0\">Box</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">dyn</span><span style=\"color:#E1E4E8\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">error</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">>> {</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Require a port and connection string to run, we can configure these with fly</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> connection_string </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">env</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">var</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"DATABASE_URL\"</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"connection pool was not found\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> port </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">env</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">var</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"PORT\"</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">?</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">parse</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">u16</span><span style=\"color:#E1E4E8\">>()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"port is not valid\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Initializing connection pool...\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> pool </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> PgPoolOptions</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">max_connections</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">connect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">connection_string)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .await?</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Connection pool initialized, running migrations...\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    sqlx</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">migrate!</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">run</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">pool)</span><span style=\"color:#F97583\">.await?</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Migrations successfully applied!\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/howdy\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(howdy));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> addr </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> SocketAddr</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">from</span><span style=\"color:#E1E4E8\">(([</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">], port));</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Server</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">bind</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">addr)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">serve</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into_make_service</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .await</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">unwrap</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>We've added a few lines to import a <code>DATABASE_URL</code> environment variable and run migrations, with the default being\nmigrations mapped to whatever is underneath the <code>/migrations</code> folder. We've also sprinkled in a few <code>println!()</code>s as a\npoor man's version of <a href=\"https://crates.io/crates/tracing\">tracing</a>, but for our purposes here will suffice. If we spin up\nour server now with <code>cargo run</code>, we should see a relatively boring console as our migrations have already been manually\napplied using the CLI:</p>\n<pre><code>> PORT=8080 postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable cargo run\n\nFinished dev [unoptimized + debuginfo] target(s) in 0.12s\n Running `target/debug/flying-with-rust-and-postgres`\nRunning migrations...\nMigrations successfully applied!\n</code></pre>\n<p>To sanity check, if we drop the tables (using your DB interface of choice) and spin up the server, we should see the\nsuccess message again. Now, it's going to be a bit annoying to have to punch in our environment variables, so let's add\na <code>make</code> task:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"makefile\" data-theme=\"github-dark\"><code data-language=\"makefile\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\"># Existing environment variables...</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">CONNECTION_STRING = postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">.PHONY</span><span style=\"color:#E1E4E8\">: run-server</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">run-server</span><span style=\"color:#E1E4E8\">:</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\"> PORT=</span><span style=\"color:#9ECBFF\">$(</span><span style=\"color:#E1E4E8\">PORT</span><span style=\"color:#9ECBFF\">)</span><span style=\"color:#E1E4E8\"> DATABASE_URL=</span><span style=\"color:#9ECBFF\">$(</span><span style=\"color:#E1E4E8\">CONNECTION_STRING</span><span style=\"color:#9ECBFF\">)</span><span style=\"color:#E1E4E8\"> cargo run</span></span></code></pre></figure>\n<p>We could also use <a href=\"https://crates.io/crates/dotenvy\"><code>dotenvy</code></a>, though we only have a couple variables to manage for\nnow. Starting up with a <code>make run-server</code> does the trick:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> make run-server</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">PORT</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">8080</span><span style=\"color:#E1E4E8\"> DATABASE_URL</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable</span><span style=\"color:#B392F0\"> cargo</span><span style=\"color:#9ECBFF\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">   Compiling</span><span style=\"color:#9ECBFF\"> flying-with-rust-and-postgres</span><span style=\"color:#9ECBFF\"> v0.1.0</span><span style=\"color:#E1E4E8\"> (~/flying-with-rust-and-postgres)</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Finished</span><span style=\"color:#9ECBFF\"> dev</span><span style=\"color:#E1E4E8\"> [unoptimized </span><span style=\"color:#9ECBFF\">+</span><span style=\"color:#9ECBFF\"> debuginfo]</span><span style=\"color:#9ECBFF\"> target</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">s</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#9ECBFF\">in</span><span style=\"color:#79B8FF\"> 5.51</span><span style=\"color:#9ECBFF\">s</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">     Running</span><span style=\"color:#9ECBFF\"> `</span><span style=\"color:#B392F0\">target/debug/flying-with-rust-and-postgres</span><span style=\"color:#9ECBFF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Initializing</span><span style=\"color:#9ECBFF\"> connection</span><span style=\"color:#9ECBFF\"> pool...</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Connection</span><span style=\"color:#9ECBFF\"> pool</span><span style=\"color:#9ECBFF\"> initialized,</span><span style=\"color:#9ECBFF\"> running</span><span style=\"color:#9ECBFF\"> migrations...</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Migrations</span><span style=\"color:#9ECBFF\"> successfully</span><span style=\"color:#9ECBFF\"> applied!</span></span></code></pre></figure>\n<h2>Keeping schema in sync</h2>\n<p>Since we've created a table in development, let's do the work to get our production database on fly in the same state.\nSince our production database is hosted on fly, we need to adjust the <code>DATABASE_URL</code> application expects. Let's update\nthat within our <code>fly.toml</code> configuration:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark\"><code data-language=\"toml\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">env</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">PORT = </span><span style=\"color:#9ECBFF\">\"80\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">DATABASE_URL = </span><span style=\"color:#9ECBFF\">\"postgres://postgres:&#x3C;your password@&#x3C;your host>:5432/postgres?sslmode=disable\"</span></span></code></pre></figure>\n<p>Again, I'm disabling SSL because I'm ~~cheap~~ not holding possession of a valid cert to secure connections between my\napp server and the database. Obviously, DO NOT do this in a production scenario - for our purposes, simply serving over\ninsecure ports will do.</p>\n<p>Now, if we deploy our application with a <code>fly deploy</code>, we should see some good logs:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> fly deploy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># A bunch of other logs...</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Initializing connection pool...</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Connection pool initialized, running migrations...</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Migrations successfully applied</span><span style=\"color:#F97583\">!</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Health check on port 80 is now passing.</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Shutting down virtual machine</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Sending signal SIGINT to main child process w/ PID 520</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Starting clean up.</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Shutting down virtual machine</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Sending signal SIGINT to main child process w/ PID 520</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[info]Starting clean up.</span></span></code></pre></figure>\n<p>Key to note here are the simple logs we output for migrations and clean server start. We're all set to now FINALLY write\nsome application code!</p>\n<h2>Logging beers</h2>\n<p>We set out to create a simple journal application to log the fantastic beers we've had so far. Let's add a route to\ncreate journals in <code>main.rs</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Deserialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">struct</span><span style=\"color:#B392F0\"> LogBeerRequest</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> name</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> notes</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">struct</span><span style=\"color:#B392F0\"> LogBeerResponse</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> id</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Uuid</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> create_log</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    State</span><span style=\"color:#E1E4E8\">(state)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">AppState</span><span style=\"color:#E1E4E8\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Json</span><span style=\"color:#E1E4E8\">(beer_notes_request)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">LogBeerRequest</span><span style=\"color:#E1E4E8\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">LogBeerResponse</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        \"Received request to create beer log {:?}\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        beer_notes_request</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> result </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> query_as!</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        LogBeerResponse</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        r\"</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        INSERT INTO beer_logs (name, notes)</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        VALUES ($1, $2)</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        RETURNING id</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        \"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        beer_notes_request</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">name,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        beer_notes_request</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">notes</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .</span><span style=\"color:#B392F0\">fetch_one</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">state</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">pool)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .await</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // DON'T panic in production... this is not an endorsement!</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .</span><span style=\"color:#B392F0\">unwrap_or_else</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">|</span><span style=\"color:#E1E4E8\">_</span><span style=\"color:#F97583\">|</span><span style=\"color:#B392F0\"> panic!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"inserting beer log {:?} failed\"</span><span style=\"color:#E1E4E8\">, beer_notes_request));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Json</span><span style=\"color:#E1E4E8\">(result)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Our log handler will simply take input, dump data into the <code>beer_logs</code> table, and return the ID of the created row. Now,\nwe're <em>obviously</em> glossing over a few things here like proper error and response handling, injecting persistence\nconcerns at the API surface, etc. but we'll save those discussions for another day.</p>\n<p>We're also using sqlx's <code>Uuid</code> type, so we'll need to add it as a <code>feature</code> to our dependencies, along with the <code>uuid</code>\npackage so we can reliably serialize the UUID type for requests and responses.</p>\n<p>We're passing in some <a href=\"https://docs.rs/axum/latest/axum/#sharing-state-with-handlers\">axum <code>State</code></a> with our\ninternal <code>AppState</code>, which we'll use to wrap our database connection pool in a safe manner:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">struct</span><span style=\"color:#B392F0\"> AppState</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    pool</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> PgPool</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">// And updating `main.rs`...</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[tokio</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;(), </span><span style=\"color:#B392F0\">Box</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">dyn</span><span style=\"color:#E1E4E8\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">error</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">>> {</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Previous setup...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Create a bit of state to share the connection pool and spint up the router</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> state </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> AppState</span><span style=\"color:#E1E4E8\"> { pool };</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/howdy\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(howdy))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/logs\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">post</span><span style=\"color:#E1E4E8\">(create_log))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_state</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">(state));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Router initialized, now listening on port {}\"</span><span style=\"color:#E1E4E8\">, port);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> addr </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> SocketAddr</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">from</span><span style=\"color:#E1E4E8\">(([</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">], port));</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Server</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">bind</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">addr)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">serve</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into_make_service</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .await</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">unwrap</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Now if we rebuild and spin up our server and send a request through:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> make run-server</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">PORT</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">8080</span><span style=\"color:#E1E4E8\"> DATABASE_URL</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable</span><span style=\"color:#B392F0\"> cargo</span><span style=\"color:#9ECBFF\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">   Compiling</span><span style=\"color:#9ECBFF\"> flying-with-rust-and-postgres</span><span style=\"color:#9ECBFF\"> v0.1.0</span><span style=\"color:#E1E4E8\"> (/home/jmckenzie/projects/rust/joey-mckenzie-tech/samples/flying-with-rust-and-postgres)</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Finished</span><span style=\"color:#9ECBFF\"> dev</span><span style=\"color:#E1E4E8\"> [unoptimized </span><span style=\"color:#9ECBFF\">+</span><span style=\"color:#9ECBFF\"> debuginfo]</span><span style=\"color:#9ECBFF\"> target</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">s</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#9ECBFF\">in</span><span style=\"color:#79B8FF\"> 6.23</span><span style=\"color:#9ECBFF\">s</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">     Running</span><span style=\"color:#9ECBFF\"> `</span><span style=\"color:#B392F0\">target/debug/flying-with-rust-and-postgres</span><span style=\"color:#9ECBFF\">`</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Initializing</span><span style=\"color:#9ECBFF\"> connection</span><span style=\"color:#9ECBFF\"> pool...</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Connection</span><span style=\"color:#9ECBFF\"> pool</span><span style=\"color:#9ECBFF\"> initialized,</span><span style=\"color:#9ECBFF\"> running</span><span style=\"color:#9ECBFF\"> migrations...</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Migrations</span><span style=\"color:#9ECBFF\"> successfully</span><span style=\"color:#9ECBFF\"> applied!</span><span style=\"color:#9ECBFF\"> Initializing</span><span style=\"color:#9ECBFF\"> router...</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Router</span><span style=\"color:#9ECBFF\"> initialized,</span><span style=\"color:#9ECBFF\"> now</span><span style=\"color:#9ECBFF\"> listening</span><span style=\"color:#9ECBFF\"> on</span><span style=\"color:#9ECBFF\"> port</span><span style=\"color:#79B8FF\"> 8080</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># In another terminal...</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> curl --header </span><span style=\"color:#9ECBFF\">\"Content-Type: application/json\"</span><span style=\"color:#E1E4E8\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">--request</span><span style=\"color:#9ECBFF\"> POST</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">--data </span><span style=\"color:#9ECBFF\">'{\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}'</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">http://localhost:8080/logs</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">\"id\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#B392F0\">\"06845f6d-2647-4312-9753-a89ed61cd792\"</span><span style=\"color:#B392F0\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># And back in our server logs...</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Received</span><span style=\"color:#9ECBFF\"> request</span><span style=\"color:#9ECBFF\"> to</span><span style=\"color:#9ECBFF\"> create</span><span style=\"color:#9ECBFF\"> beer</span><span style=\"color:#9ECBFF\"> log</span><span style=\"color:#9ECBFF\"> LogBeerRequest</span><span style=\"color:#9ECBFF\"> {</span><span style=\"color:#9ECBFF\"> name:</span><span style=\"color:#9ECBFF\"> \"Pliny the Elder\",</span><span style=\"color:#9ECBFF\"> notes:</span><span style=\"color:#9ECBFF\"> \"Like drinking the nectar of the gods...\"</span><span style=\"color:#9ECBFF\"> }</span></span></code></pre></figure>\n<p>We've got a response! While we could manually verify the row was inserted with some queries, let's add an endpoint to\nretrieve rows when given an ID:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">State</span><span style=\"color:#E1E4E8\">(state)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">AppState</span><span style=\"color:#E1E4E8\">>>, </span><span style=\"color:#B392F0\">Path</span><span style=\"color:#E1E4E8\">(id)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Path</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Uuid</span><span style=\"color:#E1E4E8\">>) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">LogBeerRequest</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Received request to retrieve beer log {}\"</span><span style=\"color:#E1E4E8\">, id);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> result </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> query_as!</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        LogBeerRequest</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        r\"</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        SELECT id, name, notes FROM beer_logs</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        WHERE id = $1</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        \"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        id,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .</span><span style=\"color:#B392F0\">fetch_one</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">state</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">pool)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .await</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // DON'T panic in production... this is not an endorsement!</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .</span><span style=\"color:#B392F0\">unwrap_or_else</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">|</span><span style=\"color:#E1E4E8\">_</span><span style=\"color:#F97583\">|</span><span style=\"color:#B392F0\"> panic!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"retrieving beer log {:?} failed\"</span><span style=\"color:#E1E4E8\">, id));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Json</span><span style=\"color:#E1E4E8\">(result)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>And now let's update <code>main.rs</code> to add a route to handle retrieving logs:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[tokio</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;(), </span><span style=\"color:#B392F0\">Box</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">dyn</span><span style=\"color:#E1E4E8\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">error</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">>> {</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Previous setup...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Create a bit of state to share the connection pool and spint up the router</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> state </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> AppState</span><span style=\"color:#E1E4E8\"> { pool };</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/howdy\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(howdy))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/logs\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">post</span><span style=\"color:#E1E4E8\">(create_log))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/logs/:id\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(get_log))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_state</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">(state));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Other stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Now if we bounce our server and send a request through using the previously created log:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> curl -l http://localhost:8080/logs/06845f6d-2647-4312-9753-a89ed61cd792</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">\"id\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#B392F0\">\"06845f6d-2647-4312-9753-a89ed61cd792\"</span><span style=\"color:#B392F0\">,</span><span style=\"color:#B392F0\">\"name\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#B392F0\">\"Pliny the Elder\"</span><span style=\"color:#B392F0\">,</span><span style=\"color:#B392F0\">\"notes\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#B392F0\">\"Like drinking the nectar of the gods...\"</span><span style=\"color:#B392F0\">}</span></span></code></pre></figure>\n<p>We've got logs! Again, we're cutting a few corners here that we would most definitely want to handle in a more\nreal-world scenario, but for now, we've got a pretty good-looking (though bare-bones) beer-logging journal API. Let's\nget this thing deployed!</p>\n<h2>Back to fly</h2>\n<p>Our fully fleshed-out server should look something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">net</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">SocketAddr</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">sync</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    extract</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">Path</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">State</span><span style=\"color:#E1E4E8\">},</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    routing</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{get, post},</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Json</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Router</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> serde</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">Deserialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> sqlx</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">postgres</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">PgPoolOptions</span><span style=\"color:#E1E4E8\">, query_as, </span><span style=\"color:#B392F0\">PgPool</span><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> uuid</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Uuid</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">struct</span><span style=\"color:#B392F0\"> AppState</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    pool</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> PgPool</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Deserialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">struct</span><span style=\"color:#B392F0\"> LogBeerRequest</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> name</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> notes</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">struct</span><span style=\"color:#B392F0\"> LogBeerResponse</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> id</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Uuid</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> howdy</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#E1E4E8\">'</span><span style=\"color:#B392F0\">static</span><span style=\"color:#B392F0\"> str</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">    \"Well, hello there partner!\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> create_log</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    State</span><span style=\"color:#E1E4E8\">(state)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">AppState</span><span style=\"color:#E1E4E8\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Json</span><span style=\"color:#E1E4E8\">(beer_notes_request)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">LogBeerRequest</span><span style=\"color:#E1E4E8\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">LogBeerResponse</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        \"Received request to create beer log {:?}\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        beer_notes_request</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> result </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> query_as!</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        LogBeerResponse</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        r\"</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        INSERT INTO beer_logs (name, notes)</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        VALUES ($1, $2)</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        RETURNING id</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        \"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        beer_notes_request</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">name,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        beer_notes_request</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">notes</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .</span><span style=\"color:#B392F0\">fetch_one</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">state</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">pool)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .await</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // DON'T panic in production... this is not an endorsement!</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .</span><span style=\"color:#B392F0\">unwrap_or_else</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">|</span><span style=\"color:#E1E4E8\">_</span><span style=\"color:#F97583\">|</span><span style=\"color:#B392F0\"> panic!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"inserting beer log {:?} failed\"</span><span style=\"color:#E1E4E8\">, beer_notes_request));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Json</span><span style=\"color:#E1E4E8\">(result)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">State</span><span style=\"color:#E1E4E8\">(state)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">AppState</span><span style=\"color:#E1E4E8\">>>, </span><span style=\"color:#B392F0\">Path</span><span style=\"color:#E1E4E8\">(id)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Path</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Uuid</span><span style=\"color:#E1E4E8\">>) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">LogBeerRequest</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Received request to retrieve beer log {}\"</span><span style=\"color:#E1E4E8\">, id);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> result </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> query_as!</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        LogBeerRequest</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        r\"</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        SELECT name, notes FROM beer_logs</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        WHERE id = $1</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        \"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        id,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .</span><span style=\"color:#B392F0\">fetch_one</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">state</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">pool)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .await</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // DON'T panic in production... this is not an endorsement!</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    .</span><span style=\"color:#B392F0\">unwrap_or_else</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">|</span><span style=\"color:#E1E4E8\">_</span><span style=\"color:#F97583\">|</span><span style=\"color:#B392F0\"> panic!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"retrieving beer log {:?} failed\"</span><span style=\"color:#E1E4E8\">, id));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Json</span><span style=\"color:#E1E4E8\">(result)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[tokio</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;(), </span><span style=\"color:#B392F0\">Box</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">dyn</span><span style=\"color:#E1E4E8\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">error</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">>> {</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Require a port and connection string to run, we can configure these with fly</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> connection_string </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">env</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">var</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"DATABASE_URL\"</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"connection pool was not found\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> port </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">env</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">var</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"PORT\"</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">?</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">parse</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">u16</span><span style=\"color:#E1E4E8\">>()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"port is not valid\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Initializing connection pool...\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> pool </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> PgPoolOptions</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">max_connections</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">connect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">connection_string)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .await?</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Connection pool initialized, running migrations...\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    sqlx</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">migrate!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"./migrations\"</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">run</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">pool)</span><span style=\"color:#F97583\">.await?</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Migrations successfully applied! Initializing router...\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Create a bit of state to share the connection pool and spint up the router</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> state </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> AppState</span><span style=\"color:#E1E4E8\"> { pool };</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/howdy\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(howdy))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/logs\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">post</span><span style=\"color:#E1E4E8\">(create_log))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/logs/:id\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(get_log))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_state</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">(state));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    println!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Router initialized, now listening on port {}\"</span><span style=\"color:#E1E4E8\">, port);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> addr </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> SocketAddr</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">from</span><span style=\"color:#E1E4E8\">(([</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">], port));</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Server</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">bind</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">addr)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">serve</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into_make_service</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .await</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">unwrap</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Since we're copying over all the files in our Dockerfile except for the <code>/target</code> output folder, our deployment process\nshould be bringing over our <code>/migrations</code> folder as well. One issue we'll run into, though, will be that our builds\nmight fail as sqlx will attempt to run compile-time checks against the target database that it won't necessarily have\nthe connectivity to at build-time. Let's add the <code>offline</code> feature to our manifest file, then run a\nquick <code>cargo sqlx prepare</code> in the terminal to cache the database metadata our <code>query_as!()</code> macros need to run those\ncompile-time checks.</p>\n<p>We should now see a <code>sqlx-data.json</code> file at the root of our project with some data about the tables, compiled queries,\nand a few other things. Again, since we're copying everything over during the container build process, we'll get this\nfile included by default. To get our docker builds successfully running, we'll need to do one of two things:</p>\n<ul>\n<li>Add the <code>SQLX_OFFLINE</code> environment variable to our <code>.env</code> file</li>\n<li>OR, tell docker to ignore <code>.env</code> files while copying over from source</li>\n</ul>\n<p>We'll go with option one, as there might be environment variables we'll want to load in eventually other than the\ndatabase URL, so we'll tell sqlx to use the cached metadata when building. Our <code>.env</code> file should look something like\nthis:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">DATABASE_URL</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">SQLX_OFFLINE</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">true</span></span></code></pre></figure>\n<p>Now if we build our container locally with a <code>make build</code> our build should run through successfully, giving us the green\nlight to deploy to fly. Let's do that now:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> fly deploy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># After a sifting through the build logs, we should see...</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">1</span><span style=\"color:#9ECBFF\"> desired,</span><span style=\"color:#79B8FF\"> 1</span><span style=\"color:#9ECBFF\"> placed,</span><span style=\"color:#79B8FF\"> 1</span><span style=\"color:#9ECBFF\"> healthy,</span><span style=\"color:#79B8FF\"> 0</span><span style=\"color:#9ECBFF\"> unhealthy</span><span style=\"color:#E1E4E8\"> [health </span><span style=\"color:#9ECBFF\">checks:</span><span style=\"color:#79B8FF\"> 1</span><span style=\"color:#9ECBFF\"> total]</span><span style=\"color:#79B8FF\"> --</span><span style=\"color:#F97583\">></span><span style=\"color:#9ECBFF\"> v15</span><span style=\"color:#9ECBFF\"> deployed</span><span style=\"color:#9ECBFF\"> successfully</span></span></code></pre></figure>\n<p>Your version may vary, but we've got fly's stamp of approval that the deployment was successful. Let's verify we're up\nand running with a few <code>curl</code>s:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\"> curl --header </span><span style=\"color:#9ECBFF\">\"Content-Type: application/json\"</span><span style=\"color:#E1E4E8\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">--request</span><span style=\"color:#9ECBFF\"> POST</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">--data </span><span style=\"color:#9ECBFF\">'{\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}'</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">https://flying-with-rust-and-postgres.fly.dev/logs</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">\"id\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#B392F0\">\"551a31a1-c7c0-4893-9185-7340a5bf31b3\"</span><span style=\"color:#B392F0\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># Now taking our ID and querying for the log...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#79B8FF\"> -l</span><span style=\"color:#9ECBFF\"> https://flying-with-rust-and-postgres.fly.dev/logs/551a31a1-c7c0-4893-9185-7340a5bf31b3</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">\"name\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#B392F0\">\"Pliny the Elder\"</span><span style=\"color:#B392F0\">,</span><span style=\"color:#B392F0\">\"notes\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#B392F0\">\"Like drinking the nectar of the gods...\"</span><span style=\"color:#B392F0\">}</span></span></code></pre></figure>\n<p>And just like, we're up and running with fly, Rust, and Postgres!</p>\n<h2>Wrapping up</h2>\n<p>In my quest for a developer-friendly hosting platform, I've been thoroughly satisfied with what fly offers. I'm excited\nto see what I can build, and without a doubt, I'll be looking for more excuses to host whatever I can with the platform.</p>\n<p>All of the code we wrote today you can find within\nmy <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-tech/tree/main/samples/with-fly-postgres\">blog samples</a>.</p>\n<p>Until next time, friends!</p>"
  },
  "_id": "2023/learning-to-fly-with-rust-postgres.md",
  "_raw": {
    "sourceFilePath": "2023/learning-to-fly-with-rust-postgres.md",
    "sourceFileName": "learning-to-fly-with-rust-postgres.md",
    "sourceFileDir": "2023",
    "contentType": "markdown",
    "flattenedPath": "2023/learning-to-fly-with-rust-postgres"
  },
  "type": "Post",
  "url": "/blog/2023/learning-to-fly-with-rust-postgres"
}