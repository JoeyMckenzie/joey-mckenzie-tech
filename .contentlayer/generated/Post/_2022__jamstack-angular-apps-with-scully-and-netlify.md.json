{
  "title": "JAMstack Angular apps with Scully and Netlify",
  "description": "Write, build, and deploy Angular applications as fully SEO-optimized static sites with Netlify and Netlify Functions!",
  "pubDate": "2022-02-22T08:00:00.000Z",
  "category": "angular",
  "heroImage": "/images/jamstack-angular-apps-with-scully/angular-scully-netlify-meme.jpg",
  "draft": false,
  "keywords": [
    "angular",
    "jamstack",
    "scully",
    "netlify"
  ],
  "body": {
    "raw": "\nThere's no denying that the [JAMstack](https://jamstack.org/) has taken the traditional web development world by\nstorm and turned our previous tried and true development models on their heads. The JAMstack is not _new_, per se,\nbut has become an increasingly popular approach to how we write and deploy web applications in the modern developer\nlandscape. With frameworks like Next.js, Nuxt, Gatsby, Hugo, and many others, we as developers have been given the\ntools to develop entirely serverless applications that run as static web apps in the browser.\n\n> Embrace \"serverless\" here with big air quotes - you're still running on someone's server, and your choice of hosting\n> provider will more than likely dictate just how \"serverless\" you can be\n\nAs Angular developers, we love our framework and everything it provides. Unfortunately, turning your Angular\napplication into a static web app is not as simple as one may like.\nWhile [Angular Universal](https://angular.io/guide/universal) does give us an officially supported devtool to turn our\nAngular apps into statically rendered pages, I've found it a bit on the configure-y side and not as simple to use as I'd\nlike compared to other frameworks like Next.js.\n\nWhat I'd wished I found earlier before going down my Angular JAMstack journey is [Scully](https://scully.io/), the\nAngular static site generator I never knew I needed and JAMstack tool that, quite frankly, is just plain fun to use.\n\n## JAMstack?\n\nYep, the JAMstack: **J**avaScript, **A**PIs, and **M**arkup. There's a thriving [community](https://jamstack.org/) of\ndevelopers embracing the JAMstack, so defer to them for the nitty gritty details. The JAMstack follows a general\nartchitecture:\n\n-   **M**arkup is pre-rendered at build time and served as static HTML and CSS\n-   **J**avaScript still provides all its native interactivity with the browser, while not bogging down the initial\n    rendering of our apps with retrieving JS bundles\n-   **A**PIs that provide data, processing, and whatever else we need from a backend server\n\nIn essence, JAMstack principles align to provide fast, reliable, scalable, and performant web applications for the\nmodern browser.\n\nWhat this means in practice when you write framework code for say, Next.js, we write our normal React code we'd normally\nwrite, with pages being rending in a static context - every element on the page is inspect-able in the browser, which\nmeans much more easily indexable by search engines.\n\n## What is Scully?\n\nScully is a tool/framework developed by community members for Angular that turns your Angular application into a\nstatically rendered website, with fully indexable HTML allowing for all the SEO optimization your heart desires while\nstill delivering on the development workflow we Angular developers love about the framework. While I claim to be no\nScully expert, I've built a few side project client sites using Scully, while having re-written this exact blog you're\nreading from Next to Scully.\n\nScully works on the premise of analyzing your application's routing and compiling a separate build artifact containing\nall scanned routes as individual `index.html` pages. While there's a lot more that goes on under the hood and a bit out\nof my knowledge realm, Scully effectively allows us to turn our Angular SPAs into fully static sites that load quickly\nto the browser, vastly improve SEO, allows improved search engine indexing, and the list goes on.\n\nThe Scully team has great documentation on using the tool, alongside a plethora of build plugins, both from Scully\nand the community, allowing you to tap into the Scully lifecycle at different points in the build process to\ncustomize\nthe generated static files to your need.\n\n## Hosting with Netlify\n\nWith Scully generating an entirely static version of our application, it becomes trivial to host such files on any\nstatic site hosting service. While there's a lot of great services out there, I prefer Netlify as it allows us to tap\ninto [Netlify Functions](https://functions.netlify.com/), serving as the `A` in JAMstack and giving us the ability to\nbuild serverless functions that our static Angular applications can call into, performing any work you'd normally do on\nthe server. Using Netlify, not _only_ are we able to host our Angular apps as fully static sites, but we can also build\nout a mesh of serverless functions that act as a backend-lite for any of our API-like needs! Who said you can't have\nyour cake and eat it too?\n\n## Getting started with Scully\n\nThis all sounds great, but let's jump into some code to see how we can make our Angular JAMstack dream a reality.\nLet's kick things off by creating a new Angular application with routing:\n\n```shell\nng new scully-netlify-angular-example --routing\n```\n\nScully utilizes the Angular router to crawl all of our application routes, allowing it to create individual servable\nHTML files by reading our router configuration. With our code scaffolding in place, let's add some simple components and\na few pages:\n\n```shell\ncd scully-netlify-angular-example\nng g c components/home --skip-tests\nng g c components/ping --skip-tests\nng g c components/data --skip-tests\n```\n\nWe're skipping testing for the purposes of this post. With our components in place, let's add them to\nour `app-routing.module.ts`:\n\n#### app-routing.module.ts\n\n```ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DataComponent, HomeComponent, PingComponent } from '@components';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HomeComponent,\n    },\n    {\n        path: 'ping',\n        component: PingComponent,\n    },\n    {\n        path: 'data',\n        component: DataComponent,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\nWith routes in place, let's implement a few services that will help facilitate talking to our Netlify functions\n(more on those in a bit). Let's implement two services: one for the `PingComponent` that will consume a `PingService` to\n_ping_ the server, and one for `DataComponent` to offload the responsibility of sending and receiving data from the\nserver.\n\n```shell\nng g s services/ping --skip-tests\nng g s services/data --skip-tests\n```\n\nSince we'll be utilizing a bit with `Observable`s, let's implement a service to clean up our streams once a component is\ndestroyed:\n\n```shell\nng g s services/unsubscribe --skip-tess\n```\n\nWhile we're at it, let's make a quick service to help us with our SEO to set page titles, update `<meta>`s, etc.\n\n```shell\nng g s services/document --skip-tests\n```\n\nWith our services in place and having no further dependencies (outside the standard Angular library), let's implement\ntheir code. First, our `UnsubscribeService`:\n\n#### unsubscribe.service.ts\n\n```ts\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class UnsubscribeService extends Subject<void> implements OnDestroy {\n    ngOnDestroy(): void {\n        this.next();\n        this.complete();\n    }\n}\n```\n\nAs we can see, our `UnsubscribeService` is no more than a glorified injectable `Subject` that emits nothing and simply\ncloses itself on service destruction. This will be helpful to close connections to `Observable`s we're `.subscribe()`ing\nto within our components. Next, let's put our `PingService` code in place:\n\n#### ping.service.ts\n\n```ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ServerResponse } from 'types';\nimport { catchError, delay, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { environment } from '@environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PingService {\n    constructor(private http: HttpClient) {}\n\n    pingServer() {\n        const baseUrl = `${environment.functionsBaseDomain}${environment.functionsBasePath}`;\n\n        return this.http.get<ServerResponse>(`${baseUrl}/ping`).pipe(\n            map((response) => response.message),\n            delay(1000),\n            catchError((error) => {\n                console.log(error);\n                return of('Whoops... an error occurred :(');\n            }),\n        );\n    }\n}\n```\n\nNext, our `DataService`:\n\n#### data.service.ts\n\n```ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '@environment';\nimport { EMPTY } from 'rxjs';\nimport { catchError, delay, map } from 'rxjs/operators';\nimport { ServerResponse } from 'types';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DataService {\n    constructor(private http: HttpClient) {}\n\n    sendDataToServer(name: string) {\n        const baseUrl = `${environment.functionsBaseDomain}${environment.functionsBasePath}`;\n\n        return this.http\n            .post<ServerResponse>(`${baseUrl}/data`, {\n                name,\n            })\n            .pipe(\n                delay(1000),\n                map((response) => response.message),\n                catchError((error) => {\n                    console.log(error);\n                    return EMPTY;\n                }),\n            );\n    }\n}\n```\n\nand finally,\n\n#### document.service.ts\n\n```ts\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Meta, MetaDefinition } from '@angular/platform-browser';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DocumentService {\n    private readonly rootTitle = 'Scully, Angular, and Netlify';\n\n    constructor(\n        @Inject(DOCUMENT) private readonly document: Document,\n        private meta: Meta,\n    ) {}\n\n    resetTitle(): void {\n        this.document.title = this.rootTitle;\n        this.meta.updateTag({\n            name: 'title',\n            content: this.rootTitle,\n        });\n    }\n\n    updateTitle(pageTitle: string): void {\n        this.document.title = `${this.rootTitle} - ${pageTitle}`;\n        this.meta.updateTag({\n            name: 'title',\n            content: pageTitle,\n        });\n    }\n\n    setMetaTags(tags: MetaDefinition[]) {\n        tags.map((t) => {\n            const existingTag = this.meta.getTag(t.id ?? '');\n            if (!existingTag) {\n                this.meta.addTag(t);\n            }\n        });\n    }\n}\n```\n\nThese services will be responsible for sending HTTP requests to our serverless functions.\nLet's add some code to our `ping` component:\n\n#### ping.component.ts\n\n```ts\nimport { Component, OnInit } from '@angular/core';\nimport { DocumentService, PingService, UnsubscribeService } from '@services';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-ping',\n    templateUrl: './ping.component.html',\n})\nexport class PingComponent implements OnInit {\n    message = 'pinging the server...';\n\n    constructor(\n        private documentService: DocumentService,\n        private pingService: PingService,\n        private unsubscribe$: UnsubscribeService,\n    ) {}\n\n    ngOnInit(): void {\n        this.documentService.updateTitle('ping');\n        this.documentService.setMetaTags([\n            {\n                name: 'author',\n                content: 'Joey McKenzie',\n            },\n        ]);\n\n        this.pingService\n            .pingServer()\n            .pipe(takeUntil(this.unsubscribe$))\n            .subscribe(\n                (message) =>\n                    (this.message = `response from server: ${message}`),\n            );\n    }\n}\n```\n\nand the markup:\n\n#### ping.component.html\n\n```html\n<p>{{ message }}</p>\n```\n\n`PingComponent` uses `PingService` to _ping_ the server for a response, then display said response in our browser.\nNext, `data.component.ts`:\n\n#### data.component.ts\n\n```ts\nimport { Component, OnInit } from '@angular/core';\nimport { DocumentService, DataService, UnsubscribeService } from '@services';\nimport { finalize, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-data',\n    templateUrl: './data.component.html',\n})\nexport class DataComponent implements OnInit {\n    loading = false;\n    response?: string;\n\n    constructor(\n        private documentService: DocumentService,\n        private dataService: DataService,\n        private unsubscribe$: UnsubscribeService,\n    ) {}\n\n    ngOnInit(): void {\n        this.documentService.updateTitle('data');\n    }\n\n    loadData() {\n        this.loading = true;\n\n        this.dataService\n            .sendDataToServer('Joey')\n            .pipe(\n                takeUntil(this.unsubscribe$),\n                finalize(() => (this.loading = false)),\n            )\n            .subscribe((response) => (this.response = response));\n    }\n}\n```\n\nI'm using alias imports in `@environment`, `@services`, and `@components` to make my import paths look tolerable. We do\nso by adding a `paths` node to `compilerOptions`:\n\n#### tsconfig.json\n\n```ts\n/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n    // ...other options,\n    \"compilerOptions\"\n:\n    {\n        // ...some more options,\n        \"paths\"\n    :\n        {\n            \"@components\"\n        :\n            [\"src/app/components/index.ts\"],\n                \"@services\"\n        :\n            [\"src/app/services/index.ts\"],\n                \"@environment\"\n        :\n            [\"src/environments/environment.ts\"]\n        }\n    }\n,\n}\n```\n\nWhere each `index.ts` file `exports` out either services or components in their relative directories and exports our\napplication environment configuration.\n\nWith that out of the way, let's wire up our components in the `HomeComponent` and add some links to navigate between\npages:\n\n#### home.component.ts\n\n```ts\nimport { Component, OnInit } from '@angular/core';\nimport { DocumentService } from '../../services/document.service';\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n})\nexport class HomeComponent implements OnInit {\n    constructor(private documentService: DocumentService) {}\n\n    ngOnInit(): void {\n        this.documentService.resetTitle();\n    }\n}\n```\n\nand with markup,\n\n#### home.component.html\n\n```html\n<div class=\"flex flex-row space-x-4\">\n    <a routerLink=\"/ping\">\n        <button\n            type=\"button\"\n            class=\"inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700\"\n        >\n            Ping\n        </button>\n    </a>\n    <a routerLink=\"/data\">\n        <button\n            type=\"button\"\n            class=\"inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700\"\n        >\n            Data\n        </button>\n    </a>\n</div>\n```\n\nWhile we're at it, let's go ahead and update `app.component.html` with some routing:\n\n#### app.component.html\n\n```html\n<router-outlet></router-outlet>\n<div class=\"flex flex-row justify-center pt-12\">\n    <a routerLink=\"/\">\n        <button\n            type=\"button\"\n            class=\"inline-flex items-center rounded-md border border-transparent bg-red-500 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700\"\n        >\n            Home\n        </button>\n    </a>\n</div>\n```\n\nI'm using Tailwind out of habit, and not required for the purposes of this example by any means. Let's kick off our dev\nserver and we should see after navigating to `localhost:4200` a page in our browser with three buttons: ping, data, and\nhome.\n\n![Home page](/images/jamstack-angular-apps-with-scully/home_page.png)\n\nWith devtools open, if we click the ping button that routes us to the page with our `PingComponent`, we get an error due\nto a failed HTTP request to `http://localhost:9999/.netlify/functions/ping`, and the same happens when we click the data\nbutton to navigate to the page with our `DataComponent` and click the `Load data` button. Our services are correctly\ncalling out to our serverless functions, but there's one problem: we don't have any functions!\n\n## Going serverless with Netlify Functions\n\nIf you're familiar with static site hosting services, [Netlify](https://www.netlify.com/) is another one of those\nwith much, much more to offer than simple site hosting. One of my favorite features of Netlify\nis [Netlify Functions](https://functions.netlify.com/) - Netlify's version of serverless functions that utilize AWS\nlambda functions behind the scenes to provide an easy way to integrate backend functionality with our statically served\nweb apps. I've found serverless functions helpful in quite a few different ways:\n\n-   Sending out emails using email API services\n-   Integrating with third-party APIs to do some processing for frontend requests\n-   Serving simple data to be consumed from the frontend\n-   Heck, even persisting to database based on requests from our frontend applications\n\nOur serverless functions will _serve_, more or less, as an API-lite for our static served Angular Scully application\nthat will be hosted in Netlify, allowing us to connect our outgoing HTTP calls from the frontend to the backend\nfunctions listening for requests. Functions work on the premise of running code at a specified endpoint that receive\nHTTP events (methods, headers, request body, etc.) and the context of the HTTP request (metadata about the function\nitself). There's a lot we can customize around the way our functions are detected, served, and ran, but we'll utilize\nall the defaults for now.\n\nTo get started writing functions, let's go ahead and install the Netlify Functions package and the Netlify CLI to help\nus write and serve our functions:\n\n```shell\nnpm install @netlify/functions\nnpm install --save-dev netlify-cli # -g if you'd like to install globally\n```\n\nUsing the CLI, let's add an npm script in our `package.json` we can run to start our function server that will detect\nany code changes we apply while writing our functions, recompile them, and serve them up for our frontend to call into:\n\n```json\n{\n    // ...other stuff\n    \"scripts\": {\n        // ...other scripts\n        \"functions:serve\": \"netlify functions:serve\"\n    }\n}\n```\n\nIf we run:\n\n```shell\nnpm run functions:serve\n```\n\nwe should see a message in our console along the lines of ready to serve, but no functions available. Since we've haven'\nt provided any customized configuration for our functions, the CLI assumes your functions exist under\na `/netlify/functions` folder at the root of your project. Let's implement a `/ping` GET endpoint using TypeScript that\nwill tap into the functionality provided by the `@netlify/functions` package to start listening for requests:\n\n#### netlify/functions/ping.ts\n\n```ts\nimport { Handler } from '@netlify/functions';\nimport {\n    getErrorResponse,\n    getHeaders,\n    HttpStatus,\n    isWhitelistedDomain,\n} from '../lib';\nimport { ServerResponse } from 'types';\n\nconst handler: Handler = async (event) => {\n    const origin = event.headers.origin ?? '';\n\n    if (!isWhitelistedDomain(origin)) {\n        return getErrorResponse(HttpStatus.Forbidden);\n    }\n\n    if (event.httpMethod.toLowerCase() !== 'get') {\n        return getErrorResponse(HttpStatus.MethodNotAllowed);\n    }\n\n    const response: ServerResponse = {\n        success: true,\n        message: 'pong',\n    };\n\n    return {\n        statusCode: 200,\n        body: JSON.stringify(response),\n        headers: getHeaders(origin),\n    };\n};\n\nexport { handler };\n```\n\nI've added some common code that I'll be sharing between functions and have moved that to a `lib` folder with a\nsingle `index.ts` file:\n\n#### netlify/lib/index.ts\n\n```ts\nimport { Response } from '@netlify/functions/dist/function/response';\nimport { ServerResponse } from 'types';\n\nenum HttpStatus {\n    Forbidden = '403',\n    MethodNotAllowed = '405',\n    InternalServerError = '500',\n}\n\nconst WHITELIST_DOMAINS = [\n    '', // Postman doesn't send request from an origin, allow it through (DON'T DO THIS IN PRODUCTION)\n    'http://localhost:4200', // Whitelist our Angular dev serve for local development\n    'http://localhost:1668', // Whitelist our Scully server for local Scully development\n    'https://asdfasdf.netlify.app', // Whitelist our production server deployed to Netlify\n];\n\nfunction getHeaders(origin: string): { [key: string]: string } {\n    return {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': origin,\n        'Access-Control-Allow-Headers': '*',\n    };\n}\n\nfunction isNullOrUndefined(\n    objectToValidate?: unknown | null | undefined,\n): boolean {\n    return objectToValidate === null || objectToValidate === undefined;\n}\n\nfunction isWhitelistedDomain(origin: string): boolean {\n    const existingDomain = WHITELIST_DOMAINS.find((d) => d === origin);\n    return !isNullOrUndefined(existingDomain);\n}\n\nfunction getErrorResponse(statusCode: HttpStatus): Response {\n    let message: string;\n\n    switch (statusCode) {\n        case HttpStatus.Forbidden:\n            message = 'That method is not allowed for this endpoint.';\n            break;\n        case HttpStatus.MethodNotAllowed:\n            message = 'Domain is forbidden from accessing.';\n            break;\n        default:\n            message = 'An invalid request was made, please try again.';\n    }\n\n    return {\n        statusCode: +statusCode,\n        body: JSON.stringify({\n            success: false,\n            message,\n        } as ServerResponse),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n}\n\nexport { getErrorResponse, getHeaders, isWhitelistedDomain, HttpStatus };\n```\n\nNothing too complicated, just a few simple helpers to facilitate validating allowed origins for CORS, some common\nresponse generators, and a method to grab some default headers for each response. I've also reused the `ServerResponse`\ntype under the `types.ts` file at the root of our project:\n\n```ts\nexport type ServerResponse = {\n    message: string;\n    success: boolean;\n};\n```\n\nSince our project is effectively just a big TypeScript solution (Angular frontend, TS-based serverless functions),\nwe can import any `.ts` files into our serverless functions, given it runs in the correct context. I wouldn't want\nto reference any `@angular/*` imports, for obvious reasons. With our `ServerResponse` in place, we've created a\ncommon statically typed-model between the front and backend of our project!\n\nAs you might have guessed, the names and pathing of our function `.ts` files _does_ matter in our case. There's a few\nsimple rules to adhere to when creating function endpoints\n\n-   `netlify/functions/ping.ts` would receive HTTP request matching the route `/.netlify/functions/ping`\n-   `netlify/functions/ping/index.ts` would _also_ receive HTTP request matching the route `/.netlify/functions/ping`\n-   `netlify/functions/ping/ping.ts` would, again, _also_ receive HTTP request matching the\n    route `/.netlify/functions/ping`\n\nNow that we have our first function in place, let's go ahead and start our function server:\n\n```shell\nnpm run functions:serve\n```\n\nand in the terminal, we should see a message like the following:\n\n```shell\n> scully-netlify-angular-example@0.0.0 netlify:serve\n> netlify functions:serve\n\n◈ Ignored general context env var: LANG (defined in process)\n◈ Loaded function ping.\n◈ Functions server is listening on 9999\n```\n\nTo test out that our functions are working correctly, let's startup Postman and send a request to\n`http://localhost:9999/.netlify/functions/ping` and see what we get:\n\n![Postman ping response](/images/jamstack-angular-apps-with-scully/postman_ping.png)\n\nWe've got a response! Now that our GET endpoint is working, let's add a POST endpoint that will receive requests with\ndata in the body and return data based on it:\n\n#### netlify/functions/data/index.ts\n\n```ts\nimport { Handler } from '@netlify/functions';\nimport {\n    getErrorResponse,\n    getHeaders,\n    HttpStatus,\n    isWhitelistedDomain,\n} from '../../lib';\nimport { ServerResponse } from 'types';\n\nconst handler: Handler = async (event) => {\n    const origin = event.headers.origin ?? '';\n\n    if (!isWhitelistedDomain(origin)) {\n        return getErrorResponse(HttpStatus.Forbidden);\n    }\n\n    const method = event.httpMethod.toLowerCase();\n\n    if (method !== 'options' && method !== 'post') {\n        return getErrorResponse(HttpStatus.MethodNotAllowed);\n    }\n\n    /**\n     * Because we have a more complex request (JSON being sent over the wire),\n     * an options call is made by the Angular HTTP client service to check with our function\n     * that it's okay to receive requests in the current context.\n     */\n    if (method === 'options') {\n        return {\n            statusCode: 200,\n            headers: getHeaders(origin),\n        };\n    }\n\n    if (event.body) {\n        const requestBody: { name: string } = JSON.parse(event.body);\n\n        const response: ServerResponse = {\n            success: true,\n            message: `Hello ${requestBody.name}!`,\n        };\n\n        return {\n            statusCode: 200,\n            body: JSON.stringify(response),\n            headers: getHeaders(origin),\n        };\n    }\n\n    return getErrorResponse(HttpStatus.InternalServerError);\n};\n\nexport { handler };\n```\n\nUtilizing our helper methods again, since this is a POST request with more complex request headers (as we can\ninspect in the network tab attached for us using `HttpClient`), the client will make a pre-flight OPTIONS call to our\nfunction endpoint to essentially ask the question, \"hey, this client application wants to make a request to you, is that\ncool?\". We kick out any requests that are not POSTs or OPTIONs (again, normal HTTP framework code would take care of\nthis for you, but we're running a bare bones server here) and accept the POST request body, returning the value of\nthe `name` attribute given to us in a simple greeting. By adding this function with our server still running, Netlify\nrecognizes a new function was added, and then compiles the output and serves it up under the `/.netlify/functions/data`\nendpoint. Let's give it a try with Postman:\n\n![Postman data response](/images/jamstack-angular-apps-with-scully/postman_data.png)\n\nNice! Now with our functions fully operational and our server running, let's start our Angular server (if it wasn't\nalready running), and watch the magic happen:\n\n[Angular Netlify functions](/images/jamstack-angular-apps-with-scully/scully-jamstack-running.webm)\n\nWe've got ourselves a working solution! So far we've spun up our Angular application that calls into our serverless\nfunctions, but we're missing one final piece to _truly_ be considered JAMstack: Scully.\n\n## Adding Scully to the project\n\nTo get started, the Scully team has made it dead simple to add static site generation to our\nAngular apps with a simple schematic. With the terminal open, let's run said schematic:\n\n```shell\nng add @scullyio/init\n```\n\nThe schematic will add a few Scully dependencies to our project, as well as generate\na `scully.{{projectName}}. config.ts` file with the following:\n\n```ts\nimport { ScullyConfig } from '@scullyio/scully';\n\n/** this loads the default render plugin, remove when switching to something else. */\nimport '@scullyio/scully-plugin-puppeteer';\n\nexport const config: ScullyConfig = {\n    projectRoot: './src',\n    projectName: 'scully-netlify-angular-example',\n    outDir: './dist/static',\n    routes: {},\n};\n```\n\nTo make things easy on us, let's add a few build scripts to our `scripts` section in our `package.json`:\n\n```json\n{\n    \"scripts\": {\n        // ...other scripts\n        \"build:scully\": \"cross-env NODE_ENV=scully ng build -c scully && npx scully --scanRoutes\",\n        \"build:production\": \"cross-env NODE_ENV=production ng build -c production && npx scully --scanRoutes\",\n        \"scully\": \"npx scully --\",\n        \"scully:serve\": \"npx scully serve --\"\n    }\n}\n```\n\nI'm using `cross-env` to assist with Tailwind purging, but as of this writing seems to no longer be needed for\nTailwind projects targeting version 3 and up. With our scripts in place, let's go ahead and run the Scully command to\ngenerate\na static version of our Angular app:\n\n```shell\nnpm run scully\n```\n\nOnce the Scully build completes, take a look at your `/dist` output folder. We should see a\n`dist/static` folder with `ping` and `data` subdirectories that contain single `index.html` files.\nThe Scully dev server will _serve_ these static HTML files with all of our Angular code functionality\nfully intact. Pretty neat, huh? Let's run the dev server:\n\n```shell\nnpm run scully:serve\n```\n\nand once the server is spun up, if we navigate to `localhost:1668` in our browser, we should see the same\npage that is being served by our usual `ng serve` command! Inspecting the page, we see a fully generated static HTML\npage, markup and all.\n\n## Putting it all together\n\nWith our Scully server running, we should still be able to hit our Netlify functions server (assuming it's still\nrunning), receiving the same responses we saw from serving the de-Scully'd version of our application. While it may\nnot _seem_ like much, let's take a second to realize what's going on:\n\n-   We have a serverless backend stood up ready to receive HTTP requests and do any server related processing with\n    _zero_ backend frameworks in place\n-   We have a fully static version of our Angular application running in the browser optimized for SEO and indexing by\n    search engines\n-   To top it off, we're doing all of this within the same repository code!\n\nWhile we're only scratching the surface of what's possible with Angular, Scully, and Netlify Functions, the DX\noffered by these tools allows us to quickly develop and ship static websites with rich functionality and data fetching\ncapability, all without implementing an entirely separate API layer in another framework. Our solution is _also_\nfully ready to deploy to Netlify, where our serverless functions will kick in, handling requests from our static Angular\napp deployed to the DSN of our choice. If you're looking to\nembrace the JAMstack with Angular, take Scully and Netlify Functions for a spin!\n",
    "html": "<p>There's no denying that the <a href=\"https://jamstack.org/\">JAMstack</a> has taken the traditional web development world by\nstorm and turned our previous tried and true development models on their heads. The JAMstack is not <em>new</em>, per se,\nbut has become an increasingly popular approach to how we write and deploy web applications in the modern developer\nlandscape. With frameworks like Next.js, Nuxt, Gatsby, Hugo, and many others, we as developers have been given the\ntools to develop entirely serverless applications that run as static web apps in the browser.</p>\n<blockquote>\n<p>Embrace \"serverless\" here with big air quotes - you're still running on someone's server, and your choice of hosting\nprovider will more than likely dictate just how \"serverless\" you can be</p>\n</blockquote>\n<p>As Angular developers, we love our framework and everything it provides. Unfortunately, turning your Angular\napplication into a static web app is not as simple as one may like.\nWhile <a href=\"https://angular.io/guide/universal\">Angular Universal</a> does give us an officially supported devtool to turn our\nAngular apps into statically rendered pages, I've found it a bit on the configure-y side and not as simple to use as I'd\nlike compared to other frameworks like Next.js.</p>\n<p>What I'd wished I found earlier before going down my Angular JAMstack journey is <a href=\"https://scully.io/\">Scully</a>, the\nAngular static site generator I never knew I needed and JAMstack tool that, quite frankly, is just plain fun to use.</p>\n<h2>JAMstack?</h2>\n<p>Yep, the JAMstack: <strong>J</strong>avaScript, <strong>A</strong>PIs, and <strong>M</strong>arkup. There's a thriving <a href=\"https://jamstack.org/\">community</a> of\ndevelopers embracing the JAMstack, so defer to them for the nitty gritty details. The JAMstack follows a general\nartchitecture:</p>\n<ul>\n<li><strong>M</strong>arkup is pre-rendered at build time and served as static HTML and CSS</li>\n<li><strong>J</strong>avaScript still provides all its native interactivity with the browser, while not bogging down the initial\nrendering of our apps with retrieving JS bundles</li>\n<li><strong>A</strong>PIs that provide data, processing, and whatever else we need from a backend server</li>\n</ul>\n<p>In essence, JAMstack principles align to provide fast, reliable, scalable, and performant web applications for the\nmodern browser.</p>\n<p>What this means in practice when you write framework code for say, Next.js, we write our normal React code we'd normally\nwrite, with pages being rending in a static context - every element on the page is inspect-able in the browser, which\nmeans much more easily indexable by search engines.</p>\n<h2>What is Scully?</h2>\n<p>Scully is a tool/framework developed by community members for Angular that turns your Angular application into a\nstatically rendered website, with fully indexable HTML allowing for all the SEO optimization your heart desires while\nstill delivering on the development workflow we Angular developers love about the framework. While I claim to be no\nScully expert, I've built a few side project client sites using Scully, while having re-written this exact blog you're\nreading from Next to Scully.</p>\n<p>Scully works on the premise of analyzing your application's routing and compiling a separate build artifact containing\nall scanned routes as individual <code>index.html</code> pages. While there's a lot more that goes on under the hood and a bit out\nof my knowledge realm, Scully effectively allows us to turn our Angular SPAs into fully static sites that load quickly\nto the browser, vastly improve SEO, allows improved search engine indexing, and the list goes on.</p>\n<p>The Scully team has great documentation on using the tool, alongside a plethora of build plugins, both from Scully\nand the community, allowing you to tap into the Scully lifecycle at different points in the build process to\ncustomize\nthe generated static files to your need.</p>\n<h2>Hosting with Netlify</h2>\n<p>With Scully generating an entirely static version of our application, it becomes trivial to host such files on any\nstatic site hosting service. While there's a lot of great services out there, I prefer Netlify as it allows us to tap\ninto <a href=\"https://functions.netlify.com/\">Netlify Functions</a>, serving as the <code>A</code> in JAMstack and giving us the ability to\nbuild serverless functions that our static Angular applications can call into, performing any work you'd normally do on\nthe server. Using Netlify, not <em>only</em> are we able to host our Angular apps as fully static sites, but we can also build\nout a mesh of serverless functions that act as a backend-lite for any of our API-like needs! Who said you can't have\nyour cake and eat it too?</p>\n<h2>Getting started with Scully</h2>\n<p>This all sounds great, but let's jump into some code to see how we can make our Angular JAMstack dream a reality.\nLet's kick things off by creating a new Angular application with routing:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> new</span><span style=\"color:#C98A7D\"> scully-netlify-angular-example</span><span style=\"color:#C99076\"> --routing</span></span></code></pre></figure>\n<p>Scully utilizes the Angular router to crawl all of our application routes, allowing it to create individual servable\nHTML files by reading our router configuration. With our code scaffolding in place, let's add some simple components and\na few pages:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B8A965\">cd</span><span style=\"color:#C98A7D\"> scully-netlify-angular-example</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> c</span><span style=\"color:#C98A7D\"> components/home</span><span style=\"color:#C99076\"> --skip-tests</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> c</span><span style=\"color:#C98A7D\"> components/ping</span><span style=\"color:#C99076\"> --skip-tests</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> c</span><span style=\"color:#C98A7D\"> components/data</span><span style=\"color:#C99076\"> --skip-tests</span></span></code></pre></figure>\n<p>We're skipping testing for the purposes of this post. With our components in place, let's add them to\nour <code>app-routing.module.ts</code>:</p>\n<h4>app-routing.module.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NgModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> RouterModule</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Routes</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/router</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DataComponent</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HomeComponent</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> PingComponent</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@components</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">routes</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Routes</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        path</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        component</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">HomeComponent</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        path</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">ping</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        component</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">PingComponent</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        path</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">data</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        component</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">DataComponent</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">];</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">NgModule</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    imports</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">RouterModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forRoot</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">routes</span><span style=\"color:#666666\">)],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    exports</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">RouterModule</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> AppRoutingModule</span><span style=\"color:#666666\"> {}</span></span></code></pre></figure>\n<p>With routes in place, let's implement a few services that will help facilitate talking to our Netlify functions\n(more on those in a bit). Let's implement two services: one for the <code>PingComponent</code> that will consume a <code>PingService</code> to\n<em>ping</em> the server, and one for <code>DataComponent</code> to offload the responsibility of sending and receiving data from the\nserver.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> s</span><span style=\"color:#C98A7D\"> services/ping</span><span style=\"color:#C99076\"> --skip-tests</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> s</span><span style=\"color:#C98A7D\"> services/data</span><span style=\"color:#C99076\"> --skip-tests</span></span></code></pre></figure>\n<p>Since we'll be utilizing a bit with <code>Observable</code>s, let's implement a service to clean up our streams once a component is\ndestroyed:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> s</span><span style=\"color:#C98A7D\"> services/unsubscribe</span><span style=\"color:#C99076\"> --skip-tess</span></span></code></pre></figure>\n<p>While we're at it, let's make a quick service to help us with our SEO to set page titles, update <code>&#x3C;meta></code>s, etc.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> s</span><span style=\"color:#C98A7D\"> services/document</span><span style=\"color:#C99076\"> --skip-tests</span></span></code></pre></figure>\n<p>With our services in place and having no further dependencies (outside the standard Angular library), let's implement\ntheir code. First, our <code>UnsubscribeService</code>:</p>\n<h4>unsubscribe.service.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnDestroy</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Subject</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UnsubscribeService</span><span style=\"color:#CB7676\"> extends</span><span style=\"color:#80A665\"> Subject</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">void</span><span style=\"color:#666666\">></span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnDestroy</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnDestroy</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">next</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">complete</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>As we can see, our <code>UnsubscribeService</code> is no more than a glorified injectable <code>Subject</code> that emits nothing and simply\ncloses itself on service destruction. This will be helpful to close connections to <code>Observable</code>s we're <code>.subscribe()</code>ing\nto within our components. Next, let's put our <code>PingService</code> code in place:</p>\n<h4>ping.service.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> HttpClient</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/common/http</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ServerResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> catchError</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> delay</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> map</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> of</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> environment</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@environment</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providedIn</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">root</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> PingService</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> http</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">HttpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    pingServer</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">baseUrl</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> `</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">environment</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">functionsBaseDomain</span><span style=\"color:#666666\">}${</span><span style=\"color:#C98A7D\">environment</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">functionsBasePath</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">http</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">ServerResponse</span><span style=\"color:#666666\">>(</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">baseUrl</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">/ping</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            map</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            delay</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1000</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            catchError</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">log</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#80A665\"> of</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Whoops... an error occurred :(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Next, our <code>DataService</code>:</p>\n<h4>data.service.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> HttpClient</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/common/http</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> environment</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@environment</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> EMPTY</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> catchError</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> delay</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> map</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ServerResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providedIn</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">root</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DataService</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> http</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">HttpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    sendDataToServer</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">name</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">baseUrl</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> `</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">environment</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">functionsBaseDomain</span><span style=\"color:#666666\">}${</span><span style=\"color:#C98A7D\">environment</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">functionsBasePath</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">http</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">post</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">ServerResponse</span><span style=\"color:#666666\">>(</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">baseUrl</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">/data</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            })</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                delay</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1000</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                map</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                catchError</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">log</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    return</span><span style=\"color:#BD976A\"> EMPTY</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and finally,</p>\n<h4>document.service.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DOCUMENT</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/common</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Inject</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Meta</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> MetaDefinition</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/platform-browser</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providedIn</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">root</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DocumentService</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#BD976A\"> rootTitle</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Scully, Angular, and Netlify</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        @</span><span style=\"color:#80A665\">Inject</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">DOCUMENT</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#BD976A\"> document</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Document</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> meta</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Meta</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    resetTitle</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">document</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">rootTitle</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">meta</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">updateTag</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            name</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            content</span><span style=\"color:#666666\">: </span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">rootTitle</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    updateTitle</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">pageTitle</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">):</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">document</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> `</span><span style=\"color:#666666\">${</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">rootTitle</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> - </span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">pageTitle</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">meta</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">updateTag</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            name</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            content</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">pageTitle</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    setMetaTags</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">tags</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">MetaDefinition</span><span style=\"color:#666666\">[])</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        tags</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">map</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">t</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            const </span><span style=\"color:#BD976A\">existingTag</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">meta</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getTag</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">t</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">id</span><span style=\"color:#CB7676\"> ?? </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">existingTag</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">                this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">meta</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">addTag</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">t</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>These services will be responsible for sending HTTP requests to our serverless functions.\nLet's add some code to our <code>ping</code> component:</p>\n<h4>ping.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DocumentService</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> PingService</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> UnsubscribeService</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@services</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> takeUntil</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">app-ping</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./ping.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> PingComponent</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnInit</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    message</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">pinging the server...</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> documentService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">DocumentService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> pingService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">PingService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> unsubscribe$</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">UnsubscribeService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnInit</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">documentService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">updateTitle</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">ping</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">documentService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">setMetaTags</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                name</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">author</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                content</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Joey McKenzie</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">pingService</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">pingServer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">takeUntil</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">unsubscribe$</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                (</span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    (</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> `</span><span style=\"color:#C98A7D\">response from server: </span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and the markup:</p>\n<h4>ping.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">{{ message }}</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p><code>PingComponent</code> uses <code>PingService</code> to <em>ping</em> the server for a response, then display said response in our browser.\nNext, <code>data.component.ts</code>:</p>\n<h4>data.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DocumentService</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> DataService</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> UnsubscribeService</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@services</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> finalize</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> takeUntil</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">app-data</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./data.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DataComponent</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnInit</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    loading</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    response</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> documentService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">DocumentService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> dataService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">DataService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> unsubscribe$</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">UnsubscribeService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnInit</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">documentService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">updateTitle</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">data</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    loadData</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">loading</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> true</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">dataService</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">sendDataToServer</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Joey</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                takeUntil</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">unsubscribe$</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                finalize</span><span style=\"color:#666666\">(()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> (</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">loading</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">)),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            )</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> (</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I'm using alias imports in <code>@environment</code>, <code>@services</code>, and <code>@components</code> to make my import paths look tolerable. We do\nso by adding a <code>paths</code> node to <code>compilerOptions</code>:</p>\n<h4>tsconfig.json</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">/* To learn more about this file see: https://angular.io/config/tsconfig. */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // ...other options,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#C98A7D\">compilerOptions</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">:</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // ...some more options,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">paths</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    :</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#C98A7D\">@components</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        :</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            [</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">src/app/components/index.ts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                \"</span><span style=\"color:#C98A7D\">@services</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        :</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            [</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">src/app/services/index.ts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                \"</span><span style=\"color:#C98A7D\">@environment</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        :</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            [</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">src/environments/environment.ts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Where each <code>index.ts</code> file <code>exports</code> out either services or components in their relative directories and exports our\napplication environment configuration.</p>\n<p>With that out of the way, let's wire up our components in the <code>HomeComponent</code> and add some links to navigate between\npages:</p>\n<h4>home.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DocumentService</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../../services/document.service</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">app-home</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./home.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> HomeComponent</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnInit</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> documentService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">DocumentService</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnInit</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">documentService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">resetTitle</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and with markup,</p>\n<h4>home.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex flex-row space-x-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span><span style=\"color:#BD976A\"> routerLink</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/ping</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Ping</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span><span style=\"color:#BD976A\"> routerLink</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/data</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Data</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>While we're at it, let's go ahead and update <code>app.component.html</code> with some routing:</p>\n<h4>app.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">router-outlet</span><span style=\"color:#666666\">>&#x3C;/</span><span style=\"color:#4D9375\">router-outlet</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex flex-row justify-center pt-12</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span><span style=\"color:#BD976A\"> routerLink</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex items-center rounded-md border border-transparent bg-red-500 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Home</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>I'm using Tailwind out of habit, and not required for the purposes of this example by any means. Let's kick off our dev\nserver and we should see after navigating to <code>localhost:4200</code> a page in our browser with three buttons: ping, data, and\nhome.</p>\n<p><img src=\"/images/jamstack-angular-apps-with-scully/home_page.png\" alt=\"Home page\"></p>\n<p>With devtools open, if we click the ping button that routes us to the page with our <code>PingComponent</code>, we get an error due\nto a failed HTTP request to <code>http://localhost:9999/.netlify/functions/ping</code>, and the same happens when we click the data\nbutton to navigate to the page with our <code>DataComponent</code> and click the <code>Load data</code> button. Our services are correctly\ncalling out to our serverless functions, but there's one problem: we don't have any functions!</p>\n<h2>Going serverless with Netlify Functions</h2>\n<p>If you're familiar with static site hosting services, <a href=\"https://www.netlify.com/\">Netlify</a> is another one of those\nwith much, much more to offer than simple site hosting. One of my favorite features of Netlify\nis <a href=\"https://functions.netlify.com/\">Netlify Functions</a> - Netlify's version of serverless functions that utilize AWS\nlambda functions behind the scenes to provide an easy way to integrate backend functionality with our statically served\nweb apps. I've found serverless functions helpful in quite a few different ways:</p>\n<ul>\n<li>Sending out emails using email API services</li>\n<li>Integrating with third-party APIs to do some processing for frontend requests</li>\n<li>Serving simple data to be consumed from the frontend</li>\n<li>Heck, even persisting to database based on requests from our frontend applications</li>\n</ul>\n<p>Our serverless functions will <em>serve</em>, more or less, as an API-lite for our static served Angular Scully application\nthat will be hosted in Netlify, allowing us to connect our outgoing HTTP calls from the frontend to the backend\nfunctions listening for requests. Functions work on the premise of running code at a specified endpoint that receive\nHTTP events (methods, headers, request body, etc.) and the context of the HTTP request (metadata about the function\nitself). There's a lot we can customize around the way our functions are detected, served, and ran, but we'll utilize\nall the defaults for now.</p>\n<p>To get started writing functions, let's go ahead and install the Netlify Functions package and the Netlify CLI to help\nus write and serve our functions:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C98A7D\"> @netlify/functions</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C99076\"> --save-dev</span><span style=\"color:#C98A7D\"> netlify-cli</span><span style=\"color:#758575DD\"> # -g if you'd like to install globally</span></span></code></pre></figure>\n<p>Using the CLI, let's add an npm script in our <code>package.json</code> we can run to start our function server that will detect\nany code changes we apply while writing our functions, recompile them, and serve them up for our frontend to call into:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // ...other stuff</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">scripts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // ...other scripts</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">functions:serve</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">netlify functions:serve</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>If we run:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> run</span><span style=\"color:#C98A7D\"> functions:serve</span></span></code></pre></figure>\n<p>we should see a message in our console along the lines of ready to serve, but no functions available. Since we've haven'\nt provided any customized configuration for our functions, the CLI assumes your functions exist under\na <code>/netlify/functions</code> folder at the root of your project. Let's implement a <code>/ping</code> GET endpoint using TypeScript that\nwill tap into the functionality provided by the <code>@netlify/functions</code> package to start listening for requests:</p>\n<h4>netlify/functions/ping.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Handler</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@netlify/functions</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    getErrorResponse</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    getHeaders</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    HttpStatus</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    isWhitelistedDomain</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ServerResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#80A665\">handler</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Handler</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> async </span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">headers</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#CB7676\"> ?? </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#80A665\">isWhitelistedDomain</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">))</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Forbidden</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">httpMethod</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">toLowerCase</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> !== </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">get</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">MethodNotAllowed</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">ServerResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        success</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        message</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">pong</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        statusCode</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">200</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        body</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">JSON</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">stringify</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        headers</span><span style=\"color:#666666\">: </span><span style=\"color:#80A665\">getHeaders</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> handler</span><span style=\"color:#666666\"> };</span></span></code></pre></figure>\n<p>I've added some common code that I'll be sharing between functions and have moved that to a <code>lib</code> folder with a\nsingle <code>index.ts</code> file:</p>\n<h4>netlify/lib/index.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Response</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@netlify/functions/dist/function/response</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ServerResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">enum</span><span style=\"color:#5DA994\"> HttpStatus</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    Forbidden</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">403</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    MethodNotAllowed</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">405</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    InternalServerError</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">500</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">WHITELIST_DOMAINS</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    ''</span><span style=\"color:#666666\">,</span><span style=\"color:#758575DD\"> // Postman doesn't send request from an origin, allow it through (DON'T DO THIS IN PRODUCTION)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    '</span><span style=\"color:#C98A7D\">http://localhost:4200</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#758575DD\"> // Whitelist our Angular dev serve for local development</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    '</span><span style=\"color:#C98A7D\">http://localhost:1668</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#758575DD\"> // Whitelist our Scully server for local Scully development</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    '</span><span style=\"color:#C98A7D\">https://asdfasdf.netlify.app</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#758575DD\"> // Whitelist our production server deployed to Netlify</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">];</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">function</span><span style=\"color:#80A665\"> getHeaders</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">):</span><span style=\"color:#666666\"> {</span><span style=\"color:#666666\"> [</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">]: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\"> }</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        '</span><span style=\"color:#C98A7D\">Content-Type</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">application/json</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        '</span><span style=\"color:#C98A7D\">Access-Control-Allow-Origin</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        '</span><span style=\"color:#C98A7D\">Access-Control-Allow-Headers</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">*</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">function</span><span style=\"color:#80A665\"> isNullOrUndefined</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    objectToValidate</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">unknown</span><span style=\"color:#666666\"> | </span><span style=\"color:#CB7676\">null</span><span style=\"color:#666666\"> | </span><span style=\"color:#CB7676\">undefined</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">):</span><span style=\"color:#5DA994\"> boolean</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> objectToValidate</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#CB7676\"> ||</span><span style=\"color:#BD976A\"> objectToValidate</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#CB7676\"> undefined</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">function</span><span style=\"color:#80A665\"> isWhitelistedDomain</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">):</span><span style=\"color:#5DA994\"> boolean</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">existingDomain</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> WHITELIST_DOMAINS</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">find</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">d</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> d</span><span style=\"color:#CB7676\"> === </span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#CB7676\"> !</span><span style=\"color:#80A665\">isNullOrUndefined</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">existingDomain</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">function</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">statusCode</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">HttpStatus</span><span style=\"color:#666666\">):</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let </span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    switch</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">statusCode</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        case</span><span style=\"color:#BD976A\"> HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Forbidden</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">That method is not allowed for this endpoint.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            break</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        case</span><span style=\"color:#BD976A\"> HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">MethodNotAllowed</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Domain is forbidden from accessing.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            break</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        default</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">An invalid request was made, please try again.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        statusCode</span><span style=\"color:#666666\">: </span><span style=\"color:#CB7676\">+</span><span style=\"color:#BD976A\">statusCode</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        body</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">JSON</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">stringify</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            success</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        } </span><span style=\"color:#4D9375\">as</span><span style=\"color:#5DA994\"> ServerResponse</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        headers</span><span style=\"color:#666666\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">Content-Type</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">application/json</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> getErrorResponse</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> getHeaders</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> isWhitelistedDomain</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HttpStatus</span><span style=\"color:#666666\"> };</span></span></code></pre></figure>\n<p>Nothing too complicated, just a few simple helpers to facilitate validating allowed origins for CORS, some common\nresponse generators, and a method to grab some default headers for each response. I've also reused the <code>ServerResponse</code>\ntype under the <code>types.ts</code> file at the root of our project:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> type</span><span style=\"color:#5DA994\"> ServerResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    message</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    success</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>Since our project is effectively just a big TypeScript solution (Angular frontend, TS-based serverless functions),\nwe can import any <code>.ts</code> files into our serverless functions, given it runs in the correct context. I wouldn't want\nto reference any <code>@angular/*</code> imports, for obvious reasons. With our <code>ServerResponse</code> in place, we've created a\ncommon statically typed-model between the front and backend of our project!</p>\n<p>As you might have guessed, the names and pathing of our function <code>.ts</code> files <em>does</em> matter in our case. There's a few\nsimple rules to adhere to when creating function endpoints</p>\n<ul>\n<li><code>netlify/functions/ping.ts</code> would receive HTTP request matching the route <code>/.netlify/functions/ping</code></li>\n<li><code>netlify/functions/ping/index.ts</code> would <em>also</em> receive HTTP request matching the route <code>/.netlify/functions/ping</code></li>\n<li><code>netlify/functions/ping/ping.ts</code> would, again, <em>also</em> receive HTTP request matching the\nroute <code>/.netlify/functions/ping</code></li>\n</ul>\n<p>Now that we have our first function in place, let's go ahead and start our function server:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> run</span><span style=\"color:#C98A7D\"> functions:serve</span></span></code></pre></figure>\n<p>and in the terminal, we should see a message like the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> scully-netlify-angular-example@0.0.0 netlify:serve</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> netlify functions:serve</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">◈</span><span style=\"color:#C98A7D\"> Ignored</span><span style=\"color:#C98A7D\"> general</span><span style=\"color:#C98A7D\"> context</span><span style=\"color:#C98A7D\"> env</span><span style=\"color:#C98A7D\"> var:</span><span style=\"color:#C98A7D\"> LANG</span><span style=\"color:#DBD7CAEE\"> (defined </span><span style=\"color:#C98A7D\">in</span><span style=\"color:#C98A7D\"> process</span><span style=\"color:#DBD7CAEE\">)</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">◈</span><span style=\"color:#C98A7D\"> Loaded</span><span style=\"color:#C98A7D\"> function</span><span style=\"color:#C98A7D\"> ping.</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">◈</span><span style=\"color:#C98A7D\"> Functions</span><span style=\"color:#C98A7D\"> server</span><span style=\"color:#C98A7D\"> is</span><span style=\"color:#C98A7D\"> listening</span><span style=\"color:#C98A7D\"> on</span><span style=\"color:#4C9A91\"> 9999</span></span></code></pre></figure>\n<p>To test out that our functions are working correctly, let's startup Postman and send a request to\n<code>http://localhost:9999/.netlify/functions/ping</code> and see what we get:</p>\n<p><img src=\"/images/jamstack-angular-apps-with-scully/postman_ping.png\" alt=\"Postman ping response\"></p>\n<p>We've got a response! Now that our GET endpoint is working, let's add a POST endpoint that will receive requests with\ndata in the body and return data based on it:</p>\n<h4>netlify/functions/data/index.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Handler</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@netlify/functions</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    getErrorResponse</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    getHeaders</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    HttpStatus</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    isWhitelistedDomain</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../../lib</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ServerResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#80A665\">handler</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Handler</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> async </span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">headers</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#CB7676\"> ?? </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#80A665\">isWhitelistedDomain</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">))</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Forbidden</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">method</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">httpMethod</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">toLowerCase</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">method</span><span style=\"color:#CB7676\"> !== </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">options</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> &#x26;&#x26; </span><span style=\"color:#BD976A\">method</span><span style=\"color:#CB7676\"> !== </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">post</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">MethodNotAllowed</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * Because we have a more complex request (JSON being sent over the wire),</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * an options call is made by the Angular HTTP client service to check with our function</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * that it's okay to receive requests in the current context.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">method</span><span style=\"color:#CB7676\"> === </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">options</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            statusCode</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">200</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            headers</span><span style=\"color:#666666\">: </span><span style=\"color:#80A665\">getHeaders</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">body</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">requestBody</span><span style=\"color:#666666\">: { </span><span style=\"color:#BD976A\">name</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\"> } =</span><span style=\"color:#BD976A\"> JSON</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">parse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">body</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">ServerResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            success</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            message</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#C98A7D\">Hello </span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">requestBody</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">!</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            statusCode</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">200</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            body</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">JSON</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">stringify</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            headers</span><span style=\"color:#666666\">: </span><span style=\"color:#80A665\">getHeaders</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">InternalServerError</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> handler</span><span style=\"color:#666666\"> };</span></span></code></pre></figure>\n<p>Utilizing our helper methods again, since this is a POST request with more complex request headers (as we can\ninspect in the network tab attached for us using <code>HttpClient</code>), the client will make a pre-flight OPTIONS call to our\nfunction endpoint to essentially ask the question, \"hey, this client application wants to make a request to you, is that\ncool?\". We kick out any requests that are not POSTs or OPTIONs (again, normal HTTP framework code would take care of\nthis for you, but we're running a bare bones server here) and accept the POST request body, returning the value of\nthe <code>name</code> attribute given to us in a simple greeting. By adding this function with our server still running, Netlify\nrecognizes a new function was added, and then compiles the output and serves it up under the <code>/.netlify/functions/data</code>\nendpoint. Let's give it a try with Postman:</p>\n<p><img src=\"/images/jamstack-angular-apps-with-scully/postman_data.png\" alt=\"Postman data response\"></p>\n<p>Nice! Now with our functions fully operational and our server running, let's start our Angular server (if it wasn't\nalready running), and watch the magic happen:</p>\n<p><a href=\"/images/jamstack-angular-apps-with-scully/scully-jamstack-running.webm\">Angular Netlify functions</a></p>\n<p>We've got ourselves a working solution! So far we've spun up our Angular application that calls into our serverless\nfunctions, but we're missing one final piece to <em>truly</em> be considered JAMstack: Scully.</p>\n<h2>Adding Scully to the project</h2>\n<p>To get started, the Scully team has made it dead simple to add static site generation to our\nAngular apps with a simple schematic. With the terminal open, let's run said schematic:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> @scullyio/init</span></span></code></pre></figure>\n<p>The schematic will add a few Scully dependencies to our project, as well as generate\na <code>scully.{{projectName}}. config.ts</code> file with the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ScullyConfig</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@scullyio/scully</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/** this loads the default render plugin, remove when switching to something else. */</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@scullyio/scully-plugin-puppeteer</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">config</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">ScullyConfig</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    projectRoot</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./src</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    projectName</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">scully-netlify-angular-example</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    outDir</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./dist/static</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    routes</span><span style=\"color:#666666\">: {},</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>To make things easy on us, let's add a few build scripts to our <code>scripts</code> section in our <code>package.json</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">scripts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // ...other scripts</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">build:scully</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">cross-env NODE_ENV=scully ng build -c scully &#x26;&#x26; npx scully --scanRoutes</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">build:production</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">cross-env NODE_ENV=production ng build -c production &#x26;&#x26; npx scully --scanRoutes</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">scully</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">npx scully --</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">scully:serve</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">npx scully serve --</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I'm using <code>cross-env</code> to assist with Tailwind purging, but as of this writing seems to no longer be needed for\nTailwind projects targeting version 3 and up. With our scripts in place, let's go ahead and run the Scully command to\ngenerate\na static version of our Angular app:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> run</span><span style=\"color:#C98A7D\"> scully</span></span></code></pre></figure>\n<p>Once the Scully build completes, take a look at your <code>/dist</code> output folder. We should see a\n<code>dist/static</code> folder with <code>ping</code> and <code>data</code> subdirectories that contain single <code>index.html</code> files.\nThe Scully dev server will <em>serve</em> these static HTML files with all of our Angular code functionality\nfully intact. Pretty neat, huh? Let's run the dev server:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> run</span><span style=\"color:#C98A7D\"> scully:serve</span></span></code></pre></figure>\n<p>and once the server is spun up, if we navigate to <code>localhost:1668</code> in our browser, we should see the same\npage that is being served by our usual <code>ng serve</code> command! Inspecting the page, we see a fully generated static HTML\npage, markup and all.</p>\n<h2>Putting it all together</h2>\n<p>With our Scully server running, we should still be able to hit our Netlify functions server (assuming it's still\nrunning), receiving the same responses we saw from serving the de-Scully'd version of our application. While it may\nnot <em>seem</em> like much, let's take a second to realize what's going on:</p>\n<ul>\n<li>We have a serverless backend stood up ready to receive HTTP requests and do any server related processing with\n<em>zero</em> backend frameworks in place</li>\n<li>We have a fully static version of our Angular application running in the browser optimized for SEO and indexing by\nsearch engines</li>\n<li>To top it off, we're doing all of this within the same repository code!</li>\n</ul>\n<p>While we're only scratching the surface of what's possible with Angular, Scully, and Netlify Functions, the DX\noffered by these tools allows us to quickly develop and ship static websites with rich functionality and data fetching\ncapability, all without implementing an entirely separate API layer in another framework. Our solution is <em>also</em>\nfully ready to deploy to Netlify, where our serverless functions will kick in, handling requests from our static Angular\napp deployed to the DSN of our choice. If you're looking to\nembrace the JAMstack with Angular, take Scully and Netlify Functions for a spin!</p>"
  },
  "_id": "2022/jamstack-angular-apps-with-scully-and-netlify.md",
  "_raw": {
    "sourceFilePath": "2022/jamstack-angular-apps-with-scully-and-netlify.md",
    "sourceFileName": "jamstack-angular-apps-with-scully-and-netlify.md",
    "sourceFileDir": "2022",
    "contentType": "markdown",
    "flattenedPath": "2022/jamstack-angular-apps-with-scully-and-netlify"
  },
  "type": "Post",
  "url": "/blog/2022/jamstack-angular-apps-with-scully-and-netlify"
}