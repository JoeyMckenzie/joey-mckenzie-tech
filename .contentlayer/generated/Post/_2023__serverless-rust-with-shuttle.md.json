{
  "title": "Going serverless with Rust and Shuttle",
  "description": "Managing infrastructure is already hard enough, let's write some serverless Rust with Shuttle!",
  "pubDate": "2023-03-30T07:00:00.000Z",
  "category": "rust",
  "heroImage": "/images/serverless-rust-with-shuttle/shuttle_meme.jpg",
  "draft": false,
  "keywords": [
    "rust",
    "aws lambda"
  ],
  "body": {
    "raw": "\nIn my epic quest to find any excuse to write more Rust in my daily dev life, I stumbled across an incredible platform\nthat allows developers to write serverless functions entirely in Rust.\n\nServerless functions? Check.\n\nWritten in pure Rust? Check.\n\nAll managed from the comfort of the command line? _Dear god_... just take my money!\n\n## What the deployment story currently looks like\n\nHarkening back to looking for any excuse to write more Rust, my typical deployment workflow for small projects would\nlook something like this:\n\n-   Write code (entirely bug-free, obviously)\n-   Construct a sensible Dockefile\n-   Deploy to some sort managed SaaS infrastructure platform\n-   Configure CI, testing pipelines, etc.\n\nWhile the current landscape of tools is small enough for micro-projects, I'd love to be an even lazier developer than I\ncurrently am and remove the middle to bullet points above. With shuttle, I'm able to write code and simply deploy my\nfunction - no containerization, no server configurations, simply just running a few commands and I'm able to go from\nlocal dev to production in minutes. Let's write a serverless function with shuttle that retrieves GitHub stars from one\nof our repositories!\n\n## Getting started\n\nFirst, let's bootstrap our shuttle project using [`cargo-shuttle`](https://crates.io/crates/cargo-shuttle/):\n\n```shell\ncargo install cargo-shuttle # or quickinstall if you prefer\n```\n\nQuick the shuttle CLI in place, let's scaffold out an [axum](https://crates.io/crates/axum/) server to respond to our\nrequests:\n\n```shell\ncargo shuttle init --axum\n```\n\nFollow the prompts of naming the project and selecting a folder. Taking a look at `main.rs` that shuttle generates for\nus should look something like this:\n\n```rust\nuse axum::{routing::get, Router};\n\nasync fn hello_world() -> &'static str {\n    \"Hello, world!\"\n}\n\n#[shuttle_runtime::main]\nasync fn axum() -> shuttle_axum::ShuttleAxum {\n    let router = Router::new().route(\"/hello\", get(hello_world));\n\n    Ok(router.into())\n}\n```\n\nand our manifest file will look something along the lines of:\n\n```toml\n[package]\nname = \"serverless-rust-with-shuttle\"\nversion = \"0.1.0\"\nedition = \"2021\"\npublish = false\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nshuttle-runtime = \"0.12.0\"\naxum = \"0.6.12\"\nshuttle-axum = \"0.12.0\"\ntokio = \"1.26.0\"\n```\n\nA few key notes here:\n\n-   Shuttle bootstraps a few dependencies for us in `shuttle-runtime` and `shuttle-axum` (0.12.0 at the time of this\n    writing)\n-   These crates allow us to invoke our function as an axum-specific serverless application as we see in our `main.rs`\n    file\n\nBut what's this `#[shuttle_runtime::main]` macro on our `main` function? Let's take a look with a\nquick [`cargo expand`](https://crates.io/crates/cargo-expand/) if you have it installed:\n\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nuse axum::{routing::get, Router};\n\nasync fn hello_world() -> &'static str { \"Hello, world!\" }\n\nfn main() {\n    let body = async { shuttle_runtime::start(loader).await; };\n\n    #[allow(clippy :: expect_used, clippy :: diverging_sub_expression)]\n    {\n        return tokio::runtime::Builder::new_multi_thread().enable_all().build().expect(\"Failed building the Runtime\").block_on(body);\n    }\n}\nasync fn loader(mut _factory: shuttle_runtime::ProvisionerFactory,\n    logger: shuttle_runtime::Logger) -> shuttle_axum::ShuttleAxum {\n    use shuttle_runtime::Context;\n    use shuttle_runtime::tracing_subscriber::prelude::*;\n    let filter_layer =\n        shuttle_runtime::tracing_subscriber::EnvFilter::try_from_default_env().or_else(|_|\n                    shuttle_runtime::tracing_subscriber::EnvFilter::try_new(\"INFO\")).unwrap();\n    shuttle_runtime::tracing_subscriber::registry().with(filter_layer).with(logger).init();\n    axum().await\n}\nasync fn axum() -> shuttle_axum::ShuttleAxum {\n    let router = Router::new().route(\"/hello\", get(hello_world));\n\n    Ok(router.into())\n}\n```\n\nWhoa! If we look closely, we see a familiar bit of generated code:\n\n```rust\n#[allow(clippy :: expect_used, clippy :: diverging_sub_expression)]\n{\n    return tokio::runtime::Builder::new_multi_thread().enable_all().build().expect(\"Failed building the Runtime\").block_on(body);\n}\n```\n\nShuttle's `#[shuttle_runtime::main]` macro generates the _same code_ a typical `#[tokio::main]` macro generates along\nwith a few extra bits (like including the defacto logging crate in [`tracing`](https://crates.io/crates/tracing/) for\nlogging to the server's console through [`tracing-subscriber`](https://crates.io/crates/tracing-subscriber)). No magic\nhere, just a bit of generated boilerplate for us to hit the ground running.\n\nA quick note, shuttle recently (at the time of this writing) added a dependency\non [protobuf](https://github.com/protocolbuffers/protobuf) to facilitate some of their internal infrastructure. If\nyou're missing `protoc` as a dependency on your machine, take a look at my\nblog's [README](https://github.com/JoeyMckenzie/joey-mckenzie-tech/blob/main/README.md#running-shuttle-functions-locally)\nfor some quick instructions on how to get up and running with the package.\n\n## Managing secrets\n\nSo we've set out to build a serverless function that will retrieve stars from various repositories in GitHub, which\nimplies we'll need to interact with the GitHub API. To use their API, we'll need a key to authenticate our requests but\nshouldn't rely on clients, nor expose our secret keys to clients. We'll need _some way_ to inject secrets at\nstartup/runtime that'll house our API keys only known to the function so we can make valid requests - luckily shuttle\nhas us covered with [shuttle secrets](https://docs.shuttle.rs/resources/shuttle-secrets).\n\nLuckily, it's rather straightforward to secrets into our serverless function by adding a `Secrets.toml` file, shuttle's\nversion of a `.env` file, and injecting them on startup with\nthe [`shuttle-secrets`](https://crates.io/crates/shuttle-secrets) crate. Let's add that to our cargo dependencies:\n\n```shell\ncargo add shuttle-secrets\n```\n\nand in our `main` function, let's add the secrets store as an argument (don't forget to add\na `use shuttle_secrets::SecretStore;` to your imports):\n\n```rust\n#[shuttle_runtime::main]\nasync fn axum(\n    #[shuttle_secrets::Secrets] secret_store: SecretStore,\n) -> shuttle_axum::ShuttleAxum {\n  // other code...\n}\n```\n\nWhile we're at it, we'll need a valid GitHub access token - for creating personal access tokens, check out\nthe [docs](https://docs.github.com/en/apps/creating-github-apps/creating-github-apps/about-apps#personal-access-tokens)\nand make sure to add the `repo:read` scope so our authenticated requests have permission to retrieve repository data.\n\nOnce you've got your token (save it off as you'll only be able to see it once on the UI), let's add a `Secrets.toml`\nfile at the root of our project with the token as a key:\n\n```toml\nGITHUB_ACCESS_TOKEN = \"ghp...\"\n```\n\nNow that we've got secrets in place, let's do a sanity check to make sure we have access to our token value once the\nfunction is running. Let's update our `main` function to spit out the token's value at startup:\n\n```rust\n#[shuttle_runtime::main]\nasync fn axum(#[shuttle_secrets::Secrets] secret_store: SecretStore) -> shuttle_axum::ShuttleAxum {\n    let token = secret_store\n        .get(\"GITHUB_ACCESS_TOKEN\")\n        .expect(\"No access token was provided.\");\n\n    dbg!(token);\n\n    let router = Router::new().route(\"/hello\", get(hello_world));\n\n    Ok(router.into())\n}\n```\n\nWe'll simply just `.expect()` the token to exist as it's required for us to operate. Using shuttle's CLI, let's spin\nthis function up locally:\n\n```shell\ncargo shuttle run\n```\n\nand after our project is compiled and run, we should see the token's value in our terminal:\n\n```shell\nFinished dev [unoptimized + debuginfo] target(s) in 30.18s\n[samples/serverless-rust-with-shuttle/src/main.rs:14] token = \"ghp...\"\n\nStarting serverless-rust-with-shuttle on http://127.0.0.1:8000\n```\n\nSweet! We're 90% ready to start writing the _actual_ fun code. Since we'll need to call an external API via HTTP, let's\nadd [`reqwest`](https://crates.io/crates/reqwest) as a dependency to make our lives easier (with the `json` feature):\n\n```shell\ncargo add reqwest --features json\n```\n\nOkay... _now_ we're ready to get the ball rolling. Let's update the existing route with a path parameter in the form of\nthe repository name along with scaffolding out a handler in our `main` function:\n\n```rust\nuse axum::{routing::get, Router};\nuse shuttle_secrets::SecretStore;\n\nasync fn get_repository_stars() -> &'static str {\n    \"Hello, world!\"\n}\n\n#[shuttle_runtime::main]\nasync fn axum(#[shuttle_secrets::Secrets] secret_store: SecretStore) -> shuttle_axum::ShuttleAxum {\n    let token = secret_store\n        .get(\"GITHUB_ACCESS_TOKEN\")\n        .expect(\"No access token was provided.\");\n\n    let router = Router::new().route(\"/:repository/stars\", get(get_repository_stars));\n\n    Ok(router.into())\n}\n```\n\nand with our server running, let's send through a request:\n\n```shell\ncurl --location 'localhost:8000/my-repository/stars'\nHello, world!\n```\n\nNice, now we're getting somewhere. Let's add [`cargo-watch`](https://crates.io/crates/cargo-watch) to have our server\nrestart anytime we make changes so we're not bothered to stop/start manually ourselves:\n\n```shell\ncargo install cargo-watch # or cargo binstall\n```\n\nand running our server again:\n\n```shell\ncargo watch -x 'shuttle run'\n```\n\nNow any change to our source code will trigger an automatic restart of our server. Let's update our function handler to\nreturn some JSON in a sane fashion so we can start stubbing out what the request flow will look like. Back in `main.rs`\nlet's update our handler as well as add a response JSON model:\n\n```rust\n#[derive(Serialize, Debug)]\nstruct StarsResponse {\n    count: usize,\n}\n\nasync fn get_repository_stars() -> Result<Json<StarsResponse>, &'static str> {\n    let response = StarsResponse { count: 9000 };\n    Ok(Json(response))\n}\n```\n\nIgnoring our errors for just a bit, we'll need to bring in [`serde`](https://crates.io/crates/serde) so we can serialize\nour responses to JSON with the `derive` flag so we can use it on our struct:\n\n```shell\ncargo add serde --features derive\n```\n\nCompiling and running our server again, let's send another request through:\n\n```shell\ncurl --location 'localhost:8000/my-repository/stars'\n{\"count\":9000}\n```\n\nNow we're getting somewhere. We don't want to _just_ return errors in the form `&'static str`s, so let's address that by\ndefining our own error implementation that plays nicely with axum:\n\n```rust\n#[derive(Serialize, Debug)]\nstruct HandlerError {\n    message: String,\n}\n\nenum ApiError {}\n\nimpl IntoResponse for ApiError {\n    fn into_response(self) -> axum::response::Response {\n        let (status, error_message) = match self {\n            _ => (\n                StatusCode::INTERNAL_SERVER_ERROR,\n                \"Something very, very bad has happened... :(\".to_string(),\n            ),\n        };\n\n        let body = Json(HandlerError {\n            message: error_message,\n        });\n\n        (status, body).into_response()\n    }\n}\n\nasync fn get_repository_stars() -> Result<Json<StarsResponse>, ApiError> {\n    let response = StarsResponse { count: 9000 };\n    Ok(Json(response))\n}\n```\n\nIgnoring `clippy` errors for a moment, let's quickly run through our new additions:\n\n-   We've added a `HandlerError` struct to give us the ability to transform errors into user-friendly JSON responses with\n    a `message`\n-   We've `impl`'d `InotoResponse` for our new `ApiError` type that we'll use to coerce errors that happen during the\n    request into something axum understands how to transform\n-   We've updated our handler to return an `ApiError` in our `Result` rather than a static string so we can again help our\n    users out with information about why the request failed\n\nWe'll get around to adding some branches to our `ApiError` enum eventually, but for now to get our code to compile,\nlet's add the [`http`](https://crates.io/crates/http) crate so we can lean on the `StatusCode` type to map internal\nhandler errors to sensible HTTP status codes.\n\n> Handling errors with axum deserves it's on blog post, so I'll gloss over a few of the details for now so we can focus\n> on just getting our function up and running.\n\n```shell\ncargo add http\n```\n\nNow running our code and making another request, we should still see the same message response as the previous request\nwe made before we updated our handler. Our `main.rs` file is getting rather large, so let's split some things out for\norganizational purposes. Let's add two additional files in `errors.rs` and `handlers.rs` to house our error\nimplementation and request handlers, respectively\n\n### errors.rs\n\n```rust\nuse axum::{response::IntoResponse, Json};\nuse http::StatusCode;\nuse serde::Serialize;\n\n#[derive(Serialize, Debug)]\nstruct HandlerError {\n    message: String,\n}\n\npub enum ApiError {}\n\nimpl IntoResponse for ApiError {\n    fn into_response(self) -> axum::response::Response {\n        let (status, error_message) = match self {\n            _ => (\n                StatusCode::INTERNAL_SERVER_ERROR,\n                \"Something very, very bad has happened... :(\".to_string(),\n            ),\n        };\n\n        let body = Json(HandlerError {\n            message: error_message,\n        });\n\n        (status, body).into_response()\n    }\n}\n```\n\n### handlers.rs\n\n```rust\nuse axum::Json;\nuse serde::Serialize;\n\nuse crate::errors::ApiError;\n\n#[derive(Serialize, Debug)]\npub struct StarsResponse {\n    count: usize,\n}\n\npub async fn get_repository_stars() -> Result<Json<StarsResponse>, ApiError> {\n    let response = StarsResponse { count: 9000 };\n    Ok(Json(response))\n}\n```\n\nAfter cleaning up a few import errors and peppering in a few `pub`s for visibility, our `main.rs` file should now look\nlike this:\n\n```rust\nmod errors;\nmod handlers;\n\nuse axum::{routing::get, Router};\nuse handlers::get_repository_stars;\nuse shuttle_secrets::SecretStore;\n\n#[shuttle_runtime::main]\nasync fn axum(#[shuttle_secrets::Secrets] secret_store: SecretStore) -> shuttle_axum::ShuttleAxum {\n    let token = secret_store\n        .get(\"GITHUB_ACCESS_TOKEN\")\n        .expect(\"No access token was provided.\");\n\n    let router = Router::new().route(\"/:repository/stars\", get(get_repository_stars));\n\n    Ok(router.into())\n}\n```\n\nNice and lean! Next, we need to _somehow_ get our token into our `get_repository_stars` handler in a sane fashion, and\nit would be nice to inject it as a dependency as it represents part of our serverless function's state. Let's lean on\naxum's [state management](https://docs.rs/axum/latest/axum/#sharing-state-with-handlers) mechanisms to do so with\nthe `.with_state()` router extensions so we can inject the token secret into the handler at request time.\n\nThere are lots of ways to facilitate handling state in axum, so let's take the simplest approach by wrapping our token\nin a `struct` that'll we'll inject into our handlers. To keep things clean, let's add a `state.rs` file and the\nnecessary bits to get a bit of thread-safe state working:\n\n```rust\nuse std::sync::Arc;\n\n#[derive(Debug)]\npub struct HandlerState {\n    pub access_token: String,\n}\n\nimpl HandlerState {\n    pub fn new_state(access_token: String) -> Arc<HandlerState> {\n        Arc::new(HandlerState { access_token })\n    }\n}\n\n```\n\nand back in our router in `main.rs`, let's add it as a state extension:\n\n```rust\n#[shuttle_runtime::main]\nasync fn axum(#[shuttle_secrets::Secrets] secret_store: SecretStore) -> shuttle_axum::ShuttleAxum {\n    let token = secret_store\n        .get(\"GITHUB_ACCESS_TOKEN\")\n        .expect(\"No access token was provided.\");\n\n    let router = Router::new()\n        .route(\"/:repository/stars\", get(get_repository_stars))\n        .with_state(HandlerState::new_state(token));\n\n    Ok(router.into())\n}\n```\n\nLet's do one more sanity check to make sure we're still able to access our token within our request handler. Back in\nour `get_repository_stars handler`:\n\n```rust\npub async fn get_repository_stars(\n    State(state): State<Arc<HandlerState>>,\n) -> Result<Json<StarsResponse>, ApiError> {\n    dbg!(&state.access_token);\n    let response = StarsResponse { count: 9000 };\n    Ok(Json(response))\n}\n```\n\nand thanks to `cargo-watch`, our server should be back up and running. Sending through yet another request, we should\nsee our server output something like:\n\n```shell\n&state.access_token = \"ghp...\"\n```\n\nNice! We're propagating down our state to our handler leaning on `Arc` to help us facilitate sharing our `HandlerState`\nacross request threads and we're finally in a spot to start calling out to the GitHub API.\n\nBefore we do so, let's take a look at what we've got so far:\n\n-   We've got a serverless function spun with axum bootstrapped with shuttle\n-   We're handling errors according to axum convention\n-   We've separated out our bits of code into logically grouped units\n-   We're propagating top-level application state safely down to request handlers\n\nDoesn't seem like much, but we've accomplished quite a bit! Let's go back and add a bit of `tracing` so we can see\ninside the mind of our function as it processes requests. Recall earlier in the expanded macro just above `main` that\nshuttle provides we have our application bootstrapped with `tracing` behind the scenes ready to go to start logging.\nLet's add some trace logging in a few places so we can pretty-print out to the console. First, let's add the `tracing`\ncrate:\n\n```shell\ncargo add tracing\n```\n\nNext, let's update our `main` function to include a bit of startup-style logging:\n\n```rust\n#[shuttle_runtime::main]\nasync fn axum(#[shuttle_secrets::Secrets] secret_store: SecretStore) -> shuttle_axum::ShuttleAxum {\n    tracing::info!(\"Bootstrapping function secrets\");\n\n    let token = secret_store\n        .get(\"GITHUB_ACCESS_TOKEN\")\n        .expect(\"No access token was provided.\");\n\n    tracing::info!(\"Secrets successfully read, building server router\");\n\n    let router = Router::new()\n        .route(\"/:repository/stars\", get(get_repository_stars))\n        .with_state(HandlerState::new_state(token));\n\n    tracing::info!(\"Router successfully initialized, now listening on port 8000\");\n\n    Ok(router.into())\n}\n```\n\nThen, let's add some logging to our request handler in `handlers.rs`:\n\n```rust\npub async fn get_repository_stars(\n    State(state): State<Arc<HandlerState>>,\n    Path(repository): Path<String>,\n) -> Result<Json<StarsResponse>, ApiError> {\n    tracing::info!(\n        \"Received request to get start count for repository {}\",\n        repository\n    );\n    let response = StarsResponse { count: 9000 };\n    Ok(Json(response))\n}\n```\n\nNotice that I've added a `Path(repository): Path<String>` to our handler's input - this is axum's way of accessing\ndynamic route values based on the `:repository` path route from our router. Spinning up our function (or simply waiting\nif you're still `cargo watch`ing), we should the output in the console (omitting timestamps for brevity):\n\n```shell\nINFO serverless_rust_with_shuttle: Bootstrapping function secrets\nINFO serverless_rust_with_shuttle: Secrets successfully read, building server router\nINFO serverless_rust_with_shuttle: Router successfully initialized, now listening on port 8000\n\nStarting serverless-rust-with-shuttle on http://127.0.0.1:8000\n```\n\nSending a request through again, we should see the repository name from the route path being logged as well:\n\n```shell\n# From another terminal window...\ncurl --location 'localhost:8000/my-repository/stars'\n\n# In our output console\nINFO serverless_rust_with_shuttle::handlers: Received request to get start count for repository my-repository\n```\n\nNice! Pat yourself on the back, we've written quite a bit of code and have a functioning server listening to requests.\nWe still have two things left:\n\n1. Calling the GitHub API to retrieve star counts\n2. Deploying our function to production\n\n## Deploying to shuttle\n\nBefore we finish up the core logic of our code, let's left-shift our deployment process a bit. Let's deploy our\nfunction, verifying all our I's are dotted and T's crossed. Heading over to [shuttle](https://shuttle.rs)'s website and\nsigning up, we should be met with a screen like the following:\n\n![shuttle dashboard](/images/serverless-rust-with-shuttle/shuttle_dashboard.png)\n\nI'm also going to update the name of our function to something a bit more relevant with a `Shuttle.toml` file at the\nroot of our project:\n\n```toml\nname = \"github-repository-star-counter\"\n```\n\nYou'll need to adjust the name as, sadly, I'll be taking this name for myself. Once you're authenticated, simply run the\ndeploy command `cargo shuttle deploy` and we should a bunch of internal logging from shuttle along with a successful\ndeploy message along the lines of:\n\n```shell\nThese secrets can be accessed by github-repository-star-counter\n╭─────────────────────╮\n│         Keys        │\n╞═════════════════════╡\n│ GITHUB_ACCESS_TOKEN │\n╰─────────────────────╯\n\nService Name:  github-repository-star-counter\nDeployment ID: 3339ef4c-60f0-47e6-a159-5034ac03ad4f\nStatus:        running\nLast Updated:  2023-03-29T23:09:40Z\nURI:           https://github-repository-star-counter.shuttleapp.rs\n```\n\nHeck yeah! Our function has been deployed and also picked up our key from our `Secrets.toml` file. Let's test it out\nby `curl`ing to the URI:\n\n```shell\ncurl --location https://github-repository-star-counter.shuttleapp.rs/my-repository/stars\n{\"count\":9000}\n```\n\nWe've officially got serverless Rust running in production - how cool is that?\n\nWith our initial deployment out of the way, let's finish fleshing out our function to retrieve repository stars.\n\n## Back to business\n\nLet's add the client request to GitHub. Since we'll be establishing a connection to GitHub's API servers, rather than\nspin up a new HTTP client per request, let's instantiate a single client at startup for our handlers to pull out of from\nstate. There are lots of benefits to recycling HTTP client connections throughout an application's lifetime, but that's\na bit beyond the scope of what we're doing today.\n\nLet's update our `HandlerState` to include a `Client` from the `reqwest` crate:\n\n```rust\nuse std::sync::Arc;\n\nuse reqwest::Client;\n\n#[derive(Debug)]\npub struct HandlerState {\n    pub access_token: String,\n    pub client: Client,\n}\n\nimpl HandlerState {\n    pub fn new_state(access_token: String) -> Arc<HandlerState> {\n        let client = Client::new();\n\n        Arc::new(HandlerState {\n            access_token,\n            client,\n        })\n    }\n}\n```\n\nNow that we'll have access to the HTTP client, let's test out a call to the repositories. The URL we'll be calling to\nretrieve repository information will be in the form of `https://api.github.com/repos/OWNER/REPO` where we'll hard\ncode `OWNER` to be your username for now. Let's test a call out to see what the response looks like:\n\n```shell\ncurl --request GET \\\n--url \"https://api.github.com/repos/joeymckenzie/realworld-rust-axum-sqlx\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"Authorization: Bearer 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\"\n{\n  \"id\": 485222387,\n  \"node_id\": \"R_kgDOHOvn8w\",\n  \"name\": \"realworld-rust-axum-sqlx\",\n  // ...a ton of other properties\n  \"stargazers_count\": 129,\n}\n```\n\nWe see in the response we get _a lot_ of other data that doesn't necessarily pertain to the number of stars on the\nrepositories. The only property we care about for now is the `stargazers_count` which represents the number of stars our\nrepository has. Let's create a response model to deserialize this response into Rust code. Back in our `handlers.rs`\nfile:\n\n```rust\n// Imports...\n\n#[derive(Serialize, Debug)]\npub struct StarsResponse {\n    count: usize,\n}\n\n#[derive(Deserialize, Debug)]\npub struct GitHubRepositoryResponse {\n    stargazers_count: usize\n}\n\npub async fn get_repository_stars(\n    State(state): State<Arc<HandlerState>>,\n    Path(repository): Path<String>,\n) -> Result<Json<StarsResponse>, ApiError> {\n    // Code...\n}\n```\n\nWe've added a `GithubRepositoryResponse` to handle pulling data out into a `struct`. Let's implement the call now in our\nhandler:\n\n```rust\npub async fn get_repository_stars(\n    State(state): State<Arc<HandlerState>>,\n    Path(repository): Path<String>,\n) -> Result<Json<StarsResponse>, ApiError> {\n    tracing::info!(\n        \"Received request to get start count for repository {}\",\n        repository\n    );\n\n    let url = format!(\"https://api.github.com/repos/joeymckenzie/{}\", repository);\n\n    let response = state\n        .client\n        .get(url)\n        .bearer_auth(state.access_token)\n        .send()\n        .await?;\n\n    let response = StarsResponse { count: 9000 };\n\n    Ok(Json(response))\n}\n```\n\nNow if try to compile, we'll get an error yelling at us stating we have no conversion between a `reqwest` error and\nsomething axum understands with our `ApiError`. Yep, you guessed it - time to do some error converting.\n\n## Propagating errors\n\nOne of the first fundamental concepts we learn in Rust is the proper handling and conversion of errors. With Rust's\nexpansive crate ecosystem and library authors offering custom errors about their internal processes in their public\nAPIs, we're bound to eventually be forced to convert external errors to something that's known within our programs.\nThere are many great articles, including [the book itself](https://doc.rust-lang.org/stable/book/), that do a much more\nfantastic job than I'll do here going over converting errors from (in our case) `reqwest` to our internal `ApiError`.\n\nIn the simplest case, we'll need to convert `From` a `reqwest::Error` to an `ApiError`:\n\n### errors.rs\n\n```rust\npub enum ApiError {\n    RequestFailed(String),\n}\n\nimpl From<reqwest::Error> for ApiError {\n    fn from(value: reqwest::Error) -> Self {\n        Self::RequestFailed(value.to_string())\n    }\n}\n```\n\nWe could do this for any number of errors that will rear their ugly heads at some point while our function is executing,\nbut for now, I'll take the easy way out with [`thiserror`](https://crates.io/crates/thiserror):\n\n```shell\ncargo add thiserror\n```\n\nNow we can trim up `errors.rs`:\n\n```rust\nuse axum::{response::IntoResponse, Json};\nuse http::StatusCode;\nuse serde::Serialize;\nuse thiserror::Error;\n\n#[derive(Serialize, Debug)]\nstruct HandlerError {\n    message: String,\n}\n\n#[derive(Error, Debug)]\npub enum ApiError {\n    #[error(\"The request to GitHub failed: {0}\")]\n    RequestFailed(#[from] reqwest::Error),\n}\n\nimpl IntoResponse for ApiError {\n    fn into_response(self) -> axum::response::Response {\n        let (status, error_message) = match self {\n            Self::RequestFailed(e) => (StatusCode::INTERNAL_SERVER_ERROR, e.to_string()),\n        };\n\n        let body = Json(HandlerError {\n            message: error_message,\n        });\n\n        (status, body).into_response()\n    }\n}\n```\n\nLeaning on `thiserror`, we can leverage the `#[error]` macro to spit out a bit of boilerplate error conversion code for\nus. For a sanity check, let's take a look at the generated code with another quick `cargo expand errors`:\n\n```rust\npub enum ApiError {\n    #[error(\"The request to GitHub failed\")]\n    RequestFailed(#[from] reqwest::Error),\n}\n\n#[allow(unused_qualifications)]\nimpl std::error::Error for ApiError {\n    fn source(&self) -> std::option::Option<&(dyn std::error::Error + 'static)> {\n        use thiserror::__private::AsDynError;\n        #[allow(deprecated)]\n        match self {\n            ApiError::RequestFailed { 0: source, .. } => {\n                std::option::Option::Some(source.as_dyn_error())\n            }\n        }\n    }\n}\n\n#[allow(unused_qualifications)]\nimpl std::fmt::Display for ApiError {\n    fn fmt(&self, __formatter: &mut std::fmt::Formatter) -> std::fmt::Result {\n        #[allow(unused_variables, deprecated, clippy::used_underscore_binding)]\n        match self {\n            ApiError::RequestFailed(_0) => {\n                __formatter.write_fmt(format_args!(\"The request to GitHub failed\"))\n            }\n        }\n    }\n}\n\n#[allow(unused_qualifications)]\nimpl std::convert::From<reqwest::Error> for ApiError {\n    #[allow(deprecated)]\n    fn from(source: reqwest::Error) -> Self {\n        ApiError::RequestFailed {\n            0: source,\n        }\n    }\n}\n\n#[automatically_derived]\nimpl ::core::fmt::Debug for ApiError {\n    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n        match self {\n            ApiError::RequestFailed(__self_0) => {\n                ::core::fmt::Formatter::debug_tuple_field1_finish(\n                    f,\n                    \"RequestFailed\",\n                    &__self_0,\n                )\n            }\n        }\n    }\n}\n```\n\nSifting through the other bits of code that are printed out to the console, we see that `thiserror` is generating some\nboilerplate to `impl` `std::error::Error` and `From<reqwest::Error>` for us, so we can avoid writing the implementations\nourselves. Thanks, [dtolnay](https://crates.io/users/dtolnay)!\n\n## So many stars\n\nOkay, back to our handler. So we're handling the result errors `reqwest` _could_ propagate back to us, now let's rip\nthe `stargazer_count` off the API response to map back to our `StarsResponse` struct. Let's throw a `.json()` after\nour `.await?` to do so:\n\n```rust\npub async fn get_repository_stars(\n    State(state): State<Arc<HandlerState>>,\n    Path(repository): Path<String>,\n) -> Result<Json<StarsResponse>, ApiError> {\n    tracing::info!(\n        \"Received request to get start count for repository {}\",\n        repository\n    );\n\n    let url = format!(\"https://api.github.com/repos/joeymckenzie/{}\", repository);\n    dbg!(url.clone());\n\n    let github_response = state\n        .client\n        .get(url)\n        .bearer_auth(&state.access_token)\n        .header(\"User-Agent\", \"github-repository-star-counter/0.0.1\")\n        .send()\n        .await?\n        .json::<GitHubRepositoryResponse>()\n        .await?;\n\n    let response = StarsResponse {\n        count: github_response.stargazers_count,\n    };\n\n    Ok(Json(response))\n}\n```\n\nWe'll attempt to deserialize the response into our `GitHubRepositoryResponse` and again `await?` the process as we need\nto read from the response buffer and propagate any errors. We're already converting between `reqwest` errors and our\ninternal `ApiError`, so we're all good there.\n\nWe also add a `User-Agent` header to let the GitHub API servers know who we are - this is arbitrary for our purposes,\nbut is important for requests coming from the browser, in Postman, etc. Let's spin up our function and send a request\nthrough:\n\n```shell\n curl -l http://localhost:8000/realworld-rust-axum-sqlx/stars\n{\"count\":129}\n```\n\nWe have a response! Now that we've got the core logic in place, let's go ahead and deploy our function\nwith `cargo shuttle deploy`. Once the deployment finishes, let's ping our function at the deployment URL:\n\n```shell\ncurl -l https://github-repository-star-counter.shuttleapp.rs/realworld-rust-axum-sqlx/stars\n{\"count\":129}\n```\n\nNice! We've got good responses coming back from a serverless function written entirely in Rust. Let's check the logs\nwith a quick `cargo shuttle logs` to trace our request:\n\n```shell\ncargo shuttle logs\n# A few other logs that aren't important for now...\n INFO serverless_rust_with_shuttle::handlers: Received request to get start count for repository realworld-rust-axum-sqlx\nDEBUG reqwest::connect: starting new connection: https://api.github.com/\nDEBUG hyper::client::connect::dns: resolving host=\"api.github.com\"\nDEBUG hyper::client::connect::http: connecting to 140.82.121.6:443\n INFO serverless_rust_with_shuttle::handlers: Response received from GitHub GitHubRepositoryResponse { stargazers_count: 129 }\nDEBUG hyper::proto::h1::io: flushed 121 bytes\n```\n\n## Wrapping up\n\nAnd that's a wrap! We've got Rust running out in the wild in the form of a serverless function and I couldn't be\nhappier. There's quite a bit of cleanup we could do, for instance handling cases where the repository doesn't exist, but\nI'll leave that as an exercise for the reader.\n\nAll the source code for this function can be on my\nGitHub [here](https://github.com/JoeyMckenzie/joey-mckenzie-tech/samples/rust/with-shuttle).\n\nUntil next, friends!\n",
    "html": "<p>In my epic quest to find any excuse to write more Rust in my daily dev life, I stumbled across an incredible platform\nthat allows developers to write serverless functions entirely in Rust.</p>\n<p>Serverless functions? Check.</p>\n<p>Written in pure Rust? Check.</p>\n<p>All managed from the comfort of the command line? <em>Dear god</em>... just take my money!</p>\n<h2>What the deployment story currently looks like</h2>\n<p>Harkening back to looking for any excuse to write more Rust, my typical deployment workflow for small projects would\nlook something like this:</p>\n<ul>\n<li>Write code (entirely bug-free, obviously)</li>\n<li>Construct a sensible Dockefile</li>\n<li>Deploy to some sort managed SaaS infrastructure platform</li>\n<li>Configure CI, testing pipelines, etc.</li>\n</ul>\n<p>While the current landscape of tools is small enough for micro-projects, I'd love to be an even lazier developer than I\ncurrently am and remove the middle to bullet points above. With shuttle, I'm able to write code and simply deploy my\nfunction - no containerization, no server configurations, simply just running a few commands and I'm able to go from\nlocal dev to production in minutes. Let's write a serverless function with shuttle that retrieves GitHub stars from one\nof our repositories!</p>\n<h2>Getting started</h2>\n<p>First, let's bootstrap our shuttle project using <a href=\"https://crates.io/crates/cargo-shuttle/\"><code>cargo-shuttle</code></a>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> cargo-shuttle</span><span style=\"color:#6A737D\"> # or quickinstall if you prefer</span></span></code></pre></figure>\n<p>Quick the shuttle CLI in place, let's scaffold out an <a href=\"https://crates.io/crates/axum/\">axum</a> server to respond to our\nrequests:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> shuttle</span><span style=\"color:#9ECBFF\"> init</span><span style=\"color:#79B8FF\"> --axum</span></span></code></pre></figure>\n<p>Follow the prompts of naming the project and selecting a folder. Taking a look at <code>main.rs</code> that shuttle generates for\nus should look something like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">routing</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">get, </span><span style=\"color:#B392F0\">Router</span><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> hello_world</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#E1E4E8\">'</span><span style=\"color:#B392F0\">static</span><span style=\"color:#B392F0\"> str</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">    \"Hello, world!\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> shuttle_axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ShuttleAxum</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/hello\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(hello_world));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>and our manifest file will look something along the lines of:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark\"><code data-language=\"toml\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">package</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">name = </span><span style=\"color:#9ECBFF\">\"serverless-rust-with-shuttle\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">version = </span><span style=\"color:#9ECBFF\">\"0.1.0\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">edition = </span><span style=\"color:#9ECBFF\">\"2021\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">publish = </span><span style=\"color:#79B8FF\">false</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[</span><span style=\"color:#B392F0\">dependencies</span><span style=\"color:#E1E4E8\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">shuttle-runtime = </span><span style=\"color:#9ECBFF\">\"0.12.0\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">axum = </span><span style=\"color:#9ECBFF\">\"0.6.12\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">shuttle-axum = </span><span style=\"color:#9ECBFF\">\"0.12.0\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">tokio = </span><span style=\"color:#9ECBFF\">\"1.26.0\"</span></span></code></pre></figure>\n<p>A few key notes here:</p>\n<ul>\n<li>Shuttle bootstraps a few dependencies for us in <code>shuttle-runtime</code> and <code>shuttle-axum</code> (0.12.0 at the time of this\nwriting)</li>\n<li>These crates allow us to invoke our function as an axum-specific serverless application as we see in our <code>main.rs</code>\nfile</li>\n</ul>\n<p>But what's this <code>#[shuttle_runtime::main]</code> macro on our <code>main</code> function? Let's take a look with a\nquick <a href=\"https://crates.io/crates/cargo-expand/\"><code>cargo expand</code></a> if you have it installed:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#![feature(prelude_import)]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[prelude_import]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">prelude</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">rust_2021</span><span style=\"color:#F97583\">::*</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[macro_use]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">extern</span><span style=\"color:#F97583\"> crate</span><span style=\"color:#E1E4E8\"> std;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">routing</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">get, </span><span style=\"color:#B392F0\">Router</span><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> hello_world</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#E1E4E8\">'</span><span style=\"color:#B392F0\">static</span><span style=\"color:#B392F0\"> str</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#9ECBFF\">\"Hello, world!\"</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">fn</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> body </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> async</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#B392F0\">shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">start</span><span style=\"color:#E1E4E8\">(loader)</span><span style=\"color:#F97583\">.await</span><span style=\"color:#E1E4E8\">; };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    #[allow(clippy </span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\"> expect_used, clippy </span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\"> diverging_sub_expression)]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        return</span><span style=\"color:#B392F0\"> tokio</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Builder</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new_multi_thread</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">enable_all</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">build</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Failed building the Runtime\"</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">block_on</span><span style=\"color:#E1E4E8\">(body);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> loader</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">mut</span><span style=\"color:#E1E4E8\"> _factory</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ProvisionerFactory</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    logger</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Logger</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> shuttle_axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ShuttleAxum</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    use</span><span style=\"color:#B392F0\"> shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Context</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    use</span><span style=\"color:#B392F0\"> shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">tracing_subscriber</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">prelude</span><span style=\"color:#F97583\">::*</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> filter_layer </span><span style=\"color:#F97583\">=</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">tracing_subscriber</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">EnvFilter</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">try_from_default_env</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">or_else</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">|</span><span style=\"color:#E1E4E8\">_</span><span style=\"color:#F97583\">|</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">                    shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">tracing_subscriber</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">EnvFilter</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">try_new</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"INFO\"</span><span style=\"color:#E1E4E8\">))</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">unwrap</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">tracing_subscriber</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">registry</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">with</span><span style=\"color:#E1E4E8\">(filter_layer)</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">with</span><span style=\"color:#E1E4E8\">(logger)</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">init</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    axum</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.await</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> shuttle_axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ShuttleAxum</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/hello\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(hello_world));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Whoa! If we look closely, we see a familiar bit of generated code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[allow(clippy </span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\"> expect_used, clippy </span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\"> diverging_sub_expression)]</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#B392F0\"> tokio</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Builder</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new_multi_thread</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">enable_all</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">build</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Failed building the Runtime\"</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">block_on</span><span style=\"color:#E1E4E8\">(body);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Shuttle's <code>#[shuttle_runtime::main]</code> macro generates the <em>same code</em> a typical <code>#[tokio::main]</code> macro generates along\nwith a few extra bits (like including the defacto logging crate in <a href=\"https://crates.io/crates/tracing/\"><code>tracing</code></a> for\nlogging to the server's console through <a href=\"https://crates.io/crates/tracing-subscriber\"><code>tracing-subscriber</code></a>). No magic\nhere, just a bit of generated boilerplate for us to hit the ground running.</p>\n<p>A quick note, shuttle recently (at the time of this writing) added a dependency\non <a href=\"https://github.com/protocolbuffers/protobuf\">protobuf</a> to facilitate some of their internal infrastructure. If\nyou're missing <code>protoc</code> as a dependency on your machine, take a look at my\nblog's <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-tech/blob/main/README.md#running-shuttle-functions-locally\">README</a>\nfor some quick instructions on how to get up and running with the package.</p>\n<h2>Managing secrets</h2>\n<p>So we've set out to build a serverless function that will retrieve stars from various repositories in GitHub, which\nimplies we'll need to interact with the GitHub API. To use their API, we'll need a key to authenticate our requests but\nshouldn't rely on clients, nor expose our secret keys to clients. We'll need <em>some way</em> to inject secrets at\nstartup/runtime that'll house our API keys only known to the function so we can make valid requests - luckily shuttle\nhas us covered with <a href=\"https://docs.shuttle.rs/resources/shuttle-secrets\">shuttle secrets</a>.</p>\n<p>Luckily, it's rather straightforward to secrets into our serverless function by adding a <code>Secrets.toml</code> file, shuttle's\nversion of a <code>.env</code> file, and injecting them on startup with\nthe <a href=\"https://crates.io/crates/shuttle-secrets\"><code>shuttle-secrets</code></a> crate. Let's add that to our cargo dependencies:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#9ECBFF\"> shuttle-secrets</span></span></code></pre></figure>\n<p>and in our <code>main</code> function, let's add the secrets store as an argument (don't forget to add\na <code>use shuttle_secrets::SecretStore;</code> to your imports):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    #[</span><span style=\"color:#B392F0\">shuttle_secrets</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Secrets</span><span style=\"color:#E1E4E8\">] secret_store</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> SecretStore</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> shuttle_axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ShuttleAxum</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">  // other code...</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>While we're at it, we'll need a valid GitHub access token - for creating personal access tokens, check out\nthe <a href=\"https://docs.github.com/en/apps/creating-github-apps/creating-github-apps/about-apps#personal-access-tokens\">docs</a>\nand make sure to add the <code>repo:read</code> scope so our authenticated requests have permission to retrieve repository data.</p>\n<p>Once you've got your token (save it off as you'll only be able to see it once on the UI), let's add a <code>Secrets.toml</code>\nfile at the root of our project with the token as a key:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark\"><code data-language=\"toml\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">GITHUB_ACCESS_TOKEN = </span><span style=\"color:#9ECBFF\">\"ghp...\"</span></span></code></pre></figure>\n<p>Now that we've got secrets in place, let's do a sanity check to make sure we have access to our token value once the\nfunction is running. Let's update our <code>main</code> function to spit out the token's value at startup:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#E1E4E8\">(#[</span><span style=\"color:#B392F0\">shuttle_secrets</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Secrets</span><span style=\"color:#E1E4E8\">] secret_store</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> SecretStore</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> shuttle_axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ShuttleAxum</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> token </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> secret_store</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"GITHUB_ACCESS_TOKEN\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"No access token was provided.\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    dbg!</span><span style=\"color:#E1E4E8\">(token);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/hello\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(hello_world));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>We'll simply just <code>.expect()</code> the token to exist as it's required for us to operate. Using shuttle's CLI, let's spin\nthis function up locally:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> shuttle</span><span style=\"color:#9ECBFF\"> run</span></span></code></pre></figure>\n<p>and after our project is compiled and run, we should see the token's value in our terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">Finished</span><span style=\"color:#9ECBFF\"> dev</span><span style=\"color:#E1E4E8\"> [unoptimized </span><span style=\"color:#9ECBFF\">+</span><span style=\"color:#9ECBFF\"> debuginfo]</span><span style=\"color:#9ECBFF\"> target</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">s</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#9ECBFF\">in</span><span style=\"color:#79B8FF\"> 30.18</span><span style=\"color:#9ECBFF\">s</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">[samples/serverless-rust-with-shuttle/src/main.rs:14] token = </span><span style=\"color:#9ECBFF\">\"ghp...\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Starting</span><span style=\"color:#9ECBFF\"> serverless-rust-with-shuttle</span><span style=\"color:#9ECBFF\"> on</span><span style=\"color:#9ECBFF\"> http://127.0.0.1:8000</span></span></code></pre></figure>\n<p>Sweet! We're 90% ready to start writing the <em>actual</em> fun code. Since we'll need to call an external API via HTTP, let's\nadd <a href=\"https://crates.io/crates/reqwest\"><code>reqwest</code></a> as a dependency to make our lives easier (with the <code>json</code> feature):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#9ECBFF\"> reqwest</span><span style=\"color:#79B8FF\"> --features</span><span style=\"color:#9ECBFF\"> json</span></span></code></pre></figure>\n<p>Okay... <em>now</em> we're ready to get the ball rolling. Let's update the existing route with a path parameter in the form of\nthe repository name along with scaffolding out a handler in our <code>main</code> function:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">routing</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">get, </span><span style=\"color:#B392F0\">Router</span><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> shuttle_secrets</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">SecretStore</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_repository_stars</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#E1E4E8\">'</span><span style=\"color:#B392F0\">static</span><span style=\"color:#B392F0\"> str</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">    \"Hello, world!\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#E1E4E8\">(#[</span><span style=\"color:#B392F0\">shuttle_secrets</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Secrets</span><span style=\"color:#E1E4E8\">] secret_store</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> SecretStore</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> shuttle_axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ShuttleAxum</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> token </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> secret_store</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"GITHUB_ACCESS_TOKEN\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"No access token was provided.\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/:repository/stars\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(get_repository_stars));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>and with our server running, let's send through a request:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#79B8FF\"> --location</span><span style=\"color:#9ECBFF\"> 'localhost:8000/my-repository/stars'</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Hello,</span><span style=\"color:#9ECBFF\"> world!</span></span></code></pre></figure>\n<p>Nice, now we're getting somewhere. Let's add <a href=\"https://crates.io/crates/cargo-watch\"><code>cargo-watch</code></a> to have our server\nrestart anytime we make changes so we're not bothered to stop/start manually ourselves:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> cargo-watch</span><span style=\"color:#6A737D\"> # or cargo binstall</span></span></code></pre></figure>\n<p>and running our server again:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> watch</span><span style=\"color:#79B8FF\"> -x</span><span style=\"color:#9ECBFF\"> 'shuttle run'</span></span></code></pre></figure>\n<p>Now any change to our source code will trigger an automatic restart of our server. Let's update our function handler to\nreturn some JSON in a sane fashion so we can start stubbing out what the request flow will look like. Back in <code>main.rs</code>\nlet's update our handler as well as add a response JSON model:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">struct</span><span style=\"color:#B392F0\"> StarsResponse</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    count</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> usize</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_repository_stars</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StarsResponse</span><span style=\"color:#E1E4E8\">>, </span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">'</span><span style=\"color:#B392F0\">static</span><span style=\"color:#B392F0\"> str</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> response </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> StarsResponse</span><span style=\"color:#E1E4E8\"> { count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> 9000</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">(response))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Ignoring our errors for just a bit, we'll need to bring in <a href=\"https://crates.io/crates/serde\"><code>serde</code></a> so we can serialize\nour responses to JSON with the <code>derive</code> flag so we can use it on our struct:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#9ECBFF\"> serde</span><span style=\"color:#79B8FF\"> --features</span><span style=\"color:#9ECBFF\"> derive</span></span></code></pre></figure>\n<p>Compiling and running our server again, let's send another request through:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#79B8FF\"> --location</span><span style=\"color:#9ECBFF\"> 'localhost:8000/my-repository/stars'</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">\"count\"</span><span style=\"color:#B392F0\">:9000}</span></span></code></pre></figure>\n<p>Now we're getting somewhere. We don't want to <em>just</em> return errors in the form <code>&#x26;'static str</code>s, so let's address that by\ndefining our own error implementation that plays nicely with axum:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">struct</span><span style=\"color:#B392F0\"> HandlerError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    message</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">enum</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> IntoResponse</span><span style=\"color:#F97583\"> for</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    fn</span><span style=\"color:#B392F0\"> into_response</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">response</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Response</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        let</span><span style=\"color:#E1E4E8\"> (status, error_message) </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> match</span><span style=\"color:#79B8FF\"> self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            _ </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">                StatusCode</span><span style=\"color:#F97583\">::</span><span style=\"color:#79B8FF\">INTERNAL_SERVER_ERROR</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">                \"Something very, very bad has happened... :(\"</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">to_string</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        let</span><span style=\"color:#E1E4E8\"> body </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Json</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">HandlerError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            message</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> error_message,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        (status, body)</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into_response</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_repository_stars</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StarsResponse</span><span style=\"color:#E1E4E8\">>, </span><span style=\"color:#B392F0\">ApiError</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> response </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> StarsResponse</span><span style=\"color:#E1E4E8\"> { count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> 9000</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">(response))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Ignoring <code>clippy</code> errors for a moment, let's quickly run through our new additions:</p>\n<ul>\n<li>We've added a <code>HandlerError</code> struct to give us the ability to transform errors into user-friendly JSON responses with\na <code>message</code></li>\n<li>We've <code>impl</code>'d <code>InotoResponse</code> for our new <code>ApiError</code> type that we'll use to coerce errors that happen during the\nrequest into something axum understands how to transform</li>\n<li>We've updated our handler to return an <code>ApiError</code> in our <code>Result</code> rather than a static string so we can again help our\nusers out with information about why the request failed</li>\n</ul>\n<p>We'll get around to adding some branches to our <code>ApiError</code> enum eventually, but for now to get our code to compile,\nlet's add the <a href=\"https://crates.io/crates/http\"><code>http</code></a> crate so we can lean on the <code>StatusCode</code> type to map internal\nhandler errors to sensible HTTP status codes.</p>\n<blockquote>\n<p>Handling errors with axum deserves it's on blog post, so I'll gloss over a few of the details for now so we can focus\non just getting our function up and running.</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#9ECBFF\"> http</span></span></code></pre></figure>\n<p>Now running our code and making another request, we should still see the same message response as the previous request\nwe made before we updated our handler. Our <code>main.rs</code> file is getting rather large, so let's split some things out for\norganizational purposes. Let's add two additional files in <code>errors.rs</code> and <code>handlers.rs</code> to house our error\nimplementation and request handlers, respectively</p>\n<h3>errors.rs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">response</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">IntoResponse</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> http</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">StatusCode</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> serde</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">struct</span><span style=\"color:#B392F0\"> HandlerError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    message</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> enum</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> IntoResponse</span><span style=\"color:#F97583\"> for</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    fn</span><span style=\"color:#B392F0\"> into_response</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">response</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Response</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        let</span><span style=\"color:#E1E4E8\"> (status, error_message) </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> match</span><span style=\"color:#79B8FF\"> self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            _ </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">                StatusCode</span><span style=\"color:#F97583\">::</span><span style=\"color:#79B8FF\">INTERNAL_SERVER_ERROR</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">                \"Something very, very bad has happened... :(\"</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">to_string</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        let</span><span style=\"color:#E1E4E8\"> body </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Json</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">HandlerError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            message</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> error_message,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        (status, body)</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into_response</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<h3>handlers.rs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> serde</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#F97583\"> crate::</span><span style=\"color:#B392F0\">errors</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ApiError</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> struct</span><span style=\"color:#B392F0\"> StarsResponse</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    count</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> usize</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_repository_stars</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StarsResponse</span><span style=\"color:#E1E4E8\">>, </span><span style=\"color:#B392F0\">ApiError</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> response </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> StarsResponse</span><span style=\"color:#E1E4E8\"> { count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> 9000</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">(response))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>After cleaning up a few import errors and peppering in a few <code>pub</code>s for visibility, our <code>main.rs</code> file should now look\nlike this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">mod</span><span style=\"color:#B392F0\"> errors</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">mod</span><span style=\"color:#B392F0\"> handlers</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">routing</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">get, </span><span style=\"color:#B392F0\">Router</span><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> handlers</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">get_repository_stars;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> shuttle_secrets</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">SecretStore</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#E1E4E8\">(#[</span><span style=\"color:#B392F0\">shuttle_secrets</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Secrets</span><span style=\"color:#E1E4E8\">] secret_store</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> SecretStore</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> shuttle_axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ShuttleAxum</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> token </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> secret_store</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"GITHUB_ACCESS_TOKEN\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"No access token was provided.\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/:repository/stars\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(get_repository_stars));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Nice and lean! Next, we need to <em>somehow</em> get our token into our <code>get_repository_stars</code> handler in a sane fashion, and\nit would be nice to inject it as a dependency as it represents part of our serverless function's state. Let's lean on\naxum's <a href=\"https://docs.rs/axum/latest/axum/#sharing-state-with-handlers\">state management</a> mechanisms to do so with\nthe <code>.with_state()</code> router extensions so we can inject the token secret into the handler at request time.</p>\n<p>There are lots of ways to facilitate handling state in axum, so let's take the simplest approach by wrapping our token\nin a <code>struct</code> that'll we'll inject into our handlers. To keep things clean, let's add a <code>state.rs</code> file and the\nnecessary bits to get a bit of thread-safe state working:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">sync</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> struct</span><span style=\"color:#B392F0\"> HandlerState</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> access_token</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> HandlerState</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> new_state</span><span style=\"color:#E1E4E8\">(access_token</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        Arc</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#E1E4E8\"> { access_token })</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<p>and back in our router in <code>main.rs</code>, let's add it as a state extension:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#E1E4E8\">(#[</span><span style=\"color:#B392F0\">shuttle_secrets</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Secrets</span><span style=\"color:#E1E4E8\">] secret_store</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> SecretStore</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> shuttle_axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ShuttleAxum</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> token </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> secret_store</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"GITHUB_ACCESS_TOKEN\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"No access token was provided.\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/:repository/stars\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(get_repository_stars))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_state</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new_state</span><span style=\"color:#E1E4E8\">(token));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Let's do one more sanity check to make sure we're still able to access our token within our request handler. Back in\nour <code>get_repository_stars handler</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_repository_stars</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    State</span><span style=\"color:#E1E4E8\">(state)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#E1E4E8\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StarsResponse</span><span style=\"color:#E1E4E8\">>, </span><span style=\"color:#B392F0\">ApiError</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    dbg!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">state</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">access_token);</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> response </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> StarsResponse</span><span style=\"color:#E1E4E8\"> { count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> 9000</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">(response))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>and thanks to <code>cargo-watch</code>, our server should be back up and running. Sending through yet another request, we should\nsee our server output something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">&#x26;</span><span style=\"color:#B392F0\">state.access_token</span><span style=\"color:#9ECBFF\"> =</span><span style=\"color:#9ECBFF\"> \"ghp...\"</span></span></code></pre></figure>\n<p>Nice! We're propagating down our state to our handler leaning on <code>Arc</code> to help us facilitate sharing our <code>HandlerState</code>\nacross request threads and we're finally in a spot to start calling out to the GitHub API.</p>\n<p>Before we do so, let's take a look at what we've got so far:</p>\n<ul>\n<li>We've got a serverless function spun with axum bootstrapped with shuttle</li>\n<li>We're handling errors according to axum convention</li>\n<li>We've separated out our bits of code into logically grouped units</li>\n<li>We're propagating top-level application state safely down to request handlers</li>\n</ul>\n<p>Doesn't seem like much, but we've accomplished quite a bit! Let's go back and add a bit of <code>tracing</code> so we can see\ninside the mind of our function as it processes requests. Recall earlier in the expanded macro just above <code>main</code> that\nshuttle provides we have our application bootstrapped with <code>tracing</code> behind the scenes ready to go to start logging.\nLet's add some trace logging in a few places so we can pretty-print out to the console. First, let's add the <code>tracing</code>\ncrate:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#9ECBFF\"> tracing</span></span></code></pre></figure>\n<p>Next, let's update our <code>main</code> function to include a bit of startup-style logging:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">#[shuttle_runtime</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">main]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#E1E4E8\">(#[</span><span style=\"color:#B392F0\">shuttle_secrets</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Secrets</span><span style=\"color:#E1E4E8\">] secret_store</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> SecretStore</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> shuttle_axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">ShuttleAxum</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    tracing</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">info!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Bootstrapping function secrets\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> token </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> secret_store</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"GITHUB_ACCESS_TOKEN\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"No access token was provided.\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    tracing</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">info!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Secrets successfully read, building server router\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> router </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Router</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">route</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/:repository/stars\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(get_repository_stars))</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">with_state</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new_state</span><span style=\"color:#E1E4E8\">(token));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    tracing</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">info!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Router successfully initialized, now listening on port 8000\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(router</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Then, let's add some logging to our request handler in <code>handlers.rs</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_repository_stars</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    State</span><span style=\"color:#E1E4E8\">(state)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#E1E4E8\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Path</span><span style=\"color:#E1E4E8\">(repository)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Path</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">String</span><span style=\"color:#E1E4E8\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StarsResponse</span><span style=\"color:#E1E4E8\">>, </span><span style=\"color:#B392F0\">ApiError</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    tracing</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">info!</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        \"Received request to get start count for repository {}\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        repository</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> response </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> StarsResponse</span><span style=\"color:#E1E4E8\"> { count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> 9000</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">(response))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Notice that I've added a <code>Path(repository): Path&#x3C;String></code> to our handler's input - this is axum's way of accessing\ndynamic route values based on the <code>:repository</code> path route from our router. Spinning up our function (or simply waiting\nif you're still <code>cargo watch</code>ing), we should the output in the console (omitting timestamps for brevity):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">INFO</span><span style=\"color:#9ECBFF\"> serverless_rust_with_shuttle:</span><span style=\"color:#9ECBFF\"> Bootstrapping</span><span style=\"color:#9ECBFF\"> function</span><span style=\"color:#9ECBFF\"> secrets</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">INFO</span><span style=\"color:#9ECBFF\"> serverless_rust_with_shuttle:</span><span style=\"color:#9ECBFF\"> Secrets</span><span style=\"color:#9ECBFF\"> successfully</span><span style=\"color:#9ECBFF\"> read,</span><span style=\"color:#9ECBFF\"> building</span><span style=\"color:#9ECBFF\"> server</span><span style=\"color:#9ECBFF\"> router</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">INFO</span><span style=\"color:#9ECBFF\"> serverless_rust_with_shuttle:</span><span style=\"color:#9ECBFF\"> Router</span><span style=\"color:#9ECBFF\"> successfully</span><span style=\"color:#9ECBFF\"> initialized,</span><span style=\"color:#9ECBFF\"> now</span><span style=\"color:#9ECBFF\"> listening</span><span style=\"color:#9ECBFF\"> on</span><span style=\"color:#9ECBFF\"> port</span><span style=\"color:#79B8FF\"> 8000</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Starting</span><span style=\"color:#9ECBFF\"> serverless-rust-with-shuttle</span><span style=\"color:#9ECBFF\"> on</span><span style=\"color:#9ECBFF\"> http://127.0.0.1:8000</span></span></code></pre></figure>\n<p>Sending a request through again, we should see the repository name from the route path being logged as well:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\"># From another terminal window...</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#79B8FF\"> --location</span><span style=\"color:#9ECBFF\"> 'localhost:8000/my-repository/stars'</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># In our output console</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">INFO</span><span style=\"color:#9ECBFF\"> serverless_rust_with_shuttle::handlers:</span><span style=\"color:#9ECBFF\"> Received</span><span style=\"color:#9ECBFF\"> request</span><span style=\"color:#9ECBFF\"> to</span><span style=\"color:#9ECBFF\"> get</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> count</span><span style=\"color:#9ECBFF\"> for</span><span style=\"color:#9ECBFF\"> repository</span><span style=\"color:#9ECBFF\"> my-repository</span></span></code></pre></figure>\n<p>Nice! Pat yourself on the back, we've written quite a bit of code and have a functioning server listening to requests.\nWe still have two things left:</p>\n<ol>\n<li>Calling the GitHub API to retrieve star counts</li>\n<li>Deploying our function to production</li>\n</ol>\n<h2>Deploying to shuttle</h2>\n<p>Before we finish up the core logic of our code, let's left-shift our deployment process a bit. Let's deploy our\nfunction, verifying all our I's are dotted and T's crossed. Heading over to <a href=\"https://shuttle.rs\">shuttle</a>'s website and\nsigning up, we should be met with a screen like the following:</p>\n<p><img src=\"/images/serverless-rust-with-shuttle/shuttle_dashboard.png\" alt=\"shuttle dashboard\"></p>\n<p>I'm also going to update the name of our function to something a bit more relevant with a <code>Shuttle.toml</code> file at the\nroot of our project:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark\"><code data-language=\"toml\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1E4E8\">name = </span><span style=\"color:#9ECBFF\">\"github-repository-star-counter\"</span></span></code></pre></figure>\n<p>You'll need to adjust the name as, sadly, I'll be taking this name for myself. Once you're authenticated, simply run the\ndeploy command <code>cargo shuttle deploy</code> and we should a bunch of internal logging from shuttle along with a successful\ndeploy message along the lines of:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">These</span><span style=\"color:#9ECBFF\"> secrets</span><span style=\"color:#9ECBFF\"> can</span><span style=\"color:#9ECBFF\"> be</span><span style=\"color:#9ECBFF\"> accessed</span><span style=\"color:#9ECBFF\"> by</span><span style=\"color:#9ECBFF\"> github-repository-star-counter</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">╭─────────────────────╮</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">│</span><span style=\"color:#9ECBFF\">         Keys</span><span style=\"color:#9ECBFF\">        │</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">╞═════════════════════╡</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">│</span><span style=\"color:#9ECBFF\"> GITHUB_ACCESS_TOKEN</span><span style=\"color:#9ECBFF\"> │</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">╰─────────────────────╯</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Service</span><span style=\"color:#9ECBFF\"> Name:</span><span style=\"color:#9ECBFF\">  github-repository-star-counter</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Deployment</span><span style=\"color:#9ECBFF\"> ID:</span><span style=\"color:#79B8FF\"> 3339</span><span style=\"color:#9ECBFF\">ef4c-60f0-47e6-a159-5034ac03ad4f</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Status:</span><span style=\"color:#9ECBFF\">        running</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">Last</span><span style=\"color:#9ECBFF\"> Updated:</span><span style=\"color:#79B8FF\">  2023</span><span style=\"color:#9ECBFF\">-03-29T23:09:40Z</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">URI:</span><span style=\"color:#9ECBFF\">           https://github-repository-star-counter.shuttleapp.rs</span></span></code></pre></figure>\n<p>Heck yeah! Our function has been deployed and also picked up our key from our <code>Secrets.toml</code> file. Let's test it out\nby <code>curl</code>ing to the URI:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#79B8FF\"> --location</span><span style=\"color:#9ECBFF\"> https://github-repository-star-counter.shuttleapp.rs/my-repository/stars</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">\"count\"</span><span style=\"color:#B392F0\">:9000}</span></span></code></pre></figure>\n<p>We've officially got serverless Rust running in production - how cool is that?</p>\n<p>With our initial deployment out of the way, let's finish fleshing out our function to retrieve repository stars.</p>\n<h2>Back to business</h2>\n<p>Let's add the client request to GitHub. Since we'll be establishing a connection to GitHub's API servers, rather than\nspin up a new HTTP client per request, let's instantiate a single client at startup for our handlers to pull out of from\nstate. There are lots of benefits to recycling HTTP client connections throughout an application's lifetime, but that's\na bit beyond the scope of what we're doing today.</p>\n<p>Let's update our <code>HandlerState</code> to include a <code>Client</code> from the <code>reqwest</code> crate:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">sync</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> reqwest</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Client</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> struct</span><span style=\"color:#B392F0\"> HandlerState</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> access_token</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#E1E4E8\"> client</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Client</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> HandlerState</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    pub</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> new_state</span><span style=\"color:#E1E4E8\">(access_token</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        let</span><span style=\"color:#E1E4E8\"> client </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Client</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        Arc</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">new</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            access_token,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            client,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        })</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Now that we'll have access to the HTTP client, let's test out a call to the repositories. The URL we'll be calling to\nretrieve repository information will be in the form of <code>https://api.github.com/repos/OWNER/REPO</code> where we'll hard\ncode <code>OWNER</code> to be your username for now. Let's test a call out to see what the response looks like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#79B8FF\"> --request</span><span style=\"color:#9ECBFF\"> GET</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">--url </span><span style=\"color:#9ECBFF\">\"https://api.github.com/repos/joeymckenzie/realworld-rust-axum-sqlx\"</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">--header </span><span style=\"color:#9ECBFF\">\"Accept: application/vnd.github+json\"</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">--header </span><span style=\"color:#9ECBFF\">\"Authorization: Bearer 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\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  \"id\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#79B8FF\"> 485222387</span><span style=\"color:#9ECBFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  \"node_id\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#9ECBFF\"> \"R_kgDOHOvn8w\",</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  \"name\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#9ECBFF\"> \"realworld-rust-axum-sqlx\",</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  //</span><span style=\"color:#9ECBFF\"> ...a</span><span style=\"color:#9ECBFF\"> ton</span><span style=\"color:#9ECBFF\"> of</span><span style=\"color:#9ECBFF\"> other</span><span style=\"color:#9ECBFF\"> properties</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">  \"stargazers_count\"</span><span style=\"color:#79B8FF\">:</span><span style=\"color:#79B8FF\"> 129</span><span style=\"color:#9ECBFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>We see in the response we get <em>a lot</em> of other data that doesn't necessarily pertain to the number of stars on the\nrepositories. The only property we care about for now is the <code>stargazers_count</code> which represents the number of stars our\nrepository has. Let's create a response model to deserialize this response into Rust code. Back in our <code>handlers.rs</code>\nfile:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\">// Imports...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> struct</span><span style=\"color:#B392F0\"> StarsResponse</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    count</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> usize</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Deserialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> struct</span><span style=\"color:#B392F0\"> GitHubRepositoryResponse</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    stargazers_count</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> usize</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_repository_stars</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    State</span><span style=\"color:#E1E4E8\">(state)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#E1E4E8\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Path</span><span style=\"color:#E1E4E8\">(repository)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Path</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">String</span><span style=\"color:#E1E4E8\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StarsResponse</span><span style=\"color:#E1E4E8\">>, </span><span style=\"color:#B392F0\">ApiError</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\">    // Code...</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>We've added a <code>GithubRepositoryResponse</code> to handle pulling data out into a <code>struct</code>. Let's implement the call now in our\nhandler:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_repository_stars</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    State</span><span style=\"color:#E1E4E8\">(state)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#E1E4E8\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Path</span><span style=\"color:#E1E4E8\">(repository)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Path</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">String</span><span style=\"color:#E1E4E8\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StarsResponse</span><span style=\"color:#E1E4E8\">>, </span><span style=\"color:#B392F0\">ApiError</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    tracing</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">info!</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        \"Received request to get start count for repository {}\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        repository</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> url </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> format!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"https://api.github.com/repos/joeymckenzie/{}\"</span><span style=\"color:#E1E4E8\">, repository);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> response </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> state</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#E1E4E8\">client</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(url)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">bearer_auth</span><span style=\"color:#E1E4E8\">(state</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">access_token)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">send</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .await?</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> response </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> StarsResponse</span><span style=\"color:#E1E4E8\"> { count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> 9000</span><span style=\"color:#E1E4E8\"> };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">(response))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Now if try to compile, we'll get an error yelling at us stating we have no conversion between a <code>reqwest</code> error and\nsomething axum understands with our <code>ApiError</code>. Yep, you guessed it - time to do some error converting.</p>\n<h2>Propagating errors</h2>\n<p>One of the first fundamental concepts we learn in Rust is the proper handling and conversion of errors. With Rust's\nexpansive crate ecosystem and library authors offering custom errors about their internal processes in their public\nAPIs, we're bound to eventually be forced to convert external errors to something that's known within our programs.\nThere are many great articles, including <a href=\"https://doc.rust-lang.org/stable/book/\">the book itself</a>, that do a much more\nfantastic job than I'll do here going over converting errors from (in our case) <code>reqwest</code> to our internal <code>ApiError</code>.</p>\n<p>In the simplest case, we'll need to convert <code>From</code> a <code>reqwest::Error</code> to an <code>ApiError</code>:</p>\n<h3>errors.rs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> enum</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    RequestFailed</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">String</span><span style=\"color:#E1E4E8\">),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> From</span><span style=\"color:#E1E4E8\">&#x3C;reqwest</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#F97583\">for</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    fn</span><span style=\"color:#B392F0\"> from</span><span style=\"color:#E1E4E8\">(value</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> reqwest</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#79B8FF\"> Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">        Self</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">RequestFailed</span><span style=\"color:#E1E4E8\">(value</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">to_string</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>We could do this for any number of errors that will rear their ugly heads at some point while our function is executing,\nbut for now, I'll take the easy way out with <a href=\"https://crates.io/crates/thiserror\"><code>thiserror</code></a>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#9ECBFF\"> thiserror</span></span></code></pre></figure>\n<p>Now we can trim up <code>errors.rs</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">response</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">IntoResponse</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> http</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">StatusCode</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> serde</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">use</span><span style=\"color:#B392F0\"> thiserror</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Serialize</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">struct</span><span style=\"color:#B392F0\"> HandlerError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    message</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> String</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[derive(</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> enum</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    #[error(</span><span style=\"color:#9ECBFF\">\"The request to GitHub failed: {0}\"</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    RequestFailed</span><span style=\"color:#E1E4E8\">(#[from] </span><span style=\"color:#B392F0\">reqwest</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> IntoResponse</span><span style=\"color:#F97583\"> for</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    fn</span><span style=\"color:#B392F0\"> into_response</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> axum</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">response</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Response</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        let</span><span style=\"color:#E1E4E8\"> (status, error_message) </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> match</span><span style=\"color:#79B8FF\"> self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">            Self</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">RequestFailed</span><span style=\"color:#E1E4E8\">(e) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#B392F0\">StatusCode</span><span style=\"color:#F97583\">::</span><span style=\"color:#79B8FF\">INTERNAL_SERVER_ERROR</span><span style=\"color:#E1E4E8\">, e</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">to_string</span><span style=\"color:#E1E4E8\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        let</span><span style=\"color:#E1E4E8\"> body </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> Json</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">HandlerError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            message</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> error_message,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        (status, body)</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">into_response</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Leaning on <code>thiserror</code>, we can leverage the <code>#[error]</code> macro to spit out a bit of boilerplate error conversion code for\nus. For a sanity check, let's take a look at the generated code with another quick <code>cargo expand errors</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> enum</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    #[error(</span><span style=\"color:#9ECBFF\">\"The request to GitHub failed\"</span><span style=\"color:#E1E4E8\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    RequestFailed</span><span style=\"color:#E1E4E8\">(#[from] </span><span style=\"color:#B392F0\">reqwest</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[allow(unused_qualifications)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">error</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#F97583\"> for</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    fn</span><span style=\"color:#B392F0\"> source</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">option</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Option</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">dyn</span><span style=\"color:#E1E4E8\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">error</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#F97583\"> +</span><span style=\"color:#E1E4E8\"> '</span><span style=\"color:#B392F0\">static</span><span style=\"color:#E1E4E8\">)> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        use</span><span style=\"color:#B392F0\"> thiserror</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">__private</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">AsDynError</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        #[allow(deprecated)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        match</span><span style=\"color:#79B8FF\"> self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">            ApiError</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">RequestFailed</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#79B8FF\">0</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> source, </span><span style=\"color:#F97583\">..</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">                std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">option</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Option</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Some</span><span style=\"color:#E1E4E8\">(source</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">as_dyn_error</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[allow(unused_qualifications)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">fmt</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Display</span><span style=\"color:#F97583\"> for</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    fn</span><span style=\"color:#B392F0\"> fmt</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">, __formatter</span><span style=\"color:#F97583\">:</span><span style=\"color:#F97583\"> &#x26;mut</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">fmt</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Formatter</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">fmt</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Result</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        #[allow(unused_variables, deprecated, clippy</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">used_underscore_binding)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        match</span><span style=\"color:#79B8FF\"> self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">            ApiError</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">RequestFailed</span><span style=\"color:#E1E4E8\">(_0) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                __formatter</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">write_fmt</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">format_args!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"The request to GitHub failed\"</span><span style=\"color:#E1E4E8\">))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[allow(unused_qualifications)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#B392F0\"> std</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">convert</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">From</span><span style=\"color:#E1E4E8\">&#x3C;reqwest</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#F97583\">for</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    #[allow(deprecated)]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    fn</span><span style=\"color:#B392F0\"> from</span><span style=\"color:#E1E4E8\">(source</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> reqwest</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#79B8FF\"> Self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        ApiError</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">RequestFailed</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#79B8FF\">            0</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> source,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">#[automatically_derived]</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">impl</span><span style=\"color:#F97583\"> ::</span><span style=\"color:#B392F0\">core</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">fmt</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Debug</span><span style=\"color:#F97583\"> for</span><span style=\"color:#B392F0\"> ApiError</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    fn</span><span style=\"color:#B392F0\"> fmt</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#79B8FF\">self</span><span style=\"color:#E1E4E8\">, f</span><span style=\"color:#F97583\">:</span><span style=\"color:#F97583\"> &#x26;mut</span><span style=\"color:#F97583\"> ::</span><span style=\"color:#B392F0\">core</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">fmt</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Formatter</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#F97583\"> ::</span><span style=\"color:#B392F0\">core</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">fmt</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Result</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        match</span><span style=\"color:#79B8FF\"> self</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">            ApiError</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">RequestFailed</span><span style=\"color:#E1E4E8\">(__self_0) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                ::</span><span style=\"color:#B392F0\">core</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">fmt</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">Formatter</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">debug_tuple_field1_finish</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                    f,</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">                    \"RequestFailed\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">                    &#x26;</span><span style=\"color:#E1E4E8\">__self_0,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                )</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Sifting through the other bits of code that are printed out to the console, we see that <code>thiserror</code> is generating some\nboilerplate to <code>impl</code> <code>std::error::Error</code> and <code>From&#x3C;reqwest::Error></code> for us, so we can avoid writing the implementations\nourselves. Thanks, <a href=\"https://crates.io/users/dtolnay\">dtolnay</a>!</p>\n<h2>So many stars</h2>\n<p>Okay, back to our handler. So we're handling the result errors <code>reqwest</code> <em>could</em> propagate back to us, now let's rip\nthe <code>stargazer_count</code> off the API response to map back to our <code>StarsResponse</code> struct. Let's throw a <code>.json()</code> after\nour <code>.await?</code> to do so:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"rust\" data-theme=\"github-dark\"><code data-language=\"rust\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">pub</span><span style=\"color:#F97583\"> async</span><span style=\"color:#F97583\"> fn</span><span style=\"color:#B392F0\"> get_repository_stars</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    State</span><span style=\"color:#E1E4E8\">(state)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> State</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Arc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">HandlerState</span><span style=\"color:#E1E4E8\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Path</span><span style=\"color:#E1E4E8\">(repository)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Path</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">String</span><span style=\"color:#E1E4E8\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">-></span><span style=\"color:#B392F0\"> Result</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">StarsResponse</span><span style=\"color:#E1E4E8\">>, </span><span style=\"color:#B392F0\">ApiError</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    tracing</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">info!</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">        \"Received request to get start count for repository {}\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        repository</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> url </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> format!</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"https://api.github.com/repos/joeymckenzie/{}\"</span><span style=\"color:#E1E4E8\">, repository);</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    dbg!</span><span style=\"color:#E1E4E8\">(url</span><span style=\"color:#F97583\">.</span><span style=\"color:#B392F0\">clone</span><span style=\"color:#E1E4E8\">());</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> github_response </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> state</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#E1E4E8\">client</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(url)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">bearer_auth</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">state</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">access_token)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">header</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"User-Agent\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"github-repository-star-counter/0.0.1\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">send</span><span style=\"color:#E1E4E8\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .await?</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .</span><span style=\"color:#B392F0\">json</span><span style=\"color:#F97583\">::</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">GitHubRepositoryResponse</span><span style=\"color:#E1E4E8\">>()</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        .await?</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> response </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> StarsResponse</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        count</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> github_response</span><span style=\"color:#F97583\">.</span><span style=\"color:#E1E4E8\">stargazers_count,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    Ok</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">Json</span><span style=\"color:#E1E4E8\">(response))</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>We'll attempt to deserialize the response into our <code>GitHubRepositoryResponse</code> and again <code>await?</code> the process as we need\nto read from the response buffer and propagate any errors. We're already converting between <code>reqwest</code> errors and our\ninternal <code>ApiError</code>, so we're all good there.</p>\n<p>We also add a <code>User-Agent</code> header to let the GitHub API servers know who we are - this is arbitrary for our purposes,\nbut is important for requests coming from the browser, in Postman, etc. Let's spin up our function and send a request\nthrough:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\"> curl</span><span style=\"color:#79B8FF\"> -l</span><span style=\"color:#9ECBFF\"> http://localhost:8000/realworld-rust-axum-sqlx/stars</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">\"count\"</span><span style=\"color:#B392F0\">:129}</span></span></code></pre></figure>\n<p>We have a response! Now that we've got the core logic in place, let's go ahead and deploy our function\nwith <code>cargo shuttle deploy</code>. Once the deployment finishes, let's ping our function at the deployment URL:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#79B8FF\"> -l</span><span style=\"color:#9ECBFF\"> https://github-repository-star-counter.shuttleapp.rs/realworld-rust-axum-sqlx/stars</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">{</span><span style=\"color:#B392F0\">\"count\"</span><span style=\"color:#B392F0\">:129}</span></span></code></pre></figure>\n<p>Nice! We've got good responses coming back from a serverless function written entirely in Rust. Let's check the logs\nwith a quick <code>cargo shuttle logs</code> to trace our request:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">cargo</span><span style=\"color:#9ECBFF\"> shuttle</span><span style=\"color:#9ECBFF\"> logs</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"># A few other logs that aren't important for now...</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\"> INFO</span><span style=\"color:#9ECBFF\"> serverless_rust_with_shuttle::handlers:</span><span style=\"color:#9ECBFF\"> Received</span><span style=\"color:#9ECBFF\"> request</span><span style=\"color:#9ECBFF\"> to</span><span style=\"color:#9ECBFF\"> get</span><span style=\"color:#9ECBFF\"> start</span><span style=\"color:#9ECBFF\"> count</span><span style=\"color:#9ECBFF\"> for</span><span style=\"color:#9ECBFF\"> repository</span><span style=\"color:#9ECBFF\"> realworld-rust-axum-sqlx</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">DEBUG</span><span style=\"color:#9ECBFF\"> reqwest::connect:</span><span style=\"color:#9ECBFF\"> starting</span><span style=\"color:#9ECBFF\"> new</span><span style=\"color:#9ECBFF\"> connection:</span><span style=\"color:#9ECBFF\"> https://api.github.com/</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">DEBUG</span><span style=\"color:#9ECBFF\"> hyper::client::connect::dns:</span><span style=\"color:#9ECBFF\"> resolving</span><span style=\"color:#9ECBFF\"> host=\"api.github.com\"</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">DEBUG</span><span style=\"color:#9ECBFF\"> hyper::client::connect::http:</span><span style=\"color:#9ECBFF\"> connecting</span><span style=\"color:#9ECBFF\"> to</span><span style=\"color:#79B8FF\"> 140.82</span><span style=\"color:#9ECBFF\">.121.6:443</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\"> INFO</span><span style=\"color:#9ECBFF\"> serverless_rust_with_shuttle::handlers:</span><span style=\"color:#9ECBFF\"> Response</span><span style=\"color:#9ECBFF\"> received</span><span style=\"color:#9ECBFF\"> from</span><span style=\"color:#9ECBFF\"> GitHub</span><span style=\"color:#9ECBFF\"> GitHubRepositoryResponse</span><span style=\"color:#9ECBFF\"> {</span><span style=\"color:#9ECBFF\"> stargazers_count:</span><span style=\"color:#79B8FF\"> 129</span><span style=\"color:#9ECBFF\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">DEBUG</span><span style=\"color:#9ECBFF\"> hyper::proto::h1::io:</span><span style=\"color:#9ECBFF\"> flushed</span><span style=\"color:#79B8FF\"> 121</span><span style=\"color:#9ECBFF\"> bytes</span></span></code></pre></figure>\n<h2>Wrapping up</h2>\n<p>And that's a wrap! We've got Rust running out in the wild in the form of a serverless function and I couldn't be\nhappier. There's quite a bit of cleanup we could do, for instance handling cases where the repository doesn't exist, but\nI'll leave that as an exercise for the reader.</p>\n<p>All the source code for this function can be on my\nGitHub <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-tech/samples/rust/with-shuttle\">here</a>.</p>\n<p>Until next, friends!</p>"
  },
  "_id": "2023/serverless-rust-with-shuttle.md",
  "_raw": {
    "sourceFilePath": "2023/serverless-rust-with-shuttle.md",
    "sourceFileName": "serverless-rust-with-shuttle.md",
    "sourceFileDir": "2023",
    "contentType": "markdown",
    "flattenedPath": "2023/serverless-rust-with-shuttle"
  },
  "type": "Post",
  "url": "/blog/2023/serverless-rust-with-shuttle"
}