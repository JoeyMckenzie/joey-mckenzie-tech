{
  "title": "React data fetching with RxJS",
  "description": "Use RxJS to implement simple data fetching, making ALL THE THINGS reactive!",
  "pubDate": "2022-03-03T08:00:00.000Z",
  "category": "react",
  "heroImage": "/images/react-data-fetching/react-data-fetching-meme.jpg",
  "draft": false,
  "keywords": [
    "react",
    "nextjs",
    "rxjs"
  ],
  "body": {
    "raw": "\nData fetching with React offers a wide selection of tools to do the job, from simple promises, to more sophisticated\ncaching libraries like [react-query](https://react-query.tanstack.com/) and [swr](https://swr.vercel.app/). With a\nplethora of options, developers have their choice of favorite fetching tools to get the job done and make our\napplications performant on all fronts. As an Angular developer, I make heavy usage of [RxJS](https://rxjs.dev/)\nwhere I can, and luckily Angular treats the library as a first class citizen with many Angular internals (router\nevents, the `HttpClient`, etc.), making use of `Observables` to stream data in a reactive way.\n\nLately, however, I've taken the React-fork-in-the-road and have been experimenting with data fetching tools and\nhooks for the React/next.js applications I've been working on. While, again, there are many tools that solve the\nproblem of data fetching and mutation made by people much, _much_ smarter than myself, I was looking to integrate\nRxJS into the tools I use for such a task. What I found, coincidentally, was the perfect marriage between my data\nfetching library of choice, Vercel's [swr](https://swr.vercel.app/) (a gift from the folks behind next.js), and\n`fetch`-based `Observables`.\n\nWhile [we can likely expect subscriptions to data sources from swr](https://github.com/vercel/swr/pull/1263)\nsometime soon, I've found the utility offered by RxJS allows for incredible control over emissions of stream data to\nsubscribers that I would prefer _not_ to give up, if given the chance. While I'll definitely experiment with\nsubscriptions coming to swr, I decided to sandbox around with RxJS, next.js, and swr to see what was currently\npossible with data fetching using `Observables` - what I found was _quite_ interesting.\n\n## Starting with tradition\n\nTo keep things simple, I'll run through four scenarios using a sample next.js application:\n\n1. SSR with traditional promises\n2. SSR with `async`/`await`\n3. SSR with RxJS\n4. CSR with RxJS\n\nOkay, timeout. SSR? CSR?\n\n-   SSR - **S**erver-**s**ide **r**ending (or prerendering), the act of rendering the template data into said\n    template _on_ the server before handing it back to the client. In essence, retrieving all the necessary data for an\n    HTML page then rendering said data in the markup and handing it back to the browser.\n-   CSR - **C**lient-**s**ide **r**endering, the act of rending template data _after_ the route has been served\n    to/rendered by the client, or simply making our calls to fetch data after the markup is rendered, which we'll update\n    once the data has been fetched.\n\nWithin the context of next.js, what this means is that we'll have three separate page routes that will invoke\n`getServerSideProps` to fetch data for our page before serving it up to the client. This content is rendered on the\nserver, meaning the client receives a ready-to-go HTML document with all the appropriate data already in markup.\n\nIn our CSR scenario, we'll utilize `swr` as a data fetching hook to retrieve data for us once the page has been served,\nwhere our fetching will happen once the page loads, meaning there will be two renders: one on page load, and again\nonce the data is available and the render hook forces a re-render of the page.\n\nThere's one glaring question we should probably take a crack at answering before going further: **why use RxJS in the\nfirst place?**\n\n## RxJS in a nutshell\n\nComing from the Angular world, devs have more than likely been heavily exposed to RxJS due to the\nframework's tight integration with the library. RxJS implements, more or less, the publisher/subscriber pattern (or\npub/sub for short) to allow _subscribers_ of _publishers_ to tune into essential streams of data they may be\ninterested in. In plain english, instead of asking for some work to be done with the `Promise` of it completing sometime\nin the near future and `await`ing the data's arrival, we listen in on select streams of data that emit things we're\ninterested in as\nthey happen -\nwe're simply _reacting_ to data as it's published through the stream. In code:\n\n```js\nimport { interval, take } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nconst dataSource$ = interval(1000);\n\ndataSource$\n    .pipe(\n        take(5),\n        finalize(() => console.log('data captured!')),\n    )\n    .subscribe(console.log);\n\n/**\n * Output:\n *\n * 0\n * 1\n * 2\n * 3\n * 4\n * data captured!\n */\n```\n\nWithout going too deep into RxJS operators (the official documentation does a better job than I could ever do at\nexplaining operator functions), we have a source of data, `dataSource$`, that emits numbers every frame for 1000\nframe, with a frame in this context being one second. We're `.subscribe`ing to those emissions, `take`ing only the\nfirst five, then closing our stream to listen as\nwe're only interested in the five emissions. Our `dataSource$` in this case is an `Observerable`, a foundational\nconstruct in pub/sub that is the publishing source for subscribers. With RxJS, `Observable`s are just streams, and\nwon't begin _emitting_ data until a subscriber, well, `.subscribe()`s to the stream.\n\nWithin the scope of this article, we're _barely_ scraping the surface of what RxJS is capable of and what benefits\nit may offer over more traditional data flow models in our code. I'll leave it to the RxJS experts to speak on the\nintricacies of the library as we'll mainly be focusing on fetching data within the context of RxJS.\n\n## Getting started\n\nOkay, enough talk. Let's code! For our demo, we'll tap into the amazing [GitHub API](https://docs.github.com/en/rest)\nto explore repositories. I've spun up a simple next.js app:\n\n```shell\nnpx create-next-app@latest --ts react-rxjs-data-fetching-demo\n```\n\nI'm using next.js in this case as we want to showcase data fetching in both the CSR and SSR contexts. Everything\nwe'll do within the scope of this blog post is similarly applicable to your average react project. With our project\nscaffolded, let's add a few dependencies:\n\n```shell\nnpm install swr rxjs\n```\n\nI'm partial to swr for data fetching, and you're more than welcome to use your own hook fetching library. I've also\nadded [Tailwind](https://tailwindcss.com/) out of habit in order to make things not look like a webpage from 1995.\nWith our dependencies installed, let's add a page for our first scenario: SSR with the tried-and-true\n`Promise`-based data fetching:\n\n#### pages/with-promises.tsx\n\n```tsx\nimport { GetServerSideProps, NextPage } from 'next';\nimport { useEffect } from 'react';\nimport { githubBaseUrl } from '../lib/constants';\nimport { GitHubRepoMeta, WithFetcherProps } from '../lib/types';\nimport { mapRepos } from '../lib/utilities';\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n    const mappedGitHubRepos = await fetch(githubBaseUrl, {\n        headers: {\n            Authorization: `token ${process.env.GITHUB_ACCESS_TOKEN}`,\n        },\n    })\n        .then((response) => response.json())\n        .then(mapRepos)\n        .catch((error) => {\n            console.error(error);\n            return [] as GitHubRepoMeta[];\n        });\n\n    return {\n        props: {\n            mappedGitHubRepos,\n        },\n    };\n};\n\nconst WithPromises: NextPage<WithFetcherProps> = ({ mappedGitHubRepos }) => {\n    useEffect(() => console.log(mappedGitHubRepos), [mappedGitHubRepos]);\n\n    return (\n        <h2 className=\"text-2xl\">\n            Number of repos: {mappedGitHubRepos.length}\n        </h2>\n    );\n};\n\nexport default WithPromises;\n```\n\nI've added a few things to help us along the way underneath the `lib` directory:\n\n#### lib/constants.ts\n\n```ts\nexport const githubBaseUrl =\n    'https://api.github.com/users/{{yourUsername}}/repos';\n```\n\n#### lib/utilities.ts\n\n```ts\nimport { GitHubReposApiResponse } from './types';\n\nexport function mapRepos(repos: GitHubReposApiResponse[]) {\n    return repos.map((repo) => ({\n        name: repo.name,\n        forks: repo.forks_count,\n        stars: repo.stargazers_count,\n    }));\n}\n```\n\n#### lib/types.ts\n\n```ts\ninterface Owner {\n    login: string;\n    id: number;\n    node_id: string;\n    avatar_url: string;\n    gravatar_id: string;\n    url: string;\n    html_url: string;\n    followers_url: string;\n    following_url: string;\n    gists_url: string;\n    starred_url: string;\n    subscriptions_url: string;\n    organizations_url: string;\n    repos_url: string;\n    events_url: string;\n    received_events_url: string;\n    type: string;\n    site_admin: boolean;\n}\n\ninterface Permissions {\n    admin: boolean;\n    maintain: boolean;\n    push: boolean;\n    triage: boolean;\n    pull: boolean;\n}\n\nexport interface GitHubReposApiResponse {\n    id: number;\n    node_id: string;\n    name: string;\n    full_name: string;\n    private: boolean;\n    owner: Owner;\n    html_url: string;\n    description: string;\n    fork: boolean;\n    url: string;\n    forks_url: string;\n    keys_url: string;\n    collaborators_url: string;\n    teams_url: string;\n    hooks_url: string;\n    issue_events_url: string;\n    events_url: string;\n    assignees_url: string;\n    branches_url: string;\n    tags_url: string;\n    blobs_url: string;\n    git_tags_url: string;\n    git_refs_url: string;\n    trees_url: string;\n    statuses_url: string;\n    languages_url: string;\n    stargazers_url: string;\n    contributors_url: string;\n    subscribers_url: string;\n    subscription_url: string;\n    commits_url: string;\n    git_commits_url: string;\n    comments_url: string;\n    issue_comment_url: string;\n    contents_url: string;\n    compare_url: string;\n    merges_url: string;\n    archive_url: string;\n    downloads_url: string;\n    issues_url: string;\n    pulls_url: string;\n    milestones_url: string;\n    notifications_url: string;\n    labels_url: string;\n    releases_url: string;\n    deployments_url: string;\n    created_at: Date;\n    updated_at: Date;\n    pushed_at: Date;\n    git_url: string;\n    ssh_url: string;\n    clone_url: string;\n    svn_url: string;\n    homepage: string;\n    size: number;\n    stargazers_count: number;\n    watchers_count: number;\n    language: string;\n    has_issues: boolean;\n    has_projects: boolean;\n    has_downloads: boolean;\n    has_wiki: boolean;\n    has_pages: boolean;\n    forks_count: number;\n    mirror_url?: any;\n    archived: boolean;\n    disabled: boolean;\n    open_issues_count: number;\n    license?: any;\n    allow_forking: boolean;\n    is_template: boolean;\n    topics: string[];\n    visibility: string;\n    forks: number;\n    open_issues: number;\n    watchers: number;\n    default_branch: string;\n    permissions: Permissions;\n    temp_clone_token: string;\n    allow_squash_merge: boolean;\n    allow_merge_commit: boolean;\n    allow_rebase_merge: boolean;\n    allow_auto_merge: boolean;\n    delete_branch_on_merge: boolean;\n    allow_update_branch: boolean;\n    network_count: number;\n    subscribers_count: number;\n}\n\nexport interface GitHubRepoMeta {\n    name: string;\n    stars: number;\n    forks: number;\n}\n\nexport interface WithFetcherProps {\n    mappedGitHubRepos: GitHubRepoMeta[];\n}\n```\n\nBreaking it down:\n\n-   `constants.ts` is just a constant string, update it with your GitHub username\n-   `utilties.ts` will house some common mapping/retrieving functions to be reused amongst components and pages\n-   `types.ts` houses all the type information we expect back from the API and the prop shapes our pages will expect\n\nBefore you ask, no, I didn't manually write out the interface for the GitHub API response, I\nused [json2ts](http://www.json2ts.com/) to quickly model out the response object to TypeScript based on the JSON data\nreturned\nfrom calling my username repo endpoint. We also explicitly type our page props using `WithFetchProps` for sanity.\nYou can use `InferGetServerSidePropsType` from next.js, but I find intellisense from VS Code lacking so I swapped\nout my own type.\n\nJumping back to `with-promises.tsx`, let's take a look at our fetcher function responsible for getting the data our\ntemplate will rely on:\n\n#### with-promises.tsx\n\n```ts\nexport const getServerSideProps: GetServerSideProps = async () => {\n    const mappedGitHubRepos = await fetch(githubBaseUrl, {\n        headers: {\n            Authorization: `token ${process.env.GITHUB_ACCESS_TOKEN}`,\n        },\n    })\n        .then((response) => response.json())\n        .then(mapRepos)\n        .catch((error) => {\n            console.error(error);\n            return [] as GitHubRepoMeta[];\n        });\n\n    return {\n        props: {\n            mappedGitHubRepos,\n        },\n    };\n};\n```\n\nWe're utilizing next.js's mechanism\nfor [server-side data fetching](https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props)\nwith `getServerSideProps`, simply calling out to the GH\nAPI endpoint for our repositories, streaming the JSON response, and mapping the response to a simple object for our\npage to display while appropriately handling any errors that may occur. While this suffices for our need to retrieve\ndata, we're using promise resolution in its most primitive form. I'm still `await` the promise to resolve itself\nbefore returning the props data back to the page, as promises are asynchronous and will jump to the next resolution\nscope whenever they can, so we need to block the next lines of code execution until our promise has fully been\nresolved.\n\nI'm sure we've all\nseen a `Promise`\nhandled the\ntraditional way before, and after having used RxJS for a number of years now, I'm going to say something rather\ncontroversial: I prefer `.then()/.catch()` over `try`/`catch` \\*_pauses for gasps_\\*.\n\nOkay, this is fine, but what about using `try`/`catch` with a few more `async`/`await`s sprinkled in?\n\n#### pages/with-try-catch.tsx\n\n```tsx\nimport {\n    GetServerSideProps,\n    InferGetServerSidePropsType,\n    NextPage,\n} from 'next';\nimport { useEffect } from 'react';\nimport { githubBaseUrl } from '../lib/constants';\nimport {\n    GitHubRepoMeta,\n    GitHubReposApiResponse,\n    WithFetcherProps,\n} from '../lib/types';\nimport { mapRepos } from '../lib/utilities';\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n    let mappedGitHubRepos: GitHubRepoMeta[] = [];\n\n    try {\n        const response = await fetch(githubBaseUrl, {\n            headers: {\n                Authorization: `token ${process.env.GITHUB_ACCESS_TOKEN}`,\n            },\n        });\n\n        const githubRepos: GitHubReposApiResponse[] = await response.json();\n\n        mappedGitHubRepos = mapRepos(githubRepos);\n    } catch (error: any) {\n        console.error(error);\n    }\n\n    return {\n        props: {\n            mappedGitHubRepos,\n        },\n    };\n};\n\nconst WithTryCatch: NextPage<WithFetcherProps> = ({ mappedGitHubRepos }) => {\n    useEffect(() => console.log(mappedGitHubRepos), [mappedGitHubRepos]);\n\n    return (\n        <h2 className=\"text-2xl\">\n            Number of repos: {mappedGitHubRepos.length}\n        </h2>\n    );\n};\n\nexport default WithTryCatch;\n```\n\nAgain, not much change from using promises, as all we've done is throw in a `try`/`catch` block and an extra `await`\nto read the JSON stream from the API response before mapping to the expected type our page expects. Nothing out of\nthe ordinary, and in fact, we _may_ be able to argue this is the most common convention amongst data fetching\nfunctions in react projects, though I'll leave that for a debate topic on a rainy day.\n\nOkay, great... we're not breaking new ground here, just fetching data for a page to render like we've been doing for\nyears. Let's finally break the mold.\n\n## Reactive react\n\nAlright, let's finally integrate a little RxJS into one of our pages. Let's add a new page and render, again, the\nsame data from the same GH API endpoint:\n\n#### pages/with-rxjs.tsx\n\n```tsx\nimport { GetServerSideProps, NextPage } from 'next';\nimport { useEffect } from 'react';\nimport { githubBaseUrl } from '../lib/constants';\nimport { WithFetcherProps } from '../lib/types';\nimport { fetchFirstReposValue } from '../lib/utilities';\n\nexport const getServerSideProps: GetServerSideProps = async () => ({\n    props: {\n        mappedGitHubRepos: await fetchFirstReposValue(githubBaseUrl),\n    } as WithFetcherProps,\n});\n\nconst WithRxJS: NextPage<WithFetcherProps> = ({ mappedGitHubRepos }) => {\n    useEffect(() => console.log(mappedGitHubRepos), [mappedGitHubRepos]);\n\n    return (\n        <h2 className=\"text-2xl\">\n            Number of repos: {mappedGitHubRepos.length}\n        </h2>\n    );\n};\n\nexport default WithRxJS;\n```\n\nWith `fetchFirstReposValue` coming from our `utilities`:\n\n#### lib/utilities.ts\n\n```ts\n// ...other stuff\n\nexport function fetchRepos(key: string): Observable<GitHubRepoMeta[]> {\n    return fromFetch<GitHubReposApiResponse[]>(key, {\n        headers: {\n            Authorization: `token ${\n                process.env.GITHUB_ACCESS_TOKEN ??\n                process.env.NEXT_PUBLIC_GITHUB_ACCESS_TOKEN\n            }`,\n        },\n        selector: (response) => response.json(),\n    }).pipe(\n        map(mapRepos),\n        catchError((error) => {\n            console.error(error);\n            return EMPTY;\n        }),\n    );\n}\n\nexport function fetchFirstReposValue(key: string) {\n    return firstValueFrom(fetchRepos(key));\n}\n```\n\nOkay, hold on - why are we still `await`ing something after we just went through a primer about how awesome RxJS is?\nWell, we're still _technically_ utilizing RxJS, however, our purpose is one time data fetching: we need data for the\npage to be rendered, that's it. No subscribers, open observable streams, or anything else reactive about\n_reactive_ JS (hence the _Rx_ in _RxJS_). So why the heck don't we just stick to our good ole fashioned `Promises`?\n\n## fromFetch&lt;T&gt; to the rescue\n\nThe beauty of RxJS data fetching comes from the relatively new API `fromFetch<T>`, which in facts takes the\n`Promise` returned `from` the native `fetch` API, and turns it into an `Observable` for us to use all of the awesome\nstuff RxJS offers up for us.\n\nBack in our SSR fetcher `getServerSideProps` in `with-rxjs.tsx`, we utilize our wrapper function\n`fetchFirstReposValue`, passing in the base URL for the endpoint we need repo data from. This wrapper is itself a\nwrapper around `firstValueFrom`, which comes from the RxJS library turning an `Observable` back into a `Promise` by\ninternally `subscribe()`ing to the stream and emitting the first captured value back to the `await`ing caller.\n\nOkay... so let's get this straight - we're wrapping an `Observable` into a `Promise` so we can return data to a\nfunction that expects a `Promise` in the first place, so why the heck are we even using `Observable`s in the first\nplace? _My_ answer to this question would be \"because I like RxJS,\" but a much smarter person than myself well versed in\nRxJS may retort with something along the lines of being able to tap into the incredible power of RxJS operator\nfunctions, in flight HTTP request cancellation, and response manipulation to our heart's desire that plain old\n`Promise`s simply cannot do as tersely as RxJS.\n\nBecause `getServerSideProps` expects data as props either in its raw form as a `Promise`, we need to use\n`firstValueFrom` to extract the HTTP response value that `fromFetch` streams to its subscribers. Recall that with\n`Observable`s, values do not technically _exist_ in place - values are _emitted_ as they become available by the\n`Observable` with `.subscribe()`ers listening for said values. Simply put, `Observable`s do not _store_ data, they\npass data onto listeners. Luckily for us, `firstValueFrom` allows us to treat our `Observable`s as _if_ were storing\ndata, allowing us to extract it and do with it what we please.\n\nWhile there is another class of special observables,\nreferred to as [subjects](https://rxjs.dev/guide/subject) in RxJS that allow us to retrieve current stream values, data\nfetching in react couples pretty tightly to the `await`ing of promises to resolve, so to make our lives easy, we can use\nour friendly RxJS utilities to convert\nbetween promises and observables, with `firstValueFrom`/`lastValueFrom` converting observables to promises, and\n`from`/`delay` converting promises to observables. We get to have our observable cake, with the promise of eating it\ntoo!\n\nLet's dig into our functions utilizing `fromFetch`:\n\n```ts\nexport function fetchRepos(key: string): Observable<GitHubRepoMeta[]> {\n    return fromFetch<GitHubReposApiResponse[]>(key, {\n        headers: {\n            Authorization: `token ${\n                process.env.GITHUB_ACCESS_TOKEN ??\n                process.env.NEXT_PUBLIC_GITHUB_ACCESS_TOKEN\n            }`,\n        },\n        selector: (response) => response.json(),\n    }).pipe(\n        map(mapRepos),\n        catchError((error) => {\n            console.error(error);\n            return EMPTY;\n        }),\n    );\n}\n```\n\nBreaking this function down, we utilize the generic type version of `fromFetch` so we can benefit from typing our\nHTTP responses _explicitly_ without having to manually type cast after a `response.json()` call. `fromFetch` does\nexactly what you think it does - wraps `fetch` (a promise) in the promise converting RxJS operator `from` so we can\ntreat `fetch` as if it were an `Observable`. `fromFetch` expects the same optional configuration object as `fetch`\ndoes, meaning we can attach headers, specify HTTP methods, etc. while _additionally_ allowing us to project the\nresponse into anything available from the `Response` object `fetch` returns.\n\nIn our case, we project `response.json()`,\nwhich internally is more or less the same as calling a `switchMap()/exhaustMap()` after `fromFetch` emits a value,\nsaving us a line of inner observable mapping operator functions so that we can jump right into `map()`ing the\ndeserialized response into the prop types our pages expect. If any error occurs, we log out to console and do\nnothing (probably want to perform _some_ sort of recovery in a real world scenario).\n\nThis gives us a few benefits over using just a normal old `fetch`:\n\n1. We can _explicitly_ statically type the HTTP response\n2. We can project response data in an efficient manner, blocking further inner mappings from happening until the\n   body response stream has been read entirely\n3. We can easily cancel long running requests with a `timeout()` operator function, if we wanted to\n\nAmong with a few others, we quickly see how data fetching with `fromFetch` provides a powerful reactive wrapper\naround the native `fetch`, boosting its ability to be efficiently used for simple data retrieval.\n\nBut about within the context of CSR? Let's build out one more page to explore integrating RxJS with swr as a fetcher\nfunction:\n\n#### pages/with-csr.tsx\n\n```tsx\nimport { NextPage } from 'next';\nimport useSWR from 'swr';\nimport { githubBaseUrl } from '../lib/constants';\nimport { fetchFirstReposValue } from '../lib/utilities';\n\nconst WithCSR: NextPage = () => {\n    const { data: mappedGitHubRepos } = useSWR(\n        githubBaseUrl,\n        fetchFirstReposValue,\n    );\n\n    return mappedGitHubRepos ? (\n        <h2 className=\"text-2xl\">\n            Number of repos: {mappedGitHubRepos.length}\n        </h2>\n    ) : (\n        <h2 className=\"text-2xl\">Loading...</h2>\n    );\n};\n\nexport default WithCSR;\n```\n\nWe tap into the `useSWR` hook, supplying the base URL for the endpoint as the key, and reuse our `fromFetch` as the\nfetcher function `useSWR` expects. `swr` caches the returned data using the `stale-while-revalidating` HTTP strategy,\nbut instead, we tap into RxJS to fetch the data for us for all the aforementioned reasons and benefits in the SSR\ncontext, but this time on the client.\n\n## Wrapping up\n\nI like RxJS, and love more so RxJS-ifying anything and everything I can. While there are existing RxJS/react\nintegration libraries, I prefer simply using RxJS in its natural form, allowing me to fully customize how I `.pipe()`\nstreams of data however I like. RxJS, again, is a _huge_ library of utilities for pub/sub and reactive programming\nwith JS, and is not meant to _replace_ promises, but rather offer an alternative, or in our case, complimentary\nfunctionality that promises provide in the first place. I love RxJS, and will definitely be using it wherever I can\nin my\nreact projects.\n\nUntil next time, friends!\n",
    "html": "<p>Data fetching with React offers a wide selection of tools to do the job, from simple promises, to more sophisticated\ncaching libraries like <a href=\"https://react-query.tanstack.com/\">react-query</a> and <a href=\"https://swr.vercel.app/\">swr</a>. With a\nplethora of options, developers have their choice of favorite fetching tools to get the job done and make our\napplications performant on all fronts. As an Angular developer, I make heavy usage of <a href=\"https://rxjs.dev/\">RxJS</a>\nwhere I can, and luckily Angular treats the library as a first class citizen with many Angular internals (router\nevents, the <code>HttpClient</code>, etc.), making use of <code>Observables</code> to stream data in a reactive way.</p>\n<p>Lately, however, I've taken the React-fork-in-the-road and have been experimenting with data fetching tools and\nhooks for the React/next.js applications I've been working on. While, again, there are many tools that solve the\nproblem of data fetching and mutation made by people much, <em>much</em> smarter than myself, I was looking to integrate\nRxJS into the tools I use for such a task. What I found, coincidentally, was the perfect marriage between my data\nfetching library of choice, Vercel's <a href=\"https://swr.vercel.app/\">swr</a> (a gift from the folks behind next.js), and\n<code>fetch</code>-based <code>Observables</code>.</p>\n<p>While <a href=\"https://github.com/vercel/swr/pull/1263\">we can likely expect subscriptions to data sources from swr</a>\nsometime soon, I've found the utility offered by RxJS allows for incredible control over emissions of stream data to\nsubscribers that I would prefer <em>not</em> to give up, if given the chance. While I'll definitely experiment with\nsubscriptions coming to swr, I decided to sandbox around with RxJS, next.js, and swr to see what was currently\npossible with data fetching using <code>Observables</code> - what I found was <em>quite</em> interesting.</p>\n<h2>Starting with tradition</h2>\n<p>To keep things simple, I'll run through four scenarios using a sample next.js application:</p>\n<ol>\n<li>SSR with traditional promises</li>\n<li>SSR with <code>async</code>/<code>await</code></li>\n<li>SSR with RxJS</li>\n<li>CSR with RxJS</li>\n</ol>\n<p>Okay, timeout. SSR? CSR?</p>\n<ul>\n<li>SSR - <strong>S</strong>erver-<strong>s</strong>ide <strong>r</strong>ending (or prerendering), the act of rendering the template data into said\ntemplate <em>on</em> the server before handing it back to the client. In essence, retrieving all the necessary data for an\nHTML page then rendering said data in the markup and handing it back to the browser.</li>\n<li>CSR - <strong>C</strong>lient-<strong>s</strong>ide <strong>r</strong>endering, the act of rending template data <em>after</em> the route has been served\nto/rendered by the client, or simply making our calls to fetch data after the markup is rendered, which we'll update\nonce the data has been fetched.</li>\n</ul>\n<p>Within the context of next.js, what this means is that we'll have three separate page routes that will invoke\n<code>getServerSideProps</code> to fetch data for our page before serving it up to the client. This content is rendered on the\nserver, meaning the client receives a ready-to-go HTML document with all the appropriate data already in markup.</p>\n<p>In our CSR scenario, we'll utilize <code>swr</code> as a data fetching hook to retrieve data for us once the page has been served,\nwhere our fetching will happen once the page loads, meaning there will be two renders: one on page load, and again\nonce the data is available and the render hook forces a re-render of the page.</p>\n<p>There's one glaring question we should probably take a crack at answering before going further: <strong>why use RxJS in the\nfirst place?</strong></p>\n<h2>RxJS in a nutshell</h2>\n<p>Coming from the Angular world, devs have more than likely been heavily exposed to RxJS due to the\nframework's tight integration with the library. RxJS implements, more or less, the publisher/subscriber pattern (or\npub/sub for short) to allow <em>subscribers</em> of <em>publishers</em> to tune into essential streams of data they may be\ninterested in. In plain english, instead of asking for some work to be done with the <code>Promise</code> of it completing sometime\nin the near future and <code>await</code>ing the data's arrival, we listen in on select streams of data that emit things we're\ninterested in as\nthey happen -\nwe're simply <em>reacting</em> to data as it's published through the stream. In code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark\"><code data-language=\"js\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { interval, take } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'rxjs'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { finalize } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'rxjs/operators'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> dataSource$</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> interval</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">1000</span><span style=\"color:#E1E4E8\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">dataSource$</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    .</span><span style=\"color:#B392F0\">pipe</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        take</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">),</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        finalize</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'data captured!'</span><span style=\"color:#E1E4E8\">)),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    .</span><span style=\"color:#B392F0\">subscribe</span><span style=\"color:#E1E4E8\">(console.log);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6A737D\">/**</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"> * Output:</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"> *</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"> * 0</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"> * 1</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"> * 2</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"> * 3</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"> * 4</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"> * data captured!</span></span>\n<span data-line=\"\"><span style=\"color:#6A737D\"> */</span></span></code></pre></figure>\n<p>Without going too deep into RxJS operators (the official documentation does a better job than I could ever do at\nexplaining operator functions), we have a source of data, <code>dataSource$</code>, that emits numbers every frame for 1000\nframe, with a frame in this context being one second. We're <code>.subscribe</code>ing to those emissions, <code>take</code>ing only the\nfirst five, then closing our stream to listen as\nwe're only interested in the five emissions. Our <code>dataSource$</code> in this case is an <code>Observerable</code>, a foundational\nconstruct in pub/sub that is the publishing source for subscribers. With RxJS, <code>Observable</code>s are just streams, and\nwon't begin <em>emitting</em> data until a subscriber, well, <code>.subscribe()</code>s to the stream.</p>\n<p>Within the scope of this article, we're <em>barely</em> scraping the surface of what RxJS is capable of and what benefits\nit may offer over more traditional data flow models in our code. I'll leave it to the RxJS experts to speak on the\nintricacies of the library as we'll mainly be focusing on fetching data within the context of RxJS.</p>\n<h2>Getting started</h2>\n<p>Okay, enough talk. Let's code! For our demo, we'll tap into the amazing <a href=\"https://docs.github.com/en/rest\">GitHub API</a>\nto explore repositories. I've spun up a simple next.js app:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">npx</span><span style=\"color:#9ECBFF\"> create-next-app@latest</span><span style=\"color:#79B8FF\"> --ts</span><span style=\"color:#9ECBFF\"> react-rxjs-data-fetching-demo</span></span></code></pre></figure>\n<p>I'm using next.js in this case as we want to showcase data fetching in both the CSR and SSR contexts. Everything\nwe'll do within the scope of this blog post is similarly applicable to your average react project. With our project\nscaffolded, let's add a few dependencies:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark\"><code data-language=\"shell\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B392F0\">npm</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> swr</span><span style=\"color:#9ECBFF\"> rxjs</span></span></code></pre></figure>\n<p>I'm partial to swr for data fetching, and you're more than welcome to use your own hook fetching library. I've also\nadded <a href=\"https://tailwindcss.com/\">Tailwind</a> out of habit in order to make things not look like a webpage from 1995.\nWith our dependencies installed, let's add a page for our first scenario: SSR with the tried-and-true\n<code>Promise</code>-based data fetching:</p>\n<h4>pages/with-promises.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark\"><code data-language=\"tsx\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { GetServerSideProps, NextPage } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'next'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { useEffect } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'react'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { githubBaseUrl } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/constants'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { GitHubRepoMeta, WithFetcherProps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/types'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { mapRepos } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/utilities'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> const</span><span style=\"color:#B392F0\"> getServerSideProps</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> GetServerSideProps</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> async</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    const</span><span style=\"color:#79B8FF\"> mappedGitHubRepos</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> fetch</span><span style=\"color:#E1E4E8\">(githubBaseUrl, {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        headers: {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Authorization: </span><span style=\"color:#9ECBFF\">`token ${</span><span style=\"color:#E1E4E8\">process</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">env</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#79B8FF\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    })</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        .</span><span style=\"color:#B392F0\">then</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">response</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> response.</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        .</span><span style=\"color:#B392F0\">then</span><span style=\"color:#E1E4E8\">(mapRepos)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        .</span><span style=\"color:#B392F0\">catch</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">error</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            console.</span><span style=\"color:#B392F0\">error</span><span style=\"color:#E1E4E8\">(error);</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            return</span><span style=\"color:#E1E4E8\"> [] </span><span style=\"color:#F97583\">as</span><span style=\"color:#B392F0\"> GitHubRepoMeta</span><span style=\"color:#E1E4E8\">[];</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        props: {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            mappedGitHubRepos,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> WithPromises</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> NextPage</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">WithFetcherProps</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> ({ </span><span style=\"color:#FFAB70\">mappedGitHubRepos</span><span style=\"color:#E1E4E8\"> }) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    useEffect</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(mappedGitHubRepos), [mappedGitHubRepos]);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;</span><span style=\"color:#85E89D\">h2</span><span style=\"color:#B392F0\"> className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"text-2xl\"</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Number of repos: {mappedGitHubRepos.</span><span style=\"color:#79B8FF\">length</span><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;/</span><span style=\"color:#85E89D\">h2</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> default</span><span style=\"color:#E1E4E8\"> WithPromises;</span></span></code></pre></figure>\n<p>I've added a few things to help us along the way underneath the <code>lib</code> directory:</p>\n<h4>lib/constants.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark\"><code data-language=\"ts\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> const</span><span style=\"color:#79B8FF\"> githubBaseUrl</span><span style=\"color:#F97583\"> =</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">    'https://api.github.com/users/{{yourUsername}}/repos'</span><span style=\"color:#E1E4E8\">;</span></span></code></pre></figure>\n<h4>lib/utilities.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark\"><code data-language=\"ts\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { GitHubReposApiResponse } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> './types'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> function</span><span style=\"color:#B392F0\"> mapRepos</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">repos</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> GitHubReposApiResponse</span><span style=\"color:#E1E4E8\">[]) {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> repos.</span><span style=\"color:#B392F0\">map</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">repo</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        name: repo.name,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        forks: repo.forks_count,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        stars: repo.stargazers_count,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }));</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<h4>lib/types.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark\"><code data-language=\"ts\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">interface</span><span style=\"color:#B392F0\"> Owner</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    login</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    id</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    node_id</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    avatar_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    gravatar_id</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    html_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    followers_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    following_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    gists_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    starred_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    subscriptions_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    organizations_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    repos_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    events_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    received_events_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    type</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    site_admin</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">interface</span><span style=\"color:#B392F0\"> Permissions</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    admin</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    maintain</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    push</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    triage</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    pull</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> interface</span><span style=\"color:#B392F0\"> GitHubReposApiResponse</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    id</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    node_id</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    name</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    full_name</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    private</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    owner</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Owner</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    html_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    description</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    fork</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    forks_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    keys_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    collaborators_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    teams_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    hooks_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    issue_events_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    events_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    assignees_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    branches_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    tags_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    blobs_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    git_tags_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    git_refs_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    trees_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    statuses_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    languages_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    stargazers_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    contributors_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    subscribers_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    subscription_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    commits_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    git_commits_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    comments_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    issue_comment_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    contents_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    compare_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    merges_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    archive_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    downloads_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    issues_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    pulls_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    milestones_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    notifications_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    labels_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    releases_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    deployments_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    created_at</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Date</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    updated_at</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Date</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    pushed_at</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Date</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    git_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    ssh_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    clone_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    svn_url</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    homepage</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    size</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    stargazers_count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    watchers_count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    language</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    has_issues</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    has_projects</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    has_downloads</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    has_wiki</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    has_pages</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    forks_count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    mirror_url</span><span style=\"color:#F97583\">?:</span><span style=\"color:#79B8FF\"> any</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    archived</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    disabled</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    open_issues_count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    license</span><span style=\"color:#F97583\">?:</span><span style=\"color:#79B8FF\"> any</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    allow_forking</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    is_template</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    topics</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">[];</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    visibility</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    forks</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    open_issues</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    watchers</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    default_branch</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    permissions</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Permissions</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    temp_clone_token</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    allow_squash_merge</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    allow_merge_commit</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    allow_rebase_merge</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    allow_auto_merge</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    delete_branch_on_merge</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    allow_update_branch</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    network_count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    subscribers_count</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> interface</span><span style=\"color:#B392F0\"> GitHubRepoMeta</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    name</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    stars</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    forks</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> interface</span><span style=\"color:#B392F0\"> WithFetcherProps</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFAB70\">    mappedGitHubRepos</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> GitHubRepoMeta</span><span style=\"color:#E1E4E8\">[];</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Breaking it down:</p>\n<ul>\n<li><code>constants.ts</code> is just a constant string, update it with your GitHub username</li>\n<li><code>utilties.ts</code> will house some common mapping/retrieving functions to be reused amongst components and pages</li>\n<li><code>types.ts</code> houses all the type information we expect back from the API and the prop shapes our pages will expect</li>\n</ul>\n<p>Before you ask, no, I didn't manually write out the interface for the GitHub API response, I\nused <a href=\"http://www.json2ts.com/\">json2ts</a> to quickly model out the response object to TypeScript based on the JSON data\nreturned\nfrom calling my username repo endpoint. We also explicitly type our page props using <code>WithFetchProps</code> for sanity.\nYou can use <code>InferGetServerSidePropsType</code> from next.js, but I find intellisense from VS Code lacking so I swapped\nout my own type.</p>\n<p>Jumping back to <code>with-promises.tsx</code>, let's take a look at our fetcher function responsible for getting the data our\ntemplate will rely on:</p>\n<h4>with-promises.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark\"><code data-language=\"ts\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> const</span><span style=\"color:#B392F0\"> getServerSideProps</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> GetServerSideProps</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> async</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    const</span><span style=\"color:#79B8FF\"> mappedGitHubRepos</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> fetch</span><span style=\"color:#E1E4E8\">(githubBaseUrl, {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        headers: {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Authorization: </span><span style=\"color:#9ECBFF\">`token ${</span><span style=\"color:#E1E4E8\">process</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">env</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#79B8FF\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    })</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        .</span><span style=\"color:#B392F0\">then</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">response</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> response.</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        .</span><span style=\"color:#B392F0\">then</span><span style=\"color:#E1E4E8\">(mapRepos)</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        .</span><span style=\"color:#B392F0\">catch</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">error</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            console.</span><span style=\"color:#B392F0\">error</span><span style=\"color:#E1E4E8\">(error);</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            return</span><span style=\"color:#E1E4E8\"> [] </span><span style=\"color:#F97583\">as</span><span style=\"color:#B392F0\"> GitHubRepoMeta</span><span style=\"color:#E1E4E8\">[];</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        props: {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            mappedGitHubRepos,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">};</span></span></code></pre></figure>\n<p>We're utilizing next.js's mechanism\nfor <a href=\"https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props\">server-side data fetching</a>\nwith <code>getServerSideProps</code>, simply calling out to the GH\nAPI endpoint for our repositories, streaming the JSON response, and mapping the response to a simple object for our\npage to display while appropriately handling any errors that may occur. While this suffices for our need to retrieve\ndata, we're using promise resolution in its most primitive form. I'm still <code>await</code> the promise to resolve itself\nbefore returning the props data back to the page, as promises are asynchronous and will jump to the next resolution\nscope whenever they can, so we need to block the next lines of code execution until our promise has fully been\nresolved.</p>\n<p>I'm sure we've all\nseen a <code>Promise</code>\nhandled the\ntraditional way before, and after having used RxJS for a number of years now, I'm going to say something rather\ncontroversial: I prefer <code>.then()/.catch()</code> over <code>try</code>/<code>catch</code> *<em>pauses for gasps</em>*.</p>\n<p>Okay, this is fine, but what about using <code>try</code>/<code>catch</code> with a few more <code>async</code>/<code>await</code>s sprinkled in?</p>\n<h4>pages/with-try-catch.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark\"><code data-language=\"tsx\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    GetServerSideProps,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    InferGetServerSidePropsType,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    NextPage,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">} </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'next'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { useEffect } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'react'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { githubBaseUrl } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/constants'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    GitHubRepoMeta,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    GitHubReposApiResponse,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    WithFetcherProps,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">} </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/types'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { mapRepos } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/utilities'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> const</span><span style=\"color:#B392F0\"> getServerSideProps</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> GetServerSideProps</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> async</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    let</span><span style=\"color:#E1E4E8\"> mappedGitHubRepos</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> GitHubRepoMeta</span><span style=\"color:#E1E4E8\">[] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> [];</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    try</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">        const</span><span style=\"color:#79B8FF\"> response</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> fetch</span><span style=\"color:#E1E4E8\">(githubBaseUrl, {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            headers: {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                Authorization: </span><span style=\"color:#9ECBFF\">`token ${</span><span style=\"color:#E1E4E8\">process</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">env</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#79B8FF\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">        const</span><span style=\"color:#79B8FF\"> githubRepos</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> GitHubReposApiResponse</span><span style=\"color:#E1E4E8\">[] </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> response.</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        mappedGitHubRepos </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> mapRepos</span><span style=\"color:#E1E4E8\">(githubRepos);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    } </span><span style=\"color:#F97583\">catch</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">error</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> any</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        console.</span><span style=\"color:#B392F0\">error</span><span style=\"color:#E1E4E8\">(error);</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        props: {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            mappedGitHubRepos,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> WithTryCatch</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> NextPage</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">WithFetcherProps</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> ({ </span><span style=\"color:#FFAB70\">mappedGitHubRepos</span><span style=\"color:#E1E4E8\"> }) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    useEffect</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(mappedGitHubRepos), [mappedGitHubRepos]);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;</span><span style=\"color:#85E89D\">h2</span><span style=\"color:#B392F0\"> className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"text-2xl\"</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Number of repos: {mappedGitHubRepos.</span><span style=\"color:#79B8FF\">length</span><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;/</span><span style=\"color:#85E89D\">h2</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> default</span><span style=\"color:#E1E4E8\"> WithTryCatch;</span></span></code></pre></figure>\n<p>Again, not much change from using promises, as all we've done is throw in a <code>try</code>/<code>catch</code> block and an extra <code>await</code>\nto read the JSON stream from the API response before mapping to the expected type our page expects. Nothing out of\nthe ordinary, and in fact, we <em>may</em> be able to argue this is the most common convention amongst data fetching\nfunctions in react projects, though I'll leave that for a debate topic on a rainy day.</p>\n<p>Okay, great... we're not breaking new ground here, just fetching data for a page to render like we've been doing for\nyears. Let's finally break the mold.</p>\n<h2>Reactive react</h2>\n<p>Alright, let's finally integrate a little RxJS into one of our pages. Let's add a new page and render, again, the\nsame data from the same GH API endpoint:</p>\n<h4>pages/with-rxjs.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark\"><code data-language=\"tsx\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { GetServerSideProps, NextPage } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'next'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { useEffect } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'react'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { githubBaseUrl } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/constants'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { WithFetcherProps } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/types'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { fetchFirstReposValue } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/utilities'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> const</span><span style=\"color:#B392F0\"> getServerSideProps</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> GetServerSideProps</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> async</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    props: {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        mappedGitHubRepos: </span><span style=\"color:#F97583\">await</span><span style=\"color:#B392F0\"> fetchFirstReposValue</span><span style=\"color:#E1E4E8\">(githubBaseUrl),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    } </span><span style=\"color:#F97583\">as</span><span style=\"color:#B392F0\"> WithFetcherProps</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">});</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> WithRxJS</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> NextPage</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">WithFetcherProps</span><span style=\"color:#E1E4E8\">> </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> ({ </span><span style=\"color:#FFAB70\">mappedGitHubRepos</span><span style=\"color:#E1E4E8\"> }) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">    useEffect</span><span style=\"color:#E1E4E8\">(() </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(mappedGitHubRepos), [mappedGitHubRepos]);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;</span><span style=\"color:#85E89D\">h2</span><span style=\"color:#B392F0\"> className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"text-2xl\"</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Number of repos: {mappedGitHubRepos.</span><span style=\"color:#79B8FF\">length</span><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;/</span><span style=\"color:#85E89D\">h2</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> default</span><span style=\"color:#E1E4E8\"> WithRxJS;</span></span></code></pre></figure>\n<p>With <code>fetchFirstReposValue</code> coming from our <code>utilities</code>:</p>\n<h4>lib/utilities.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark\"><code data-language=\"ts\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#6A737D\">// ...other stuff</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> function</span><span style=\"color:#B392F0\"> fetchRepos</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">key</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Observable</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">GitHubRepoMeta</span><span style=\"color:#E1E4E8\">[]> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#B392F0\"> fromFetch</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">GitHubReposApiResponse</span><span style=\"color:#E1E4E8\">[]>(key, {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        headers: {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Authorization: </span><span style=\"color:#9ECBFF\">`token ${</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                process</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">env</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#79B8FF\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#F97583\"> ??</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                process</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">env</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#79B8FF\">NEXT_PUBLIC_GITHUB_ACCESS_TOKEN</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">            }`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        selector</span><span style=\"color:#E1E4E8\">: (</span><span style=\"color:#FFAB70\">response</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> response.</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }).</span><span style=\"color:#B392F0\">pipe</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        map</span><span style=\"color:#E1E4E8\">(mapRepos),</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        catchError</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">error</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            console.</span><span style=\"color:#B392F0\">error</span><span style=\"color:#E1E4E8\">(error);</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            return</span><span style=\"color:#79B8FF\"> EMPTY</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> function</span><span style=\"color:#B392F0\"> fetchFirstReposValue</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">key</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#B392F0\"> firstValueFrom</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">fetchRepos</span><span style=\"color:#E1E4E8\">(key));</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Okay, hold on - why are we still <code>await</code>ing something after we just went through a primer about how awesome RxJS is?\nWell, we're still <em>technically</em> utilizing RxJS, however, our purpose is one time data fetching: we need data for the\npage to be rendered, that's it. No subscribers, open observable streams, or anything else reactive about\n<em>reactive</em> JS (hence the <em>Rx</em> in <em>RxJS</em>). So why the heck don't we just stick to our good ole fashioned <code>Promises</code>?</p>\n<h2>fromFetch&#x3C;T> to the rescue</h2>\n<p>The beauty of RxJS data fetching comes from the relatively new API <code>fromFetch&#x3C;T></code>, which in facts takes the\n<code>Promise</code> returned <code>from</code> the native <code>fetch</code> API, and turns it into an <code>Observable</code> for us to use all of the awesome\nstuff RxJS offers up for us.</p>\n<p>Back in our SSR fetcher <code>getServerSideProps</code> in <code>with-rxjs.tsx</code>, we utilize our wrapper function\n<code>fetchFirstReposValue</code>, passing in the base URL for the endpoint we need repo data from. This wrapper is itself a\nwrapper around <code>firstValueFrom</code>, which comes from the RxJS library turning an <code>Observable</code> back into a <code>Promise</code> by\ninternally <code>subscribe()</code>ing to the stream and emitting the first captured value back to the <code>await</code>ing caller.</p>\n<p>Okay... so let's get this straight - we're wrapping an <code>Observable</code> into a <code>Promise</code> so we can return data to a\nfunction that expects a <code>Promise</code> in the first place, so why the heck are we even using <code>Observable</code>s in the first\nplace? <em>My</em> answer to this question would be \"because I like RxJS,\" but a much smarter person than myself well versed in\nRxJS may retort with something along the lines of being able to tap into the incredible power of RxJS operator\nfunctions, in flight HTTP request cancellation, and response manipulation to our heart's desire that plain old\n<code>Promise</code>s simply cannot do as tersely as RxJS.</p>\n<p>Because <code>getServerSideProps</code> expects data as props either in its raw form as a <code>Promise</code>, we need to use\n<code>firstValueFrom</code> to extract the HTTP response value that <code>fromFetch</code> streams to its subscribers. Recall that with\n<code>Observable</code>s, values do not technically <em>exist</em> in place - values are <em>emitted</em> as they become available by the\n<code>Observable</code> with <code>.subscribe()</code>ers listening for said values. Simply put, <code>Observable</code>s do not <em>store</em> data, they\npass data onto listeners. Luckily for us, <code>firstValueFrom</code> allows us to treat our <code>Observable</code>s as <em>if</em> were storing\ndata, allowing us to extract it and do with it what we please.</p>\n<p>While there is another class of special observables,\nreferred to as <a href=\"https://rxjs.dev/guide/subject\">subjects</a> in RxJS that allow us to retrieve current stream values, data\nfetching in react couples pretty tightly to the <code>await</code>ing of promises to resolve, so to make our lives easy, we can use\nour friendly RxJS utilities to convert\nbetween promises and observables, with <code>firstValueFrom</code>/<code>lastValueFrom</code> converting observables to promises, and\n<code>from</code>/<code>delay</code> converting promises to observables. We get to have our observable cake, with the promise of eating it\ntoo!</p>\n<p>Let's dig into our functions utilizing <code>fromFetch</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark\"><code data-language=\"ts\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> function</span><span style=\"color:#B392F0\"> fetchRepos</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">key</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Observable</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">GitHubRepoMeta</span><span style=\"color:#E1E4E8\">[]> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#B392F0\"> fromFetch</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">GitHubReposApiResponse</span><span style=\"color:#E1E4E8\">[]>(key, {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        headers: {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Authorization: </span><span style=\"color:#9ECBFF\">`token ${</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                process</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">env</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#79B8FF\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#F97583\"> ??</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">                process</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">env</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#79B8FF\">NEXT_PUBLIC_GITHUB_ACCESS_TOKEN</span></span>\n<span data-line=\"\"><span style=\"color:#9ECBFF\">            }`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        selector</span><span style=\"color:#E1E4E8\">: (</span><span style=\"color:#FFAB70\">response</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> response.</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    }).</span><span style=\"color:#B392F0\">pipe</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        map</span><span style=\"color:#E1E4E8\">(mapRepos),</span></span>\n<span data-line=\"\"><span style=\"color:#B392F0\">        catchError</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">error</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            console.</span><span style=\"color:#B392F0\">error</span><span style=\"color:#E1E4E8\">(error);</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">            return</span><span style=\"color:#79B8FF\"> EMPTY</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        }),</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">}</span></span></code></pre></figure>\n<p>Breaking this function down, we utilize the generic type version of <code>fromFetch</code> so we can benefit from typing our\nHTTP responses <em>explicitly</em> without having to manually type cast after a <code>response.json()</code> call. <code>fromFetch</code> does\nexactly what you think it does - wraps <code>fetch</code> (a promise) in the promise converting RxJS operator <code>from</code> so we can\ntreat <code>fetch</code> as if it were an <code>Observable</code>. <code>fromFetch</code> expects the same optional configuration object as <code>fetch</code>\ndoes, meaning we can attach headers, specify HTTP methods, etc. while <em>additionally</em> allowing us to project the\nresponse into anything available from the <code>Response</code> object <code>fetch</code> returns.</p>\n<p>In our case, we project <code>response.json()</code>,\nwhich internally is more or less the same as calling a <code>switchMap()/exhaustMap()</code> after <code>fromFetch</code> emits a value,\nsaving us a line of inner observable mapping operator functions so that we can jump right into <code>map()</code>ing the\ndeserialized response into the prop types our pages expect. If any error occurs, we log out to console and do\nnothing (probably want to perform <em>some</em> sort of recovery in a real world scenario).</p>\n<p>This gives us a few benefits over using just a normal old <code>fetch</code>:</p>\n<ol>\n<li>We can <em>explicitly</em> statically type the HTTP response</li>\n<li>We can project response data in an efficient manner, blocking further inner mappings from happening until the\nbody response stream has been read entirely</li>\n<li>We can easily cancel long running requests with a <code>timeout()</code> operator function, if we wanted to</li>\n</ol>\n<p>Among with a few others, we quickly see how data fetching with <code>fromFetch</code> provides a powerful reactive wrapper\naround the native <code>fetch</code>, boosting its ability to be efficiently used for simple data retrieval.</p>\n<p>But about within the context of CSR? Let's build out one more page to explore integrating RxJS with swr as a fetcher\nfunction:</p>\n<h4>pages/with-csr.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#24292e;color:#e1e4e8\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"github-dark\"><code data-language=\"tsx\" data-theme=\"github-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { NextPage } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'next'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> useSWR </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'swr'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { githubBaseUrl } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/constants'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { fetchFirstReposValue } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../lib/utilities'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> WithCSR</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> NextPage</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F97583\">    const</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#FFAB70\">data</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">mappedGitHubRepos</span><span style=\"color:#E1E4E8\"> } </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> useSWR</span><span style=\"color:#E1E4E8\">(</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        githubBaseUrl,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        fetchFirstReposValue,</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> mappedGitHubRepos </span><span style=\"color:#F97583\">?</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;</span><span style=\"color:#85E89D\">h2</span><span style=\"color:#B392F0\"> className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"text-2xl\"</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">            Number of repos: {mappedGitHubRepos.</span><span style=\"color:#79B8FF\">length</span><span style=\"color:#E1E4E8\">}</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;/</span><span style=\"color:#85E89D\">h2</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    ) </span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">        &#x3C;</span><span style=\"color:#85E89D\">h2</span><span style=\"color:#B392F0\"> className</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"text-2xl\"</span><span style=\"color:#E1E4E8\">>Loading...&#x3C;/</span><span style=\"color:#85E89D\">h2</span><span style=\"color:#E1E4E8\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#E1E4E8\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> default</span><span style=\"color:#E1E4E8\"> WithCSR;</span></span></code></pre></figure>\n<p>We tap into the <code>useSWR</code> hook, supplying the base URL for the endpoint as the key, and reuse our <code>fromFetch</code> as the\nfetcher function <code>useSWR</code> expects. <code>swr</code> caches the returned data using the <code>stale-while-revalidating</code> HTTP strategy,\nbut instead, we tap into RxJS to fetch the data for us for all the aforementioned reasons and benefits in the SSR\ncontext, but this time on the client.</p>\n<h2>Wrapping up</h2>\n<p>I like RxJS, and love more so RxJS-ifying anything and everything I can. While there are existing RxJS/react\nintegration libraries, I prefer simply using RxJS in its natural form, allowing me to fully customize how I <code>.pipe()</code>\nstreams of data however I like. RxJS, again, is a <em>huge</em> library of utilities for pub/sub and reactive programming\nwith JS, and is not meant to <em>replace</em> promises, but rather offer an alternative, or in our case, complimentary\nfunctionality that promises provide in the first place. I love RxJS, and will definitely be using it wherever I can\nin my\nreact projects.</p>\n<p>Until next time, friends!</p>"
  },
  "_id": "2022/react-data-fetching-with-rxjs.md",
  "_raw": {
    "sourceFilePath": "2022/react-data-fetching-with-rxjs.md",
    "sourceFileName": "react-data-fetching-with-rxjs.md",
    "sourceFileDir": "2022",
    "contentType": "markdown",
    "flattenedPath": "2022/react-data-fetching-with-rxjs"
  },
  "type": "Post",
  "url": "/blog/2022/react-data-fetching-with-rxjs"
}