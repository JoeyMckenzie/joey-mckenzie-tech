{
  "title": "Clean architecture, Dapper, MediatR, and buzzword bingo (part 4)",
  "description": "Write encapsulated business logic with the help of MediatR and the CQRS pattern.",
  "pubDate": "2020-02-02T08:00:00.000Z",
  "category": ".NET",
  "heroImage": "/images/net-core-dapper-and-crud-series/part-4/use-automapper-meme.jpeg",
  "draft": false,
  "keywords": [
    ".net",
    "c#",
    "dapper",
    "mediatr"
  ],
  "body": {
    "raw": "\nThe wait is finally over (sort of). As we recover from the scrupulous amount of Christmas cookies we consumed during our\nannual holiday bulking season (at least what I tell myself), I figured it's time to jump into the bulk of our fictional\nbrewery app, Dappery. So far, we've:\n\n-   Defined our domain layer and business entities used application wide\n-   Implemented our data access layer with the help of repositories wrapped in a unit of work\n-   Written unit tests for our persistence layer to ensure future proofing our code\n\nAnd with most of the groundwork out of the way, we can finally jump into the core layer of Dappery. Before we dive into\nthe code, let's remind ourselves of _why_ exactly we've split our core business logic layer out into a high level detail\nof our application, with the lower level details (data access and API layers, in our case) _depending_ on this layer:\n\n1. Our core business logic layer is the most complex in terms of duties it performs (not so much code-wise)\n2. Encompassing the business logic with this layer prevents rules and policies from leaking into the low level details (\n   the data access layer should not know _how_ the data is mapped, for example)\n3. We invert the dependency of the API layer and the business layer, as the API layer now depends on the core business\n   layer\n4. The API layer has no notion of exactly _how_ we interact with our data, it only talks to the core logic to perform\n   services\n\nNoting the super meta meme at the top, some of you may be asserting through clenched teeth \"hey, AutoMapper is awesome!\"\nand rightfully so, [AutoMapper](https://github.com/AutoMapper/AutoMapper) _is_ in fact awesome. I'm a firm believer in\nthe library and use it quite extensively in other applications. **However**, I believe for our use case, the overhead of\nan entire mapping library that we will grossly under utilize the capabilities of, writing a few custom mappers within\nour core business logic layer will suffice. With that said, mapper libraries like AutoMapper do make writing the mind\nnumbing boilerplate mapping code in large, complex applications much easier (as long as you know where a few of the \"\ngotchas\" can happen).\n\nAlright, with the preamble out of the way, let's get a game plan going for how we'll implement this layer:\n\n-   We'll use our data access layer contracts (i.e. the interfaces we've defined in this layer) to access our database\n-   Using MediatR, we'll break our requests into queries and commands, effectively containing a finite set of application\n    features that will be easier to code to and debug\n-   While it may seem a little boilerplate-y, we avoid things like\n    the [God Object](https://en.wikipedia.org/wiki/God_object) anti-pattern, where everything gets shoved into one helper\n    or\n    service class\n-   We'll write two custom mappers that will map our beer and brewery entities into DTOs and resource to transport the\n    database entities out of the lower levels\n-   Each feature request will be validated using the [FluentValidation](https://github.com/JeremySkinner/FluentValidation)\n    library, acting as a guard between the API layer and core business layer to protect invalid state from making its way\n    to the database\n-   We'll handle invalid scenarios in this layer and enforce business rules\n\nAs we can see, that's a lot of stuff - thus the reason our core business layer is in a layer of its own, independent of\nthe lower level details. Without further ado, let's cut the chit chat and get down to business (pun intended). Let's\nstart off by creating a `Breweries` directory within our `Dappery.Core` project, followed by creating two additional\ndirectories of `Queries` and `Commands` nested beneath our newly created `Breweries` directory. Let's add one more\nfolder underneath `Breweries/Commands` called `CreateBrewery`. I know, I know... that's some deep structure we're\nbuilding, but the architecture will help keep our application flows and paths neatly separated and easy to drill down\ninto. Underneath `Breweries/Commands/CreateBeer`, let's add a new C# file called `CreateBreweryCommand.cs` that will\nserve as the issuing command MediatR will emit to our application layer to begin the transaction for adding a brewery to\nthe database.\n\n### CreateBreweryCommand.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.CreateBrewery\n{\n    using Domain.Dtos.Brewery;\n    using Domain.Media;\n    using MediatR;\n\n    public class CreateBreweryCommand : IRequest<BreweryResource>\n    {\n        public CreateBreweryCommand(CreateBreweryDto dto) => Dto = dto;\n\n        public CreateBreweryDto Dto { get; }\n    }\n}\n```\n\nThe `IRequest<BreweryResource>` parent interface we're inheriting from is a MediatR interface that registers with our\nMediatR instance, with `BreweryResource` being the response type we should expect when this request is issued. A pretty\nsimple command, as we do nothing more than construct the request DTO that is passed into the business logic layer from\nthe API layer (which we'll implement a little later), with `CreateBreweryCommand` being the wrapper for the data we'll\neventually use. We could also issue commands directly from the API layer, rather than wrapping requests for that layer\nin a command, or query - this is just my preference, so the API layer does not need to know what dependencies our\ncommands and queries have, just that it needs to send its version of the object request. With our command in place,\nlet's add a validator within the same directory by creating `CreateBreweryCommandValidator.cs`:\n\n### CreateBreweryCommandValidator.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.CreateBrewery\n{\n    using Extensions;\n    using FluentValidation;\n\n    public class CreateBreweryCommandValidator : AbstractValidator<CreateBreweryCommand>\n    {\n        public CreateBreweryCommandValidator()\n        {\n            RuleFor(b => b.Dto)\n                .NotNull()\n                .WithMessage(\"A request must contain valid creation data\");\n\n            RuleFor(b => b.Dto.Name)\n                .NotNullOrEmpty();\n\n            RuleFor(b => b.Dto.Address)\n                .NotNull()\n                .WithMessage(\"Must supply the address of the brewery when creating\");\n\n            RuleFor(b => b.Dto.Address!.City)\n                .NotNullOrEmpty();\n\n            RuleFor(b => b.Dto.Address!.State)\n                .HasValidStateAbbreviation();\n\n            RuleFor(b => b.Dto.Address!.StreetAddress)\n                .HasValidStreetAddress();\n\n            RuleFor(b => b.Dto.Address!.ZipCode)\n                .HasValidZipCode();\n        }\n    }\n}\n```\n\nUsing the FluentValidation interface `AbstractValidator<CreateBreweryCommand>`, we're telling our validator instance (\nregistered at startup, which again, we'll eventually see) that requests sending a `CreateBreweryCommand` need to adhere\nto the simple validation rules we've defined within the constructor of the class. Anytime we attempt to validate an\ninstance of the `CreateBreweryCommand` using the FluentValidation `ValidationContext` class (which we'll see in just a\nbit), the library will give us back a context containing any errors the instantiated class contains. Since we've opted\nin to enable nullable reference types in our `Dappery.Core.csproj` file (inheriting from `Dappery.targets` - a place to\ndefine build commonality amongst multiple projects and solutions), we use the `!` bang operator to tell the compiler \"I\nknow that `Address` has the possibility to be null, but that won't happen\" because of the previous validation we've\ndefined that will fire if we receive any DTO that does not have an `Address` instance. The last three validations\nactually use custom validators I've defined in a separate rule behavior class within an `Extensions` folder at the base\nof our `Dappery.Core` project:\n\n### RuleBuilderExtensions.cs\n\n```csharp\nnamespace Dappery.Core.Extensions\n{\n    using System.Text.RegularExpressions;\n    using FluentValidation;\n\n    public static class RuleBuilderExtensions\n    {\n        // Normally, would put things like this in a shared project, like a separate Dappery.Common project\n        private static readonly Regex ValidStateRegex = new Regex(\"^((A[LKZR])|(C[AOT])|(D[EC])|(FL)|(GA)|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EDAINSOT])|(N[EVHJMYCD])|(O[HKR])|(PA)|(RI)|(S[CD])|(T[NX])|(UT)|(V[TA])|(W[AVIY]))$\");\n        private static readonly Regex StreetAddressRegex = new Regex(\"\\\\d{1,5}\\\\s(\\\\b\\\\w*\\\\b\\\\s){1,2}\\\\w*\\\\.\");\n        private static readonly Regex ZipCodeRegex = new Regex(\"^\\\\d{5}$\");\n\n        public static void NotNullOrEmpty<T>(this IRuleBuilder<T, string?> ruleBuilder)\n        {\n            ruleBuilder.Custom((stringToValidate, context) =>\n            {\n                if (string.IsNullOrWhiteSpace(stringToValidate))\n                {\n                    context.AddFailure($\"{context.PropertyName} cannot be null, or empty\");\n                }\n            });\n        }\n\n        public static void HasValidStateAbbreviation<T>(this IRuleBuilder<T, string?> ruleBuilder)\n        {\n            ruleBuilder.Custom((stateAbbreviation, context) =>\n            {\n                if (!ValidStateRegex.IsMatch(stateAbbreviation))\n                {\n                    context.AddFailure($\"{stateAbbreviation} is not a valid state code\");\n                }\n            })\n            .NotEmpty()\n            .WithMessage(\"State code cannot be empty\");\n        }\n\n        public static void HasValidStreetAddress<T>(this IRuleBuilder<T, string?> ruleBuilder)\n        {\n            ruleBuilder.Custom((streetAddress, context) =>\n            {\n                if (string.IsNullOrWhiteSpace(streetAddress))\n                {\n                    // Add the context failure and break out of the validation\n                    context.AddFailure(\"Must supply a street address\");\n                    return;\n                }\n\n                if (!StreetAddressRegex.IsMatch(context.PropertyValue.ToString()))\n                {\n                    context.AddFailure($\"{streetAddress} is not a valid street address\");\n                }\n            });\n        }\n\n        public static void HasValidZipCode<T>(this IRuleBuilder<T, string?> ruleBuilder)\n        {\n            ruleBuilder.Custom((zipCode, context) =>\n            {\n                if (string.IsNullOrWhiteSpace(zipCode))\n                {\n                    // Add the context failure and break out of the validation\n                    context.AddFailure(\"Must supply the zip code\");\n                    return;\n                }\n\n                if (!ZipCodeRegex.IsMatch(context.PropertyValue.ToString()))\n                {\n                    context.AddFailure($\"{zipCode} is not a valid zipcode\");\n                }\n            });\n        }\n    }\n}\n```\n\nNothing too complicated here, we're just building some extension methods off of the\nFluentValidation `IRuleBuilder<T, TProperty>` interface to combine several validations on the validation context, as\nwell as add some custom validations like the state code regex for convenience. Inside each extension method, we utilize\nthe `Custom` extension method of the `IRuleBuilder` interface and pass an `Action<TProperty, CustomContext>` lambda\nwhere we make our custom assertions and failures to the returned validation context that then gets passed down the chain\nwith our query and command validator classes. I highly recommend checking out\nthe [documentation for FluentValidation](https://fluentvalidation.net/) as the maintainers have done a great job\nutilizing examples and references similar to the above. Next, with our brewery command and request validator in place,\nlet's add the main staple of functionality within our application layer - the MediatR handler.\n\n### CreateBreweryCommandHandler.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.CreateBrewery\n{\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Data;\n    using Domain.Entities;\n    using Domain.Media;\n    using Extensions;\n    using MediatR;\n\n    public class CreateBreweryCommandHandler : IRequestHandler<CreateBreweryCommand, BreweryResource>\n    {\n        private readonly IUnitOfWork _unitOfWork;\n\n        public CreateBreweryCommandHandler(IUnitOfWork unitOfWork)\n        {\n            _unitOfWork = unitOfWork;\n        }\n\n        public async Task<BreweryResource> Handle(CreateBreweryCommand request, CancellationToken cancellationToken)\n        {\n            var breweryToCreate = new Brewery\n            {\n                Name = request.Dto.Name,\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow,\n                Address = new Address\n                {\n                    StreetAddress = request.Dto.Address?.StreetAddress,\n                    City = request.Dto.Address?.City,\n                    State = request.Dto.Address?.State,\n                    ZipCode = request.Dto.Address?.ZipCode,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow\n                }\n            };\n\n            // Create our brewery, retrieve the brewery so we can map it to the response, and clean up our resources\n            var breweryId = await _unitOfWork.BreweryRepository.CreateBrewery(breweryToCreate, cancellationToken);\n            var insertedBrewery = await _unitOfWork.BreweryRepository.GetBreweryById(breweryId, cancellationToken);\n            _unitOfWork.Commit();\n\n            // Map and return the response\n            return new BreweryResource(insertedBrewery.ToBreweryDto());\n        }\n    }\n}\n```\n\nAs we'll see with each command and query handler, the core business logic of CRUD'ing our way through the application\nwill happen within each of these class types. For our creates (our beer create operations will be eerily similar), we\ninstantiate a new `Brewery` entity that will be added to our database with all the proper fields validated by\nour `CreateBreweryCommandValidator` so we can rest assured the fields we require to store a brewery are there (avoiding\na bunch of `if (field is null) { // Do something, or throw an exception }` checks that will clutter things up), and call\nour data layer operations to create and retrieve the brewery. Recall that when we create a brewery through our\nrepository method, we get back the last inserted brewery record ID from the `Breweries` table, which we can then turn\naround and retrieve that newly inserted brewery using the `GetBreweryById` method. Now granted, there's multiple way\nthis could be optimized and refactored, but this was my deliberate decision to keep our CRUD operations simple and\nadhering to only conform to a [single responsibility](https://en.wikipedia.org/wiki/Single_responsibility_principle).\nThere may times where the command to create the brewery does in fact fail at the database level, however, where the\nconnection to physical server may be bad, or the server might be down, etc., so I figured I would leave the failure\ncases to the smart guys reading this post as an exercise for the audience.\n\nOnce our brewery entity has been retrieved, we then construct an instance of the `BreweryResource` to hand back to the\nAPI layer with a brewery DTO injected into the instance. Let's take a look at our mappers while we're here to get a\nsense of how this mapping is done exactly. Let's create a directory in our `Dappery.Core` project called `Extensions`\nwhere we'll create a `BreweryExtensions.cs` class:\n\n### BreweryExtensions.cs\n\n```csharp\nnamespace Dappery.Core.Extensions\n{\n    using System.Linq;\n    using Domain.Dtos;\n    using Domain.Dtos.Beer;\n    using Domain.Dtos.Brewery;\n    using Domain.Entities;\n\n    public static class BreweryExtensions\n    {\n        public static BreweryDto ToBreweryDto(this Brewery brewery, bool includeBeerList = true)\n        {\n            return new BreweryDto\n            {\n                Id = brewery.Id,\n                Name = brewery.Name,\n                Beers = includeBeerList ? brewery.Beers.Select(b => new BeerDto\n                {\n                    Id = b.Id,\n                    Name = b.Name,\n                    Style = b.BeerStyle.ToString()\n                }) : default,\n                Address = new AddressDto\n                {\n                    City = brewery.Address?.City,\n                    State = brewery.Address?.State,\n                    StreetAddress = brewery.Address?.StreetAddress,\n                    ZipCode = brewery.Address?.ZipCode\n                },\n                BeerCount = includeBeerList ? brewery.BeerCount : (int?) null\n            };\n        }\n    }\n}\n```\n\nWe see that our mapper is nothing but a simple extension method of the `Brewery` entity class that transforms the entity\ninto our friendly DTO, omitting fields that don't necessarily need to be transported between layers (i.e. audit\nproperties, or IDs of related entities, just to name a few). From a relationship perspective, remember that a brewery\n_has many_ beers, where a beer _has one_ brewery; we control the nested relational mapping with the `includeBeerList`\ndefault flag, as to avoid recursively mapped beers and breweries. Nothing too complicated here, just a nice simple\nmapper, and for those interested, I've written\na [few unit tests](https://github.com/JoeyMckenzie/Dappery/blob/master/tests/Dappery.Core.Tests/Extensions/BreweryExtensionsTest.cs)\nto capture the expected behavior of our custom mapping class. While we're at it, let's go ahead and add\na `BeerExtensions.cs` class within our `Extensions` directory:\n\n### BeerExtensions.cs\n\n```csharp\nnamespace Dappery.Core.Extensions\n{\n    using Domain.Dtos.Beer;\n    using Domain.Entities;\n\n    public static class BeerExtensions\n    {\n        public static BeerDto ToBeerDto(this Beer beer)\n        {\n             return new BeerDto\n            {\n                Id = beer.Id,\n                Name = beer.Name,\n                Style = beer.BeerStyle.ToString(),\n                Brewery = beer.Brewery?.ToBreweryDto(false),\n            };\n        }\n    }\n}\n```\n\nEven simpler, our custom beer mapper just transforms a `Beer` entity into a slim DTO, while utilizing\nour `.ToBreweryDto()` brewery extension method to non-recursively map the beer's brewery.\n\nAt this point, you're probably wondering \"this is great, but how exactly _does_ our validation catch validation errors?\"\nThat's a great question, with the answer being the MediatR library's `IPipelineBehavior<TRequest, TResponse>` interface.\nFor the interested, [Jimmy Boggard](https://github.com/jbogard), an absolute rockstar for the .NET community, and the\nmaintainers of MediatR have a great [library doc](https://github.com/jbogard/MediatR/wiki) explaining the exact behavior\nof pipelines and why they are useful to the library. In essence, a every message we send with MediatR will flow through\nour registered pipeline (which we'll register as a dependency within our API layer), giving us the power to check\nrequests for certain properties, validate behaviors, log specific messages based on the request - really anything we\nwant. For our use case, we'll implement the `IPipelineBehavior<TRequest, TResponse>` interface to define\na `RequestValidationBehavior<TRequest, TResponse>` piece of the request pipeline that will take care of inspecting every\nrequest to make sure it's confiding by our FluentValidation validation rules that we define for each command and some\nqueries. When we register our FluentValidation classes at application startup, we'll tell the library that all of our\nvalidators will be within the `Dappery.Core` assembly, letting FluentValidator scan the assembly to find and register\neach of our validation contexts, so that we can generically call each request's validation context to then validate the\nrequest with our registered validators. Pretty cool, huh? Side note: I've never used _validate_, or any of its\nderivatives, that much in a sentence ever in my entire life.\n\nLet's go ahead and create an `Infrastructure` folder within our `Dappery.Core` project, and then create\na `RequestValidationBehavior.cs` class that will implement an `IPipelineBehavior`:\n\n### RequestValidationBehavior.cs\n\n```csharp\nnamespace Dappery.Core.Infrastructure\n{\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using FluentValidation;\n    using MediatR;\n    using Microsoft.Extensions.Logging;\n\n    public class RequestValidationBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>\n        where TRequest : IRequest<TResponse>\n    {\n        private readonly IEnumerable<IValidator<TRequest>> _validators;\n        private readonly ILogger<TRequest> _logger;\n\n        public RequestValidationBehavior(IEnumerable<IValidator<TRequest>> validators, ILogger<TRequest> logger)\n        {\n            _validators = validators;\n            _logger = logger;\n        }\n\n        public Task<TResponse> Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate<TResponse> next)\n        {\n            var context = new ValidationContext(request);\n\n            var failures = _validators\n                .Select(v => v.Validate(context))\n                .SelectMany(result => result.Errors)\n                .Where(f => f != null)\n                .ToList();\n\n            if (failures.Any())\n            {\n                _logger.LogInformation($\"Validation failures for request [{request}]\");\n                throw new ValidationException(failures);\n            }\n\n            return next();\n        }\n    }\n}\n```\n\nLet's break it down:\n\n-   First, we inject from the DI container (which we'll see in the API layer with the help of ASP.NET Core) all of the\n    validations that were found in the assembly that all descended from `AbstractValidator<TCommand>` and retrieves the\n    rules we've defined per instance\n-   We retrieve the validators from the request, which we'll know at runtime\n-   Using LINQ, we run through each validator, validate the context (whatever the request type may be), flatten\n    the `ValidationResult` enumerable by mapping just the error property with `.SelectMany()`, and collect any that return\n    errors\n-   We check to see if there were any violations of our rules, and throw the `ValidationException` that we'll catch within\n    a global exception handler within the API layer so we can return detailed validation messages to the consumers\n-   Finally, we let the request thread continue on its merry way throughout the layers of our application (unscathed if\n    there were no errors)\n\nWhew, that small bit of code is doing _a lot_ of big things for us. Using MediatR and FluentValidator in tandem is a\nmatch made in heaven, letting developers customize their application request flow, providing convention to help reduce\nthe complexity of our software. Now that we've gotten our pipeline behavior piece implemented, let's go ahead and extend\nthe `IServiceCollection` from the `Microsoft.Extensions.DependencyInjection` namespace that will do all the leg work of\nresolving our dependencies. Within our `Extensions` folder, let's add a `StartupExtensions.cs` class. We\nuse `StartupExtensions` here which is a bit specific for my liking, but our use case is just a simple ASP.NET Core\napplication (you may see this with the name `DependencyInjection.cs` or something similar around various .NET libraries\non GitHub).\n\n### StartupExtensions.cs\n\n```csharp\nnamespace Dappery.Core.Extensions\n{\n    using System.Reflection;\n    using Infrastructure;\n    using MediatR;\n    using Microsoft.Extensions.DependencyInjection;\n\n    public static class StartupExtensions\n    {\n        /// <summary>\n        /// Extension to contain all of our business layer dependencies for our external server providers (ASP.NET Core in our case).\n        /// </summary>\n        /// <param name=\"services\">Service collection for dependency injection</param>\n        public static void AddDapperyCore(this IServiceCollection services)\n        {\n            // Add our MediatR and FluentValidation dependencies\n            services.AddMediatR(Assembly.GetExecutingAssembly());\n\n            // Add our MediatR validation pipeline\n            services.AddTransient(typeof(IPipelineBehavior<,>), typeof(RequestValidationBehavior<,>));\n        }\n    }\n}\n```\n\nNothing too complicated just here, just adding MediatR to the service registry, telling it to scan this assembly for\nimplemented types of the library so that it can wire things up correctly for our internal \"messaging\" system, then\nfinishing up by adding an a reference to the service container for our MediatR pipeline with\na [transient](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1#service-lifetimes-and-registration-options)\nlifetime. If you're unfamiliar with the different ways we can register service dependencies in .NET Core, check out the\nlinked docs for a quite delightful Sunday morning read. I won't go into detail, as the docs do a pretty good job of\nexplaining our use of the transient lifetime here, but in summary, services with this lifetime are dolled out each time\nthe the service is requested when a thread just so happens to hit a piece of code that requires one. From the docs:\n\n> Transient lifetime services (AddTransient) are created each time they're requested from the service container. This\n> lifetime works best for lightweight, stateless services.\n\nNow that we've got most of our core layer plumbing out of the way, we can now just focus on implementing our query and\ncommand handlers in a similar fashion to the `CreateBreweryCommandHandler` from above. We've given users the option of\ncreating breweries, so now let's add an update feature to modify a previously created brewery. Let's add\nan `UpdateBrewery` folder within the `Breweries/Commands` directory. For the curious, my preference for the folder\nstructure is to mimic an application use case, solely for the case of debug-ability and easily being able to identify\nwhat areas of the application are in charge of what. This is more often than not referred to as _vertical slice\narchitecture_, and there's a [great article](https://jimmybogard.com/vertical-slice-architecture/), again by Jimmy\nBoggard, that discusses the power of utilizing this pattern. Notwithstanding, there are a few places where I've been a\nbit lazy and not so idiomatic in designing with that in mind (particularly in the domain layer), but I'll leave the\nclean up as an exercise for the reader. Let's add an `UpdateBreweryCommand.cs` underneath the `UpdateBrewery` folder:\n\n### UpdateBreweryCommand.cs\n\n```csharp\nnamespace Dappery.Core.Beers.Commands.UpdateBeery\n{\n    using Domain.Dtos.Beer;\n    using Domain.Media;\n    using MediatR;\n\n    public class UpdateBeerCommand : IRequest<BeerResource>\n    {\n        public UpdateBeerCommand(UpdateBeerDto beerDto, int requestId) => (Dto, BeerId) = (beerDto, requestId);\n\n        public UpdateBeerDto Dto { get; }\n\n        public int BeerId { get; }\n    }\n}\n```\n\nEasy enough, all our `UpdateBreweryCommand` requires is an ID for the brewery and the properties we've exposed that\nconsumer are allowed to update. Next, let's define our validators in an `UpdateBreweryCommandValidator.cs` class:\n\n### UpdateBreweryCommandValidator.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.UpdateBrewery\n{\n    using FluentValidation;\n\n    public class UpdateBreweryCommandValidator : AbstractValidator<UpdateBreweryCommand>\n    {\n        public UpdateBreweryCommandValidator()\n        {\n            RuleFor(request => request.Dto)\n                .NotNull()\n                .WithMessage(\"Must supply a request body\");\n\n            RuleFor(request => request.BreweryId)\n                .NotNull()\n                .WithMessage(\"Must supply a valid brewery ID\");\n        }\n    }\n}\n```\n\nWe want each request that comes in for a brewery update to have a valid DTO in the body, along with a brewery ID that\nwe'll retrieve from the URI. There's an argument to be made for sticking the ID as a requirement within the DTO, but\nthis just my preference since we'll assume our consumers will be following RESTful best practices (and that's a _hefty_\nassumption). Next, we'll go ahead and define our command handler within a new `UpdateBreweryCommandHandler.cs` class\nwithin our `UpdateBrewery` directory:\n\n### UpdateBreweryCommandHandler.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.UpdateBrewery\n{\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Extensions;\n    using Data;\n    using Domain.Media;\n    using Exceptions;\n    using MediatR;\n\n    public class UpdateBreweryCommandHandler : IRequestHandler<UpdateBreweryCommand, BreweryResource>\n    {\n        private readonly IUnitOfWork _unitOfWork;\n\n        public UpdateBreweryCommandHandler(IUnitOfWork unitOfWork)\n        {\n            _unitOfWork = unitOfWork;\n        }\n\n        public async Task<BreweryResource> Handle(UpdateBreweryCommand request, CancellationToken cancellationToken)\n        {\n            // Retrieve the brewery on the request\n            var breweryToUpdate = await _unitOfWork.BreweryRepository.GetBreweryById(request.BreweryId, cancellationToken);\n\n            // Invalidate the request if no brewery was found\n            if (breweryToUpdate is null)\n            {\n                throw new DapperyApiException($\"No brewery was found with ID {request.BreweryId}\", HttpStatusCode.NotFound);\n            }\n\n            // Update the properties on the brewery entity\n            breweryToUpdate.Name = request.Dto.Name;\n            var updateBreweryAddress = false;\n\n            // If the request contains an address, set the flag for the persistence layer to update the address table\n            if (request.Dto.Address != null && breweryToUpdate.Address != null)\n            {\n                updateBreweryAddress = true;\n                breweryToUpdate.Address.StreetAddress = request.Dto.Address.StreetAddress;\n                breweryToUpdate.Address.City = request.Dto.Address.City;\n                breweryToUpdate.Address.State = request.Dto.Address.State;\n                breweryToUpdate.Address.ZipCode = request.Dto.Address.ZipCode;\n            }\n\n            // Update the brewery in the database, retrieve it, and clean up our resources\n            await _unitOfWork.BreweryRepository.UpdateBrewery(breweryToUpdate, cancellationToken, updateBreweryAddress);\n            var updatedBrewery = await _unitOfWork.BreweryRepository.GetBreweryById(request.BreweryId, cancellationToken);\n            _unitOfWork.Commit();\n\n            // Map and return the brewery\n            return new BreweryResource(updatedBrewery.ToBreweryDto());\n        }\n    }\n}\n```\n\nFirst, we see that we're using the `BreweryId` that was passed along in the request to retrieve the brewery we should be\nupdating. If no brewery is found, we'll throw a 404 back to the consumer using a custom exception we'll define in just a\nminute. Once we know we've got our brewery, we update each of the updatable fields on the entity, and set a flag for the\nrepository implementation to update the address if need be. Due to our schema design, we probably could have opted for\nthe [value object](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/implement-value-objects)\npattern here and nested the address within the brewery table, and maybe one of these weekends I'll get around to making\nthat update. Let's create an `Exceptions` folder underneath the `Dappery.Core` project root, and inside that, we'll\ncreate a `DapperyApiException.cs` class:\n\n### DapperyApiException.cs\n\n```csharp\nnamespace Dappery.Core.Exceptions\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Net;\n\n    public class DapperyApiException : Exception\n    {\n        public DapperyApiException(string message, HttpStatusCode statusCode)\n            : base(message)\n        {\n            StatusCode = statusCode;\n            ApiErrors = new List<DapperyApiError>();\n        }\n\n        public HttpStatusCode StatusCode { get; }\n\n        public ICollection<DapperyApiError> ApiErrors { get; }\n    }\n}\n```\n\nNow, there's an argument to be made about using\nexceptions [as control flow within an application](https://wiki.c2.com/?DontUseExceptionsForFlowControl) which is\nessentially what we're doing here, but I'll let that holy war continue on StackOverflow. For our simple use case, we'll\nuse this exception to handle any sort of operation that cannot be performed to protect misinformation from reaching the\nlower level concerns and handle the situation with a global (at least within the scope of our API) exception handler in\nthat layer that will decipher and determine the proper message to send back to consumers. We've also defined\na `DapperyApiError` type that will encapsulate and be used as a translator of sorts to convey to consumers exactly what\nhappened to cause the exception:\n\n### DapperyApiError.cs\n\n```csharp\nnamespace Dappery.Core.Exceptions\n{\n    public class DapperyApiError\n    {\n        public DapperyApiError(string errorMessage, string propertyName)\n        {\n            ErrorMessage = errorMessage;\n            PropertyName = propertyName;\n        }\n\n        public string ErrorMessage { get; }\n\n        public string PropertyName { get; }\n    }\n}\n```\n\nOur `DapperyApiException` and `DapperyApiError` will work in tandem to help to give us a predefined convention for\nhandling any sort of error scenario within the core application layer so that we can easily contextualize the content of\nthe error and pass the information back up rather than leaking bad state down to our other layers. We'll see in the API\nlayer how we define a handler within our request pipeline to handle error scenarios in a somewhat graceful manner,\nthough there are quite a few ways to do this. For now, our simple error and exception classes will work just fine, but\nwe might want to rethink the approach at scale when coordinating between multiple API (micro)services, whether prosumer,\nor consumer. With the last piece of the infrastructure plumping out of the way, let's set our focus back on the commands\nand queries we're in the midst of writing.\n\nSince we're building a (probably overcomplicated) CRUD solution, let's give users the option to retrieve and search for\nbreweries. Let's create a `Queries` folder underneath our `Breweries` directory, and start off by creating another\nfolder of `RetrieveBrewery`. After that's done, let's create a `RetrieveBreweryQuery.cs` file:\n\n### RetrieveBreweryQuery.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Queries.RetrieveBrewery\n{\n    using Domain.Media;\n    using MediatR;\n\n    public class RetrieveBreweryQuery : IRequest<BreweryResource>\n    {\n        public RetrieveBreweryQuery(int id) => Id = id;\n\n        public int Id { get; }\n    }\n}\n```\n\nEasy enough, just a simple `IRequest` that will return a `BreweryResource` back to the consumer, given an ID to match\non. With that out of the way, let's create a `RetrieveBreweryQueryValidator.cs` validator class to catch mischievous\nconsumers that will try and invoke this operation and somehow manage to fool the ASP.NET Core route matching system:\n\n### RetrieveBreweryQueryValidator.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Queries.RetrieveBrewery\n{\n    using FluentValidation;\n\n    public class RetrieveBreweryQueryValidator : AbstractValidator<RetrieveBreweryQuery>\n    {\n        public RetrieveBreweryQueryValidator()\n        {\n            RuleFor(b => b.Id)\n                .NotNull()\n                .NotEmpty()\n                .WithMessage(\"Must supply an ID to retrieve a brewery\")\n                .GreaterThanOrEqualTo(1)\n                .WithMessage(\"Must be a valid brewery ID\");\n\n        }\n    }\n}\n```\n\nHere, we define two validations in not allowing null IDs to propogate to this layer (shouldn't happen in the first\nplace, since we did not declare the ID as nullable), and the ID should be greater than zero, as our table constraint is\nusing the ID as an index and primary key. Next, let's define our query handler with a\nnew `RetrieveBreweryQueryHandler.cs` class:\n\n### RetrieveBreweryQueryHandler.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Queries.RetrieveBrewery\n{\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Data;\n    using Domain.Media;\n    using Exceptions;\n    using Extensions;\n    using MediatR;\n\n    public class RetrieveBreweryQueryHandler : IRequestHandler<RetrieveBreweryQuery, BreweryResource>\n    {\n        private readonly IUnitOfWork _unitOfWork;\n\n        public RetrieveBreweryQueryHandler(IUnitOfWork unitOfWork)\n        {\n            _unitOfWork = unitOfWork;\n        }\n\n        public async Task<BreweryResource> Handle(RetrieveBreweryQuery request, CancellationToken cancellationToken)\n        {\n            // Retrieve the brewery and clean up our resources\n            var brewery = await _unitOfWork.BreweryRepository.GetBreweryById(request.Id, cancellationToken);\n            _unitOfWork.Commit();\n\n            // Invalidate the request if no brewery is found\n            if (brewery is null)\n            {\n                throw new DapperyApiException($\"No brewery found with ID {request.Id}\", HttpStatusCode.NotFound);\n            }\n\n            // Map and return the brewery\n            return new BreweryResource(brewery.ToBreweryDto());\n        }\n    }\n}\n```\n\nThis is about as standard as a retrieve request gets: attempt to grab the brewery from the database using our\napplication repositories, clean up our resources, throw our custom exception for not found if no brewery was returned,\nand return the resource with a view model friendly representation of our brewery entity. While we're at the 'R' in CRUD,\nlet's add an operation for our consumers to get a list of all breweries. Inside the `Brewery/Queries` folder, go ahead\nand create a `GetBreweries` folder, followed by a `GetBreweriesQuery.cs` class inside the newly created folder:\n\n### GetBreweryQuery.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Queries.GetBreweries\n{\n    using Domain.Media;\n    using MediatR;\n\n    public class GetBreweriesQuery : IRequest<BreweryResourceList>\n    {\n    }\n}\n```\n\nOur simplest form of an `IRequest`, we're letting MediatR know that anytime a message is sent with the context\nof `GetBreweriesQuery`, the library will map that request to a `GetBreweriesQueryHandler` (below) and return\na `BreweryResourceList`. Let's implement the handler:\n\n### GetBreweryQuery.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Queries.GetBreweries\n{\n    using System.Linq;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Data;\n    using Domain.Media;\n    using Extensions;\n    using MediatR;\n\n    public class GetBreweriesQueryHandler : IRequestHandler<GetBreweriesQuery, BreweryResourceList>\n    {\n        private readonly IUnitOfWork _unitOfWork;\n\n        public GetBreweriesQueryHandler(IUnitOfWork unitOfWork)\n        {\n            _unitOfWork = unitOfWork;\n        }\n\n        public async Task<BreweryResourceList> Handle(GetBreweriesQuery request, CancellationToken cancellationToken)\n        {\n            // Retrieve the breweries and clean up our resources\n            var breweries = await _unitOfWork.BreweryRepository.GetAllBreweries(cancellationToken);\n            _unitOfWork.Commit();\n\n            // Map our breweries from the returned query\n            var mappedBreweries = breweries.Select(b => b.ToBreweryDto());\n\n            // Map each brewery to its corresponding DTO\n            return new BreweryResourceList(mappedBreweries);\n        }\n    }\n}\n```\n\nAs straightforward as a search request be, we're simply just grabbing all the breweries from the database, projecting\neach entity into its view model representation, and returning the list to the consumer. No execptions, and we also\nhandle the case if there are no breweries in the database to just return an empty list (which we'll cover with a unit\ntest). Now, since we're building just a small demo application, we _probably_ shouldn't be returning the entirety of\nrecords from the breweries table within the database. A more sound and performant implementation of this handler would\nbe to pass query filters and options for pagination on the `GetBreweriesQuery`, so that we could refine our SQL and not\nhave Dapper try to map every record to its corresponding C# POCO. Again, I'll leave this as an exercise for the reader,\nor maybe comeback on a rainy day to refactor this (most likely not, though). For Completeness, let's finish up our set\nof brewery operations by adding a delete command to our application by creating a `DeleteBrewery` folder nested within\nour `Breweries/Commands` directory, then creating a `DeleteBreweryCommand.cs` file:\n\n### DeleteBreweryCommand.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.DeleteBrewery\n{\n    using MediatR;\n\n    public class DeleteBreweryCommand : IRequest<Unit>\n    {\n        public DeleteBreweryCommand(int id) => BreweryId = id;\n\n        public int BreweryId { get; }\n    }\n}\n```\n\nAll we require for a delete command is just the ID, which we'll get from the API layer. Let's create a validator for the\nhooligans that might try and break the chain of command within the same `DeleteBrewery` directory:\n\n### DeleteBreweryCommandValidator.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.DeleteBrewery\n{\n    using FluentValidation;\n\n    public class DeleteBreweryCommandValidator : AbstractValidator<DeleteBreweryCommand>\n    {\n        public DeleteBreweryCommandValidator()\n        {\n            RuleFor(b => b.BreweryId)\n                .NotNull()\n                .WithMessage(\"Must supply the brewery ID\");\n        }\n    }\n}\n```\n\nWe don't want to perform any delete request if we haven't an ID to validate the beer exists in the database, first and\nforemost. Again, since our delete command is correct by construction since we did _not_ tell the command to expect a\nnullable `int`, we should never<sup>tm</sup> see this behavior, but it doesn't hurt to have an extra layer of\nvalidation. Finally, let's finish up by implementing the `DeleteBreweryCommandHandler.cs` class:\n\n### DeleteBreweryCommandHandler.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.DeleteBrewery\n{\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Data;\n    using Exceptions;\n    using MediatR;\n\n    public class DeleteBreweryCommandHandler : IRequestHandler<DeleteBreweryCommand, Unit>\n    {\n        private readonly IUnitOfWork _unitOfWork;\n\n        public DeleteBreweryCommandHandler(IUnitOfWork unitOfWork)\n        {\n            _unitOfWork = unitOfWork;\n        }\n\n        public async Task<Unit> Handle(DeleteBreweryCommand request, CancellationToken cancellationToken)\n        {\n            // Retrieve the brewery and invalidate the request if none is found\n            var breweryToDelete = await _unitOfWork.BreweryRepository.GetBreweryById(request.BreweryId, cancellationToken);\n\n            // Invalidate the request if no brewery is found\n            if (breweryToDelete is null)\n            {\n                throw new DapperyApiException($\"No brewery was found with ID {request.BreweryId}\", HttpStatusCode.NotFound);\n            }\n\n            // Delete the brewery from the database and clean up our resources once we know we have a valid beer\n            await _unitOfWork.BreweryRepository.DeleteBrewery(request.BreweryId, cancellationToken);\n            _unitOfWork.Commit();\n\n            return Unit.Value;\n        }\n    }\n}\n```\n\nAgain, no shenanigans here, as we retrieve the brewery first to validate it exists, handle the case of no brewery found,\nand remove it from the database and pass nothing but a `Unit.Value` (from the `MediatR` namespace) to signal the work we\nperformed is finished and successful.\n\nAlright, let's take a minute to breathe, as that was a lot of code we just cranked out. To cleanse our minds, I'll take\na break from finishing our beer operations by showing some examples of how we might write some unit tests for this\nlayer. [I'll leave this link](https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-3-core-layer/tests/Dappery.Core.Tests)\nfor the interested to scan through how I wrote each handler test (happy paths only). Using\nthe `CreateBreweryCommandHandlerTest.cs` xUnit spec as an example:\n\n### CreateBeerCommandHandlerTest.cs\n\n```csharp\nnamespace Dappery.Core.Tests.Beers\n{\n    using System.Net;\n    using System.Threading.Tasks;\n    using Core.Beers.Commands.CreateBeer;\n    using Domain.Dtos.Beer;\n    using Domain.Entities;\n    using Domain.Media;\n    using Exceptions;\n    using Shouldly;\n    using Xunit;\n\n    public class CreateBeerCommandHandlerTest : TestFixture\n    {\n        [Fact]\n        public async Task GivenValidRequest_WhenBreweryExists_ReturnsMappedAndCreatedBeer()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var beerCommand = new CreateBeerCommand(new CreateBeerDto\n            {\n                Name = \"Test Beer\",\n                Style = \"Lager\",\n                BreweryId = 1\n            });\n            var handler = new CreateBeerCommandHandler(unitOfWork);\n\n            // Act\n            var result = await handler.Handle(beerCommand, CancellationTestToken);\n\n            // Assert\n            result.ShouldNotBeNull();\n            result.ShouldBeOfType<BeerResource>();\n            result.Self.ShouldNotBeNull();\n            result.Self.Brewery.ShouldNotBeNull();\n            result.Self.Brewery?.Address.ShouldNotBeNull();\n            result.Self.Brewery?.Address?.StreetAddress.ShouldBe(\"1030 E Cypress Ave Ste D\");\n            result.Self.Brewery?.Address?.City.ShouldBe(\"Redding\");\n            result.Self.Brewery?.Address?.State.ShouldBe(\"CA\");\n            result.Self.Brewery?.Address?.ZipCode.ShouldBe(\"96002\");\n            result.Self.Brewery?.Beers.ShouldBeNull();\n            result.Self.Brewery?.Id.ShouldBe(1);\n            result.Self.Brewery?.Name.ShouldBe(\"Fall River Brewery\");\n            result.Self.Id.ShouldNotBeNull();\n            result.Self.Name.ShouldBe(beerCommand.Dto.Name);\n            result.Self.Style.ShouldBe(beerCommand.Dto.Style);\n        }\n\n        [Fact]\n        public async Task GivenValidRequest_WhenBreweryDoesNotExist_ThrowsApiExceptionForBadRequest()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var beerCommand = new CreateBeerCommand(new CreateBeerDto\n            {\n                Name = \"Test Beer\",\n                Style = \"Lager\",\n                BreweryId = 11\n            });\n            var handler = new CreateBeerCommandHandler(unitOfWork);\n\n            // Act\n            var result = await Should.ThrowAsync<DapperyApiException>(async () => await handler.Handle(beerCommand, CancellationTestToken));\n\n            // Assert\n            result.ShouldNotBeNull();\n            result.StatusCode.ShouldBe(HttpStatusCode.BadRequest);\n        }\n\n        [Fact]\n        public async Task GivenValidRequest_WithInvalidBeerStyle_ReturnsMappedAndCreatedBeerWithOtherAsStyle()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var beerCommand = new CreateBeerCommand(new CreateBeerDto\n            {\n                Name = \"Test Beer\",\n                Style = \"Not defined!\",\n                BreweryId = 1\n            });\n            var handler = new CreateBeerCommandHandler(unitOfWork);\n\n            // Act\n            var result = await handler.Handle(beerCommand, CancellationTestToken);\n\n            // Assert\n            result.ShouldNotBeNull();\n            result.ShouldBeOfType<BeerResource>();\n            result.Self.ShouldNotBeNull();\n            result.Self.Brewery.ShouldNotBeNull();\n            result.Self.Brewery?.Address.ShouldNotBeNull();\n            result.Self.Brewery?.Address?.StreetAddress.ShouldBe(\"1030 E Cypress Ave Ste D\");\n            result.Self.Brewery?.Address?.City.ShouldBe(\"Redding\");\n            result.Self.Brewery?.Address?.State.ShouldBe(\"CA\");\n            result.Self.Brewery?.Address?.ZipCode.ShouldBe(\"96002\");\n            result.Self.Brewery?.Beers.ShouldBeNull();\n            result.Self.Brewery?.Id.ShouldBe(1);\n            result.Self.Brewery?.Name.ShouldBe(\"Fall River Brewery\");\n            result.Self.Id.ShouldNotBeNull();\n            result.Self.Name.ShouldBe(beerCommand.Dto.Name);\n            result.Self.Style.ShouldBe(BeerStyle.Other.ToString());\n        }\n    }\n}\n```\n\nWe see that there are quite a few similarities with how we wrote unit tests for the data layer. We define a\ncommon `TestFixture` that our test files descend from in order to capture a clean test context between specs where all\nof our dependencies are wired up for us and guaranteed fresh for each test run. Then, we write just a few simple tests\nthat cover each scenario we could possibly see within the `CreateBreweryCommandHandler` implementation by setting up the\ncommand, declaring and assigning a reference to the handler, and capturing the resulting `handler.Handle()` response to\nvalidate against. I won't include the other tests here for brevity, but I definitely encourage the curious out there to\ncheck out how I've written the other tests, and even more so encourage any method of where we might improve these tests.\n\nIn an effort to not bore you guys _too much_, I'll snap the chalk line for this post here, as the beer operations share\na lot of the same ideas with how we wrote the brewery operations,\nand [I'll leave this link here](https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-3-core-layer/src/Dappery.Core/Beers)\nfor you guys to checkout how, exactly, we might write those commands and queries. For the most part, it'll feel eerily\nsimilar in setup, with just a few minor tweaks since we're working within the context of the child in the beer-brewery\nrelationship. While this might seem like a lot of redundant, rather boilerplate-y code, I think we should discuss the\ntradeoffs of using MediatR with the CQRS pattern:\n\n-   Since we've separated commands from queries, we've implicitly created clearly defined boundaries within the core\n    application layer\n-   If we want to add additional features, we can easily do so without fear of modifying existing behavior as we've\n    compartmentalized each request in total isolation from one another\n-   We've greatly reduced number of states our application could possibly create, with a finite number of logical paths a\n    request thread could take\n-   Notice we have no classical service-type classes as we we're deliberate about not creating an all encompassing service\n    that would mix our commands and queries together\n-   While all this sounds great, one could also argue that we've complicated the code by adding such convention all over\n    the place\n\nAt the end of the day, no matter how we implement the core application layer, it will still have just one\nresponsibility - encompass all the business logic. We've seen that using MediatR, FluentValidation, and a few simple\nmappers, we can build a flexible, modular business logic layer that is easy to extend and modify to fit our business\nneeds and requirements. In our next post, we'll _finally_ finish up our application by slapping an API layer on top of\nall the code we've written thus far and see if this thing actually works.\n\nAnd with that... I think it's time for a beer. Cheers everyone!\n\nimport BlogLayout from '@/layouts/BlogLayout';\n\nexport default ({ children }) => <BlogLayout>{children}</BlogLayout>;\n",
    "html": "<p>The wait is finally over (sort of). As we recover from the scrupulous amount of Christmas cookies we consumed during our\nannual holiday bulking season (at least what I tell myself), I figured it's time to jump into the bulk of our fictional\nbrewery app, Dappery. So far, we've:</p>\n<ul>\n<li>Defined our domain layer and business entities used application wide</li>\n<li>Implemented our data access layer with the help of repositories wrapped in a unit of work</li>\n<li>Written unit tests for our persistence layer to ensure future proofing our code</li>\n</ul>\n<p>And with most of the groundwork out of the way, we can finally jump into the core layer of Dappery. Before we dive into\nthe code, let's remind ourselves of <em>why</em> exactly we've split our core business logic layer out into a high level detail\nof our application, with the lower level details (data access and API layers, in our case) <em>depending</em> on this layer:</p>\n<ol>\n<li>Our core business logic layer is the most complex in terms of duties it performs (not so much code-wise)</li>\n<li>Encompassing the business logic with this layer prevents rules and policies from leaking into the low level details (\nthe data access layer should not know <em>how</em> the data is mapped, for example)</li>\n<li>We invert the dependency of the API layer and the business layer, as the API layer now depends on the core business\nlayer</li>\n<li>The API layer has no notion of exactly <em>how</em> we interact with our data, it only talks to the core logic to perform\nservices</li>\n</ol>\n<p>Noting the super meta meme at the top, some of you may be asserting through clenched teeth \"hey, AutoMapper is awesome!\"\nand rightfully so, <a href=\"https://github.com/AutoMapper/AutoMapper\">AutoMapper</a> <em>is</em> in fact awesome. I'm a firm believer in\nthe library and use it quite extensively in other applications. <strong>However</strong>, I believe for our use case, the overhead of\nan entire mapping library that we will grossly under utilize the capabilities of, writing a few custom mappers within\nour core business logic layer will suffice. With that said, mapper libraries like AutoMapper do make writing the mind\nnumbing boilerplate mapping code in large, complex applications much easier (as long as you know where a few of the \"\ngotchas\" can happen).</p>\n<p>Alright, with the preamble out of the way, let's get a game plan going for how we'll implement this layer:</p>\n<ul>\n<li>We'll use our data access layer contracts (i.e. the interfaces we've defined in this layer) to access our database</li>\n<li>Using MediatR, we'll break our requests into queries and commands, effectively containing a finite set of application\nfeatures that will be easier to code to and debug</li>\n<li>While it may seem a little boilerplate-y, we avoid things like\nthe <a href=\"https://en.wikipedia.org/wiki/God_object\">God Object</a> anti-pattern, where everything gets shoved into one helper\nor\nservice class</li>\n<li>We'll write two custom mappers that will map our beer and brewery entities into DTOs and resource to transport the\ndatabase entities out of the lower levels</li>\n<li>Each feature request will be validated using the <a href=\"https://github.com/JeremySkinner/FluentValidation\">FluentValidation</a>\nlibrary, acting as a guard between the API layer and core business layer to protect invalid state from making its way\nto the database</li>\n<li>We'll handle invalid scenarios in this layer and enforce business rules</li>\n</ul>\n<p>As we can see, that's a lot of stuff - thus the reason our core business layer is in a layer of its own, independent of\nthe lower level details. Without further ado, let's cut the chit chat and get down to business (pun intended). Let's\nstart off by creating a <code>Breweries</code> directory within our <code>Dappery.Core</code> project, followed by creating two additional\ndirectories of <code>Queries</code> and <code>Commands</code> nested beneath our newly created <code>Breweries</code> directory. Let's add one more\nfolder underneath <code>Breweries/Commands</code> called <code>CreateBrewery</code>. I know, I know... that's some deep structure we're\nbuilding, but the architecture will help keep our application flows and paths neatly separated and easy to drill down\ninto. Underneath <code>Breweries/Commands/CreateBeer</code>, let's add a new C# file called <code>CreateBreweryCommand.cs</code> that will\nserve as the issuing command MediatR will emit to our application layer to begin the transaction for adding a brewery to\nthe database.</p>\n<h3>CreateBreweryCommand.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateBreweryCommand</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateBreweryCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">CreateBreweryDto</span><span style=\"color:#80A665\"> dto</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> Dto</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> dto</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> CreateBreweryDto</span><span style=\"color:#80A665\"> Dto</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>The <code>IRequest&#x3C;BreweryResource></code> parent interface we're inheriting from is a MediatR interface that registers with our\nMediatR instance, with <code>BreweryResource</code> being the response type we should expect when this request is issued. A pretty\nsimple command, as we do nothing more than construct the request DTO that is passed into the business logic layer from\nthe API layer (which we'll implement a little later), with <code>CreateBreweryCommand</code> being the wrapper for the data we'll\neventually use. We could also issue commands directly from the API layer, rather than wrapping requests for that layer\nin a command, or query - this is just my preference, so the API layer does not need to know what dependencies our\ncommands and queries have, just that it needs to send its version of the object request. With our command in place,\nlet's add a validator within the same directory by creating <code>CreateBreweryCommandValidator.cs</code>:</p>\n<h3>CreateBreweryCommandValidator.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Extensions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateBreweryCommandValidator</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> AbstractValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">CreateBreweryCommand</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateBreweryCommandValidator</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">A request must contain valid creation data</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNullOrEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply the address of the brewery when creating</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNullOrEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">HasValidStateAbbreviation</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">HasValidStreetAddress</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">HasValidZipCode</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Using the FluentValidation interface <code>AbstractValidator&#x3C;CreateBreweryCommand></code>, we're telling our validator instance (\nregistered at startup, which again, we'll eventually see) that requests sending a <code>CreateBreweryCommand</code> need to adhere\nto the simple validation rules we've defined within the constructor of the class. Anytime we attempt to validate an\ninstance of the <code>CreateBreweryCommand</code> using the FluentValidation <code>ValidationContext</code> class (which we'll see in just a\nbit), the library will give us back a context containing any errors the instantiated class contains. Since we've opted\nin to enable nullable reference types in our <code>Dappery.Core.csproj</code> file (inheriting from <code>Dappery.targets</code> - a place to\ndefine build commonality amongst multiple projects and solutions), we use the <code>!</code> bang operator to tell the compiler \"I\nknow that <code>Address</code> has the possibility to be null, but that won't happen\" because of the previous validation we've\ndefined that will fire if we receive any DTO that does not have an <code>Address</code> instance. The last three validations\nactually use custom validators I've defined in a separate rule behavior class within an <code>Extensions</code> folder at the base\nof our <code>Dappery.Core</code> project:</p>\n<h3>RuleBuilderExtensions.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Text</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">RegularExpressions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RuleBuilderExtensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Normally, would put things like this in a shared project, like a separate Dappery.Common project</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#80A665\"> ValidStateRegex</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">^((A[LKZR])|(C[AOT])|(D[EC])|(FL)|(GA)|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EDAINSOT])|(N[EVHJMYCD])|(O[HKR])|(PA)|(RI)|(S[CD])|(T[NX])|(UT)|(V[TA])|(W[AVIY]))$</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#80A665\"> StreetAddressRegex</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">d{1,5}</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">s(</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">b</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">w*</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">b</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">s){1,2}</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">w*</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#80A665\"> ZipCodeRegex</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">^</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">d{5}$</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> NotNullOrEmpty</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> IRuleBuilder</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?></span><span style=\"color:#80A665\"> ruleBuilder</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ruleBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Custom</span><span style=\"color:#666666\">((</span><span style=\"color:#80A665\">stringToValidate</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> context</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">stringToValidate</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">context</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">PropertyName</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> cannot be null, or empty</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> HasValidStateAbbreviation</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> IRuleBuilder</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?></span><span style=\"color:#80A665\"> ruleBuilder</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ruleBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Custom</span><span style=\"color:#666666\">((</span><span style=\"color:#80A665\">stateAbbreviation</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> context</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">ValidStateRegex</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsMatch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">stateAbbreviation</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">stateAbbreviation</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> is not a valid state code</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            })</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">NotEmpty</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">State code cannot be empty</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> HasValidStreetAddress</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> IRuleBuilder</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?></span><span style=\"color:#80A665\"> ruleBuilder</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ruleBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Custom</span><span style=\"color:#666666\">((</span><span style=\"color:#80A665\">streetAddress</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> context</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">streetAddress</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                    // Add the context failure and break out of the validation</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply a street address</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    return</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">StreetAddressRegex</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsMatch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">context</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">PropertyValue</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">()))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">streetAddress</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> is not a valid street address</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> HasValidZipCode</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> IRuleBuilder</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?></span><span style=\"color:#80A665\"> ruleBuilder</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ruleBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Custom</span><span style=\"color:#666666\">((</span><span style=\"color:#80A665\">zipCode</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> context</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">zipCode</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                    // Add the context failure and break out of the validation</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply the zip code</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    return</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">ZipCodeRegex</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsMatch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">context</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">PropertyValue</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">()))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">zipCode</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> is not a valid zipcode</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too complicated here, we're just building some extension methods off of the\nFluentValidation <code>IRuleBuilder&#x3C;T, TProperty></code> interface to combine several validations on the validation context, as\nwell as add some custom validations like the state code regex for convenience. Inside each extension method, we utilize\nthe <code>Custom</code> extension method of the <code>IRuleBuilder</code> interface and pass an <code>Action&#x3C;TProperty, CustomContext></code> lambda\nwhere we make our custom assertions and failures to the returned validation context that then gets passed down the chain\nwith our query and command validator classes. I highly recommend checking out\nthe <a href=\"https://fluentvalidation.net/\">documentation for FluentValidation</a> as the maintainers have done a great job\nutilizing examples and references similar to the above. Next, with our brewery command and request validator in place,\nlet's add the main staple of functionality within our application layer - the MediatR handler.</p>\n<h3>CreateBreweryCommandHandler.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Extensions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateBreweryCommandHandler</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequestHandler</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">CreateBreweryCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> _unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateBreweryCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IUnitOfWork</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResource</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">CreateBreweryCommand</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToCreate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                CreatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    State</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    CreatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create our brewery, retrieve the brewery so we can map it to the response, and clean up our resources</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToCreate</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> insertedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryId</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map and return the response</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToBreweryDto</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>As we'll see with each command and query handler, the core business logic of CRUD'ing our way through the application\nwill happen within each of these class types. For our creates (our beer create operations will be eerily similar), we\ninstantiate a new <code>Brewery</code> entity that will be added to our database with all the proper fields validated by\nour <code>CreateBreweryCommandValidator</code> so we can rest assured the fields we require to store a brewery are there (avoiding\na bunch of <code>if (field is null) { // Do something, or throw an exception }</code> checks that will clutter things up), and call\nour data layer operations to create and retrieve the brewery. Recall that when we create a brewery through our\nrepository method, we get back the last inserted brewery record ID from the <code>Breweries</code> table, which we can then turn\naround and retrieve that newly inserted brewery using the <code>GetBreweryById</code> method. Now granted, there's multiple way\nthis could be optimized and refactored, but this was my deliberate decision to keep our CRUD operations simple and\nadhering to only conform to a <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">single responsibility</a>.\nThere may times where the command to create the brewery does in fact fail at the database level, however, where the\nconnection to physical server may be bad, or the server might be down, etc., so I figured I would leave the failure\ncases to the smart guys reading this post as an exercise for the audience.</p>\n<p>Once our brewery entity has been retrieved, we then construct an instance of the <code>BreweryResource</code> to hand back to the\nAPI layer with a brewery DTO injected into the instance. Let's take a look at our mappers while we're here to get a\nsense of how this mapping is done exactly. Let's create a directory in our <code>Dappery.Core</code> project called <code>Extensions</code>\nwhere we'll create a <code>BreweryExtensions.cs</code> class:</p>\n<h3>BreweryExtensions.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BreweryExtensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> BreweryDto</span><span style=\"color:#80A665\"> ToBreweryDto</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> includeBeerList</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> true</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Beers</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> includeBeerList</span><span style=\"color:#CB7676\"> ?</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Select</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                })</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#CB7676\"> default</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> AddressDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    State</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                BeerCount</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> includeBeerList</span><span style=\"color:#CB7676\"> ?</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerCount</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">?)</span><span style=\"color:#CB7676\"> null</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We see that our mapper is nothing but a simple extension method of the <code>Brewery</code> entity class that transforms the entity\ninto our friendly DTO, omitting fields that don't necessarily need to be transported between layers (i.e. audit\nproperties, or IDs of related entities, just to name a few). From a relationship perspective, remember that a brewery\n<em>has many</em> beers, where a beer <em>has one</em> brewery; we control the nested relational mapping with the <code>includeBeerList</code>\ndefault flag, as to avoid recursively mapped beers and breweries. Nothing too complicated here, just a nice simple\nmapper, and for those interested, I've written\na <a href=\"https://github.com/JoeyMckenzie/Dappery/blob/master/tests/Dappery.Core.Tests/Extensions/BreweryExtensionsTest.cs\">few unit tests</a>\nto capture the expected behavior of our custom mapping class. While we're at it, let's go ahead and add\na <code>BeerExtensions.cs</code> class within our <code>Extensions</code> directory:</p>\n<h3>BeerExtensions.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BeerExtensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> BeerDto</span><span style=\"color:#80A665\"> ToBeerDto</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> Beer</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">             return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToBreweryDto</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Even simpler, our custom beer mapper just transforms a <code>Beer</code> entity into a slim DTO, while utilizing\nour <code>.ToBreweryDto()</code> brewery extension method to non-recursively map the beer's brewery.</p>\n<p>At this point, you're probably wondering \"this is great, but how exactly <em>does</em> our validation catch validation errors?\"\nThat's a great question, with the answer being the MediatR library's <code>IPipelineBehavior&#x3C;TRequest, TResponse></code> interface.\nFor the interested, <a href=\"https://github.com/jbogard\">Jimmy Boggard</a>, an absolute rockstar for the .NET community, and the\nmaintainers of MediatR have a great <a href=\"https://github.com/jbogard/MediatR/wiki\">library doc</a> explaining the exact behavior\nof pipelines and why they are useful to the library. In essence, a every message we send with MediatR will flow through\nour registered pipeline (which we'll register as a dependency within our API layer), giving us the power to check\nrequests for certain properties, validate behaviors, log specific messages based on the request - really anything we\nwant. For our use case, we'll implement the <code>IPipelineBehavior&#x3C;TRequest, TResponse></code> interface to define\na <code>RequestValidationBehavior&#x3C;TRequest, TResponse></code> piece of the request pipeline that will take care of inspecting every\nrequest to make sure it's confiding by our FluentValidation validation rules that we define for each command and some\nqueries. When we register our FluentValidation classes at application startup, we'll tell the library that all of our\nvalidators will be within the <code>Dappery.Core</code> assembly, letting FluentValidator scan the assembly to find and register\neach of our validation contexts, so that we can generically call each request's validation context to then validate the\nrequest with our registered validators. Pretty cool, huh? Side note: I've never used <em>validate</em>, or any of its\nderivatives, that much in a sentence ever in my entire life.</p>\n<p>Let's go ahead and create an <code>Infrastructure</code> folder within our <code>Dappery.Core</code> project, and then create\na <code>RequestValidationBehavior.cs</code> class that will implement an <code>IPipelineBehavior</code>:</p>\n<h3>RequestValidationBehavior.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Infrastructure</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RequestValidationBehavior</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TResponse</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IPipelineBehavior</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TResponse</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        where</span><span style=\"color:#5DA994\"> TRequest</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> _validators</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> RequestValidationBehavior</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> validators</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _validators</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> validators</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> RequestHandlerDelegate</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> next</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> context</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> ValidationContext</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> failures</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> _validators</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">Select</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">v</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> v</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Validate</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">context</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">SelectMany</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">result</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Errors</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">Where</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">f</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> f</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">failures</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Any</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Validation failures for request [</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">request</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">]</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> ValidationException</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">failures</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#80A665\"> next</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Let's break it down:</p>\n<ul>\n<li>First, we inject from the DI container (which we'll see in the API layer with the help of ASP.NET Core) all of the\nvalidations that were found in the assembly that all descended from <code>AbstractValidator&#x3C;TCommand></code> and retrieves the\nrules we've defined per instance</li>\n<li>We retrieve the validators from the request, which we'll know at runtime</li>\n<li>Using LINQ, we run through each validator, validate the context (whatever the request type may be), flatten\nthe <code>ValidationResult</code> enumerable by mapping just the error property with <code>.SelectMany()</code>, and collect any that return\nerrors</li>\n<li>We check to see if there were any violations of our rules, and throw the <code>ValidationException</code> that we'll catch within\na global exception handler within the API layer so we can return detailed validation messages to the consumers</li>\n<li>Finally, we let the request thread continue on its merry way throughout the layers of our application (unscathed if\nthere were no errors)</li>\n</ul>\n<p>Whew, that small bit of code is doing <em>a lot</em> of big things for us. Using MediatR and FluentValidator in tandem is a\nmatch made in heaven, letting developers customize their application request flow, providing convention to help reduce\nthe complexity of our software. Now that we've gotten our pipeline behavior piece implemented, let's go ahead and extend\nthe <code>IServiceCollection</code> from the <code>Microsoft.Extensions.DependencyInjection</code> namespace that will do all the leg work of\nresolving our dependencies. Within our <code>Extensions</code> folder, let's add a <code>StartupExtensions.cs</code> class. We\nuse <code>StartupExtensions</code> here which is a bit specific for my liking, but our use case is just a simple ASP.NET Core\napplication (you may see this with the name <code>DependencyInjection.cs</code> or something similar around various .NET libraries\non GitHub).</p>\n<h3>StartupExtensions.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reflection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Infrastructure</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> StartupExtensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /// </span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">summary</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /// Extension to contain all of our business layer dependencies for our external server providers (ASP.NET Core in our case).</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /// </span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">summary</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /// </span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">param</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">services</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#758575DD\">Service collection for dependency injection</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">param</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> AddDapperyCore</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> IServiceCollection</span><span style=\"color:#80A665\"> services</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add our MediatR and FluentValidation dependencies</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddMediatR</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">Assembly</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetExecutingAssembly</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add our MediatR validation pipeline</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddTransient</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">typeof</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IPipelineBehavior</span><span style=\"color:#666666\">&#x3C;,>),</span><span style=\"color:#CB7676\"> typeof</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">RequestValidationBehavior</span><span style=\"color:#666666\">&#x3C;,>));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too complicated just here, just adding MediatR to the service registry, telling it to scan this assembly for\nimplemented types of the library so that it can wire things up correctly for our internal \"messaging\" system, then\nfinishing up by adding an a reference to the service container for our MediatR pipeline with\na <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1#service-lifetimes-and-registration-options\">transient</a>\nlifetime. If you're unfamiliar with the different ways we can register service dependencies in .NET Core, check out the\nlinked docs for a quite delightful Sunday morning read. I won't go into detail, as the docs do a pretty good job of\nexplaining our use of the transient lifetime here, but in summary, services with this lifetime are dolled out each time\nthe the service is requested when a thread just so happens to hit a piece of code that requires one. From the docs:</p>\n<blockquote>\n<p>Transient lifetime services (AddTransient) are created each time they're requested from the service container. This\nlifetime works best for lightweight, stateless services.</p>\n</blockquote>\n<p>Now that we've got most of our core layer plumbing out of the way, we can now just focus on implementing our query and\ncommand handlers in a similar fashion to the <code>CreateBreweryCommandHandler</code> from above. We've given users the option of\ncreating breweries, so now let's add an update feature to modify a previously created brewery. Let's add\nan <code>UpdateBrewery</code> folder within the <code>Breweries/Commands</code> directory. For the curious, my preference for the folder\nstructure is to mimic an application use case, solely for the case of debug-ability and easily being able to identify\nwhat areas of the application are in charge of what. This is more often than not referred to as <em>vertical slice\narchitecture</em>, and there's a <a href=\"https://jimmybogard.com/vertical-slice-architecture/\">great article</a>, again by Jimmy\nBoggard, that discusses the power of utilizing this pattern. Notwithstanding, there are a few places where I've been a\nbit lazy and not so idiomatic in designing with that in mind (particularly in the domain layer), but I'll leave the\nclean up as an exercise for the reader. Let's add an <code>UpdateBreweryCommand.cs</code> underneath the <code>UpdateBrewery</code> folder:</p>\n<h3>UpdateBreweryCommand.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateBeery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateBeerCommand</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BeerResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateBeerCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">UpdateBeerDto</span><span style=\"color:#80A665\"> beerDto</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> requestId</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> BeerId</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">beerDto</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> requestId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> UpdateBeerDto</span><span style=\"color:#80A665\"> Dto</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> BeerId</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Easy enough, all our <code>UpdateBreweryCommand</code> requires is an ID for the brewery and the properties we've exposed that\nconsumer are allowed to update. Next, let's define our validators in an <code>UpdateBreweryCommandValidator.cs</code> class:</p>\n<h3>UpdateBreweryCommandValidator.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateBreweryCommandValidator</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> AbstractValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateBreweryCommand</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateBreweryCommandValidator</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">request</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply a request body</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">request</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply a valid brewery ID</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We want each request that comes in for a brewery update to have a valid DTO in the body, along with a brewery ID that\nwe'll retrieve from the URI. There's an argument to be made for sticking the ID as a requirement within the DTO, but\nthis just my preference since we'll assume our consumers will be following RESTful best practices (and that's a <em>hefty</em>\nassumption). Next, we'll go ahead and define our command handler within a new <code>UpdateBreweryCommandHandler.cs</code> class\nwithin our <code>UpdateBrewery</code> directory:</p>\n<h3>UpdateBreweryCommandHandler.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Extensions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Exceptions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateBreweryCommandHandler</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequestHandler</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateBreweryCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> _unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateBreweryCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IUnitOfWork</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResource</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">UpdateBreweryCommand</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Retrieve the brewery on the request</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToUpdate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Invalidate the request if no brewery was found</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> DapperyApiException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">No brewery was found with ID </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">BreweryId</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HttpStatusCode</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">NotFound</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Update the properties on the brewery entity</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updateBreweryAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If the request contains an address, set the flag for the persistence layer to update the address table</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#BD976A\"> breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                updateBreweryAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> true</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Update the brewery in the database, retrieve it, and clean up our resources</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UpdateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> updateBreweryAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updatedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map and return the brewery</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToBreweryDto</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>First, we see that we're using the <code>BreweryId</code> that was passed along in the request to retrieve the brewery we should be\nupdating. If no brewery is found, we'll throw a 404 back to the consumer using a custom exception we'll define in just a\nminute. Once we know we've got our brewery, we update each of the updatable fields on the entity, and set a flag for the\nrepository implementation to update the address if need be. Due to our schema design, we probably could have opted for\nthe <a href=\"https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/implement-value-objects\">value object</a>\npattern here and nested the address within the brewery table, and maybe one of these weekends I'll get around to making\nthat update. Let's create an <code>Exceptions</code> folder underneath the <code>Dappery.Core</code> project root, and inside that, we'll\ncreate a <code>DapperyApiException.cs</code> class:</p>\n<h3>DapperyApiException.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Exceptions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DapperyApiException</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Exception</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DapperyApiException</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> message</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> HttpStatusCode</span><span style=\"color:#80A665\"> statusCode</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            :</span><span style=\"color:#C99076\"> base</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            StatusCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> statusCode</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ApiErrors</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DapperyApiError</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> HttpStatusCode</span><span style=\"color:#80A665\"> StatusCode</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ICollection</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DapperyApiError</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> ApiErrors</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now, there's an argument to be made about using\nexceptions <a href=\"https://wiki.c2.com/?DontUseExceptionsForFlowControl\">as control flow within an application</a> which is\nessentially what we're doing here, but I'll let that holy war continue on StackOverflow. For our simple use case, we'll\nuse this exception to handle any sort of operation that cannot be performed to protect misinformation from reaching the\nlower level concerns and handle the situation with a global (at least within the scope of our API) exception handler in\nthat layer that will decipher and determine the proper message to send back to consumers. We've also defined\na <code>DapperyApiError</code> type that will encapsulate and be used as a translator of sorts to convey to consumers exactly what\nhappened to cause the exception:</p>\n<h3>DapperyApiError.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Exceptions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DapperyApiError</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DapperyApiError</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> errorMessage</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> propertyName</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ErrorMessage</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> errorMessage</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            PropertyName</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> propertyName</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> ErrorMessage</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> PropertyName</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our <code>DapperyApiException</code> and <code>DapperyApiError</code> will work in tandem to help to give us a predefined convention for\nhandling any sort of error scenario within the core application layer so that we can easily contextualize the content of\nthe error and pass the information back up rather than leaking bad state down to our other layers. We'll see in the API\nlayer how we define a handler within our request pipeline to handle error scenarios in a somewhat graceful manner,\nthough there are quite a few ways to do this. For now, our simple error and exception classes will work just fine, but\nwe might want to rethink the approach at scale when coordinating between multiple API (micro)services, whether prosumer,\nor consumer. With the last piece of the infrastructure plumping out of the way, let's set our focus back on the commands\nand queries we're in the midst of writing.</p>\n<p>Since we're building a (probably overcomplicated) CRUD solution, let's give users the option to retrieve and search for\nbreweries. Let's create a <code>Queries</code> folder underneath our <code>Breweries</code> directory, and start off by creating another\nfolder of <code>RetrieveBrewery</code>. After that's done, let's create a <code>RetrieveBreweryQuery.cs</code> file:</p>\n<h3>RetrieveBreweryQuery.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Queries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">RetrieveBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RetrieveBreweryQuery</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> RetrieveBreweryQuery</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Easy enough, just a simple <code>IRequest</code> that will return a <code>BreweryResource</code> back to the consumer, given an ID to match\non. With that out of the way, let's create a <code>RetrieveBreweryQueryValidator.cs</code> validator class to catch mischievous\nconsumers that will try and invoke this operation and somehow manage to fool the ASP.NET Core route matching system:</p>\n<h3>RetrieveBreweryQueryValidator.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Queries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">RetrieveBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RetrieveBreweryQueryValidator</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> AbstractValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">RetrieveBreweryQuery</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> RetrieveBreweryQueryValidator</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotEmpty</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply an ID to retrieve a brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">GreaterThanOrEqualTo</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must be a valid brewery ID</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Here, we define two validations in not allowing null IDs to propogate to this layer (shouldn't happen in the first\nplace, since we did not declare the ID as nullable), and the ID should be greater than zero, as our table constraint is\nusing the ID as an index and primary key. Next, let's define our query handler with a\nnew <code>RetrieveBreweryQueryHandler.cs</code> class:</p>\n<h3>RetrieveBreweryQueryHandler.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Queries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">RetrieveBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Exceptions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Extensions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RetrieveBreweryQueryHandler</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequestHandler</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">RetrieveBreweryQuery</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> _unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> RetrieveBreweryQueryHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IUnitOfWork</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResource</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">RetrieveBreweryQuery</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Retrieve the brewery and clean up our resources</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Invalidate the request if no brewery is found</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">brewery</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> DapperyApiException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">No brewery found with ID </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HttpStatusCode</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">NotFound</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map and return the brewery</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToBreweryDto</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>This is about as standard as a retrieve request gets: attempt to grab the brewery from the database using our\napplication repositories, clean up our resources, throw our custom exception for not found if no brewery was returned,\nand return the resource with a view model friendly representation of our brewery entity. While we're at the 'R' in CRUD,\nlet's add an operation for our consumers to get a list of all breweries. Inside the <code>Brewery/Queries</code> folder, go ahead\nand create a <code>GetBreweries</code> folder, followed by a <code>GetBreweriesQuery.cs</code> class inside the newly created folder:</p>\n<h3>GetBreweryQuery.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Queries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">GetBreweries</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> GetBreweriesQuery</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResourceList</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our simplest form of an <code>IRequest</code>, we're letting MediatR know that anytime a message is sent with the context\nof <code>GetBreweriesQuery</code>, the library will map that request to a <code>GetBreweriesQueryHandler</code> (below) and return\na <code>BreweryResourceList</code>. Let's implement the handler:</p>\n<h3>GetBreweryQuery.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Queries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">GetBreweries</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Extensions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> GetBreweriesQueryHandler</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequestHandler</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">GetBreweriesQuery</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> BreweryResourceList</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> _unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> GetBreweriesQueryHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IUnitOfWork</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResourceList</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">GetBreweriesQuery</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Retrieve the breweries and clean up our resources</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweries</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBreweries</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map our breweries from the returned query</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> mappedBreweries</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Select</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToBreweryDto</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map each brewery to its corresponding DTO</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryResourceList</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mappedBreweries</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>As straightforward as a search request be, we're simply just grabbing all the breweries from the database, projecting\neach entity into its view model representation, and returning the list to the consumer. No execptions, and we also\nhandle the case if there are no breweries in the database to just return an empty list (which we'll cover with a unit\ntest). Now, since we're building just a small demo application, we <em>probably</em> shouldn't be returning the entirety of\nrecords from the breweries table within the database. A more sound and performant implementation of this handler would\nbe to pass query filters and options for pagination on the <code>GetBreweriesQuery</code>, so that we could refine our SQL and not\nhave Dapper try to map every record to its corresponding C# POCO. Again, I'll leave this as an exercise for the reader,\nor maybe comeback on a rainy day to refactor this (most likely not, though). For Completeness, let's finish up our set\nof brewery operations by adding a delete command to our application by creating a <code>DeleteBrewery</code> folder nested within\nour <code>Breweries/Commands</code> directory, then creating a <code>DeleteBreweryCommand.cs</code> file:</p>\n<h3>DeleteBreweryCommand.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteBreweryCommand</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Unit</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteBreweryCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> BreweryId</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>All we require for a delete command is just the ID, which we'll get from the API layer. Let's create a validator for the\nhooligans that might try and break the chain of command within the same <code>DeleteBrewery</code> directory:</p>\n<h3>DeleteBreweryCommandValidator.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteBreweryCommandValidator</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> AbstractValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteBreweryCommand</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteBreweryCommandValidator</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply the brewery ID</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We don't want to perform any delete request if we haven't an ID to validate the beer exists in the database, first and\nforemost. Again, since our delete command is correct by construction since we did <em>not</em> tell the command to expect a\nnullable <code>int</code>, we should nevertm see this behavior, but it doesn't hurt to have an extra layer of\nvalidation. Finally, let's finish up by implementing the <code>DeleteBreweryCommandHandler.cs</code> class:</p>\n<h3>DeleteBreweryCommandHandler.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Exceptions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteBreweryCommandHandler</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequestHandler</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteBreweryCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Unit</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> _unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteBreweryCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IUnitOfWork</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Unit</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">DeleteBreweryCommand</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Retrieve the brewery and invalidate the request if none is found</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToDelete</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Invalidate the request if no brewery is found</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">breweryToDelete</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> DapperyApiException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">No brewery was found with ID </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">BreweryId</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HttpStatusCode</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">NotFound</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Delete the brewery from the database and clean up our resources once we know we have a valid beer</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> Unit</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Again, no shenanigans here, as we retrieve the brewery first to validate it exists, handle the case of no brewery found,\nand remove it from the database and pass nothing but a <code>Unit.Value</code> (from the <code>MediatR</code> namespace) to signal the work we\nperformed is finished and successful.</p>\n<p>Alright, let's take a minute to breathe, as that was a lot of code we just cranked out. To cleanse our minds, I'll take\na break from finishing our beer operations by showing some examples of how we might write some unit tests for this\nlayer. <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-3-core-layer/tests/Dappery.Core.Tests\">I'll leave this link</a>\nfor the interested to scan through how I wrote each handler test (happy paths only). Using\nthe <code>CreateBreweryCommandHandlerTest.cs</code> xUnit spec as an example:</p>\n<h3>CreateBeerCommandHandlerTest.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tests</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateBeer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Exceptions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Shouldly</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Xunit</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateBeerCommandHandlerTest</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> TestFixture</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GivenValidRequest_WhenBreweryExists_ReturnsMappedAndCreatedBeer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> beerCommand</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateBeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Test Beer</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Lager</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> handler</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">unitOfWork</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> handler</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> CancellationTestToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BeerResource</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">1030 E Cypress Ave Ste D</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">96002</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Style</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Style</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GivenValidRequest_WhenBreweryDoesNotExist_ThrowsApiExceptionForBadRequest</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> beerCommand</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateBeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Test Beer</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Lager</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 11</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> handler</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">unitOfWork</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> Should</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ThrowAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DapperyApiException</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">async</span><span style=\"color:#666666\"> ()</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> handler</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> CancellationTestToken</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StatusCode</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatusCode</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BadRequest</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GivenValidRequest_WithInvalidBeerStyle_ReturnsMappedAndCreatedBeerWithOtherAsStyle</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> beerCommand</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateBeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Test Beer</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Not defined!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> handler</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">unitOfWork</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> handler</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> CancellationTestToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BeerResource</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">1030 E Cypress Ave Ste D</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">96002</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Style</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Other</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We see that there are quite a few similarities with how we wrote unit tests for the data layer. We define a\ncommon <code>TestFixture</code> that our test files descend from in order to capture a clean test context between specs where all\nof our dependencies are wired up for us and guaranteed fresh for each test run. Then, we write just a few simple tests\nthat cover each scenario we could possibly see within the <code>CreateBreweryCommandHandler</code> implementation by setting up the\ncommand, declaring and assigning a reference to the handler, and capturing the resulting <code>handler.Handle()</code> response to\nvalidate against. I won't include the other tests here for brevity, but I definitely encourage the curious out there to\ncheck out how I've written the other tests, and even more so encourage any method of where we might improve these tests.</p>\n<p>In an effort to not bore you guys <em>too much</em>, I'll snap the chalk line for this post here, as the beer operations share\na lot of the same ideas with how we wrote the brewery operations,\nand <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-3-core-layer/src/Dappery.Core/Beers\">I'll leave this link here</a>\nfor you guys to checkout how, exactly, we might write those commands and queries. For the most part, it'll feel eerily\nsimilar in setup, with just a few minor tweaks since we're working within the context of the child in the beer-brewery\nrelationship. While this might seem like a lot of redundant, rather boilerplate-y code, I think we should discuss the\ntradeoffs of using MediatR with the CQRS pattern:</p>\n<ul>\n<li>Since we've separated commands from queries, we've implicitly created clearly defined boundaries within the core\napplication layer</li>\n<li>If we want to add additional features, we can easily do so without fear of modifying existing behavior as we've\ncompartmentalized each request in total isolation from one another</li>\n<li>We've greatly reduced number of states our application could possibly create, with a finite number of logical paths a\nrequest thread could take</li>\n<li>Notice we have no classical service-type classes as we we're deliberate about not creating an all encompassing service\nthat would mix our commands and queries together</li>\n<li>While all this sounds great, one could also argue that we've complicated the code by adding such convention all over\nthe place</li>\n</ul>\n<p>At the end of the day, no matter how we implement the core application layer, it will still have just one\nresponsibility - encompass all the business logic. We've seen that using MediatR, FluentValidation, and a few simple\nmappers, we can build a flexible, modular business logic layer that is easy to extend and modify to fit our business\nneeds and requirements. In our next post, we'll <em>finally</em> finish up our application by slapping an API layer on top of\nall the code we've written thus far and see if this thing actually works.</p>\n<p>And with that... I think it's time for a beer. Cheers everyone!</p>\n<p>import BlogLayout from '@/layouts/BlogLayout';</p>\n<p>export default ({ children }) => {children};</p>"
  },
  "_id": "2020/net-core-dapper-and-crud-buzzword-bingo-part-4.md",
  "_raw": {
    "sourceFilePath": "2020/net-core-dapper-and-crud-buzzword-bingo-part-4.md",
    "sourceFileName": "net-core-dapper-and-crud-buzzword-bingo-part-4.md",
    "sourceFileDir": "2020",
    "contentType": "markdown",
    "flattenedPath": "2020/net-core-dapper-and-crud-buzzword-bingo-part-4"
  },
  "type": "Post",
  "url": "/blog/2020/net-core-dapper-and-crud-buzzword-bingo-part-4"
}