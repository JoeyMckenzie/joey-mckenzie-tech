[
  {
    "title": "Nullable reference types and designing with intent",
    "description": "Null reference exceptions can be a thing of the path, but with great power comes great responsibility.",
    "pubDate": "2019-11-05T08:00:00.000Z",
    "category": ".NET",
    "heroImage": "https://imgs.xkcd.com/comics/compiler_complaint.png",
    "draft": false,
    "keywords": [
      "C#",
      ".net",
      ".net core",
      "nullable reference types"
    ],
    "body": {
      "raw": "\nIt's almost 5 o'clock, you've just deployed the latest API build into your test environment for other teams to start consuming and integrating into their applications, and the weekend is right around the corner. Then, the Slack messages begin.\n\n> Steve from that one team: Hey, you guys just released a new build, right? Looks like we're getting 500s calling your team's API.`\n\nNaturally, we check the logs in the test environment using our favorite application insight tool (we happen to use [Splunk](https://www.splunk.com/) in my company), and aimlessly attempt to find any sign of failure, praying to the higher powers that may be to just be the client that has the issue.\n\nThen, it happens:\n\n```\nERROR: NullReferenceException at (35,16) in Program.cs\n```\n\nUgh... of course, and only on a Friday. The previous scenario is something we developers are all too familiar with, and our mortal enemy, the `NullReferenceException` has been besting even our most experienced code slingers for over half of a decade. Since its inception in the early 1960s, `null` has been a staple of computer science, software engineering, and expression of application intent in nearly every facet of building applications. We've built million dollar software systems based on the idea, and even worse, have caused billions (yes, with a \"b\") of dollars of damage in the form of irrecoverable business data. Unfortunately, one could argue that `null` is here to stay, deeply rooted in many of the world's most complex software systems that power entire economies, and there's no plans to re-engineer its original design intent. With the rise of object-oriented programming, the `null` pointer has possibly been one of the most common issues in our software applications. Take for example the following:\n\n```csharp\nvar myObject= new MyObject\n{\n    Foo = \"Bar\"\n};\n\n// Assigning another object to the same reference that myObject points to\nvar anotherObject = myObject;\nanotherObject.Foo = \"Not Bar\";\n\nConsole.WriteLine(myObject.Foo); // Prints \"Not Bar\"\n```\n\nNothing out of the ordinary here, as we software engineers see this kind of stuff all over our codebases. Sharing references between objects (one could make the argument) forms the core of object-oriented programming. Pointers, pieces of our stack allocated memory that \"point\" to our reference values in memory, are easy to pass around, manipulate, and conveniently dereference and go about our merry way. Pointer references, although great as they may be, present the issue that has plagued nearly every software application at one point, or another: the null pointer.\n\nTake for example the extension of our code from above:\n\n```csharp\nanotherObject.Foo = null;\nConsole.WriteLine(myObject.Foo.Length);\n```\n\nWhat happens now? `anotherObject` assigns our `Foo` property to an absent value, all while we attempt to dereference that same property value and retrieve the length on the next line. Run the program, and watch the catastrophe in action:\n\n```\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\n```\n\n_Hello darkness, my old friend..._ the infamous `NullReferenceException`. _Queue the obvious rhetorical question_ - is there anything we can do to prevent this behavior? Enter C# 8.0 and [nullable reference types](https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references), our `NullReferenceException` saving grace. As a professional .NET Core amateur, I'll do what I do best and explore this shiny new feature of C# in all its glory. Let's spin up a simple console app reflecting the previous example code to start things off:\n\n```\n> dotnet new console -n NullableReferencesExample\n```\n\nNow, in our `Program.cs` file, let's add the following:\n\n```csharp\nusing System;\n\nnamespace NullableReferencesExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var myObject= new MyObject\n            {\n                Foo = \"Bar\"\n            };\n\n            var anotherObject = myObject;\n            anotherObject.Foo = \"Not Bar\";\n\n            Console.WriteLine(myObject.Foo);\n\n            anotherObject.Foo = null;\n            Console.WriteLine(myObject.Foo.Length);\n        }\n    }\n\n    internal class MyObject\n    {\n        public string Foo { get; set; }\n    }\n}\n```\n\nGo ahead and run a quick `dotnet restore`, and let's build our project with a `dotnet build`:\n\n```\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Restore completed in 22.78 ms for /path/to//NullableReferencesExample/NullableReferencesExample.csproj.\n  NullableReferencesExample -> /path/to//NullableReferencesExample/bin/Debug/netcoreapp3.0/NullableReferencesExample.dll\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:02.44\n```\n\nOur build completes just fine, with no signs of terror ahead even though we've knowingly written an inevitable disaster within our code. If we run this application with a `dotnet run`, we get exactly what we expect. Let's capture the build warning ahead of time by bringing in C# 8.0 and the nullable context to our project scope by adding the following to our `PropertyGroup` section of our `NullableReferencesExample.csproj`:\n\n```xml\n<PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp3.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <LangVersion>8.0</LangVersion>\n</PropertyGroup>\n```\n\nNotice that we add the `<Nullable>enable</Nullable>` property; with this tag, we've now enabled nullable references throughout our _entire_ project. In layman's terms, now every where in our project that a reference type exists _without_ being declared as nullable, the compiler will assume that **we cannot assign those values as `null`**. This is huge. If you've ever programmed in a language like Rust, you've seen this concept firsthand. Briefly for those that haven't, the concept of `null` does not _really_ exist in Rust, which is one of the reasons (along with _many_ others) an army of developers have adopted it as one of the most loved languages, according to the last [Stack Overflow developer survey](https://insights.stackoverflow.com/survey/2019). By introducing this nullable context for all reference types in our code, the compiler will implement _strict_ rules anytime we do not initialize a non-nullable reference type, dereference a nullable reference type without checking for null, etc. Let's rebuild our project to see this in action with a quick `dotnet build`:\n\n```\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Restore completed in 21.09 ms for /path/to/NullableReferencesExample/NullableReferencesExample.csproj.\nProgram.cs(26,23): warning CS8618: Non-nullable property 'Foo' is uninitialized. Consider declaring the property as nullable. [/path/to/NullableReferencesExample/NullableReferencesExample.csproj]\nProgram.cs(19,33): warning CS8625: Cannot convert null literal to non-nullable reference type. [/path/to/NullableReferencesExample/NullableReferencesExample.csproj]\n  NullableReferencesExample -> /path/to//NullableReferencesExample/bin/Debug/netcoreapp3.0/NullableReferencesExample.dll\n\nBuild succeeded.\n\nProgram.cs(26,23): warning CS8618: Non-nullable property 'Foo' is uninitialized. Consider declaring the property as nullable. [/path/to/NullableReferencesExample/NullableReferencesExample.csproj]\nProgram.cs(19,33): warning CS8625: Cannot convert null literal to non-nullable reference type. [/path/to/NullableReferencesExample/NullableReferencesExample.csproj]\n    2 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:02.61\n```\n\nLow and behold, the compiler warnings we hoped for (the good kind, at least) alert us that we have not initialized a non-nullable reference type (our `Foo` property in our `MyObject` class) and that we've assigned our `Foo` property to `null` (from the compiler's perspective, we shouldn't be doing that). In our new world of nullable reference types, we have to specify to the compiler when our reference types have the possibility of being null, and where exactly we might make those assignments. Now, coming from a language like Rust, nullable reference types are not to say there is no longer a concept of `null` in C#; should we opt in for the nullable context, we must tell the compiler what types have the ability to be null. By designing our code with this idea in mind, coupled with the compiler assisting us with its strict compile time reference checking, we gain an added layer of code security and the possibility of eliminating any chance of a `NullReferenceException` (not to say we'll _never_ get one, we simply greatly reduce the chance if we implement the proper design).\n\nWe'll go ahead and address our current compiler warnings using this new concept of nullable reference types, but before we do, let's discuss the different ways we might be able to accomplish this.\n\n-   In our `MyObject` class, we could make our `Foo` property a `string?` type rather than just a `string`\n-   We could keep our typing of `string` and override the compiler warnings, essentially telling it \"hey, I know this could be `null`, and that's okay\"\n-   We could keep our typing of string `string` and add a single constructor to guarantee the `MyObject` class always has a valid `Foo` string value\n\nSo, what should we do? Well, the answer is simple: **it depends**. Let's think about the context for our `MyObject` class. In the real world, we build applications designed to solve real world problems, usually built around a central domain architecture. What does our `MyObject` class represent? Is there a business-driven reason as to why the `Foo` property might not exist on an instance of `MyObject`? For our use case, let's define a rule that there is a valid reason for `Foo` to be absent of value. So, let's declare it as nullable:\n\n```csharp\ninternal class MyObject\n{\n    public string? Foo { get; set; }\n}\n```\n\nWith our build errors now fixed, let's add a method to snag the length of a `string` argument passed in back to the caller:\n\n```csharp\nprivate static int GetLength(string someStringValue)\n{\n    return someStringValue.Length;\n}\n```\n\nNow back in our `Main` method, let's call this function to grab a reference to the length of another `MyObject` instance:\n\n```csharp\nvar mySecondObject = new MyObject();\nvar fooLength = GetLength(mySecondObject.Foo);\n```\n\nand if we build our project, we'll get the following warnings:\n\n```\nProgram.cs(23,39): warning CS8604: Possible null reference argument for parameter 'someStringValue' in 'int Program.GetLength(string someStringValue)'.\n```\n\nWhat caused this warning? The compiler noticed that we we're passing a nullable reference type (our `string?` type `Foo` property) to a method expecting a non-nullable string type. Without the nullable context enabled, we would get **no** warnings from the compiler; within the nullable context, the compiler is protecting us from runtime `NullReferenceException`s _because_ of this compile time analysis. Back in our `Main` method, if we add a null check before calling our `GetLength` method and compile:\n\n```csharp\nvar mySecondObject = new MyObject();\nif (mySecondObject.Foo != null)\n{\n    var fooLength = GetLength(mySecondObject.Foo);\n}\n```\n\nour project compiles successfully with no warnings, since the compiler sees that we are _guaranteeing_ a non-nullable string will be passed into `GetLength()`. We could also make `GetLength()` accept a nullable string type and using the `?` operator while dereferencing `someStringValue`; the compiler will be happy either way.\n\n### Another Example\n\nLet's see how we might be able to leverage the power of nullable reference types with another example. I've recently written a series of posts guiding readers as we build a real world application using .NET Core and Dapper centered around a fictional brewery management software called Dappery. I'll take a few examples from those posts and use them here, since you might already be familiar.\n\nLet's create a brewery class, and see how we can use nullable reference types to safely construct instances of this class and add beers to an associated brewery:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace NullableReferencesExample\n{\n    public class Brewery\n    {\n        public ICollection<Beer>? Beers { get; set; }\n\n        public string Name { get; set; }\n\n        public void AddBeer(string name, double abv, byte ibu)\n        {\n            Beers?.Add(new Beer\n            {\n                Name = name,\n                Style = style,\n                Abv = abv,\n                Ibu = ibu\n            });\n        }\n\n        public void PrintBeers()\n        {\n            Console.WriteLine($\"----- {Name} has {Beers?.Count} beers -----\");\n            foreach (var beer in Beers)\n            {\n                Console.WriteLine($\"----- {beer.Name} -----\");\n                Console.WriteLine($\"| Style: {beer.Style} |\");\n                Console.WriteLine($\"| ABV: {beer.Abv} |\");\n                Console.WriteLine($\"| IBU: {beer.Ibu} |\");\n            }\n        }\n    }\n}\n```\n\nand our associated beer class that we'll use in conjunction with our `Brewery` class:\n\n### Beer.cs\n\n```csharp\nnamespace NullableReferencesExample\n{\n    public class Beer\n    {\n        public string Name { get; set; }\n\n        public string Style { get; set; }\n\n        public double Abv { get; set; }\n\n        public byte Ibu { get; set; }\n\n        public Brewery Brewery { get; set; }\n    }\n}\n```\n\nTake a look at our `Brewery` class and notice how we've declared our collection of `Beer`s as a nullable reference; this is an intentional design decision (something we should always keep in mind when working in the nullable context). We're expressing our intent to both the compiler and developers working with this code after us that \"hey, there is a _chance_ that a brewery could not have a reference to any beers.\" Should we initialize our list to an empty collection of beers? We totally could, but for the purpose of us exploring the nullable reference context, we'll leave our collection as nullable for now. To not overload us with compiler warnings, let's add the new `#nullable disable` preprocessor directive at the top of our `Beer.cs` class and run `dotnet build` to see what warnings we might get:\n\n```\nBrewery.cs(20,34): warning CS8602: Dereference of a possibly null reference.\nBrewery.cs(10,23): warning CS8618: Non-nullable property 'Name' is uninitialized. Consider declaring the property as nullable.\n```\n\nInteresting... take a look at that first warning: `Brewery.cs(20,34): warning CS8602: Dereference of a possibly null reference.` Looking at our code in `Brewery.cs`, we're iterating over our `Beers` collection, which we declared as nullable, telling the compiler there's a chance the enumerable could be null. Let's fix this by checking that we have a collection before iterating through each beer within the `PrintBeers` method:\n\n```csharp\npublic void PrintBeers()\n{\n    Console.WriteLine($\"----- {Name} has {Beers?.Count} beers -----\");\n\n    if (Beers != null)\n    {\n        foreach (var beer in Beers)\n        {\n            Console.WriteLine($\"----- {beer.Name} -----\");\n            Console.WriteLine($\"| Style: {beer.Style} |\");\n            Console.WriteLine($\"| ABV: {beer.Abv} |\");\n            Console.WriteLine($\"| IBU: {beer.Ibu} |\");\n        }\n    }\n}\n```\n\nAddressing our second compiler warning, let's initialize the `Name` property since we're telling the compiler this is a non-nullable string reference, so callers of our code can safely dereference a brewery object's `Name` without fear of the value being null. We'll initialize the `Name` property while instantiating a `Brewery` object, making our code correct by construction. While we're at it, we'll refactor the initialization of the `Beers` collection as well:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace NullableReferencesExample\n{\n    public class Brewery\n    {\n        public Brewery(string name) => Name = name;\n\n        public ICollection<Beer>? Beers { get; set; }\n\n        public string Name { get; }\n\n        public void AddBeer(string name, string style, double abv, byte ibu)\n        {\n            Beers ??= new List<Beer>();\n            Beers.Add(new Beer\n            {\n                Name = name,\n                Style = style,\n                Abv = abv,\n                Ibu = ibu\n            });\n        }\n\n        public void PrintBeers()\n        {\n            Console.WriteLine($\"----- {Name} has {Beers?.Count ?? 0} beers -----\");\n\n            if (Beers is null)\n            {\n                Console.WriteLine(\"No beers found\");\n                return;\n            }\n\n            foreach (var beer in Beers)\n            {\n                Console.WriteLine($\"----- {beer.Name} -----\");\n                Console.WriteLine($\"| Style: {beer.Style} |\");\n                Console.WriteLine($\"| ABV: {beer.Abv} |\");\n                Console.WriteLine($\"| IBU: {beer.Ibu} |\");\n            }\n        }\n    }\n}\n```\n\nIn our `AddBeer` method, notice our usage of the null-coalescing assignment operator `??=`. Recently added in C# 8.0, `??=` is a derivative of the `??` null-coalescing operator. Using `??=`, our operand on the left side will be assigned to the evaluation of the right side, if our left side operand evaluates to null. Anytime we instantiate a brewery object and attempt to add a beer, we'll initialize our beer collection on the first beer added. To make things interesting, let's give our breweries an address, since I've never heard of a virtual brewery (yet):\n\n### Address.cs\n\n```csharp\nnamespace NullableReferencesExample\n{\n    public class Address\n    {\n        public Address(string streetAddress, string city, string state, string zipCode, string? zipCodeExtension) =>\n            (StreetAddress, City, State, ZipCode, ZipCodeExtension) = (streetAddress, city, state, zipCode, zipCodeExtension);\n\n        public string StreetAddress { get; }\n\n        public string City { get; }\n\n        public string State { get; }\n\n        public string ZipCode { get; }\n\n        public string? ZipCodeExtension { get; }\n    }\n}\n```\n\nand back in our `Brewery.cs` class, let's add an `Address` property:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace NullableReferencesExample\n{\n    public class Brewery\n    {\n        public Brewery(string name, Address address) =>\n            (Name, Address) = (name, address);\n\n        public ICollection<Beer>? Beers { get; set; }\n\n        public Address Address { get; }\n\n        public string Name { get; }\n\n        public void AddBeer(string name, string style, double abv, byte ibu)\n        {\n            Beers ??= new List<Beer>();\n            Beers.Add(new Beer(name, style, abv, ibu, this));\n        }\n\n        public void PrintBeers()\n        {\n            Console.WriteLine($\"----- {Name} has {Beers?.Count ?? 0} beers -----\");\n\n            if (Beers is null)\n            {\n                Console.WriteLine(\"No beers found\");\n                return;\n            }\n\n            foreach (var beer in Beers)\n            {\n                Console.WriteLine($\"----- {beer.Name} -----\");\n                Console.WriteLine($\"| Style: {beer.Style} |\");\n                Console.WriteLine($\"| ABV: {beer.Abv} |\");\n                Console.WriteLine($\"| IBU: {beer.Ibu} |\");\n            }\n        }\n\n        public void PrintAddress()\n        {\n            Console.WriteLine(\"---- Address -----\");\n            Console.WriteLine($\"Street: {Address.StreetAddress}\");\n            Console.WriteLine($\"City: {Address.City}\");\n            Console.WriteLine($\"State: {Address.State}\");\n            Console.WriteLine(string.IsNullOrWhiteSpace(Address.ZipCodeExtension) ? $\"Zip Code: {Address.ZipCode}\" : $\"Zip Code: {Address.ZipCode}-{Address.ZipCodeExtension}\");\n        }\n    }\n}\n```\n\nNotice that our `Address` property, within our nullable reference context, is _not_ allowed to be null as we did not declare it as nullable. In our `PrintAddress`, the compiler knows our `Address` property is non-nullable, and we can safely dereference the property without having to check if `Address` exists, avoiding any chance of a `NullReferenceException`. If we build our project at this point, we should see no warnings and the compiler should happy. Let's go ahead and remove the `#nullable disable` preprocessor directive from out `Beer.cs` file and build our project one more time to see the new set of compiler warnings we'll get:\n\n```\nBeer.cs(8,23): warning CS8618: Non-nullable property 'Name' is uninitialized. Consider declaring the property as nullable.\nBeer.cs(10,23): warning CS8618: Non-nullable property 'Style' is uninitialized. Consider declaring the property as nullable.\nBeer.cs(16,24): warning CS8618: Non-nullable property 'Brewery' is uninitialized. Consider declaring the property as nullable.\n```\n\nAs expected, we get three warnings due to our three reference type properties not being initialized in the `Beer.cs` class. Notice we only received the warnings for our `string` and `Brewery` reference types, as the `byte` and `double` are value types stored on the stack that will take on their `default` value if not supplied a value at construction time. For our use case, let's about think our intent for the `Beer` class: a beer should have a name, a brewing style (lager, IPA, etc.), and should be associated to a brewery. Each of these properties should be a **non-nullable** reference type, which means that at construction time, we need to supply an initial **non-null** value. To best solve our problem, rather than using the override `default!` assignment on each of these properties, or declaring each as nullable when we know these properties should _not_ be null, let's add a constructor that will assure us values of each of these properties anytime we instantiate a `Beer` object:\n\n```csharp\nnamespace NullableReferencesExample\n{\n    public class Beer\n    {\n        public Beer(string name, string style, double abv, byte ibu, Brewery brewery) =>\n            (Name, Style, Abv, Ibu, Brewery) = (name, style, abv, ibu, brewery);\n\n        public string Name { get; }\n\n        public string Style { get; }\n\n        public double Abv { get; }\n\n        public byte Ibu { get; }\n\n        public Brewery Brewery { get; }\n    }\n}\n```\n\nThis is all fine and dandy, as we've explored some of the compiler warnings we could possibly get in a nullable context, but what happens if we ignore those warnings and assign things as `null` anyway? Let's clean out our `Main` method in `Program.cs` and start adding some breweries and beers:\n\n```csharp\nnamespace NullableReferencesExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var breweryAddress = new Address(\"1030 E Cypress Ave.\", \"Redding\", \"CA\", \"96002\");\n            var brewery = new Brewery(\"Fall River Brewery\", breweryAddress);\n\n            var anotherBreweryAddress = new Address(\"1075 E 20th St.\", \"Chico\", null, \"95928\");\n            var anotherBrewery = new Brewery(\"Sierra Nevada Brewing Company\", anotherBreweryAddress);\n        }\n    }\n}\n```\n\nand if we build our project:\n\n```\nProgram.cs(10,83): warning CS8625: Cannot convert null literal to non-nullable reference type.\n```\n\nAgain, the compiler is warning us that we've assigned a `null` value to a non-nullable string reference type in our driver program. Coupled with the declaration of non-null reference types within our `Beer` class, we've now protected any instantiation of a `Beer` object to _always_ expect a non-null value for any of it's injected values. Now, what if we choose to ignore this warning and do something like:\n\n```csharp\nConsole.WriteLine(anotherBreweryAddress.State.Length);\n```\n\nin our application? The compiler _won't_ give us any warnings, because from its perspective, the `State` property is non-null so this code would be totally valid. Enabling the nullable reference type context is only half of the solution to eliminating `NullReferenceException`s; we, the developers, are response to design our code with _intent_. Coupled with the nullable context, we are now responsible for architecting our code, declaring which properties the compiler should expect to be null, and conversely allowing the compiler to warn us when we've dereferenced a value that could possibly be null. Let's give our `Main` method a little more logic to top things off:\n\n```csharp\nnamespace NullableReferencesExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var breweryAddress = new Address(\"1030 E Cypress Ave.\", \"Redding\", \"CA\", \"96002\");\n            var brewery = new Brewery(\"Fall River Brewery\", breweryAddress);\n            brewery.AddBeer(\"Hexagenia\", \"Indian Pale Ale\", 7.1, 120);\n            brewery.PrintAddress();\n            brewery.PrintBeers();\n\n            var anotherBreweryAddress = new Address(\"1075 E 20th St.\", \"Chico\", \"CA\", \"95928\");\n            var anotherBrewery = new Brewery(\"Sierra Nevada Brewing Company\", anotherBreweryAddress);\n            anotherBrewery.PrintAddress();\n            anotherBrewery.PrintBeers();\n        }\n    }\n}\n```\n\nIf we build our project now with a quick `dotnet build`, we see there are no compiler warnings, ensuring us each of our instantiated breweries has been properly constructed, and we've eliminated any chance of null references. If we run our project with `dotnet run`, we see the following:\n\n```\n---- Address -----\nStreet: 1030 E Cypress Ave.\nCity: Redding\nState: CA\nZip Code: 96002\n\n----- Fall River Brewery has 1 beers -----\n----- Hexagenia -----\n| Style: Indian Pale Ale |\n| ABV: 7.1 |\n| IBU: 120 |\n\n---- Address -----\nStreet: 1075 E 20th St.\nCity: Chico\nState: CA\nZip Code: 95928\n\n----- Sierra Nevada Brewing Company has 0 beers -----\nNo beers found\n```\n\n### Wrapping Things Up\n\nThe nullable reference context new to C# 8.0, allowing us to leverage nullable reference types, is an incredibly powerful tool for developers to construct clean, safe code. With nullable reference types and proper application architecture, we can nearly eliminate nearly _any_ chance of a `NullReferenceException` within our code, guaranteeing compile and runtime safety while building an added layer of code security within our programs. This likely won't be the last time we explore nullable reference types, and if you've been following along with our series on [building a real world application using Dapper and .NET Core](https://betweentwobrackets.netlify.com/2019-10-06-net-core-dapper-and-crud-buzzword-bingo/), we'll see how to utilize the nullable reference context throughout our application for similar benefits.\n\nUntil next time, amigos!\n",
      "html": "<p>It's almost 5 o'clock, you've just deployed the latest API build into your test environment for other teams to start consuming and integrating into their applications, and the weekend is right around the corner. Then, the Slack messages begin.</p>\n<blockquote>\n<p>Steve from that one team: Hey, you guys just released a new build, right? Looks like we're getting 500s calling your team's API.`</p>\n</blockquote>\n<p>Naturally, we check the logs in the test environment using our favorite application insight tool (we happen to use <a href=\"https://www.splunk.com/\">Splunk</a> in my company), and aimlessly attempt to find any sign of failure, praying to the higher powers that may be to just be the client that has the issue.</p>\n<p>Then, it happens:</p>\n<pre><code>ERROR: NullReferenceException at (35,16) in Program.cs\n</code></pre>\n<p>Ugh... of course, and only on a Friday. The previous scenario is something we developers are all too familiar with, and our mortal enemy, the <code>NullReferenceException</code> has been besting even our most experienced code slingers for over half of a decade. Since its inception in the early 1960s, <code>null</code> has been a staple of computer science, software engineering, and expression of application intent in nearly every facet of building applications. We've built million dollar software systems based on the idea, and even worse, have caused billions (yes, with a \"b\") of dollars of damage in the form of irrecoverable business data. Unfortunately, one could argue that <code>null</code> is here to stay, deeply rooted in many of the world's most complex software systems that power entire economies, and there's no plans to re-engineer its original design intent. With the rise of object-oriented programming, the <code>null</code> pointer has possibly been one of the most common issues in our software applications. Take for example the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> myObject</span><span style=\"color:#666666\">=</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> MyObject</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    Foo</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Bar</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">// Assigning another object to the same reference that myObject points to</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> anotherObject</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> myObject</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">anotherObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Not Bar</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">myObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\">);</span><span style=\"color:#758575DD\"> // Prints \"Not Bar\"</span></span></code></pre></figure>\n<p>Nothing out of the ordinary here, as we software engineers see this kind of stuff all over our codebases. Sharing references between objects (one could make the argument) forms the core of object-oriented programming. Pointers, pieces of our stack allocated memory that \"point\" to our reference values in memory, are easy to pass around, manipulate, and conveniently dereference and go about our merry way. Pointer references, although great as they may be, present the issue that has plagued nearly every software application at one point, or another: the null pointer.</p>\n<p>Take for example the extension of our code from above:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">anotherObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">myObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Length</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>What happens now? <code>anotherObject</code> assigns our <code>Foo</code> property to an absent value, all while we attempt to dereference that same property value and retrieve the length on the next line. Run the program, and watch the catastrophe in action:</p>\n<pre><code>Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\n</code></pre>\n<p><em>Hello darkness, my old friend...</em> the infamous <code>NullReferenceException</code>. <em>Queue the obvious rhetorical question</em> - is there anything we can do to prevent this behavior? Enter C# 8.0 and <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references\">nullable reference types</a>, our <code>NullReferenceException</code> saving grace. As a professional .NET Core amateur, I'll do what I do best and explore this shiny new feature of C# in all its glory. Let's spin up a simple console app reflecting the previous example code to start things off:</p>\n<pre><code>> dotnet new console -n NullableReferencesExample\n</code></pre>\n<p>Now, in our <code>Program.cs</code> file, let's add the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> NullableReferencesExample</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> myObject</span><span style=\"color:#666666\">=</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> MyObject</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Foo</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Bar</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> anotherObject</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> myObject</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            anotherObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Not Bar</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">myObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            anotherObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">myObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Length</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    internal</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> MyObject</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Foo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Go ahead and run a quick <code>dotnet restore</code>, and let's build our project with a <code>dotnet build</code>:</p>\n<pre><code>Microsoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Restore completed in 22.78 ms for /path/to//NullableReferencesExample/NullableReferencesExample.csproj.\n  NullableReferencesExample -> /path/to//NullableReferencesExample/bin/Debug/netcoreapp3.0/NullableReferencesExample.dll\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:02.44\n</code></pre>\n<p>Our build completes just fine, with no signs of terror ahead even though we've knowingly written an inevitable disaster within our code. If we run this application with a <code>dotnet run</code>, we get exactly what we expect. Let's capture the build warning ahead of time by bringing in C# 8.0 and the nullable context to our project scope by adding the following to our <code>PropertyGroup</code> section of our <code>NullableReferencesExample.csproj</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"xml\" data-theme=\"vitesse-dark\"><code data-language=\"xml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">PropertyGroup</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">OutputType</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Exe</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">OutputType</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">TargetFramework</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">netcoreapp3.0</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">TargetFramework</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">Nullable</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">enable</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">Nullable</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">LangVersion</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">8.0</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">LangVersion</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">PropertyGroup</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>Notice that we add the <code>&#x3C;Nullable>enable&#x3C;/Nullable></code> property; with this tag, we've now enabled nullable references throughout our <em>entire</em> project. In layman's terms, now every where in our project that a reference type exists <em>without</em> being declared as nullable, the compiler will assume that <strong>we cannot assign those values as <code>null</code></strong>. This is huge. If you've ever programmed in a language like Rust, you've seen this concept firsthand. Briefly for those that haven't, the concept of <code>null</code> does not <em>really</em> exist in Rust, which is one of the reasons (along with <em>many</em> others) an army of developers have adopted it as one of the most loved languages, according to the last <a href=\"https://insights.stackoverflow.com/survey/2019\">Stack Overflow developer survey</a>. By introducing this nullable context for all reference types in our code, the compiler will implement <em>strict</em> rules anytime we do not initialize a non-nullable reference type, dereference a nullable reference type without checking for null, etc. Let's rebuild our project to see this in action with a quick <code>dotnet build</code>:</p>\n<pre><code>Microsoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Restore completed in 21.09 ms for /path/to/NullableReferencesExample/NullableReferencesExample.csproj.\nProgram.cs(26,23): warning CS8618: Non-nullable property 'Foo' is uninitialized. Consider declaring the property as nullable. [/path/to/NullableReferencesExample/NullableReferencesExample.csproj]\nProgram.cs(19,33): warning CS8625: Cannot convert null literal to non-nullable reference type. [/path/to/NullableReferencesExample/NullableReferencesExample.csproj]\n  NullableReferencesExample -> /path/to//NullableReferencesExample/bin/Debug/netcoreapp3.0/NullableReferencesExample.dll\n\nBuild succeeded.\n\nProgram.cs(26,23): warning CS8618: Non-nullable property 'Foo' is uninitialized. Consider declaring the property as nullable. [/path/to/NullableReferencesExample/NullableReferencesExample.csproj]\nProgram.cs(19,33): warning CS8625: Cannot convert null literal to non-nullable reference type. [/path/to/NullableReferencesExample/NullableReferencesExample.csproj]\n    2 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:02.61\n</code></pre>\n<p>Low and behold, the compiler warnings we hoped for (the good kind, at least) alert us that we have not initialized a non-nullable reference type (our <code>Foo</code> property in our <code>MyObject</code> class) and that we've assigned our <code>Foo</code> property to <code>null</code> (from the compiler's perspective, we shouldn't be doing that). In our new world of nullable reference types, we have to specify to the compiler when our reference types have the possibility of being null, and where exactly we might make those assignments. Now, coming from a language like Rust, nullable reference types are not to say there is no longer a concept of <code>null</code> in C#; should we opt in for the nullable context, we must tell the compiler what types have the ability to be null. By designing our code with this idea in mind, coupled with the compiler assisting us with its strict compile time reference checking, we gain an added layer of code security and the possibility of eliminating any chance of a <code>NullReferenceException</code> (not to say we'll <em>never</em> get one, we simply greatly reduce the chance if we implement the proper design).</p>\n<p>We'll go ahead and address our current compiler warnings using this new concept of nullable reference types, but before we do, let's discuss the different ways we might be able to accomplish this.</p>\n<ul>\n<li>In our <code>MyObject</code> class, we could make our <code>Foo</code> property a <code>string?</code> type rather than just a <code>string</code></li>\n<li>We could keep our typing of <code>string</code> and override the compiler warnings, essentially telling it \"hey, I know this could be <code>null</code>, and that's okay\"</li>\n<li>We could keep our typing of string <code>string</code> and add a single constructor to guarantee the <code>MyObject</code> class always has a valid <code>Foo</code> string value</li>\n</ul>\n<p>So, what should we do? Well, the answer is simple: <strong>it depends</strong>. Let's think about the context for our <code>MyObject</code> class. In the real world, we build applications designed to solve real world problems, usually built around a central domain architecture. What does our <code>MyObject</code> class represent? Is there a business-driven reason as to why the <code>Foo</code> property might not exist on an instance of <code>MyObject</code>? For our use case, let's define a rule that there is a valid reason for <code>Foo</code> to be absent of value. So, let's declare it as nullable:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">internal</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> MyObject</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> Foo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our build errors now fixed, let's add a method to snag the length of a <code>string</code> argument passed in back to the caller:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">private</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> GetLength</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> someStringValue</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> someStringValue</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Length</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now back in our <code>Main</code> method, let's call this function to grab a reference to the length of another <code>MyObject</code> instance:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> mySecondObject</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> MyObject</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> fooLength</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> GetLength</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mySecondObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>and if we build our project, we'll get the following warnings:</p>\n<pre><code>Program.cs(23,39): warning CS8604: Possible null reference argument for parameter 'someStringValue' in 'int Program.GetLength(string someStringValue)'.\n</code></pre>\n<p>What caused this warning? The compiler noticed that we we're passing a nullable reference type (our <code>string?</code> type <code>Foo</code> property) to a method expecting a non-nullable string type. Without the nullable context enabled, we would get <strong>no</strong> warnings from the compiler; within the nullable context, the compiler is protecting us from runtime <code>NullReferenceException</code>s <em>because</em> of this compile time analysis. Back in our <code>Main</code> method, if we add a null check before calling our <code>GetLength</code> method and compile:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> mySecondObject</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> MyObject</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">mySecondObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> fooLength</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> GetLength</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mySecondObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>our project compiles successfully with no warnings, since the compiler sees that we are <em>guaranteeing</em> a non-nullable string will be passed into <code>GetLength()</code>. We could also make <code>GetLength()</code> accept a nullable string type and using the <code>?</code> operator while dereferencing <code>someStringValue</code>; the compiler will be happy either way.</p>\n<h3>Another Example</h3>\n<p>Let's see how we might be able to leverage the power of nullable reference types with another example. I've recently written a series of posts guiding readers as we build a real world application using .NET Core and Dapper centered around a fictional brewery management software called Dappery. I'll take a few examples from those posts and use them here, since you might already be familiar.</p>\n<p>Let's create a brewery class, and see how we can use nullable reference types to safely construct instances of this class and add beers to an associated brewery:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> NullableReferencesExample</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ICollection</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>?</span><span style=\"color:#80A665\"> Beers</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> AddBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> name</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> double</span><span style=\"color:#80A665\"> abv</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> byte</span><span style=\"color:#80A665\"> ibu</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Beers</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> style</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Abv</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> abv</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Ibu</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> ibu</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> PrintBeers</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">----- </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> has </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Beers</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Count</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> beers -----</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            foreach</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#4D9375\"> in</span><span style=\"color:#BD976A\"> Beers</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">----- </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> -----</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| Style: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Style</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| ABV: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Abv</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| IBU: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Ibu</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and our associated beer class that we'll use in conjunction with our <code>Brewery</code> class:</p>\n<h3>Beer.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> NullableReferencesExample</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Style</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> double</span><span style=\"color:#80A665\"> Abv</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> byte</span><span style=\"color:#80A665\"> Ibu</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#80A665\"> Brewery</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Take a look at our <code>Brewery</code> class and notice how we've declared our collection of <code>Beer</code>s as a nullable reference; this is an intentional design decision (something we should always keep in mind when working in the nullable context). We're expressing our intent to both the compiler and developers working with this code after us that \"hey, there is a <em>chance</em> that a brewery could not have a reference to any beers.\" Should we initialize our list to an empty collection of beers? We totally could, but for the purpose of us exploring the nullable reference context, we'll leave our collection as nullable for now. To not overload us with compiler warnings, let's add the new <code>#nullable disable</code> preprocessor directive at the top of our <code>Beer.cs</code> class and run <code>dotnet build</code> to see what warnings we might get:</p>\n<pre><code>Brewery.cs(20,34): warning CS8602: Dereference of a possibly null reference.\nBrewery.cs(10,23): warning CS8618: Non-nullable property 'Name' is uninitialized. Consider declaring the property as nullable.\n</code></pre>\n<p>Interesting... take a look at that first warning: <code>Brewery.cs(20,34): warning CS8602: Dereference of a possibly null reference.</code> Looking at our code in <code>Brewery.cs</code>, we're iterating over our <code>Beers</code> collection, which we declared as nullable, telling the compiler there's a chance the enumerable could be null. Let's fix this by checking that we have a collection before iterating through each beer within the <code>PrintBeers</code> method:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> PrintBeers</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">----- </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> has </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Beers</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Count</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> beers -----</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        foreach</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#4D9375\"> in</span><span style=\"color:#BD976A\"> Beers</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">----- </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> -----</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| Style: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Style</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| ABV: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Abv</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| IBU: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Ibu</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Addressing our second compiler warning, let's initialize the <code>Name</code> property since we're telling the compiler this is a non-nullable string reference, so callers of our code can safely dereference a brewery object's <code>Name</code> without fear of the value being null. We'll initialize the <code>Name</code> property while instantiating a <code>Brewery</code> object, making our code correct by construction. While we're at it, we'll refactor the initialization of the <code>Beers</code> collection as well:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> NullableReferencesExample</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> Brewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> name</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ICollection</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>?</span><span style=\"color:#80A665\"> Beers</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> AddBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> name</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> style</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> double</span><span style=\"color:#80A665\"> abv</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> byte</span><span style=\"color:#80A665\"> ibu</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Beers</span><span style=\"color:#CB7676\"> ??=</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> style</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Abv</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> abv</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Ibu</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> ibu</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> PrintBeers</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">----- </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> has </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Beers</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Count </span><span style=\"color:#CB7676\">??</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> beers -----</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">No beers found</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            foreach</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#4D9375\"> in</span><span style=\"color:#BD976A\"> Beers</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">----- </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> -----</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| Style: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Style</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| ABV: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Abv</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| IBU: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Ibu</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>In our <code>AddBeer</code> method, notice our usage of the null-coalescing assignment operator <code>??=</code>. Recently added in C# 8.0, <code>??=</code> is a derivative of the <code>??</code> null-coalescing operator. Using <code>??=</code>, our operand on the left side will be assigned to the evaluation of the right side, if our left side operand evaluates to null. Anytime we instantiate a brewery object and attempt to add a beer, we'll initialize our beer collection on the first beer added. To make things interesting, let's give our breweries an address, since I've never heard of a virtual brewery (yet):</p>\n<h3>Address.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> NullableReferencesExample</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> streetAddress</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> city</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> zipCode</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> zipCodeExtension</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> City</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> State</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> ZipCode</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> ZipCodeExtension</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">streetAddress</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> city</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> zipCode</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> zipCodeExtension</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> StreetAddress</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> City</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> State</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> ZipCode</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> ZipCodeExtension</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and back in our <code>Brewery.cs</code> class, let's add an <code>Address</code> property:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> NullableReferencesExample</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> Brewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> name</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#80A665\"> address</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Address</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">name</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> address</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ICollection</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>?</span><span style=\"color:#80A665\"> Beers</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> AddBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> name</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> style</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> double</span><span style=\"color:#80A665\"> abv</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> byte</span><span style=\"color:#80A665\"> ibu</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Beers</span><span style=\"color:#CB7676\"> ??=</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> Beer</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">name</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> style</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> abv</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> ibu</span><span style=\"color:#666666\">,</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> PrintBeers</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">----- </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> has </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Beers</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Count </span><span style=\"color:#CB7676\">??</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> beers -----</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">No beers found</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            foreach</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#4D9375\"> in</span><span style=\"color:#BD976A\"> Beers</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">----- </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> -----</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| Style: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Style</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| ABV: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Abv</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">| IBU: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">beer</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Ibu</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> |</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> PrintAddress</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">---- Address -----</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Street: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">StreetAddress</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">City: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">City</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">State: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">State</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCodeExtension</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> ?</span><span style=\"color:#C98A7D99\"> $\"</span><span style=\"color:#C98A7D\">Zip Code: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">ZipCode</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#C98A7D99\"> $\"</span><span style=\"color:#C98A7D\">Zip Code: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">ZipCode</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">-</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">ZipCodeExtension</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Notice that our <code>Address</code> property, within our nullable reference context, is <em>not</em> allowed to be null as we did not declare it as nullable. In our <code>PrintAddress</code>, the compiler knows our <code>Address</code> property is non-nullable, and we can safely dereference the property without having to check if <code>Address</code> exists, avoiding any chance of a <code>NullReferenceException</code>. If we build our project at this point, we should see no warnings and the compiler should happy. Let's go ahead and remove the <code>#nullable disable</code> preprocessor directive from out <code>Beer.cs</code> file and build our project one more time to see the new set of compiler warnings we'll get:</p>\n<pre><code>Beer.cs(8,23): warning CS8618: Non-nullable property 'Name' is uninitialized. Consider declaring the property as nullable.\nBeer.cs(10,23): warning CS8618: Non-nullable property 'Style' is uninitialized. Consider declaring the property as nullable.\nBeer.cs(16,24): warning CS8618: Non-nullable property 'Brewery' is uninitialized. Consider declaring the property as nullable.\n</code></pre>\n<p>As expected, we get three warnings due to our three reference type properties not being initialized in the <code>Beer.cs</code> class. Notice we only received the warnings for our <code>string</code> and <code>Brewery</code> reference types, as the <code>byte</code> and <code>double</code> are value types stored on the stack that will take on their <code>default</code> value if not supplied a value at construction time. For our use case, let's about think our intent for the <code>Beer</code> class: a beer should have a name, a brewing style (lager, IPA, etc.), and should be associated to a brewery. Each of these properties should be a <strong>non-nullable</strong> reference type, which means that at construction time, we need to supply an initial <strong>non-null</strong> value. To best solve our problem, rather than using the override <code>default!</code> assignment on each of these properties, or declaring each as nullable when we know these properties should <em>not</em> be null, let's add a constructor that will assure us values of each of these properties anytime we instantiate a <code>Beer</code> object:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> NullableReferencesExample</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> Beer</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> name</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> style</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> double</span><span style=\"color:#80A665\"> abv</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> byte</span><span style=\"color:#80A665\"> ibu</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Style</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Abv</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Ibu</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Brewery</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">name</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> style</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> abv</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> ibu</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Style</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> double</span><span style=\"color:#80A665\"> Abv</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> byte</span><span style=\"color:#80A665\"> Ibu</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#80A665\"> Brewery</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>This is all fine and dandy, as we've explored some of the compiler warnings we could possibly get in a nullable context, but what happens if we ignore those warnings and assign things as <code>null</code> anyway? Let's clean out our <code>Main</code> method in <code>Program.cs</code> and start adding some breweries and beers:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> NullableReferencesExample</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">1030 E Cypress Ave.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">96002</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> breweryAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> anotherBreweryAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">1075 E 20th St.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Chico</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">95928</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> anotherBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Sierra Nevada Brewing Company</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> anotherBreweryAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and if we build our project:</p>\n<pre><code>Program.cs(10,83): warning CS8625: Cannot convert null literal to non-nullable reference type.\n</code></pre>\n<p>Again, the compiler is warning us that we've assigned a <code>null</code> value to a non-nullable string reference type in our driver program. Coupled with the declaration of non-null reference types within our <code>Beer</code> class, we've now protected any instantiation of a <code>Beer</code> object to <em>always</em> expect a non-null value for any of it's injected values. Now, what if we choose to ignore this warning and do something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">anotherBreweryAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Length</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>in our application? The compiler <em>won't</em> give us any warnings, because from its perspective, the <code>State</code> property is non-null so this code would be totally valid. Enabling the nullable reference type context is only half of the solution to eliminating <code>NullReferenceException</code>s; we, the developers, are response to design our code with <em>intent</em>. Coupled with the nullable context, we are now responsible for architecting our code, declaring which properties the compiler should expect to be null, and conversely allowing the compiler to warn us when we've dereferenced a value that could possibly be null. Let's give our <code>Main</code> method a little more logic to top things off:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> NullableReferencesExample</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">1030 E Cypress Ave.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">96002</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> breweryAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Indian Pale Ale</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 7.1</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 120</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PrintAddress</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PrintBeers</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> anotherBreweryAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">1075 E 20th St.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Chico</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">95928</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> anotherBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Sierra Nevada Brewing Company</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> anotherBreweryAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            anotherBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PrintAddress</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            anotherBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PrintBeers</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>If we build our project now with a quick <code>dotnet build</code>, we see there are no compiler warnings, ensuring us each of our instantiated breweries has been properly constructed, and we've eliminated any chance of null references. If we run our project with <code>dotnet run</code>, we see the following:</p>\n<pre><code>---- Address -----\nStreet: 1030 E Cypress Ave.\nCity: Redding\nState: CA\nZip Code: 96002\n\n----- Fall River Brewery has 1 beers -----\n----- Hexagenia -----\n| Style: Indian Pale Ale |\n| ABV: 7.1 |\n| IBU: 120 |\n\n---- Address -----\nStreet: 1075 E 20th St.\nCity: Chico\nState: CA\nZip Code: 95928\n\n----- Sierra Nevada Brewing Company has 0 beers -----\nNo beers found\n</code></pre>\n<h3>Wrapping Things Up</h3>\n<p>The nullable reference context new to C# 8.0, allowing us to leverage nullable reference types, is an incredibly powerful tool for developers to construct clean, safe code. With nullable reference types and proper application architecture, we can nearly eliminate nearly <em>any</em> chance of a <code>NullReferenceException</code> within our code, guaranteeing compile and runtime safety while building an added layer of code security within our programs. This likely won't be the last time we explore nullable reference types, and if you've been following along with our series on <a href=\"https://betweentwobrackets.netlify.com/2019-10-06-net-core-dapper-and-crud-buzzword-bingo/\">building a real world application using Dapper and .NET Core</a>, we'll see how to utilize the nullable reference context throughout our application for similar benefits.</p>\n<p>Until next time, amigos!</p>"
    },
    "_id": "2019/csharp-8-nullable-reference-types.md",
    "_raw": {
      "sourceFilePath": "2019/csharp-8-nullable-reference-types.md",
      "sourceFileName": "csharp-8-nullable-reference-types.md",
      "sourceFileDir": "2019",
      "contentType": "markdown",
      "flattenedPath": "2019/csharp-8-nullable-reference-types"
    },
    "type": "Post",
    "url": "/blog/2019/csharp-8-nullable-reference-types"
  },
  {
    "title": "Clean architecture, Dapper, MediatR, and buzzword bingo (part 2)",
    "description": "Implement the unit of work and repository patterns with Dapper.",
    "pubDate": "2019-10-06T07:00:00.000Z",
    "category": ".NET",
    "heroImage": "https://imgs.xkcd.com/comics/code_quality.png",
    "draft": false,
    "keywords": [
      ".net",
      "c#",
      "dapper",
      "mediatr"
    ],
    "body": {
      "raw": "\n_UPDATE: I've added cancellation token support to each of the database operations below, and encourage readers to\ncheckout the `master` branch to see how things look now. The methods below we're slight altered to use\na `CommandDefinition` that utilizes a `CancellationToken` passed down from the core business logic layer, and used in\nplace of the regular string queries we've written below._\n\nWe finally made it... our domain layer is ready to roll, and it's now time to spin up some actual application code. In\nour [last post](/images/net-core-dapper-and-crud-buzzword-bingo/), we setup our initial domain layer for our favorite\nfictional brewery, Dappery ([source code](https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-1-domain-layer) for\nreference). In this post, we'll build out the data access layer that will be our primary persistence mechanism into our\ndatabase. We'll make use of SQL server (or Postgres) with Docker and SQLite running our unit tests within this layer.\nFeel free to checkout the [source code](https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-2-data-layer) on\nGitHub for this section for those following along.\n\nBefore we jump into the code, let's take a step back and understand _why_ we separate our our data access layer (DAL)\nfrom the rest of our code.\n\n![Inward_Facing_Dependencies](/images/net-core-dapper-and-crud-series/part-2/inward_dependencies.png)\n\nThe good ole fashioned dependency graph, made famous by Robert Martin a.k.a. Dr. Bob, lays out the foundation of domain\ndriven design (DDD). For our relatively simple application, we focus on creating four distinct layers within our\napplication code to ensure that the layers are ultimately, by some chain of dependency, dependent on the domain layer (\neffectively the 'D' in SOLID, [dependency inversion](https://en.wikipedia.org/wiki/Dependency_inversion_principle)).\nWith our layers pointing inward toward our domain, we create _clear_ boundaries within our application that deal with\nseparate concerns:\n\n-   The web and persistence layers directly depend on our core layer\n-   Our core layer directly depends on the domain layer\n-   By association, our web and persistence, inadvertently, have a dependency on our domain layer\n-   The domain layer has **no** dependencies - all it knows, and cares about, are the entities, view models, DTOs, etc.\n    that live inside this project and how each is related\n\nCreating these clear boundaries of separation helps to create a modular application, with each layer isolated from one\nanother in perfect harmony. By creating this inversion of dependency within our application, for example, our core layer\n_does not_ need to know about ANY of the internal workings of the data layer - all the core layer cares about is that it\ncan get data from a database using this [actor](https://en.wikipedia.org/wiki/Actor_model). How the persistence layer\ninteracts with the database is entirely abstracted from our core layer. Our data layer can change its data interaction\nmechanism, swap database providers, etc. and our core layer _will not_ care as it does not concern itself with _how_ the\npersistence layer works.\n\nWith that out of way, let's finally dig into the data access code we'll be writing. From the start, we said we'd be\nworking with Dapper for our database interaction, so let's go ahead and create a new project (a `classlib` in our case).\nAgain, I'll be using the command line, but feel free to spin up the new project in your IDE of choice:\n\n```shell\n~/Dappery/src$ dotnet new classlib -n Dappery.Data\n~/Dappery/src$ dotnet sln ../Dappery.sln add Dappery.Data/Dappery.Data.csproj\n```\n\nWith our persistence library wired up, let's go ahead and update our `.csproj` file within `Dappery.Data` to utilize\nsome of the new features of C# 8. Let's replace the `PropertyGroup` section with the following:\n\n```xml\n<PropertyGroup>\n    <TargetFramework>netstandard2.1</TargetFramework>\n    <Nullable>enable</Nullable>\n    <LangVersion>8.0</LangVersion>\n</PropertyGroup>\n```\n\nTargeting `netstandard2.1` allows us to utilize C# 8 features, and we'll also turn\non [nullable reference types](https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references) to allow the compiler\nto help us catch possible null references. From our dependency graph above, we'll need to create a reference between our\ndata layer and our core layer. For reasons we'll see later, we'll actually need to add just a bit of skeleton code in\nthe core application layer for our data layer to utilize, so let's go ahead and add it now.\n\n```shell\n~/Dappery/src$ dotnet new classlib -n Dappery.Core\n~/Dappery/src$ dotnet sln ../Dappery.sln add Dappery.Core/Dappery.Core.csproj\n```\n\nWith the project added, go ahead and replace the `PropertyGroup` with the above for all the aforementioned reasons. Now,\nback in our `.csproj` file in our data project, let's add the core layer as a dependency. Feel free to create the\nreference using Visual Studio/Rider, as it really only boils down to adding the following line beneath\nthe `PropertyGroup` tag:\n\n```xml\n<ItemGroup>\n    <ProjectReference Include=\"..\\Dappery.Core\\Dappery.Core.csproj\" />\n</ItemGroup>\n```\n\nAs we mentioned above, the data layer will also implicitly rely on the domain layer _through_ its dependency on the core\nlayer. What this means for us, code-wise, is to add the following reference in our `.csproj` file in the core project:\n\n```xml\n<ItemGroup>\n    <ProjectReference Include=\"..\\Dappery.Domain\\Dappery.Domain.csproj\" />\n</ItemGroup>\n```\n\nWith the core project referencing the domain layer, our data project will _also_ have a reference to the domain layer\nwithout explicitly adding the reference in our data layer. Adding the domain project as a direct reference in our data\nproject would actually have created a _symmetric dependency_, which we'll want to try and avoid. With the ceremony out\nof the way, let's talk about what we'll be adding in this layer.\n\n### The Data Layer\n\nAs this is a project revolving around Dapper for our database persistence, it's probably a good idea to bring in some\npatterns to help us define our intent within this layer. Rather that writing raw Dapper queries within this layer, we'll\nwrap our interaction with Dapper within beer and brewery repositories that will, in turn, be wrapped in a unit of work.\nIn plain english, we'll effectively be using\nthe [Repository and Unit of Work Patterns](https://www.c-sharpcorner.com/UploadFile/b1df45/unit-of-work-in-repository-pattern/).\nAlongside bringing in these patterns, a side effect of our clear application layer separation will be the creation of\na [ports and adapters architecture](<https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)>) (also known as\nhexagonal architecture).\n\nFor our use case, our core project will offer a port in the form of data access that our data project will then fill as\nthe adapter. If you're unfamiliar with the repository and unit of work patterns, the specific problems they solve, and\ntheir pros and cons, it's well worth it to take the afternoon to read up on them. For now, we'll assume you're somewhat\nfamiliar with the pattern. With all the technical jargon out of the way, let's go ahead and create a port (effectively\nan `interface`) within our core project, that our data project will provide the adapter for (fancy term for implementing\nthe `interface`). In `Dappery.Core`, go ahead and add a `Data` folder and the following classes:\n\n#### Data/IBeerRepository.cs\n\n```csharp\nnamespace Dappery.Core.Data\n{\n    using System.Collections.Generic;\n    using System.Threading.Tasks;\n    using Domain.Entities;\n\n    public interface IBeerRepository\n    {\n        Task<IEnumerable<Beer>> GetAllBeers();\n\n        Task<Beer> GetBeerById(int id);\n\n        Task<int> CreateBeer(Beer beer);\n\n        Task UpdateBeer(Beer beer);\n\n        Task<int> DeleteBeer(int beer);\n    }\n}\n```\n\n&nbsp;\n\n#### Data/IBeerRepository.cs\n\n```csharp\nnamespace Dappery.Core.Data\n{\n    using System.Collections.Generic;\n    using System.Threading.Tasks;\n    using Domain.Entities;\n\n    public interface IBreweryRepository\n    {\n        Task<IEnumerable<Brewery>> GetAllBreweries();\n\n        Task<Brewery> GetBreweryById(int id);\n\n        Task<int> CreateBrewery(Brewery brewery);\n\n        Task UpdateBrewery(Brewery brewery, bool updateAddress = false);\n\n        Task<int> DeleteBrewery(int breweryId);\n    }\n}\n```\n\n&nbsp;\n\n#### Data/IUnitOfWork.cs\n\n```csharp\nnamespace Dappery.Core.Data\n{\n    using System;\n\n    public interface IUnitOfWork : IDisposable\n    {\n        IBeerRepository BeerRepository { get; }\n\n        IBreweryRepository BreweryRepository { get; }\n\n        void Commit();\n    }\n}\n```\n\n&nbsp;\n\nIn our repositories, we've got all the ingredients for a pretty basic CRUD application. Notice that our `IUnitOfWork`\ninterface inherits from `IDisposable`, as it will be in charge of the database resources that we'll need to clean up\nonce we're finished with our data operations.\n\nFor our database provider, feel free to use whatever your preferred provider happens to be. I lay three options for us:\nSQL Server, Postgres, and SQLite. I'll be spinning up both a SQL Server and Postgres database, as an exercise of\nabstraction to really drive home the point of agnostic data access, using [Postgres](https://hub.docker.com/_/postgres)\nand [SQL Server](https://hub.docker.com/_/microsoft-mssql-server) Docker images. For our unit tests, we'll be using an\nin-memory version of SQLite to run our tests against. If you don't feel like setting up a database for this application,\ndon't worry... I got you. We'll generalize our database layer just enough that you'll be able to use the in-memory\nversion of SQLite for the application as well. Since this isn't _really_ a post about setting up database providers via\nDocker images, so I'll defer to\nthis [article](https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-ver15&pivots=cs1-bash)\non the official Microsoft docs on how to do so for SQL Server, and the aforementioned Docker hub for Postgres. The\nbeauty of the architecture we've laid out so far is that no matter the database provider, our application will work with\njust a simple connection string change.\n\nBefore we get started implementing our repository operations, let's go ahead and setup our database. Once you've got\nyour SQL Server, or Postgres, instance up and running, take a look at\nour [initialization files](https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-2-data-layer/src/Dappery.Data/Scripts)\nto help create, link, and seed some test data for either provider. Go ahead and drop into a console and run the SQL for\nwhich ever provider you decide to roll with.\n\nWith our database ready to roll, let's go ahead and implement the `IBeerRepository.cs` and `IBreweryRepository.cs`\ninterfaces. Within `Dappery.Data`, let's create a `Repositories` folder with the following implementation classes:\n\n#### Repositories/BeerRepository.cs\n\n```csharp\nnamespace Dappery.Data.Repositories\n{\n    using System.Collections.Generic;\n    using System.Data;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using Core.Data;\n    using Dapper;\n    using Domain.Entities;\n\n    public class BeerRepository : IBeerRepository\n    {\n        private readonly IDbTransaction _dbTransaction;\n        private readonly IDbConnection _dbConnection;\n        private readonly string _insertRowRetrievalQuery;\n\n        public BeerRepository(IDbTransaction dbTransaction, string insertRowRetrievalQuery)\n        {\n            _dbTransaction = dbTransaction;\n            _dbConnection = _dbTransaction.Connection;\n            _insertRowRetrievalQuery = insertRowRetrievalQuery;\n        }\n\n        public async Task<IEnumerable<Beer>> GetAllBeers()\n        {\n            throw new NotImplementedException();\n        }\n\n        public async Task<Beer> GetBeerById(int id)\n        {\n            throw new NotImplementedException();\n        }\n\n        public async Task<Beer> CreateBeer(Beer beer)\n        {\n            throw new NotImplementedException();\n        }\n\n        public async Task<Beer> UpdateBeer(Beer beer)\n        {\n            throw new NotImplementedException();\n        }\n\n        public async Task<int> DeleteBeer(int beerId)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n```\n\n&nbsp;\n\n#### Repositories/BreweryRepository.cs\n\n```csharp\nnamespace Dappery.Data.Repositories\n{\n    using System.Collections.Generic;\n    using System.Data;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using Core.Data;\n    using Dapper;\n    using Domain.Entities;\n\n    public class BreweryRepository : IBreweryRepository\n    {\n        private readonly IDbTransaction _dbTransaction;\n        private readonly IDbConnection _dbConnection;\n        private readonly string _rowInsertRetrievalQuery;\n\n        public BreweryRepository(IDbTransaction dbTransaction, string rowInsertRetrievalQuery)\n        {\n            _dbTransaction = dbTransaction;\n            _dbConnection = _dbTransaction.Connection;\n            _rowInsertRetrievalQuery = rowInsertRetrievalQuery;\n        }\n\n        public async Task<Brewery> GetBreweryById(int id)\n        {\n            throw new NotImplementedException();\n        }\n\n        public async Task<IEnumerable<Brewery>> GetAllBreweries()\n        {\n            throw new NotImplementedException();\n        }\n\n        public async Task<Brewery> CreateBrewery(Brewery brewery)\n        {\n            throw new NotImplementedException();\n        }\n\n        public async Task<Brewery> UpdateBrewery(Brewery brewery, bool updateAddress)\n        {\n            throw new NotImplementedException();\n        }\n\n        public async Task<int> DeleteBrewery(int breweryId)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n```\n\n&nbsp;\n\nFor now, some of our imported namespaces are unused, but will be needed later when we start implementing these methods.\nNext, let's add the `UnitOfWork.cs` implementation at the root of our `Dappery.Data` project:\n\n#### UnitOfWork.cs\n\n```csharp\nnamespace Dappery.Data\n{\n    using System;\n    using System.Data;\n    using Core.Data;\n    using Dapper;\n    using Microsoft.Data.SqlClient;\n    using Microsoft.Data.Sqlite;\n    using Npgsql;\n    using Repositories;\n\n    public class UnitOfWork : IUnitOfWork\n    {\n        private readonly IDbConnection _dbConnection;\n        private readonly IDbTransaction _dbTransaction;\n\n        public UnitOfWork(string? connectionString, bool isPostgres = false)\n        {\n            // Based on our database implementation, we'll need a reference to the last row inserted\n            string rowInsertRetrievalQuery;\n\n            // If no connection string is passed, we'll assume we're running with our SQLite database provider\n            if (string.IsNullOrWhiteSpace(connectionString))\n            {\n                _dbConnection = new SqliteConnection(\"Data Source=:memory:\");\n                rowInsertRetrievalQuery = \"; SELECT last_insert_rowid();\";\n            }\n            else\n            {\n                _dbConnection = isPostgres ? (IDbConnection) new NpgsqlConnection(connectionString) : new SqlConnection(connectionString);\n                rowInsertRetrievalQuery = isPostgres ? \"returning Id;\" : \"; SELECT CAST(SCOPE_IDENTITY() as int);\" ;\n            }\n\n            // Open our connection, begin our transaction, and instantiate our repositories\n            _dbConnection.Open();\n            _dbTransaction = _dbConnection.BeginTransaction();\n            BreweryRepository = new BreweryRepository(_dbTransaction, rowInsertRetrievalQuery);\n            BeerRepository = new BeerRepository(_dbTransaction, rowInsertRetrievalQuery);\n\n            // Once our connection is open, if we're running SQLite for unit tests (or that actual application), let's seed some data\n            if (string.IsNullOrWhiteSpace(connectionString))\n            {\n                try\n                {\n                    // We'll seed a couple breweries each with an address and several beers\n                    SeedDatabase(_dbConnection);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine($\"Could not seed the database: {e.Message}\");\n                }\n            }\n        }\n\n        public IBreweryRepository BreweryRepository { get; }\n\n        public IBeerRepository BeerRepository { get; }\n\n        public void Commit()\n        {\n            try\n            {\n                _dbTransaction.Commit();\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine($\"Could not commit the transaction, reason: {e.Message}\");\n                _dbTransaction.Rollback();\n            }\n            finally\n            {\n                _dbTransaction.Dispose();\n            }\n        }\n\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                _dbTransaction?.Dispose();\n                _dbConnection?.Dispose();\n            }\n        }\n\n        private void SeedDatabase(IDbConnection dbConnection)\n        {\n            const string createBreweriesSql = @\"\n                CREATE TABLE Breweries (\n                    Id INTEGER PRIMARY KEY,\n                    Name TEXT(32),\n                    CreatedAt DATE,\n                    UpdatedAt DATE\n                );\n            \";\n\n            const string createBeersSql = @\"\n                CREATE TABLE Beers (\n                    Id INTEGER PRIMARY KEY,\n                    Name TEXT(32),\n                    BeerStyle TEXT(16),\n                    CreatedAt DATE,\n                    UpdatedAt DATE,\n                    BreweryId INT NOT NULL,\n                    CONSTRAINT FK_Beers_Breweries_Id FOREIGN KEY (BreweryId)\n                        REFERENCES Breweries (Id) ON DELETE CASCADE\n                );\n            \";\n\n            const string createAddressSql = @\"\n                CREATE TABLE Addresses (\n                    Id INTEGER PRIMARY KEY,\n                    StreetAddress TEXT(32),\n                    City TEXT(32),\n                    State TEXT(32),\n                    ZipCode TEXT(8),\n                    CreatedAt DATE,\n                    UpdatedAt DATE,\n                    BreweryId INTEGER NOT NULL,\n                    CONSTRAINT FK_Address_Breweries_Id FOREIGN KEY (BreweryId)\n                        REFERENCES Breweries (Id) ON DELETE CASCADE\n                );\n            \";\n\n            // Add our tables\n            dbConnection.Execute(createBreweriesSql, _dbTransaction);\n            dbConnection.Execute(createBeersSql, _dbTransaction);\n            dbConnection.Execute(createAddressSql, _dbTransaction);\n\n            // Seed our data\n            dbConnection.Execute(@\"\n                INSERT INTO Breweries (Name, CreatedAt, UpdatedAt)\n                VALUES\n                    (\n                        'Fall River Brewery',\n                        CURRENT_DATE,\n                        CURRENT_DATE\n                    );\",\n                transaction: _dbTransaction);\n\n            dbConnection.Execute(@\"\n                INSERT INTO Breweries (Name, CreatedAt, UpdatedAt)\n                VALUES\n                    (\n                        'Sierra Nevada Brewing Company',\n                        CURRENT_DATE,\n                        CURRENT_DATE\n                    );\",\n                transaction: _dbTransaction);\n\n            dbConnection.Execute(@\"\n                INSERT INTO Addresses (StreetAddress, City, State, ZipCode, CreatedAt, UpdatedAt, BreweryId)\n                VALUES\n                    (\n                        '1030 E Cypress Ave Ste D',\n                        'Redding',\n                        'CA',\n                        '96002',\n                        CURRENT_DATE,\n                        CURRENT_DATE,\n                        1\n                    );\",\n                transaction: _dbTransaction);\n\n            dbConnection.Execute(@\"\n                INSERT INTO Addresses (StreetAddress, City, State, ZipCode, CreatedAt, UpdatedAt, BreweryId)\n                VALUES\n                    (\n                        '1075 E 20th St',\n                        'Chico',\n                        'CA',\n                        '95928',\n                        CURRENT_DATE,\n                        CURRENT_DATE,\n                        2\n                    );\",\n                transaction: _dbTransaction);\n\n            dbConnection.Execute(@\"\n                INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)\n                VALUES\n                    (\n                        'Hexagenia',\n                        'Ipa',\n                        CURRENT_DATE,\n                        CURRENT_DATE,\n                        1\n                    );\",\n                transaction: _dbTransaction);\n\n            dbConnection.Execute(@\"\n                INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)\n                VALUES\n                    (\n                        'Widowmaker',\n                        'DoubleIpa',\n                        CURRENT_DATE,\n                        CURRENT_DATE,\n                        1\n                    );\",\n                transaction: _dbTransaction);\n\n            dbConnection.Execute(@\"\n                INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)\n                VALUES\n                    (\n                        'Hooked',\n                        'Lager',\n                        CURRENT_DATE,\n                        CURRENT_DATE,\n                        1\n                    );\",\n                transaction: _dbTransaction);\n\n            dbConnection.Execute(@\"\n                INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)\n                VALUES\n                    (\n                        'Pale Ale',\n                        'PaleAle',\n                        CURRENT_DATE,\n                        CURRENT_DATE,\n                        2\n                    );\",\n                transaction: _dbTransaction);\n\n            dbConnection.Execute(@\"\n                INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)\n                VALUES\n                    (\n                        'Hazy Little Thing',\n                        'NewEnglandIpa',\n                        CURRENT_DATE,\n                        CURRENT_DATE,\n                        2\n                    );\",\n                transaction: _dbTransaction);\n        }\n\n        ~UnitOfWork()\n        {\n            Dispose(false);\n        }\n    }\n}\n```\n\n&nbsp;\n\nOkay... that's a lot of code, so let's break it down:\n\n-   In our constructor, we inject a nullable connection string (since we enabled C# 8, `string`s can now be nullable), and\n    assume that if no connection string is passed, we're probably running unit tests, or just a simple in-memory version\n    of our application. We'll see how this injected connection string will actually be passed into our `UnitOfWork`\n    constructor in our API project in a later post.\n-   Once we figure out who our database provider is, we open the connection, initialize our repositories, and seed some\n    test data (if we're opting to use SQLite)\n-   We pass a the `rowInsertRetrievalQuery` string into our repositories to tell the repository how to get back the row we\n    just added (we'll see why, exactly, we do this later)\n-   We add some public getters to access the repositories through our `UnitOfWork` class\n-   We implement our `Commit` method to try and commit the transaction to the database and rollback if anything unexpected\n    happens\n-   Finally, we add the disposable pattern to safely release our database resources during each transaction and destruct\n    our instance of the `UnitOfWork`\n\nTaking a step back let's take a look at our project structure so far:\n\n![Structure_So_far](/images/net-core-dapper-and-crud-series/part-2/structure_as_of.png)\n\nWith our `UnitOfWork` class implemented, let's finally crank out some of our repository operations. In\nour `BreweryRepository.cs` class, let's implement our `GetAllBreweries` query:\n\n#### BreweryRepository.cs\n\n```csharp\npublic async Task<IEnumerable<Brewery>> GetAllBreweries()\n{\n    // Grab a reference to all beers so we can map them to there corresponding breweries\n    var beers = (await _dbConnection.QueryAsync<Beer>(\n        \"SELECT * FROM Beers\",\n        transaction: _dbTransaction)).ToList();\n\n    return await _dbConnection.QueryAsync<Brewery, Address, Brewery>(\n        // We join with addresses as there's a one-to-one relation with breweries, making the query a little less intensive\n        \"SELECT * FROM Breweries br INNER JOIN Addresses a ON a.BreweryId = br.Id\",\n        (brewery, address) =>\n        {\n            // Map the address to the brewery\n            brewery.Address = address;\n\n            // Map each beer to the beer collection for the brewery during iteration over our result set\n            if (beers.Any(b => b.BreweryId == brewery.Id))\n            {\n                foreach (var beer in beers.Where(b => b.BreweryId == brewery.Id))\n                {\n                    brewery.Beers.Add(beer);\n                }\n            }\n\n            return brewery;\n        },\n        transaction: _dbTransaction);\n}\n```\n\n&nbsp;\n\nLet's breakdown what's going on in this query:\n\n-   First, we grab a reference to all the beers in our database so we can map each beer up to its corresponding brewery\n-   Next, we query the brewery table and do a simple join on the address table\n-   Finally, once we have our result set, we set each brewery's address to the joined address, and add all the beers to\n    the data model (if any exist)\n\nAgain, I'm not an expert with Dapper, so I'm sure there's some optimization to be done here. As this is just us\nexploring Dapper, this will suffice for now. For example, rather than performing two separate queries to get our\nassociated beers that map to their breweries, we could flat query all the beers using some nested sub queries. A few\nissues arise, however, as there are many beers to one brewery, so this might not be the most viable solution - simply\njust food for thought.\n\nSyntactically, Dapper offers some nice ADO.NET-like methods to help us write our queries and commands. We see that\nthe `QueryAsync<Brewery, Address, Brewery>` method sets up the expectation of what this query returns - the first two\ngeneric types tell Dapper that this is a joined query that will contain two of our entities, with the third being the\nentity Dapper should perform the mapping for and ultimately return. We see that one of the parameters in this call is an\nexpression function (the `Func<Brewery, Address>`) that we use to add the reference to the address for the brewery and\nadd all the beers.\n\nLet's jump over to our beer repository and implement the `GetAllBeers` method:\n\n#### BeerRepository.cs\n\n```csharp\npublic async Task<IEnumerable<Beer>> GetAllBeers()\n{\n    // Retrieve the addresses, as this is a nested mapping\n    var addresses = (await _dbConnection.QueryAsync<Address>(\n        \"SELECT * FROM Addresses\",\n        transaction: _dbTransaction)).ToList();\n\n    return await _dbConnection.QueryAsync<Beer, Brewery, Beer>(\n        @\"SELECT b.*, br.* FROM Beers b INNER JOIN Breweries br ON br.Id = b.BreweryId\",\n        (beer, brewery) =>\n        {\n            // Map the brewery that Dapper returns for us to the beer\n            brewery.Address = addresses.FirstOrDefault(a => a.BreweryId == brewery.Id);\n            beer.Brewery = brewery;\n            return beer;\n        },\n        transaction: _dbTransaction\n    );\n}\n```\n\n&nbsp;\n\nAgain, taking a look at what we've done above, this query is pretty straight forward: we retrieve the brewery addresses,\nand then separately query the beers table with the breweries table and map each brewery's address during iteration over\nour result set. Looking good so far, let's bust out those retrieve by ID methods for both entities:\n\n#### BreweryRepository.cs\n\n```csharp\npublic async Task<Brewery> GetBreweryById(int id)\n{\n    var beersFromBrewery = (await _dbConnection.QueryAsync<Beer>(\n        @\"SELECT * FROM Beers WHERE BreweryId = @Id\",\n        new {Id = id},\n        _dbTransaction)).ToList();\n\n    return (await _dbConnection.QueryAsync<Brewery, Address, Brewery>(\n        @\"SELECT br.*, a.* FROM Breweries br INNER JOIN Addresses a ON a.BreweryId = br.Id WHERE br.Id = @Id\",\n        (brewery, address) =>\n        {\n            // Since breweries have a one-to-one relation with address, we can initialize that mapping here\n            brewery.Address = address;\n\n            // Add each beer from the previous query into the list of beers for the brewery\n            if (beersFromBrewery.Any())\n            {\n                foreach (var beer in beersFromBrewery)\n                {\n                    brewery.Beers.Add(beer);\n                }\n            }\n\n            return brewery;\n        },\n        new { Id = id },\n        _dbTransaction)).FirstOrDefault();\n}\n```\n\n&nbsp;\n\n#### BeerRepository.cs\n\n```csharp\npublic async Task<Beer> GetBeerById(int id)\n{\n    // Retrieve the beer from the database\n    var beerFromId = (await _dbConnection.QueryAsync<Beer, Brewery, Beer>(\n        @\"SELECT b.*, br.* FROM Beers b\n        INNER JOIN Breweries br ON br.Id = b.BreweryId\n        WHERE b.Id = @Id\",\n        (beer, brewery) =>\n        {\n            beer.Brewery = brewery;\n            return beer;\n        },\n        new { Id = id },\n        _dbTransaction)).FirstOrDefault();\n\n    // Return back to the caller if no beer is found, let the business logic decide what to do if we can't the specified beer\n    if (beerFromId == null)\n    {\n        return null;\n    }\n\n    // Map the address to the beer's brewery\n    var address = await _dbConnection.QueryFirstOrDefaultAsync<Address>(\n        @\"SELECT * FROM Addresses WHERE BreweryId = @BreweryId\",\n        new { BreweryId = beerFromId.Brewery?.Id },\n        _dbTransaction);\n\n    // Set the address found in the previous query to the beer's brewery address, if we have a brewery\n    if (beerFromId.Brewery != null)\n    {\n        beerFromId.Brewery.Address = address;\n    }\n\n    // Let's add all the beers to our brewery attached to this beer\n    var beersFromBrewery = await _dbConnection.QueryAsync<Beer>(\n        @\"SELECT * FROM Beers WHERE BreweryId = @BreweryId\",\n        new { beerFromId.BreweryId },\n        _dbTransaction);\n\n    // Lastly, let's add all the beers to the entity model\n    foreach (var beer in beersFromBrewery)\n    {\n        beerFromId.Brewery?.Beers.Add(beer);\n    }\n\n    return beerFromId;\n}\n```\n\n&nbsp;\n\nPretty straight forward - the only addition here is the use of Dapper's `QueryFirstOrDefaultAsync<Beer>()` method, which\nwe conveniently use to retrieve the address of the beer's brewery in question, set the brewery address, and finally\nattach all the beers we have in the database to the brewery. Again, I'm no Dapper expert by any means, so I'm sure we\ncould optimize this query quite a bit. For the EF Core fellows in the crowd, the above would be equivalent to\na `.Include().ThenInclude()` query, and while I'm sure we could combine some of the above queries, I break up each query\nfor readability, as well as debug-ability. Next, let's add our create and update commands for each repository:\n\n#### BeerRepository.cs\n\n```csharp\npublic async Task<int> CreateBeer(Beer beer)\n{\n    // From our business rule we defined, we'll assume the brewery ID is always attached to the beer\n    var beerToInsertSql = new StringBuilder(@\"INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)\n                                VALUES (@Name, @BeerStyle, @CreatedAt, @UpdatedAt, @BreweryId)\");\n\n    // Let's insert the beer and grab its ID\n    var beerId = await _dbConnection.ExecuteScalarAsync<int>(\n        beerToInsertSql.Append(_insertRowRetrievalQuery).ToString(),\n        new\n        {\n            beer.Name,\n            beer.BeerStyle,\n            beer.CreatedAt,\n            beer.UpdatedAt,\n            beer.BreweryId\n        },\n        _dbTransaction);\n\n    // Finally, we'll return the newly inserted beer Id\n    return beerId;\n}\n```\n\n&nbsp;\n\n#### BeerRepository.cs\n\n```csharp\npublic async Task UpdateBeer(Beer beer)\n{\n    // Our application layer will be in charge of mapping the new properties to the entity layer,\n    // as well as validating that the beer exists, so the data layer will only be responsible for\n    // inserting the values into the database; separation of concerns!\n    await _dbConnection.ExecuteAsync(\n        @\"UPDATE Beers SET Name = @Name, BeerStyle = @BeerStyle, UpdatedAt = @UpdatedAt, BreweryId = @BreweryId WHERE Id = @Id\",\n        new\n        {\n            beer.Name,\n            beer.BeerStyle,\n            beer.UpdatedAt,\n            beer.BreweryId,\n            beer.Id\n        },\n        _dbTransaction);\n}\n```\n\n&nbsp;\n\n#### BreweryRepository.cs\n\n```csharp\npublic async Task<int> CreateBrewery(Brewery brewery)\n{\n    // Grab a reference to the address\n    var address = brewery.Address;\n    var breweryInsertSql =\n        new StringBuilder(@\"INSERT INTO Breweries (Name, CreatedAt, UpdatedAt) VALUES (@Name, @CreatedAt, @UpdatedAt)\");\n\n    // Let's add the brewery\n    var breweryId = await _dbConnection.ExecuteScalarAsync<int>(\n        breweryInsertSql.Append(_rowInsertRetrievalQuery).ToString(),\n        new { brewery.Name, brewery.CreatedAt, brewery.UpdatedAt },\n        _dbTransaction);\n\n    // One of our business rules is that a brewery must have an associated address\n    await _dbConnection.ExecuteAsync(\n        @\"INSERT INTO Addresses (StreetAddress, City, State, ZipCode, CreatedAt, UpdatedAt, BreweryId)\n                VALUES (@StreetAddress, @City, @State, @ZipCode, @CreatedAt, @UpdatedAt, @BreweryId)\",\n        new\n        {\n            address.StreetAddress,\n            address.City,\n            address.State,\n            address.ZipCode,\n            address.CreatedAt,\n            address.UpdatedAt,\n            BreweryId = breweryId\n        },\n        _dbTransaction);\n\n    return breweryId;\n}\n```\n\n&nbsp;\n\n#### BreweryRepository.cs\n\n```csharp\npublic async Task UpdateBrewery(Brewery brewery, bool updateAddress)\n{\n    // Again, we'll assume the brewery details are being validated and mapped properly in the application layer\n    await _dbConnection.ExecuteAsync(\n        @\"UPDATE Breweries SET Name = @Name, UpdatedAt = @UpdatedAt WHERE Id = @Id\",\n        new\n        {\n            brewery.Name,\n            brewery.UpdatedAt,\n            brewery.Id\n        },\n        _dbTransaction);\n\n    if (brewery.Address != null && updateAddress)\n    {\n        // Again, we'll assume the brewery details are being validated and mapped properly in the application layer\n        // For now, we won't allow users to swap breweries address to another address\n        await _dbConnection.ExecuteAsync(\n            @\"UPDATE Addresses SET StreetAddress = @StreetAddress, City = @City, ZipCode = @ZipCode, State = @State, UpdatedAt = @UpdatedAt WHERE Id = @Id\",\n            new\n            {\n                brewery.Address.StreetAddress,\n                brewery.Address.City,\n                brewery.Address.ZipCode,\n                brewery.Address.State,\n                brewery.Address.UpdatedAt,\n                brewery.Address.Id\n            },\n            _dbTransaction);\n    }\n}\n```\n\n&nbsp;\n\nIn our commands above, notice the absence of checking the entities passed in for validity and the absence of\nexceptions - that's intentional! Our data access layer is responsible for one thing, and one thing only: **database\ninteraction**. That's it; no more, no less. Any checking for request data, throwing exceptions, mapping entities, etc.\nwill _all_ be done in our core business layer, as that is its intended purpose. By keeping our persistence layer as\nsimple as possible and giving it\na [single responsibility](https://en.wikipedia.org/wiki/Single_responsibility_principle) in the form of database access,\nwe've create a boundary in this layer and between all other cross-cutting concerns.\n\nIn our create operations above, we also pass back the last effected row ID (in the case of SQLite and SQL Server) so\nthat we can pass that back to the business layer. There's a few reasons for doing this:\n\n1. By passing back the row ID to the core business layer, we allow our callers to simply query the database again with\n   the inserted entity's row ID for a lightning fast retrieve, should the layer see a need for it (we will be doing\n   this, for example)\n2. With the row ID being returned, the business layer can simply go about its business doing any business logic it needs\n   to validate entities, link relations, etc.\n3. Performing this passing of the last effected row ID in the persistence layer is (arguably) the easiest way to do this\n   type of operation, as we are talking directly to the database in the layer and can easily access the row via SQL\n   rather than having our callers perform a more intensive text based search, for example, in our database\n\nSo why wouldn't we want to do this? Well, there's one big reason where this may become an issue - concurrency. In a real\nworld production database, there are hundreds of thousands (even millions at the enterprise scale) transactions being\nperformed against database everyday. In doing so, there _is_ a non-zero probability that when retrieving the last\neffected row ID, we _could_ get back the ID of another entity that just so happened to be inserted, or updated, at that\nvery moment as well. In practice, our implementation may not be the best approach in a high traffic production\nenvironment, but for our relatively simple application, it'll make do.\n\nI should mention that, again, as we're simply just exploring Dapper in our example application, there's still _a ton_ of\nroom for improvement here. Between our query optimization and testability of this layer, there's a lot of refactoring we\ncould do here to make our code faster and more reliable. For our use case, we'll keep our queries and commands simple\nfor now (as I'm in the same boat as many you - in **no** way a Dapper expert).\n\nLastly, we'll top off our CRUD operations with the implementation of each delete method:\n\n#### BreweryRepository.cs\n\n```csharp\npublic async Task<int> DeleteBrewery(int breweryId)\n{\n    // Because we setup out database providers to cascade delete on parent entity removal, we won't have to\n    // worry about individually removing all the associated beers and address\n    // NOTE: Because we don't directly expose CRUD operations on the address table, we'll validate the cascade\n    // remove directly in the database for now\n    return await _dbConnection.ExecuteAsync(\n            @\"DELETE FROM Breweries WHERE Id = @Id\",\n        new { Id = breweryId },\n        _dbTransaction);\n}\n```\n\n&nbsp;\n\n#### BeerRepository.cs\n\n```csharp\npublic async Task<int> DeleteBeer(int beerId)\n{\n    // Our simplest command, just remove the beer directly from the database\n    // Validation that the beer actually exists in the database will left to the application layer\n    return await _dbConnection.ExecuteAsync(\n        @\"DELETE FROM Beers WHERE Id = @Id\",\n        new { Id = beerId },\n        _dbTransaction);\n}\n```\n\nOur delete operations are simple as can be, just deleting rows from our database (with no validation being performed, as\nthat is an exercise for the business layer). No magic here.\n\nAnd with that... we've _finally_ completed our persistence layer! We've laid the foundation for our core business layer\nto now tap into a database to persist and query data, alongside allowing the option for three difference database\nproviders. Not a bad day's work, if I do say so myself. As a side note, that was _a lot_ of code we just cranked out.\nLet's recap exactly what we did in this post:\n\n1. We bootstrapped our `Dappery.Data` and `Dappery.Core` projects\n2. We implemented CRUD operations using Dapper wrapped within a couple repositories, and all brought together by a unit\n   of work\n3. We kickstarted our databases in the form of SQLite, SQL Server, and Postgres, leaving the choice up to the consumer\n   by simply changing a connection string\n\nOn a rainy day, I'll sit down and guide us through setting up Docker images for database providers and integrating them\nwith our .NET Core applications. For now, I'll leave it as an exercise for the reader on how to do so.\n\nIn our next post, we'll create a simple test project that will help bulletproof our code within this layer, so that any\nchange we decide to make in the future, we'll be able to safely validate that it's still doing its job. After that,\nwe'll implement our business layer that will contain our core CQRS architecture with the help of libraries in MediatR\nand FluentValidation. Check out the source\ncode [here](https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-2-data-layer) to see where we're at so far. Until\nnext time, amigos!\n",
      "html": "<p><em>UPDATE: I've added cancellation token support to each of the database operations below, and encourage readers to\ncheckout the <code>master</code> branch to see how things look now. The methods below we're slight altered to use\na <code>CommandDefinition</code> that utilizes a <code>CancellationToken</code> passed down from the core business logic layer, and used in\nplace of the regular string queries we've written below.</em></p>\n<p>We finally made it... our domain layer is ready to roll, and it's now time to spin up some actual application code. In\nour <a href=\"/images/net-core-dapper-and-crud-buzzword-bingo/\">last post</a>, we setup our initial domain layer for our favorite\nfictional brewery, Dappery (<a href=\"https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-1-domain-layer\">source code</a> for\nreference). In this post, we'll build out the data access layer that will be our primary persistence mechanism into our\ndatabase. We'll make use of SQL server (or Postgres) with Docker and SQLite running our unit tests within this layer.\nFeel free to checkout the <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-2-data-layer\">source code</a> on\nGitHub for this section for those following along.</p>\n<p>Before we jump into the code, let's take a step back and understand <em>why</em> we separate our our data access layer (DAL)\nfrom the rest of our code.</p>\n<p><img src=\"/images/net-core-dapper-and-crud-series/part-2/inward_dependencies.png\" alt=\"Inward_Facing_Dependencies\"></p>\n<p>The good ole fashioned dependency graph, made famous by Robert Martin a.k.a. Dr. Bob, lays out the foundation of domain\ndriven design (DDD). For our relatively simple application, we focus on creating four distinct layers within our\napplication code to ensure that the layers are ultimately, by some chain of dependency, dependent on the domain layer (\neffectively the 'D' in SOLID, <a href=\"https://en.wikipedia.org/wiki/Dependency_inversion_principle\">dependency inversion</a>).\nWith our layers pointing inward toward our domain, we create <em>clear</em> boundaries within our application that deal with\nseparate concerns:</p>\n<ul>\n<li>The web and persistence layers directly depend on our core layer</li>\n<li>Our core layer directly depends on the domain layer</li>\n<li>By association, our web and persistence, inadvertently, have a dependency on our domain layer</li>\n<li>The domain layer has <strong>no</strong> dependencies - all it knows, and cares about, are the entities, view models, DTOs, etc.\nthat live inside this project and how each is related</li>\n</ul>\n<p>Creating these clear boundaries of separation helps to create a modular application, with each layer isolated from one\nanother in perfect harmony. By creating this inversion of dependency within our application, for example, our core layer\n<em>does not</em> need to know about ANY of the internal workings of the data layer - all the core layer cares about is that it\ncan get data from a database using this <a href=\"https://en.wikipedia.org/wiki/Actor_model\">actor</a>. How the persistence layer\ninteracts with the database is entirely abstracted from our core layer. Our data layer can change its data interaction\nmechanism, swap database providers, etc. and our core layer <em>will not</em> care as it does not concern itself with <em>how</em> the\npersistence layer works.</p>\n<p>With that out of way, let's finally dig into the data access code we'll be writing. From the start, we said we'd be\nworking with Dapper for our database interaction, so let's go ahead and create a new project (a <code>classlib</code> in our case).\nAgain, I'll be using the command line, but feel free to spin up the new project in your IDE of choice:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">~</span><span style=\"color:#DBD7CAEE\">/Dappery/src$ dotnet new classlib -n Dappery.Data</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">~</span><span style=\"color:#DBD7CAEE\">/Dappery/src$ dotnet sln ../Dappery.sln add Dappery.Data/Dappery.Data.csproj</span></span></code></pre></figure>\n<p>With our persistence library wired up, let's go ahead and update our <code>.csproj</code> file within <code>Dappery.Data</code> to utilize\nsome of the new features of C# 8. Let's replace the <code>PropertyGroup</code> section with the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"xml\" data-theme=\"vitesse-dark\"><code data-language=\"xml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">PropertyGroup</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">TargetFramework</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">netstandard2.1</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">TargetFramework</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">Nullable</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">enable</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">Nullable</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">LangVersion</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">8.0</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">LangVersion</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">PropertyGroup</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>Targeting <code>netstandard2.1</code> allows us to utilize C# 8 features, and we'll also turn\non <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references\">nullable reference types</a> to allow the compiler\nto help us catch possible null references. From our dependency graph above, we'll need to create a reference between our\ndata layer and our core layer. For reasons we'll see later, we'll actually need to add just a bit of skeleton code in\nthe core application layer for our data layer to utilize, so let's go ahead and add it now.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">~</span><span style=\"color:#DBD7CAEE\">/Dappery/src$ dotnet new classlib -n Dappery.Core</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">~</span><span style=\"color:#DBD7CAEE\">/Dappery/src$ dotnet sln ../Dappery.sln add Dappery.Core/Dappery.Core.csproj</span></span></code></pre></figure>\n<p>With the project added, go ahead and replace the <code>PropertyGroup</code> with the above for all the aforementioned reasons. Now,\nback in our <code>.csproj</code> file in our data project, let's add the core layer as a dependency. Feel free to create the\nreference using Visual Studio/Rider, as it really only boils down to adding the following line beneath\nthe <code>PropertyGroup</code> tag:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"xml\" data-theme=\"vitesse-dark\"><code data-language=\"xml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">ItemGroup</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">ProjectReference</span><span style=\"color:#BD976A\"> Include</span><span style=\"color:#DBD7CAEE\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">..\\Dappery.Core\\Dappery.Core.csproj</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">ItemGroup</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>As we mentioned above, the data layer will also implicitly rely on the domain layer <em>through</em> its dependency on the core\nlayer. What this means for us, code-wise, is to add the following reference in our <code>.csproj</code> file in the core project:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"xml\" data-theme=\"vitesse-dark\"><code data-language=\"xml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">ItemGroup</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">ProjectReference</span><span style=\"color:#BD976A\"> Include</span><span style=\"color:#DBD7CAEE\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">..\\Dappery.Domain\\Dappery.Domain.csproj</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">ItemGroup</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>With the core project referencing the domain layer, our data project will <em>also</em> have a reference to the domain layer\nwithout explicitly adding the reference in our data layer. Adding the domain project as a direct reference in our data\nproject would actually have created a <em>symmetric dependency</em>, which we'll want to try and avoid. With the ceremony out\nof the way, let's talk about what we'll be adding in this layer.</p>\n<h3>The Data Layer</h3>\n<p>As this is a project revolving around Dapper for our database persistence, it's probably a good idea to bring in some\npatterns to help us define our intent within this layer. Rather that writing raw Dapper queries within this layer, we'll\nwrap our interaction with Dapper within beer and brewery repositories that will, in turn, be wrapped in a unit of work.\nIn plain english, we'll effectively be using\nthe <a href=\"https://www.c-sharpcorner.com/UploadFile/b1df45/unit-of-work-in-repository-pattern/\">Repository and Unit of Work Patterns</a>.\nAlongside bringing in these patterns, a side effect of our clear application layer separation will be the creation of\na <a href=\"https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)\">ports and adapters architecture</a> (also known as\nhexagonal architecture).</p>\n<p>For our use case, our core project will offer a port in the form of data access that our data project will then fill as\nthe adapter. If you're unfamiliar with the repository and unit of work patterns, the specific problems they solve, and\ntheir pros and cons, it's well worth it to take the afternoon to read up on them. For now, we'll assume you're somewhat\nfamiliar with the pattern. With all the technical jargon out of the way, let's go ahead and create a port (effectively\nan <code>interface</code>) within our core project, that our data project will provide the adapter for (fancy term for implementing\nthe <code>interface</code>). In <code>Dappery.Core</code>, go ahead and add a <code>Data</code> folder and the following classes:</p>\n<h4>Data/IBeerRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> interface</span><span style=\"color:#5DA994\"> IBeerRepository</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> GetAllBeers</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> CreateBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Task</span><span style=\"color:#80A665\"> UpdateBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>Data/IBeerRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> interface</span><span style=\"color:#5DA994\"> IBreweryRepository</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> GetAllBreweries</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> CreateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Task</span><span style=\"color:#80A665\"> UpdateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> updateAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> breweryId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>Data/IUnitOfWork.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> interface</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IDisposable</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        IBeerRepository</span><span style=\"color:#80A665\"> BeerRepository</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        IBreweryRepository</span><span style=\"color:#80A665\"> BreweryRepository</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        void</span><span style=\"color:#80A665\"> Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>In our repositories, we've got all the ingredients for a pretty basic CRUD application. Notice that our <code>IUnitOfWork</code>\ninterface inherits from <code>IDisposable</code>, as it will be in charge of the database resources that we'll need to clean up\nonce we're finished with our data operations.</p>\n<p>For our database provider, feel free to use whatever your preferred provider happens to be. I lay three options for us:\nSQL Server, Postgres, and SQLite. I'll be spinning up both a SQL Server and Postgres database, as an exercise of\nabstraction to really drive home the point of agnostic data access, using <a href=\"https://hub.docker.com/_/postgres\">Postgres</a>\nand <a href=\"https://hub.docker.com/_/microsoft-mssql-server\">SQL Server</a> Docker images. For our unit tests, we'll be using an\nin-memory version of SQLite to run our tests against. If you don't feel like setting up a database for this application,\ndon't worry... I got you. We'll generalize our database layer just enough that you'll be able to use the in-memory\nversion of SQLite for the application as well. Since this isn't <em>really</em> a post about setting up database providers via\nDocker images, so I'll defer to\nthis <a href=\"https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-ver15&#x26;pivots=cs1-bash\">article</a>\non the official Microsoft docs on how to do so for SQL Server, and the aforementioned Docker hub for Postgres. The\nbeauty of the architecture we've laid out so far is that no matter the database provider, our application will work with\njust a simple connection string change.</p>\n<p>Before we get started implementing our repository operations, let's go ahead and setup our database. Once you've got\nyour SQL Server, or Postgres, instance up and running, take a look at\nour <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-2-data-layer/src/Dappery.Data/Scripts\">initialization files</a>\nto help create, link, and seed some test data for either provider. Go ahead and drop into a console and run the SQL for\nwhich ever provider you decide to roll with.</p>\n<p>With our database ready to roll, let's go ahead and implement the <code>IBeerRepository.cs</code> and <code>IBreweryRepository.cs</code>\ninterfaces. Within <code>Dappery.Data</code>, let's create a <code>Repositories</code> folder with the following implementation classes:</p>\n<h4>Repositories/BeerRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Repositories</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Text</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Dapper</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BeerRepository</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IBeerRepository</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IDbTransaction</span><span style=\"color:#80A665\"> _dbTransaction</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IDbConnection</span><span style=\"color:#80A665\"> _dbConnection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> _insertRowRetrievalQuery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> BeerRepository</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IDbTransaction</span><span style=\"color:#80A665\"> dbTransaction</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> insertRowRetrievalQuery</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dbTransaction</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> dbTransaction</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dbConnection</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Connection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _insertRowRetrievalQuery</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> insertRowRetrievalQuery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> GetAllBeers</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NotImplementedException</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NotImplementedException</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> CreateBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NotImplementedException</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> UpdateBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NotImplementedException</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> beerId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NotImplementedException</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>Repositories/BreweryRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Repositories</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Text</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Dapper</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BreweryRepository</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IBreweryRepository</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IDbTransaction</span><span style=\"color:#80A665\"> _dbTransaction</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IDbConnection</span><span style=\"color:#80A665\"> _dbConnection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> _rowInsertRetrievalQuery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> BreweryRepository</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IDbTransaction</span><span style=\"color:#80A665\"> dbTransaction</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> rowInsertRetrievalQuery</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dbTransaction</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> dbTransaction</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dbConnection</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Connection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _rowInsertRetrievalQuery</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> rowInsertRetrievalQuery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NotImplementedException</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> GetAllBreweries</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NotImplementedException</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> CreateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NotImplementedException</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> UpdateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> updateAddress</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NotImplementedException</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> breweryId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NotImplementedException</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>For now, some of our imported namespaces are unused, but will be needed later when we start implementing these methods.\nNext, let's add the <code>UnitOfWork.cs</code> implementation at the root of our <code>Dappery.Data</code> project:</p>\n<h4>UnitOfWork.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Dapper</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">SqlClient</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Sqlite</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Npgsql</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Repositories</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UnitOfWork</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IUnitOfWork</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IDbConnection</span><span style=\"color:#80A665\"> _dbConnection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IDbTransaction</span><span style=\"color:#80A665\"> _dbTransaction</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UnitOfWork</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> connectionString</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> isPostgres</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Based on our database implementation, we'll need a reference to the last row inserted</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            string</span><span style=\"color:#80A665\"> rowInsertRetrievalQuery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If no connection string is passed, we'll assume we're running with our SQLite database provider</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">connectionString</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _dbConnection</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> SqliteConnection</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Data Source=:memory:</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                rowInsertRetrievalQuery</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">; SELECT last_insert_rowid();</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            else</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _dbConnection</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> isPostgres</span><span style=\"color:#CB7676\"> ?</span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">IDbConnection</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> NpgsqlConnection</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">connectionString</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> SqlConnection</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">connectionString</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                rowInsertRetrievalQuery</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> isPostgres</span><span style=\"color:#CB7676\"> ?</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">returning Id;</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">; SELECT CAST(SCOPE_IDENTITY() as int);</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> ;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Open our connection, begin our transaction, and instantiate our repositories</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Open</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dbTransaction</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">BeginTransaction</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            BreweryRepository</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryRepository</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">_dbTransaction</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> rowInsertRetrievalQuery</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            BeerRepository</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BeerRepository</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">_dbTransaction</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> rowInsertRetrievalQuery</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Once our connection is open, if we're running SQLite for unit tests (or that actual application), let's seed some data</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">connectionString</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                try</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                    // We'll seed a couple breweries each with an address and several beers</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    SeedDatabase</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">_dbConnection</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                catch</span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">Exception</span><span style=\"color:#80A665\"> e</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Could not seed the database: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> IBreweryRepository</span><span style=\"color:#80A665\"> BreweryRepository</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> IBeerRepository</span><span style=\"color:#80A665\"> BeerRepository</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Commit</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            try</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _dbTransaction</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            catch</span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">Exception</span><span style=\"color:#80A665\"> e</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Could not commit the transaction, reason: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _dbTransaction</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Rollback</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            finally</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _dbTransaction</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispose</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            GC</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">SuppressFinalize</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> virtual</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">bool</span><span style=\"color:#80A665\"> disposing</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">disposing</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _dbTransaction</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispose</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _dbConnection</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispose</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> SeedDatabase</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IDbConnection</span><span style=\"color:#80A665\"> dbConnection</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            const</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> createBreweriesSql</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> @\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                CREATE TABLE Breweries (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    Id INTEGER PRIMARY KEY,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    Name TEXT(32),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    CreatedAt DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    UpdatedAt DATE</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                );</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            const</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> createBeersSql</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> @\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                CREATE TABLE Beers (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    Id INTEGER PRIMARY KEY,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    Name TEXT(32),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    BeerStyle TEXT(16),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    CreatedAt DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    UpdatedAt DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    BreweryId INT NOT NULL,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    CONSTRAINT FK_Beers_Breweries_Id FOREIGN KEY (BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        REFERENCES Breweries (Id) ON DELETE CASCADE</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                );</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            const</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> createAddressSql</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> @\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                CREATE TABLE Addresses (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    Id INTEGER PRIMARY KEY,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    StreetAddress TEXT(32),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    City TEXT(32),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    State TEXT(32),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    ZipCode TEXT(8),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    CreatedAt DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    UpdatedAt DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    BreweryId INTEGER NOT NULL,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    CONSTRAINT FK_Address_Breweries_Id FOREIGN KEY (BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        REFERENCES Breweries (Id) ON DELETE CASCADE</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                );</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add our tables</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">createBreweriesSql</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">createBeersSql</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">createAddressSql</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Seed our data</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                INSERT INTO Breweries (Name, CreatedAt, UpdatedAt)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                VALUES</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Fall River Brewery',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    );</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                INSERT INTO Breweries (Name, CreatedAt, UpdatedAt)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                VALUES</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Sierra Nevada Brewing Company',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    );</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                INSERT INTO Addresses (StreetAddress, City, State, ZipCode, CreatedAt, UpdatedAt, BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                VALUES</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        '1030 E Cypress Ave Ste D',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Redding',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'CA',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        '96002',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        1</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    );</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                INSERT INTO Addresses (StreetAddress, City, State, ZipCode, CreatedAt, UpdatedAt, BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                VALUES</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        '1075 E 20th St',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Chico',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'CA',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        '95928',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        2</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    );</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                VALUES</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Hexagenia',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Ipa',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        1</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    );</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                VALUES</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Widowmaker',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'DoubleIpa',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        1</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    );</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                VALUES</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Hooked',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Lager',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        1</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    );</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                VALUES</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Pale Ale',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'PaleAle',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        2</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    );</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Execute</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                VALUES</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'Hazy Little Thing',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        'NewEnglandIpa',</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        CURRENT_DATE,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                        2</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                    );</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        ~</span><span style=\"color:#80A665\">UnitOfWork</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Okay... that's a lot of code, so let's break it down:</p>\n<ul>\n<li>In our constructor, we inject a nullable connection string (since we enabled C# 8, <code>string</code>s can now be nullable), and\nassume that if no connection string is passed, we're probably running unit tests, or just a simple in-memory version\nof our application. We'll see how this injected connection string will actually be passed into our <code>UnitOfWork</code>\nconstructor in our API project in a later post.</li>\n<li>Once we figure out who our database provider is, we open the connection, initialize our repositories, and seed some\ntest data (if we're opting to use SQLite)</li>\n<li>We pass a the <code>rowInsertRetrievalQuery</code> string into our repositories to tell the repository how to get back the row we\njust added (we'll see why, exactly, we do this later)</li>\n<li>We add some public getters to access the repositories through our <code>UnitOfWork</code> class</li>\n<li>We implement our <code>Commit</code> method to try and commit the transaction to the database and rollback if anything unexpected\nhappens</li>\n<li>Finally, we add the disposable pattern to safely release our database resources during each transaction and destruct\nour instance of the <code>UnitOfWork</code></li>\n</ul>\n<p>Taking a step back let's take a look at our project structure so far:</p>\n<p><img src=\"/images/net-core-dapper-and-crud-series/part-2/structure_as_of.png\" alt=\"Structure_So_far\"></p>\n<p>With our <code>UnitOfWork</code> class implemented, let's finally crank out some of our repository operations. In\nour <code>BreweryRepository.cs</code> class, let's implement our <code>GetAllBreweries</code> query:</p>\n<h4>BreweryRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> GetAllBreweries</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Grab a reference to all beers so we can map them to there corresponding breweries</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beers</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">QueryAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">SELECT * FROM Beers</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">)).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">QueryAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // We join with addresses as there's a one-to-one relation with breweries, making the query a little less intensive</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">SELECT * FROM Breweries br INNER JOIN Addresses a ON a.BreweryId = br.Id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        (</span><span style=\"color:#80A665\">brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> address</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map the address to the brewery</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> address</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map each beer to the beer collection for the brewery during iteration over our result set</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Any</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                foreach</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#4D9375\"> in</span><span style=\"color:#BD976A\"> beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Where</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beer</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Let's breakdown what's going on in this query:</p>\n<ul>\n<li>First, we grab a reference to all the beers in our database so we can map each beer up to its corresponding brewery</li>\n<li>Next, we query the brewery table and do a simple join on the address table</li>\n<li>Finally, once we have our result set, we set each brewery's address to the joined address, and add all the beers to\nthe data model (if any exist)</li>\n</ul>\n<p>Again, I'm not an expert with Dapper, so I'm sure there's some optimization to be done here. As this is just us\nexploring Dapper, this will suffice for now. For example, rather than performing two separate queries to get our\nassociated beers that map to their breweries, we could flat query all the beers using some nested sub queries. A few\nissues arise, however, as there are many beers to one brewery, so this might not be the most viable solution - simply\njust food for thought.</p>\n<p>Syntactically, Dapper offers some nice ADO.NET-like methods to help us write our queries and commands. We see that\nthe <code>QueryAsync&#x3C;Brewery, Address, Brewery></code> method sets up the expectation of what this query returns - the first two\ngeneric types tell Dapper that this is a joined query that will contain two of our entities, with the third being the\nentity Dapper should perform the mapping for and ultimately return. We see that one of the parameters in this call is an\nexpression function (the <code>Func&#x3C;Brewery, Address></code>) that we use to add the reference to the address for the brewery and\nadd all the beers.</p>\n<p>Let's jump over to our beer repository and implement the <code>GetAllBeers</code> method:</p>\n<h4>BeerRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> GetAllBeers</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Retrieve the addresses, as this is a nested mapping</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> addresses</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">QueryAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Address</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">SELECT * FROM Addresses</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span><span style=\"color:#666666\">)).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">QueryAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Beer</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        @\"</span><span style=\"color:#C98A7D\">SELECT b.*, br.* FROM Beers b INNER JOIN Breweries br ON br.Id = b.BreweryId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        (</span><span style=\"color:#80A665\">beer</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map the brewery that Dapper returns for us to the beer</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> addresses</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">a</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> a</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        transaction</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> _dbTransaction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Again, taking a look at what we've done above, this query is pretty straight forward: we retrieve the brewery addresses,\nand then separately query the beers table with the breweries table and map each brewery's address during iteration over\nour result set. Looking good so far, let's bust out those retrieve by ID methods for both entities:</p>\n<h4>BreweryRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beersFromBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">QueryAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        @\"</span><span style=\"color:#C98A7D\">SELECT * FROM Beers WHERE BreweryId = @Id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">},</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">)).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">QueryAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        @\"</span><span style=\"color:#C98A7D\">SELECT br.*, a.* FROM Breweries br INNER JOIN Addresses a ON a.BreweryId = br.Id WHERE br.Id = @Id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        (</span><span style=\"color:#80A665\">brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> address</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Since breweries have a one-to-one relation with address, we can initialize that mapping here</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> address</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add each beer from the previous query into the list of beers for the brewery</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">beersFromBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Any</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                foreach</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#4D9375\"> in</span><span style=\"color:#BD976A\"> beersFromBrewery</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beer</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\"> },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">)).</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BeerRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Retrieve the beer from the database</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beerFromId</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">QueryAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Beer</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        @\"</span><span style=\"color:#C98A7D\">SELECT b.*, br.* FROM Beers b</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        INNER JOIN Breweries br ON br.Id = b.BreweryId</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        WHERE b.Id = @Id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        (</span><span style=\"color:#80A665\">beer</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\"> },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">)).</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Return back to the caller if no beer is found, let the business logic decide what to do if we can't the specified beer</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">beerFromId</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Map the address to the beer's brewery</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">QueryFirstOrDefaultAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Address</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        @\"</span><span style=\"color:#C98A7D\">SELECT * FROM Addresses WHERE BreweryId = @BreweryId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> beerFromId</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\"> },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Set the address found in the previous query to the beer's brewery address, if we have a brewery</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">beerFromId</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        beerFromId</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> address</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Let's add all the beers to our brewery attached to this beer</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beersFromBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">QueryAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        @\"</span><span style=\"color:#C98A7D\">SELECT * FROM Beers WHERE BreweryId = @BreweryId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> beerFromId</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\"> },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Lastly, let's add all the beers to the entity model</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    foreach</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#4D9375\"> in</span><span style=\"color:#BD976A\"> beersFromBrewery</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        beerFromId</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beer</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> beerFromId</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Pretty straight forward - the only addition here is the use of Dapper's <code>QueryFirstOrDefaultAsync&#x3C;Beer>()</code> method, which\nwe conveniently use to retrieve the address of the beer's brewery in question, set the brewery address, and finally\nattach all the beers we have in the database to the brewery. Again, I'm no Dapper expert by any means, so I'm sure we\ncould optimize this query quite a bit. For the EF Core fellows in the crowd, the above would be equivalent to\na <code>.Include().ThenInclude()</code> query, and while I'm sure we could combine some of the above queries, I break up each query\nfor readability, as well as debug-ability. Next, let's add our create and update commands for each repository:</p>\n<h4>BeerRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> CreateBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // From our business rule we defined, we'll assume the brewery ID is always attached to the beer</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beerToInsertSql</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> StringBuilder</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span><span style=\"color:#C98A7D\">INSERT INTO Beers (Name, BeerStyle, CreatedAt, UpdatedAt, BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                                VALUES (@Name, @BeerStyle, @CreatedAt, @UpdatedAt, @BreweryId)</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Let's insert the beer and grab its ID</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beerId</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ExecuteScalarAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        beerToInsertSql</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Append</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">_insertRowRetrievalQuery</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CreatedAt</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UpdatedAt</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Finally, we'll return the newly inserted beer Id</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> beerId</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BeerRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> UpdateBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Our application layer will be in charge of mapping the new properties to the entity layer,</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // as well as validating that the beer exists, so the data layer will only be responsible for</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // inserting the values into the database; separation of concerns!</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ExecuteAsync</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        @\"</span><span style=\"color:#C98A7D\">UPDATE Beers SET Name = @Name, BeerStyle = @BeerStyle, UpdatedAt = @UpdatedAt, BreweryId = @BreweryId WHERE Id = @Id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UpdatedAt</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BreweryRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> CreateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Grab a reference to the address</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> address</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> breweryInsertSql</span><span style=\"color:#666666\"> =</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span><span style=\"color:#5DA994\"> StringBuilder</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">@\"</span><span style=\"color:#C98A7D\">INSERT INTO Breweries (Name, CreatedAt, UpdatedAt) VALUES (@Name, @CreatedAt, @UpdatedAt)</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Let's add the brewery</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> breweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ExecuteScalarAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">>(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        breweryInsertSql</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Append</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">_rowInsertRetrievalQuery</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CreatedAt</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UpdatedAt</span><span style=\"color:#666666\"> },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // One of our business rules is that a brewery must have an associated address</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ExecuteAsync</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        @\"</span><span style=\"color:#C98A7D\">INSERT INTO Addresses (StreetAddress, City, State, ZipCode, CreatedAt, UpdatedAt, BreweryId)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                VALUES (@StreetAddress, @City, @State, @ZipCode, @CreatedAt, @UpdatedAt, @BreweryId)</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CreatedAt</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UpdatedAt</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> breweryId</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> breweryId</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BreweryRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> UpdateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> updateAddress</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Again, we'll assume the brewery details are being validated and mapped properly in the application layer</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ExecuteAsync</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        @\"</span><span style=\"color:#C98A7D\">UPDATE Breweries SET Name = @Name, UpdatedAt = @UpdatedAt WHERE Id = @Id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UpdatedAt</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#BD976A\"> updateAddress</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Again, we'll assume the brewery details are being validated and mapped properly in the application layer</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // For now, we won't allow users to swap breweries address to another address</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ExecuteAsync</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            @\"</span><span style=\"color:#C98A7D\">UPDATE Addresses SET StreetAddress = @StreetAddress, City = @City, ZipCode = @ZipCode, State = @State, UpdatedAt = @UpdatedAt WHERE Id = @Id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UpdatedAt</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>In our commands above, notice the absence of checking the entities passed in for validity and the absence of\nexceptions - that's intentional! Our data access layer is responsible for one thing, and one thing only: <strong>database\ninteraction</strong>. That's it; no more, no less. Any checking for request data, throwing exceptions, mapping entities, etc.\nwill <em>all</em> be done in our core business layer, as that is its intended purpose. By keeping our persistence layer as\nsimple as possible and giving it\na <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">single responsibility</a> in the form of database access,\nwe've create a boundary in this layer and between all other cross-cutting concerns.</p>\n<p>In our create operations above, we also pass back the last effected row ID (in the case of SQLite and SQL Server) so\nthat we can pass that back to the business layer. There's a few reasons for doing this:</p>\n<ol>\n<li>By passing back the row ID to the core business layer, we allow our callers to simply query the database again with\nthe inserted entity's row ID for a lightning fast retrieve, should the layer see a need for it (we will be doing\nthis, for example)</li>\n<li>With the row ID being returned, the business layer can simply go about its business doing any business logic it needs\nto validate entities, link relations, etc.</li>\n<li>Performing this passing of the last effected row ID in the persistence layer is (arguably) the easiest way to do this\ntype of operation, as we are talking directly to the database in the layer and can easily access the row via SQL\nrather than having our callers perform a more intensive text based search, for example, in our database</li>\n</ol>\n<p>So why wouldn't we want to do this? Well, there's one big reason where this may become an issue - concurrency. In a real\nworld production database, there are hundreds of thousands (even millions at the enterprise scale) transactions being\nperformed against database everyday. In doing so, there <em>is</em> a non-zero probability that when retrieving the last\neffected row ID, we <em>could</em> get back the ID of another entity that just so happened to be inserted, or updated, at that\nvery moment as well. In practice, our implementation may not be the best approach in a high traffic production\nenvironment, but for our relatively simple application, it'll make do.</p>\n<p>I should mention that, again, as we're simply just exploring Dapper in our example application, there's still <em>a ton</em> of\nroom for improvement here. Between our query optimization and testability of this layer, there's a lot of refactoring we\ncould do here to make our code faster and more reliable. For our use case, we'll keep our queries and commands simple\nfor now (as I'm in the same boat as many you - in <strong>no</strong> way a Dapper expert).</p>\n<p>Lastly, we'll top off our CRUD operations with the implementation of each delete method:</p>\n<h4>BreweryRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> breweryId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Because we setup out database providers to cascade delete on parent entity removal, we won't have to</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // worry about individually removing all the associated beers and address</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // NOTE: Because we don't directly expose CRUD operations on the address table, we'll validate the cascade</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // remove directly in the database for now</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ExecuteAsync</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            @\"</span><span style=\"color:#C98A7D\">DELETE FROM Breweries WHERE Id = @Id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> breweryId</span><span style=\"color:#666666\"> },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BeerRepository.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> beerId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Our simplest command, just remove the beer directly from the database</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Validation that the beer actually exists in the database will left to the application layer</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _dbConnection</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ExecuteAsync</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        @\"</span><span style=\"color:#C98A7D\">DELETE FROM Beers WHERE Id = @Id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        new</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> beerId</span><span style=\"color:#666666\"> },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        _dbTransaction</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our delete operations are simple as can be, just deleting rows from our database (with no validation being performed, as\nthat is an exercise for the business layer). No magic here.</p>\n<p>And with that... we've <em>finally</em> completed our persistence layer! We've laid the foundation for our core business layer\nto now tap into a database to persist and query data, alongside allowing the option for three difference database\nproviders. Not a bad day's work, if I do say so myself. As a side note, that was <em>a lot</em> of code we just cranked out.\nLet's recap exactly what we did in this post:</p>\n<ol>\n<li>We bootstrapped our <code>Dappery.Data</code> and <code>Dappery.Core</code> projects</li>\n<li>We implemented CRUD operations using Dapper wrapped within a couple repositories, and all brought together by a unit\nof work</li>\n<li>We kickstarted our databases in the form of SQLite, SQL Server, and Postgres, leaving the choice up to the consumer\nby simply changing a connection string</li>\n</ol>\n<p>On a rainy day, I'll sit down and guide us through setting up Docker images for database providers and integrating them\nwith our .NET Core applications. For now, I'll leave it as an exercise for the reader on how to do so.</p>\n<p>In our next post, we'll create a simple test project that will help bulletproof our code within this layer, so that any\nchange we decide to make in the future, we'll be able to safely validate that it's still doing its job. After that,\nwe'll implement our business layer that will contain our core CQRS architecture with the help of libraries in MediatR\nand FluentValidation. Check out the source\ncode <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-2-data-layer\">here</a> to see where we're at so far. Until\nnext time, amigos!</p>"
    },
    "_id": "2019/net-core-dapper-and-crud-buzzword-bingo-part-2.md",
    "_raw": {
      "sourceFilePath": "2019/net-core-dapper-and-crud-buzzword-bingo-part-2.md",
      "sourceFileName": "net-core-dapper-and-crud-buzzword-bingo-part-2.md",
      "sourceFileDir": "2019",
      "contentType": "markdown",
      "flattenedPath": "2019/net-core-dapper-and-crud-buzzword-bingo-part-2"
    },
    "type": "Post",
    "url": "/blog/2019/net-core-dapper-and-crud-buzzword-bingo-part-2"
  },
  {
    "title": "Clean architecture, Dapper, MediatR, and buzzword bingo (part 3)",
    "description": "Testing code with xUnit, Dapper, and Shouldly.",
    "pubDate": "2019-11-19T08:00:00.000Z",
    "category": ".NET",
    "heroImage": "/images/net-core-dapper-and-crud-series/part-3/shouldly-xunit-meme.jpeg",
    "draft": false,
    "keywords": [
      ".net",
      "c#",
      "dapper",
      "mediatr"
    ],
    "body": {
      "raw": "\nTwo layers down, two to go. While we've made some great progress in\nour [last post](/images/net-core-dapper-and-crud-buzzword-bingo-part-2/), I wanted to carve out at least one section in\nour series discussing testing our application. So far, we've built our domain and persistence layers, but we have yet to\nactually implement any transactional processes that require the higher up layers that will run the code we've written so\nfar to confirm its correctness. Rather than wait until we've built out our API layer to begin testing our implementation\nof the data layer (that would be more integration testing, one could argue), a better solution would be to take some\ntime to write some simple and quick unit tests around our persistence layer. With our data layer fully unit tested, we\nwon't have to wait to have an API to interact with via Postman, or some other application testing tool, to ensure he\ncode we have so far is giving us the result sets we expect. With our code unit tested in this fashion, we can use said\ntests as contracts for our expectation of each operation within our repositories, and grant ourself the ability to\nsafely refactor without fear of unknowingly breaking the application (at least within the persistence layer).\n\nFeel free to checkout the code in this\npost [here](https://github.com/JoeyMckenzie/Dappery/tree/master/tests/Dappery.Data.Tests). Before we jump into writing\nthe unit tests, let's discuss the tools, approach, and mindset we'll use for writing our tests in each layer of our\napplication (excluding our domain layer, as there is really not much logic there by design):\n\n-   Within each layer, we'll use a combination of [xUnit](https://xunit.net/)\n    and [Shouldly](https://github.com/shouldly/shouldly), my preferred unit test and assertion frameworks, respectively\n-   In our `Dappery.Data` project, we'll write units tests around each operation in our `BeerRepository`\n    and `BreweryRepository` classes, utilizing the seeded database we setup for our in-memory SQLite database provider in\n    our `UnitOfWork` class\n-   In our `Dappery.Core` project, which contains all of our business and cross-cutting concern logic, we'll again use\n    xUnit and Shouldly, with unit tests surrounding each query/command action that we will be sending to our MediatR\n    request factory to create the corresponding handlers, as well as verifying proper mappings and responses in each\n    scenario\n-   In our `Dappery.Api` project, we'll write a suite of integration tests that will act as our end-to-end spec,\n    effectively testing all of our request transactions from API interface to database interaction, and everything\n    inbetween (creating a _use case_ for our application)\n\n### Testing our Persistence Layer\n\nBefore we jump into writing our unit tests for our `Dappery.Data` project, we'll setup just a bit of test infrastructure\ncode that will assist us with creating an in-memory SQLite database to use within the scope of each test and setup our\ndependencies that our repositories will need. Some of you might be asking the question, however, why use an in-memory\ndatabase to test, and not the actual database our application will be using? Without launching into a diatribe about\nwhich method is best for our application, let me start by saying that _either_ approach is viable; we just so happen to\nbe using the in-memory database for ease of testing and project bootstrapping. There are perfectly valid reasons for\nusing both approaches, for example:\n\n-   Within an enterprise environment, one of your team's APIs may contain one, or more, dependencies on another team's API\n    and the persisted data it utilizes, which is good fit for testing against a live non-production (production in the\n    case of live smoke testing) database consumed by all teams\n-   Utilizing a common datastore between applications can, however, create a brittle dependency on the physical _data_ you\n    are asserting against - should someone remove an expected record from the database that your dependent API returns,\n    our tests will break (if we are not mocking the API calls)\n-   In-memory test databases are great for internal application request transactions and execution paths that have little\n    to no external API dependency - our data can be seeded, manipulated, and scrubbed/removed inbetween tests without fear\n    of another manager yelling at us for deleting test data\n-   Although, with the introduction of multiple API dependencies, mocking entire databases and tables from dependent APIs\n    can quickly become unwieldy and introduce complexity in the form of data management that may not be particularly your\n    API's domain concern\n\nSo, what's the answer to our self imposed rhetorical question about which method to use? A good ole fashioned, **it\ndepends**. For our use case, we don't have any external APIs that we rely on and no data dependency that is out of our\ndomain, so we'll roll our own in-memory database that will be seeded, modified, and torn down in between each test to\nensure a fresh test fixture. Since we'll be using xUnit, we can leverage the testing library's disposable interfaces,\nshared contexts, and dependency injection to write our unit test in a clean, simple fashion. Now, since this is not\n_really_ a detailed how-to article with xUnit, I'll quickly gloss over some of our infrastructure code that will form\nthe basis of each unit test class that we'll write, utilizing the disposable paradigm xUnit encourages us to use, and\nthen we'll jump into each test by repository and action.\n\nFor our unit tests, we'll be heavily relying on xUnit's concept\nof [collection fixtures](https://xunit.net/docs/shared-context). From the xUnit documentation for collection fixtures:\n\n> When to use: when you want to create a single test context and share it among tests in several test classes, and have\n> it cleaned up after all the tests in the test classes have finished.\n\nIn essence, an xUnit collection fixture allows us to share objects, which our case is the in-memory database, between\nunit test classes. While our MediatR request handlers will only have a single Unit of Work dependency, collection\nfixures really shine when we're testing classes with several dependencies that we might want to spread across multiple\nclass files to keep our test domains of a single responsibility. I like to think of a collection fixture as the unit\ntest bootstrapping file, similar to a `Startup.cs` file in an ASP.NET Core web project. In our collection fixture, we'll\nbootstrap our in-memory database with seeded data and supply implementations for our Unit of Work and repository\nclasses. Since talk is cheap, let's go ahead and start setting things up by creating a unit test project for\nour `Dappery.Data` project within our `tests` folder:\n\n```\n~/Dappery/tests$ dotnet new xunit -n Dappery.Data.Tests\n~/Dappery/tests$ dotnet sln ../Dappery.sln add tests/Dappery.Data.Tests/Dappery.Data.Tests.csproj\n```\n\nAgain, I'm one of those weirdos that prefers the command line, so feel free to add the project via your IDE if you want.\nNext, we'll reference our `Dappery.Data` project in our new test project, which just boils down to adding the package\nreference in our `Dappery.Data.Tests.csproj` file:\n\n```xml\n\n<ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Dappery.Core\\Dappery.Core.csproj\"/>\n    <ProjectReference Include=\"..\\..\\src\\Dappery.Data\\Dappery.Data.csproj\"/>\n</ItemGroup>\n```\n\nNotice we've also referenced our `Dappery.Core` project, which we'll see later that we'll require this dependency to\naccess our `IUnitOfWork` and repository interfaces. Let's go ahead and add a `DataCollectionFixture.cs` class within\nour `tests/Dappery.Data.Tests` project that will serve as our central collection fixture for our persistence tests.\n\n### DataCollectionFixture.cs\n\n```csharp\nnamespace Dappery.Data.Tests\n{\n    using Xunit;\n\n    [CollectionDefinition(\"DataCollectionFixture\")]\n    public class DataCollectionFixture : ICollectionFixture<TestFixture>\n    {\n    }\n}\n```\n\nNothing special, mostly just boilerplate code that tells xUnit how to define our collection fixture, which we'll\nimplement with a `TestFixture.cs` file in the same directory:\n\n### TestFixture.cs\n\n```csharp\nnamespace Dappery.Data.Tests\n{\n    using System;\n    using Core.Data;\n\n    public class TestFixture : IDisposable\n    {\n        protected TestFixture()\n        {\n            UnitOfWork = new UnitOfWork(null);\n        }\n\n        protected IUnitOfWork UnitOfWork { get; }\n\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n\n        private void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                UnitOfWork.Dispose();\n            }\n        }\n    }\n}\n```\n\nAgain, nothing too complicated here. We simply define our `TestFixture` which all unit tests will use as a base, and\nnote that this class inherits from the `IDisposable` interface - this is where the xUnit magic happens. With this\ninheritance, our `TestFixture` class will be disposed of inbetween unit test runs, tearing down our database (\nbootstrapped through our `UnitOfWork`), and ensuring we have a fresh test fixture clean from persisted changes made in\nprevious tests. We define a read-only `UnitOfWork` property that each of our inheritors will be able to access, and\nfinish off with a simple resource clean up disposable implementation that will be utilized by xUnit when it disposes of\nour `TestFixture` between test runs. Notice that we instantiate our `UnitOfWork` using the implementation defined in\nour `Dappery.Data` project, which we setup to accept a nullable `string?` value that, when `null`, initializes a seeded\nin-memory SQLite database for us that we'll assert against during our unit tests.\n\nWith our initial infrastructure out of the way, let's go ahead and create a `BeerRepositoryTest.cs` file and write our\nfirst test case:\n\n### BeerRepositoryTest.cs\n\n```csharp\nnamespace Dappery.Data.Tests\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Domain.Entities;\n    using Shouldly;\n    using Xunit;\n\n    public class BeerRepositoryTest : TestFixture\n    {\n        [Fact]\n        public async Task GetAllBeers_WhenInvokedAndBeersExist_ReturnsValidListOfBeers()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n\n            // Act\n            var beers = (await unitOfWork.BeerRepository.GetAllBeers()).ToList();\n            unitOfWork.Commit();\n\n            // Assert\n            beers.ShouldNotBeNull();\n            beers.ShouldBeOfType<List<Beer>>();\n            beers.ShouldNotBeEmpty();\n            beers.All(b => b.Brewery != null).ShouldBeTrue();\n            beers.All(b => b.Brewery.Address != null).ShouldBeTrue();\n            beers.All(b => b.Brewery.Address.BreweryId == b.Brewery.Id).ShouldBeTrue();\n            beers.ShouldContain(b => b.Name == \"Hexagenia\");\n            beers.FirstOrDefault(b => b.Name == \"Hexagenia\")?.BeerStyle.ShouldBe(BeerStyle.Ipa);\n            beers.ShouldContain(b => b.Name == \"Widowmaker\");\n            beers.FirstOrDefault(b => b.Name == \"Widowmaker\")?.BeerStyle.ShouldBe(BeerStyle.DoubleIpa);\n            beers.ShouldContain(b => b.Name == \"Hooked\");\n            beers.FirstOrDefault(b => b.Name == \"Hooked\")?.BeerStyle.ShouldBe(BeerStyle.Lager);\n            beers.ShouldContain(b => b.Name == \"Pale Ale\");\n            beers.FirstOrDefault(b => b.Name == \"Pale Ale\")?.BeerStyle.ShouldBe(BeerStyle.PaleAle);\n            beers.ShouldContain(b => b.Name == \"Hazy Little Thing\");\n            beers.FirstOrDefault(b => b.Name == \"Hazy Little Thing\")?.BeerStyle.ShouldBe(BeerStyle.NewEnglandIpa);\n        }\n    }\n}\n```\n\nAlright, let's breakdown this test:\n\n-   We're using the AAA pattern - Arrange, Act, Assert - which you'll see me make extensive use of throughout our projects\n    as it encourages us to keep out unit tests _simple_ and not too complex (as they should be, massive and complicated\n    unit test cases are a code smell)\n-   We're using the new `using` syntax for disposable classes that shipped with C# 8.0 to grab a reference to\n    our `UnitOfWork` and ensure its resources it creates are properly disposed of once our test is finished - this\n    behavior mimics how we'll inject a scoped instance in our API layer using built-in ASP.NET Core dependency injection\n-   We commit our transactions within our unit of work, as our UoW begins a transaction when initialized - while not\n    entirely necessary for our in-memory unit test database, it's always a good practice to end our transactions even the\n    case of read-only queries as to not keep lingering connections that may come back to bite us\n-   We dispose of _both_ our `UnitOfWork`, once the reference falls out of scope, and the collection test fixture; while\n    not entirely necessary, it's a good practice to get into (disposing resources at each level)\n-   We make use of `async`/`await` to allow for blocking until we receive a response from our in-memory database before\n    continuing onto our assertions\n-   We use the `Shouldly` object extension methods to assert the various properties, types, and collection objects we're\n    expecting in the response\n-   `Shouldly` natively supports use of LINQ and expression predicates, making assertions fluid and easy to read - one of\n    the many reason I _love_ the library\n\nIf we run this unit test, using either the Visual Studio/Rider test runner, or running `dotnet test`, we'll see that\nthis test passes. If we step through this code via a debug session, we can see exactly what is returned within our\nrepository, each query executing and what its result yields, etc. I'll leave that as an exercise for the reader, but\nalways worth while to validate that our unit tests are truly yielding the results we expect. Let's add an empty test\nfor `GetAllBeers()` and a couple of tests for our `GetBeerById()` repository methods:\n\n```csharp\n// ...previous tests\n\n[Fact]\npublic async Task GetAllBeers_WhenNoBeersExist_ReturnsEmptyListOfBeers()\n{\n    // Arrange, remove all the beers from our database\n    using var unitOfWork = UnitOfWork;\n    await unitOfWork.BeerRepository.DeleteBeer(1);\n    await unitOfWork.BeerRepository.DeleteBeer(2);\n    await unitOfWork.BeerRepository.DeleteBeer(3);\n    await unitOfWork.BeerRepository.DeleteBeer(4);\n    await unitOfWork.BeerRepository.DeleteBeer(5);\n\n    // Act\n    var beers = (await unitOfWork.BeerRepository.GetAllBeers()).ToList();\n    unitOfWork.Commit();\n\n    // Assert\n    beers.ShouldNotBeNull();\n    beers.ShouldBeOfType<List<Beer>>();\n    beers.ShouldBeEmpty();\n}\n\n[Fact]\npublic async Task GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n\n    // Act\n    var beer = await unitOfWork.BeerRepository.GetBeerById(1);\n    unitOfWork.Commit();\n\n    // Assert, validate a few properties\n    beer.ShouldNotBeNull();\n    beer.ShouldBeOfType<Beer>();\n    beer.Name.ShouldBe(\"Hexagenia\");\n    beer.BeerStyle.ShouldBe(BeerStyle.Ipa);\n    beer.Brewery.ShouldNotBeNull();\n    beer.Brewery.Name.ShouldBe(\"Fall River Brewery\");\n    beer.Brewery.Address.ShouldNotBeNull();\n    beer.Brewery.Address.City.ShouldBe(\"Redding\");\n}\n\n[Fact]\npublic async Task GetBeerById_WhenInvokedAndBeerDoesNotExist_ReturnsNull()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n\n    // Act\n    var beer = await unitOfWork.BeerRepository.GetBeerById(10);\n    unitOfWork.Commit();\n\n    // Assert, validate a few properties\n    beer.ShouldBeNull();\n}\n```\n\nNothing too complex here, just some simple positive/negative test cases for finding a beer given an ID from the caller.\nOne thing to note is in our `GetAllBeers_WhenNoBeersExist_ReturnsEmptyListOfBeers` method, we use the `unitOfWork` to\nremove all the beers in our test database (probably not the most efficient way, quick and dirty for now), and assert\nagainst the empty list that gets returned. While this might not seem too interesting, the beauty is that xUnit,\nalongside the infrastructure code we setup, will clean up this modified database that we've 'dirtied' the context of,\nand create an entirely fresh database on the next run, disregarding any transactional changes we made in a previous\ntest. We simply retrieve the beer within our test database and assert the properties `Should` be what we expect. One of\nthe reasons I prefer using Shouldly is the response messages we receive when a test fails. Let's take a look at an\nexample be changing our assertion of our `GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer()` test method above to\nexpect an incorrect beer name:\n\n```csharp\n[Fact]\npublic async Task GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n\n    // Act\n    var beer = await unitOfWork.BeerRepository.GetBeerById(1);\n    unitOfWork.Commit();\n\n    // Assert, validate a few properties\n    beer.ShouldNotBeNull();\n    beer.ShouldBeOfType<Beer>();\n    beer.Name.ShouldBe(\"A beer that doesn't exist\"); // This beer was NOT seeded in our database\n    beer.BeerStyle.ShouldBe(BeerStyle.Ipa);\n    beer.Brewery.ShouldNotBeNull();\n    beer.Brewery.Name.ShouldBe(\"Fall River Brewery\");\n    beer.Brewery.Address.ShouldNotBeNull();\n    beer.Brewery.Address.City.ShouldBe(\"Redding\");\n}\n```\n\nIf we run this run this test, we see the following in the console from Shouldly:\n\n```\nDappery.Data.Tests.BeerRepositoryTest.GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer:\n    Outcome: Failed\n    Error Message:\n    Shouldly.ShouldAssertException : beer.Name\n    should be\n\"A beer that doesn't exist\"\n    but was\n\"Hexagenia\"\n    difference\nDifference     |  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n               | \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/\nIndex          | 0    1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   ...\nExpected Value | A    \\s   b    e    e    r    \\s   t    h    a    t    \\s   d    o    e    s    n    '    t    \\s   e    ...\nActual Value   | H    e    x    a    g    e    n    i    a                                                                ...\nExpected Code  | 65   32   98   101  101  114  32   116  104  97   116  32   100  111  101  115  110  39   116  32   101  ...\nActual Code    | 72   101  120  97   103  101  110  105  97                                                               ...\n\nDifference     |       |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n               |      \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/\nIndex          | ...  4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24\nExpected Value | ...  e    r    \\s   t    h    a    t    \\s   d    o    e    s    n    '    t    \\s   e    x    i    s    t\nActual Value   | ...  g    e    n    i    a\nExpected Code  | ...  101  114  32   116  104  97   116  32   100  111  101  115  110  39   116  32   101  120  105  115  116\nActual Code    | ...  103  101  110  105  97\n```\n\nOf the many reasons I love using Shouldly in all my unit test projects, this is one of my favorites. Shouldly points out\nexactly what it expected, what it received, and the index differences in the string. Now, this isn't an infomercial on\ntrying to sell you on using Shouldly, but informative failure messages like this can help you quickly identify\ninconsistencies in your code and fix things at a faster rate than traditional assertion frameworks. Let's finish out\nour `BeerRepositoryTest.cs` file by adding the unit tests that will exercise our database commands for our create,\nupdate, and delete operations:\n\n```csharp\n// ...previous query tests\n\n[Fact]\npublic async Task CreateBeer_WhenBeerIsValid_ReturnsNewlyInsertedBeer()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n    var beerToInsert = new Beer\n    {\n        Name = \"Lazy Hazy\",\n        CreatedAt = DateTime.UtcNow,\n        UpdatedAt = DateTime.UtcNow,\n        BreweryId = 1,\n        BeerStyle = BeerStyle.NewEnglandIpa\n    };\n\n    // Act\n    var beerId = await unitOfWork.BeerRepository.CreateBeer(beerToInsert);\n    var insertedBeer = await unitOfWork.BeerRepository.GetBeerById(beerId);\n    unitOfWork.Commit();\n\n    insertedBeer.ShouldNotBeNull();\n    insertedBeer.ShouldBeOfType<Beer>();\n    insertedBeer.Brewery.ShouldNotBeNull();\n    insertedBeer.Brewery.Address.ShouldNotBeNull();\n    insertedBeer.Brewery.Beers.ShouldNotBeEmpty();\n    insertedBeer.Brewery.Beers.Count.ShouldBe(4);\n    insertedBeer.Brewery.Beers.ShouldContain(b => b.Id == insertedBeer.Id);\n    insertedBeer.Brewery.Beers.FirstOrDefault(b => b.Id == insertedBeer.Id)?.Name.ShouldBe(beerToInsert.Name);\n}\n\n[Fact]\npublic async Task UpdateBeer_WhenBeerIsValid_ReturnsUpdateBeer()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n    var beerToUpdate = new Beer\n    {\n        Id = 1,\n        Name = \"Colossus Imperial Stout\",\n        UpdatedAt = DateTime.UtcNow,\n        BeerStyle = BeerStyle.Stout,\n        BreweryId = 1,\n    };\n\n    // Act\n    await unitOfWork.BeerRepository.UpdateBeer(beerToUpdate);\n    var updatedBeer = await unitOfWork.BeerRepository.GetBeerById(beerToUpdate.Id);\n    unitOfWork.Commit();\n\n    updatedBeer.ShouldNotBeNull();\n    updatedBeer.ShouldBeOfType<Beer>();\n    updatedBeer.Brewery.ShouldNotBeNull();\n    updatedBeer.Brewery.Address.ShouldNotBeNull();\n    updatedBeer.Brewery.Beers.ShouldNotBeEmpty();\n    updatedBeer.Brewery.Beers.Count.ShouldBe(3);\n    updatedBeer.Brewery.Beers.ShouldContain(b => b.Id == beerToUpdate.Id);\n    updatedBeer.Brewery.Beers.ShouldNotContain(b => b.Name == \"Hexagenia\");\n    updatedBeer.Brewery.Beers.FirstOrDefault(b => b.Id == beerToUpdate.Id)?.Name.ShouldBe(beerToUpdate.Name);\n}\n\n[Fact]\npublic async Task DeleteBeer_WhenBeerExists_RemovesBeerFromDatabase()\n{\n    // Arrange\n    using var unitOfWork = UnitOfWork;\n    (await unitOfWork.BeerRepository.GetAllBeers())?.Count().ShouldBe(5);\n\n    // Act\n    var removeBeerCommand = await unitOfWork.BeerRepository.DeleteBeer(1);\n    var breweryOfRemovedBeer = await unitOfWork.BreweryRepository.GetBreweryById(1);\n    (await unitOfWork.BeerRepository.GetAllBeers())?.Count().ShouldBe(4);\n    unitOfWork.Commit();\n\n    // Assert\n    removeBeerCommand.ShouldNotBeNull();\n    removeBeerCommand.ShouldBe(1);\n    breweryOfRemovedBeer.ShouldNotBeNull();\n    breweryOfRemovedBeer.Beers.ShouldNotBeNull();\n    breweryOfRemovedBeer.Beers.ShouldNotBeEmpty();\n    breweryOfRemovedBeer.Beers.ShouldNotContain(b => b.Name == \"Hexagenia\");\n}\n```\n\nNotice that our tests are simple and clean, naively testing the happy paths for all three commands since, by design, our\npersistence layer has one job, and one job only: query and command the database. No (checked) exceptions are thrown in\nthis layer, so we don't need any assertion tests to failure cases, and since our validations/mappings will be done in\nthe core business logic layer (as they should be), we exclude tests of that nature as well. With our unit tests in\nplace, we're free to modify our logic within our persistence layer any way we see fit as a simple `dotnet test` will\ntell us if we've broken any existing functionality. Our brewery repository tests will be very similar to our beer\nrepository tests, so let's create a `BreweryRepositoryTest.cs` file within our unit test project with the following\ntests:\n\n### BreweryRepositoryTest.cs\n\n```csharp\nnamespace Dappery.Data.Tests\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Domain.Entities;\n    using Shouldly;\n    using Xunit;\n\n    public class BreweryRepositoryTest : TestFixture\n    {\n        [Fact]\n        public async Task GetAllBreweries_WhenInvokedAndBreweriesExist_ReturnsValidListOfBreweries()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n\n            // Act\n            var breweries = (await unitOfWork.BreweryRepository.GetAllBreweries()).ToList();\n            unitOfWork.Commit();\n\n            // Assert\n            breweries.ShouldNotBeNull();\n            breweries.ShouldNotBeEmpty();\n            breweries.Count.ShouldBe(2);\n            breweries.All(br => br.Address != null).ShouldBeTrue();\n            breweries.All(br => br.Beers != null).ShouldBeTrue();\n            breweries.All(br => br.Beers.Any()).ShouldBeTrue();\n            breweries.FirstOrDefault(br => br.Name == \"Fall River Brewery\")?.Beers\n                .ShouldContain(b => b.Name == \"Hexagenia\");\n            breweries.FirstOrDefault(br => br.Name == \"Fall River Brewery\")?.Beers\n                .ShouldContain(b => b.Name == \"Widowmaker\");\n            breweries.FirstOrDefault(br => br.Name == \"Fall River Brewery\")?.Beers\n                .ShouldContain(b => b.Name == \"Hooked\");\n            breweries.FirstOrDefault(br => br.Name == \"Sierra Nevada Brewing Company\")?.Beers\n                .ShouldContain(b => b.Name == \"Pale Ale\");\n            breweries.FirstOrDefault(br => br.Name == \"Sierra Nevada Brewing Company\")?.Beers\n                .ShouldContain(b => b.Name == \"Hazy Little Thing\");\n        }\n\n        [Fact]\n        public async Task GetAllBreweries_WhenInvokedAndNoBreweriesExist_ReturnsEmptyList()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            await unitOfWork.BreweryRepository.DeleteBrewery(1);\n            await unitOfWork.BreweryRepository.DeleteBrewery(2);\n\n            // Act\n            var breweries = (await unitOfWork.BreweryRepository.GetAllBreweries()).ToList();\n            unitOfWork.Commit();\n\n            // Assert\n            breweries.ShouldNotBeNull();\n            breweries.ShouldBeOfType<List<Brewery>>();\n            breweries.ShouldBeEmpty();\n        }\n\n        [Fact]\n        public async Task GetBreweryById_WhenInvokedAndBreweryExist_ReturnsValidBreweryWithBeersAndAddress()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n\n            // Act\n            var brewery = await unitOfWork.BreweryRepository.GetBreweryById(1);\n            unitOfWork.Commit();\n\n            // Assert\n            brewery.ShouldNotBeNull();\n            brewery.ShouldBeOfType<Brewery>();\n            brewery.Address.ShouldNotBeNull();\n            brewery.Beers.ShouldNotBeNull();\n            brewery.Beers.ShouldNotBeEmpty();\n            brewery.BeerCount.ShouldBe(3);\n            brewery.Beers.ShouldContain(b => b.Name == \"Hexagenia\");\n            brewery.Beers.ShouldContain(b => b.Name == \"Widowmaker\");\n            brewery.Beers.ShouldContain(b => b.Name == \"Hooked\");\n        }\n\n        [Fact]\n        public async Task GetBreweryById_WhenInvokedAndNoBreweryExist_ReturnsNull()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n\n            // Act\n            var brewery = await unitOfWork.BreweryRepository.GetBreweryById(11);\n            unitOfWork.Commit();\n\n            // Assert\n            brewery.ShouldBeNull();\n        }\n\n        [Fact]\n        public async Task CreateBrewery_WhenBreweryIsValid_ReturnsNewlyInsertedBrewery()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var breweryToInsert = new Brewery\n            {\n                Name = \"Bike Dog Brewing Company\",\n                Address = new Address\n                {\n                    StreetAddress = \"123 Sacramento St.\",\n                    City = \"Sacramento\",\n                    State = \"CA\",\n                    ZipCode = \"95811\",\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow\n                },\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow\n            };\n\n            // Act\n            var breweryId = await unitOfWork.BreweryRepository.CreateBrewery(breweryToInsert);\n            var insertedBrewery = await unitOfWork.BreweryRepository.GetBreweryById(breweryId);\n            unitOfWork.Commit();\n\n            // Assert\n            insertedBrewery.ShouldNotBeNull();\n            insertedBrewery.ShouldBeOfType<Brewery>();\n            insertedBrewery.Address.ShouldNotBeNull();\n            insertedBrewery.Address.StreetAddress.ShouldBe(breweryToInsert.Address.StreetAddress);\n            insertedBrewery.Address.BreweryId.ShouldBe(3);\n            insertedBrewery.Beers.ShouldBeEmpty();\n        }\n\n        [Fact]\n        public async Task UpdateBrewery_WhenBreweryIsValidAndAddressIsNotUpdated_ReturnsUpdatedBrewery()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var breweryToUpdate = new Brewery\n            {\n                Id = 2,\n                Name = \"Sierra Nevada Brewing Company Of Brewing\",\n                Address = new Address\n                {\n                    StreetAddress = \"1075 E 20th St\",\n                    City = \"Chico\",\n                    State = \"CA\",\n                    ZipCode = \"95928\",\n                    UpdatedAt = DateTime.UtcNow,\n                    BreweryId = 2\n                },\n                UpdatedAt = DateTime.UtcNow\n            };\n\n            // Act\n            await unitOfWork.BreweryRepository.UpdateBrewery(breweryToUpdate);\n            var updatedBrewery = await unitOfWork.BreweryRepository.GetBreweryById(breweryToUpdate.Id);\n            unitOfWork.Commit();\n\n            // Assert\n            updatedBrewery.ShouldNotBeNull();\n            updatedBrewery.ShouldBeOfType<Brewery>();\n            updatedBrewery.Address.ShouldNotBeNull();\n            updatedBrewery.Address.StreetAddress.ShouldBe(breweryToUpdate.Address.StreetAddress);\n            updatedBrewery.Address.BreweryId.ShouldBe(2);\n            updatedBrewery.Beers.ShouldNotBeNull();\n            updatedBrewery.Beers.ShouldNotBeEmpty();\n        }\n\n        [Fact]\n        public async Task UpdateBrewery_WhenBreweryIsValidAndAddressIsUpdated_ReturnsUpdatedBrewery()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var breweryToUpdate = new Brewery\n            {\n                Id = 2,\n                Name = \"Sierra Nevada Brewing Company Of Brewing\",\n                Address = new Address\n                {\n                    Id = 2,\n                    StreetAddress = \"123 Happy St.\",\n                    City = \"Redding\",\n                    State = \"CA\",\n                    ZipCode = \"96002\",\n                    UpdatedAt = DateTime.UtcNow,\n                    BreweryId = 2\n                },\n                UpdatedAt = DateTime.UtcNow\n            };\n\n            // Act\n            await unitOfWork.BreweryRepository.UpdateBrewery(breweryToUpdate, true);\n            var updatedBrewery = await unitOfWork.BreweryRepository.GetBreweryById(breweryToUpdate.Id);\n            unitOfWork.Commit();\n\n            // Assert\n            updatedBrewery.ShouldNotBeNull();\n            updatedBrewery.ShouldBeOfType<Brewery>();\n            updatedBrewery.Address.ShouldNotBeNull();\n            updatedBrewery.Address.StreetAddress.ShouldBe(breweryToUpdate.Address.StreetAddress);\n            updatedBrewery.Address.ZipCode.ShouldBe(breweryToUpdate.Address.ZipCode);\n            updatedBrewery.Address.City.ShouldBe(breweryToUpdate.Address.City);\n            updatedBrewery.Address.BreweryId.ShouldBe(2);\n            updatedBrewery.Beers.ShouldNotBeNull();\n            updatedBrewery.Beers.ShouldNotBeEmpty();\n        }\n\n        [Fact]\n        public async Task DeleteBrewery_WhenBreweryExists_RemovesBreweryAndAllAssociatedBeersAndAddress()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            (await unitOfWork.BreweryRepository.GetAllBreweries())?.Count().ShouldBe(2);\n            (await unitOfWork.BeerRepository.GetAllBeers())?.Count().ShouldBe(5);\n\n\n            // Act\n            var removedBrewery = await unitOfWork.BreweryRepository.DeleteBrewery(1);\n            var breweries = (await unitOfWork.BreweryRepository.GetAllBreweries()).ToList();\n            (await unitOfWork.BeerRepository.GetAllBeers())?.Count().ShouldBe(2);\n            unitOfWork.Commit();\n\n            // Assert\n            removedBrewery.ShouldNotBeNull();\n            removedBrewery.ShouldBe(1);\n            breweries.ShouldNotBeNull();\n            breweries.Count.ShouldBe(1);\n            breweries.ShouldNotContain(br => br.Name == \"Fall River Brewery\");\n        }\n    }\n}\n```\n\nAgain, pretty similar to the tests within our beer repository file. We see a few scenarios testing our retrieval\nmethods, and one test each for our commands to create, update, and delete breweries that also exercise the connection\nbetween breweries and beers. Toss in a few nullable `?` operators to make the compiler happy, and we've got a working\nunit test project. Let's run one final `dotnet test` to make sure our tests look good so far now that we've covered all\nof our operations in either repository:\n\n```\nTest run for /path/to/Dappery/tests/Dappery.Data.Tests/bin/Debug/netcoreapp3.0/Dappery.Data.Tests.dll(.NETCoreApp,Version=v3.0)\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nStarting test execution, please wait...\n\nA total of 1 test files matched the specified pattern.\n\nTest Run Successful.\nTotal tests: 15\n     Passed: 15\n Total time: 1.8437 Seconds\n```\n\nMusic to a developer's ears: 15 tests ran, 15 passed. While it is in fact possible to swap out our in-memory SQLite\ndatabase for disk-based SQL Server, or Postgres, I prefer to use the mock in-memory versions simply because the database\ncontext is refreshed easily for us between test runs and ready to go for any need we may be using it for. As a\ndisclaimer, we _will_ be writing more unit tests for our project, both at the unit and functional level, but I'll allude\nto each test project within the section during that\ntime. [Here's](https://github.com/JoeyMckenzie/Dappery/tree/master/tests/Dappery.Data.Tests) the code we've written so\nfar for our persistence layer. Let's go ahead and leave things here now, and head on to the meat and potatoes of the\nproject: the core business layer!\n",
      "html": "<p>Two layers down, two to go. While we've made some great progress in\nour <a href=\"/images/net-core-dapper-and-crud-buzzword-bingo-part-2/\">last post</a>, I wanted to carve out at least one section in\nour series discussing testing our application. So far, we've built our domain and persistence layers, but we have yet to\nactually implement any transactional processes that require the higher up layers that will run the code we've written so\nfar to confirm its correctness. Rather than wait until we've built out our API layer to begin testing our implementation\nof the data layer (that would be more integration testing, one could argue), a better solution would be to take some\ntime to write some simple and quick unit tests around our persistence layer. With our data layer fully unit tested, we\nwon't have to wait to have an API to interact with via Postman, or some other application testing tool, to ensure he\ncode we have so far is giving us the result sets we expect. With our code unit tested in this fashion, we can use said\ntests as contracts for our expectation of each operation within our repositories, and grant ourself the ability to\nsafely refactor without fear of unknowingly breaking the application (at least within the persistence layer).</p>\n<p>Feel free to checkout the code in this\npost <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/master/tests/Dappery.Data.Tests\">here</a>. Before we jump into writing\nthe unit tests, let's discuss the tools, approach, and mindset we'll use for writing our tests in each layer of our\napplication (excluding our domain layer, as there is really not much logic there by design):</p>\n<ul>\n<li>Within each layer, we'll use a combination of <a href=\"https://xunit.net/\">xUnit</a>\nand <a href=\"https://github.com/shouldly/shouldly\">Shouldly</a>, my preferred unit test and assertion frameworks, respectively</li>\n<li>In our <code>Dappery.Data</code> project, we'll write units tests around each operation in our <code>BeerRepository</code>\nand <code>BreweryRepository</code> classes, utilizing the seeded database we setup for our in-memory SQLite database provider in\nour <code>UnitOfWork</code> class</li>\n<li>In our <code>Dappery.Core</code> project, which contains all of our business and cross-cutting concern logic, we'll again use\nxUnit and Shouldly, with unit tests surrounding each query/command action that we will be sending to our MediatR\nrequest factory to create the corresponding handlers, as well as verifying proper mappings and responses in each\nscenario</li>\n<li>In our <code>Dappery.Api</code> project, we'll write a suite of integration tests that will act as our end-to-end spec,\neffectively testing all of our request transactions from API interface to database interaction, and everything\ninbetween (creating a <em>use case</em> for our application)</li>\n</ul>\n<h3>Testing our Persistence Layer</h3>\n<p>Before we jump into writing our unit tests for our <code>Dappery.Data</code> project, we'll setup just a bit of test infrastructure\ncode that will assist us with creating an in-memory SQLite database to use within the scope of each test and setup our\ndependencies that our repositories will need. Some of you might be asking the question, however, why use an in-memory\ndatabase to test, and not the actual database our application will be using? Without launching into a diatribe about\nwhich method is best for our application, let me start by saying that <em>either</em> approach is viable; we just so happen to\nbe using the in-memory database for ease of testing and project bootstrapping. There are perfectly valid reasons for\nusing both approaches, for example:</p>\n<ul>\n<li>Within an enterprise environment, one of your team's APIs may contain one, or more, dependencies on another team's API\nand the persisted data it utilizes, which is good fit for testing against a live non-production (production in the\ncase of live smoke testing) database consumed by all teams</li>\n<li>Utilizing a common datastore between applications can, however, create a brittle dependency on the physical <em>data</em> you\nare asserting against - should someone remove an expected record from the database that your dependent API returns,\nour tests will break (if we are not mocking the API calls)</li>\n<li>In-memory test databases are great for internal application request transactions and execution paths that have little\nto no external API dependency - our data can be seeded, manipulated, and scrubbed/removed inbetween tests without fear\nof another manager yelling at us for deleting test data</li>\n<li>Although, with the introduction of multiple API dependencies, mocking entire databases and tables from dependent APIs\ncan quickly become unwieldy and introduce complexity in the form of data management that may not be particularly your\nAPI's domain concern</li>\n</ul>\n<p>So, what's the answer to our self imposed rhetorical question about which method to use? A good ole fashioned, <strong>it\ndepends</strong>. For our use case, we don't have any external APIs that we rely on and no data dependency that is out of our\ndomain, so we'll roll our own in-memory database that will be seeded, modified, and torn down in between each test to\nensure a fresh test fixture. Since we'll be using xUnit, we can leverage the testing library's disposable interfaces,\nshared contexts, and dependency injection to write our unit test in a clean, simple fashion. Now, since this is not\n<em>really</em> a detailed how-to article with xUnit, I'll quickly gloss over some of our infrastructure code that will form\nthe basis of each unit test class that we'll write, utilizing the disposable paradigm xUnit encourages us to use, and\nthen we'll jump into each test by repository and action.</p>\n<p>For our unit tests, we'll be heavily relying on xUnit's concept\nof <a href=\"https://xunit.net/docs/shared-context\">collection fixtures</a>. From the xUnit documentation for collection fixtures:</p>\n<blockquote>\n<p>When to use: when you want to create a single test context and share it among tests in several test classes, and have\nit cleaned up after all the tests in the test classes have finished.</p>\n</blockquote>\n<p>In essence, an xUnit collection fixture allows us to share objects, which our case is the in-memory database, between\nunit test classes. While our MediatR request handlers will only have a single Unit of Work dependency, collection\nfixures really shine when we're testing classes with several dependencies that we might want to spread across multiple\nclass files to keep our test domains of a single responsibility. I like to think of a collection fixture as the unit\ntest bootstrapping file, similar to a <code>Startup.cs</code> file in an ASP.NET Core web project. In our collection fixture, we'll\nbootstrap our in-memory database with seeded data and supply implementations for our Unit of Work and repository\nclasses. Since talk is cheap, let's go ahead and start setting things up by creating a unit test project for\nour <code>Dappery.Data</code> project within our <code>tests</code> folder:</p>\n<pre><code>~/Dappery/tests$ dotnet new xunit -n Dappery.Data.Tests\n~/Dappery/tests$ dotnet sln ../Dappery.sln add tests/Dappery.Data.Tests/Dappery.Data.Tests.csproj\n</code></pre>\n<p>Again, I'm one of those weirdos that prefers the command line, so feel free to add the project via your IDE if you want.\nNext, we'll reference our <code>Dappery.Data</code> project in our new test project, which just boils down to adding the package\nreference in our <code>Dappery.Data.Tests.csproj</code> file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"xml\" data-theme=\"vitesse-dark\"><code data-language=\"xml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">ItemGroup</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">ProjectReference</span><span style=\"color:#BD976A\"> Include</span><span style=\"color:#DBD7CAEE\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">..\\..\\src\\Dappery.Core\\Dappery.Core.csproj</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">/></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">ProjectReference</span><span style=\"color:#BD976A\"> Include</span><span style=\"color:#DBD7CAEE\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">..\\..\\src\\Dappery.Data\\Dappery.Data.csproj</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">/></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">ItemGroup</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>Notice we've also referenced our <code>Dappery.Core</code> project, which we'll see later that we'll require this dependency to\naccess our <code>IUnitOfWork</code> and repository interfaces. Let's go ahead and add a <code>DataCollectionFixture.cs</code> class within\nour <code>tests/Dappery.Data.Tests</code> project that will serve as our central collection fixture for our persistence tests.</p>\n<h3>DataCollectionFixture.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tests</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Xunit</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    [</span><span style=\"color:#5DA994\">CollectionDefinition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">DataCollectionFixture</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DataCollectionFixture</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> ICollectionFixture</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TestFixture</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing special, mostly just boilerplate code that tells xUnit how to define our collection fixture, which we'll\nimplement with a <code>TestFixture.cs</code> file in the same directory:</p>\n<h3>TestFixture.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tests</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TestFixture</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IDisposable</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#80A665\"> TestFixture</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            UnitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> UnitOfWork</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">null</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> UnitOfWork</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            GC</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">SuppressFinalize</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">bool</span><span style=\"color:#80A665\"> disposing</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">disposing</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                UnitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispose</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Again, nothing too complicated here. We simply define our <code>TestFixture</code> which all unit tests will use as a base, and\nnote that this class inherits from the <code>IDisposable</code> interface - this is where the xUnit magic happens. With this\ninheritance, our <code>TestFixture</code> class will be disposed of inbetween unit test runs, tearing down our database (\nbootstrapped through our <code>UnitOfWork</code>), and ensuring we have a fresh test fixture clean from persisted changes made in\nprevious tests. We define a read-only <code>UnitOfWork</code> property that each of our inheritors will be able to access, and\nfinish off with a simple resource clean up disposable implementation that will be utilized by xUnit when it disposes of\nour <code>TestFixture</code> between test runs. Notice that we instantiate our <code>UnitOfWork</code> using the implementation defined in\nour <code>Dappery.Data</code> project, which we setup to accept a nullable <code>string?</code> value that, when <code>null</code>, initializes a seeded\nin-memory SQLite database for us that we'll assert against during our unit tests.</p>\n<p>With our initial infrastructure out of the way, let's go ahead and create a <code>BeerRepositoryTest.cs</code> file and write our\nfirst test case:</p>\n<h3>BeerRepositoryTest.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tests</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Shouldly</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Xunit</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BeerRepositoryTest</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> TestFixture</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetAllBeers_WhenInvokedAndBeersExist_ReturnsValidListOfBeers</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> beers</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Ipa</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Widowmaker</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Widowmaker</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">DoubleIpa</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hooked</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hooked</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Lager</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Pale Ale</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Pale Ale</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">PaleAle</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hazy Little Thing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hazy Little Thing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">NewEnglandIpa</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Alright, let's breakdown this test:</p>\n<ul>\n<li>We're using the AAA pattern - Arrange, Act, Assert - which you'll see me make extensive use of throughout our projects\nas it encourages us to keep out unit tests <em>simple</em> and not too complex (as they should be, massive and complicated\nunit test cases are a code smell)</li>\n<li>We're using the new <code>using</code> syntax for disposable classes that shipped with C# 8.0 to grab a reference to\nour <code>UnitOfWork</code> and ensure its resources it creates are properly disposed of once our test is finished - this\nbehavior mimics how we'll inject a scoped instance in our API layer using built-in ASP.NET Core dependency injection</li>\n<li>We commit our transactions within our unit of work, as our UoW begins a transaction when initialized - while not\nentirely necessary for our in-memory unit test database, it's always a good practice to end our transactions even the\ncase of read-only queries as to not keep lingering connections that may come back to bite us</li>\n<li>We dispose of <em>both</em> our <code>UnitOfWork</code>, once the reference falls out of scope, and the collection test fixture; while\nnot entirely necessary, it's a good practice to get into (disposing resources at each level)</li>\n<li>We make use of <code>async</code>/<code>await</code> to allow for blocking until we receive a response from our in-memory database before\ncontinuing onto our assertions</li>\n<li>We use the <code>Shouldly</code> object extension methods to assert the various properties, types, and collection objects we're\nexpecting in the response</li>\n<li><code>Shouldly</code> natively supports use of LINQ and expression predicates, making assertions fluid and easy to read - one of\nthe many reason I <em>love</em> the library</li>\n</ul>\n<p>If we run this unit test, using either the Visual Studio/Rider test runner, or running <code>dotnet test</code>, we'll see that\nthis test passes. If we step through this code via a debug session, we can see exactly what is returned within our\nrepository, each query executing and what its result yields, etc. I'll leave that as an exercise for the reader, but\nalways worth while to validate that our unit tests are truly yielding the results we expect. Let's add an empty test\nfor <code>GetAllBeers()</code> and a couple of tests for our <code>GetBeerById()</code> repository methods:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// ...previous tests</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetAllBeers_WhenNoBeersExist_ReturnsEmptyListOfBeers</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange, remove all the beers from our database</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">4</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beers</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assert, validate a few properties</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Ipa</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetBeerById_WhenInvokedAndBeerDoesNotExist_ReturnsNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">10</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assert, validate a few properties</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too complex here, just some simple positive/negative test cases for finding a beer given an ID from the caller.\nOne thing to note is in our <code>GetAllBeers_WhenNoBeersExist_ReturnsEmptyListOfBeers</code> method, we use the <code>unitOfWork</code> to\nremove all the beers in our test database (probably not the most efficient way, quick and dirty for now), and assert\nagainst the empty list that gets returned. While this might not seem too interesting, the beauty is that xUnit,\nalongside the infrastructure code we setup, will clean up this modified database that we've 'dirtied' the context of,\nand create an entirely fresh database on the next run, disregarding any transactional changes we made in a previous\ntest. We simply retrieve the beer within our test database and assert the properties <code>Should</code> be what we expect. One of\nthe reasons I prefer using Shouldly is the response messages we receive when a test fails. Let's take a look at an\nexample be changing our assertion of our <code>GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer()</code> test method above to\nexpect an incorrect beer name:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assert, validate a few properties</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">A beer that doesn't exist</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span><span style=\"color:#758575DD\"> // This beer was NOT seeded in our database</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Ipa</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>If we run this run this test, we see the following in the console from Shouldly:</p>\n<pre><code>Dappery.Data.Tests.BeerRepositoryTest.GetBeerById_WhenInvokedAndBeerExists_ReturnsValidBeer:\n    Outcome: Failed\n    Error Message:\n    Shouldly.ShouldAssertException : beer.Name\n    should be\n\"A beer that doesn't exist\"\n    but was\n\"Hexagenia\"\n    difference\nDifference     |  |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n               | \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/\nIndex          | 0    1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   ...\nExpected Value | A    \\s   b    e    e    r    \\s   t    h    a    t    \\s   d    o    e    s    n    '    t    \\s   e    ...\nActual Value   | H    e    x    a    g    e    n    i    a                                                                ...\nExpected Code  | 65   32   98   101  101  114  32   116  104  97   116  32   100  111  101  115  110  39   116  32   101  ...\nActual Code    | 72   101  120  97   103  101  110  105  97                                                               ...\n\nDifference     |       |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |\n               |      \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/  \\|/\nIndex          | ...  4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24\nExpected Value | ...  e    r    \\s   t    h    a    t    \\s   d    o    e    s    n    '    t    \\s   e    x    i    s    t\nActual Value   | ...  g    e    n    i    a\nExpected Code  | ...  101  114  32   116  104  97   116  32   100  111  101  115  110  39   116  32   101  120  105  115  116\nActual Code    | ...  103  101  110  105  97\n</code></pre>\n<p>Of the many reasons I love using Shouldly in all my unit test projects, this is one of my favorites. Shouldly points out\nexactly what it expected, what it received, and the index differences in the string. Now, this isn't an infomercial on\ntrying to sell you on using Shouldly, but informative failure messages like this can help you quickly identify\ninconsistencies in your code and fix things at a faster rate than traditional assertion frameworks. Let's finish out\nour <code>BeerRepositoryTest.cs</code> file by adding the unit tests that will exercise our database commands for our create,\nupdate, and delete operations:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// ...previous query tests</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> CreateBeer_WhenBeerIsValid_ReturnsNewlyInsertedBeer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beerToInsert</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Lazy Hazy</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        CreatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BeerStyle</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">NewEnglandIpa</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beerId</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerToInsert</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> insertedBeer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Count</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">4</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> insertedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerToInsert</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> UpdateBeer_WhenBeerIsValid_ReturnsUpdateBeer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> beerToUpdate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Colossus Imperial Stout</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BeerStyle</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Stout</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UpdateBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerToUpdate</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> updatedBeer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBeerById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Count</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> beerToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updatedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> beerToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> DeleteBeer_WhenBeerExists_RemovesBeerFromDatabase</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">())</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> removeBeerCommand</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBeer</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    var</span><span style=\"color:#80A665\"> breweryOfRemovedBeer</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">())</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">4</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    removeBeerCommand</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    removeBeerCommand</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    breweryOfRemovedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    breweryOfRemovedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    breweryOfRemovedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    breweryOfRemovedBeer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Notice that our tests are simple and clean, naively testing the happy paths for all three commands since, by design, our\npersistence layer has one job, and one job only: query and command the database. No (checked) exceptions are thrown in\nthis layer, so we don't need any assertion tests to failure cases, and since our validations/mappings will be done in\nthe core business logic layer (as they should be), we exclude tests of that nature as well. With our unit tests in\nplace, we're free to modify our logic within our persistence layer any way we see fit as a simple <code>dotnet test</code> will\ntell us if we've broken any existing functionality. Our brewery repository tests will be very similar to our beer\nrepository tests, so let's create a <code>BreweryRepositoryTest.cs</code> file within our unit test project with the following\ntests:</p>\n<h3>BreweryRepositoryTest.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Data</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tests</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Shouldly</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Xunit</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BreweryRepositoryTest</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> TestFixture</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetAllBreweries_WhenInvokedAndBreweriesExist_ReturnsValidListOfBreweries</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweries</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBreweries</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Count</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">All</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Any</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ShouldBeTrue</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Widowmaker</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hooked</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sierra Nevada Brewing Company</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Pale Ale</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FirstOrDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sierra Nevada Brewing Company</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hazy Little Thing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetAllBreweries_WhenInvokedAndNoBreweriesExist_ReturnsEmptyList</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweries</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBreweries</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetBreweryById_WhenInvokedAndBreweryExist_ReturnsValidBreweryWithBeersAndAddress</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerCount</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hexagenia</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Widowmaker</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hooked</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GetBreweryById_WhenInvokedAndNoBreweryExist_ReturnsNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">11</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> CreateBrewery_WhenBreweryIsValid_ReturnsNewlyInsertedBrewery</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToInsert</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Bike Dog Brewing Company</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">123 Sacramento St.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    City</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sacramento</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    State</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">95811</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    CreatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                CreatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToInsert</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> insertedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToInsert</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> UpdateBrewery_WhenBreweryIsValidAndAddressIsNotUpdated_ReturnsUpdatedBrewery</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToUpdate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sierra Nevada Brewing Company Of Brewing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">1075 E 20th St</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    City</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Chico</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    State</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">95928</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 2</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UpdateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updatedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> UpdateBrewery_WhenBreweryIsValidAndAddressIsUpdated_ReturnsUpdatedBrewery</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToUpdate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sierra Nevada Brewing Company Of Brewing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">123 Happy St.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    City</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    State</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">96002</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 2</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UpdateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> true</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updatedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> DeleteBrewery_WhenBreweryExists_RemovesBreweryAndAllAssociatedBeersAndAddress</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBreweries</span><span style=\"color:#666666\">())</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">())</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> removedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweries</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBreweries</span><span style=\"color:#666666\">()).</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#CB7676\">await</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBeers</span><span style=\"color:#666666\">())</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            removedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            removedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Count</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotContain</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">br</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> br</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Again, pretty similar to the tests within our beer repository file. We see a few scenarios testing our retrieval\nmethods, and one test each for our commands to create, update, and delete breweries that also exercise the connection\nbetween breweries and beers. Toss in a few nullable <code>?</code> operators to make the compiler happy, and we've got a working\nunit test project. Let's run one final <code>dotnet test</code> to make sure our tests look good so far now that we've covered all\nof our operations in either repository:</p>\n<pre><code>Test run for /path/to/Dappery/tests/Dappery.Data.Tests/bin/Debug/netcoreapp3.0/Dappery.Data.Tests.dll(.NETCoreApp,Version=v3.0)\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nStarting test execution, please wait...\n\nA total of 1 test files matched the specified pattern.\n\nTest Run Successful.\nTotal tests: 15\n     Passed: 15\n Total time: 1.8437 Seconds\n</code></pre>\n<p>Music to a developer's ears: 15 tests ran, 15 passed. While it is in fact possible to swap out our in-memory SQLite\ndatabase for disk-based SQL Server, or Postgres, I prefer to use the mock in-memory versions simply because the database\ncontext is refreshed easily for us between test runs and ready to go for any need we may be using it for. As a\ndisclaimer, we <em>will</em> be writing more unit tests for our project, both at the unit and functional level, but I'll allude\nto each test project within the section during that\ntime. <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/master/tests/Dappery.Data.Tests\">Here's</a> the code we've written so\nfar for our persistence layer. Let's go ahead and leave things here now, and head on to the meat and potatoes of the\nproject: the core business layer!</p>"
    },
    "_id": "2019/net-core-dapper-and-crud-buzzword-bingo-part-3.md",
    "_raw": {
      "sourceFilePath": "2019/net-core-dapper-and-crud-buzzword-bingo-part-3.md",
      "sourceFileName": "net-core-dapper-and-crud-buzzword-bingo-part-3.md",
      "sourceFileDir": "2019",
      "contentType": "markdown",
      "flattenedPath": "2019/net-core-dapper-and-crud-buzzword-bingo-part-3"
    },
    "type": "Post",
    "url": "/blog/2019/net-core-dapper-and-crud-buzzword-bingo-part-3"
  },
  {
    "title": "Clean architecture, Dapper, MediatR, and buzzword bingo (part 1)",
    "description": "Build an API using Dapper, MediatR, and clean architecture principles with the help of beer.",
    "pubDate": "2019-10-04T07:00:00.000Z",
    "category": ".NET",
    "heroImage": "/images/net-core-dapper-and-crud-series/part-1/beer-background-dappery.jpg",
    "draft": false,
    "keywords": [
      ".net",
      "c#",
      "dapper",
      "mediatr"
    ],
    "body": {
      "raw": "\nWelcome to buzzword bingo, a.k.a. how many resume keywords can we fit in one blog post before someone stops reading. If\nyou're like me, you've comfortably relied on Entity Framework Core as your go-to ORM for .NET Core projects. Rightfully\nso, EF Core serves its purpose, and does its job _very_ well. Primarily as a Java developer, I often daydream about\nhaving the ease, convenience, and configuration of EF Core in place of JPA (seriously, toss a few HQL queries in your\ncode base and then tell me how much fun you're having).\n\nI love EF Core for its tooling, ease of use, and deep integration with .NET Core. However, it's always nice to take a\nstep back from the tools are seemingly default to and explore new horizons. It just so happens that the folks at\nStackOverflow, the site primarily responsible for my paychecks, developed another useful micro-ORM that we can use - and\nboy, does that baby _purr_. Checkout Dapper's [GitHub](https://github.com/StackExchange/Dapper) page, in particular the\nbenchmarks recoreded by the team. Dapper not only rivals the use case of ORMs like EF Core and NHibernate, it damn near\nbeats them out of the water!\n\nIn this series, we'll explore building a simple CRUD web application built with ASP.NET Core, Dapper, and MediatR (to\nspice things up a bit). Before we get started, let's discuss the architecture of exactly what we'll be building. Far too\noften, I read how-to articles of X technology and how to accomplish Y task. For a simple CRUD application like we'll be\nbuilding, and probably for most modern business software, shoving everything into one project solution will suffice.\n\nWe'll be building a simple CRUD API for our fictional brewery management software, Dappery. I always try to encourage\nclean architecture, so we'll be doing things a little differently. Let's go over our project structure:\n\n1. First, we'll implement a simple domain layer containing our persisted entities, data transfer objects, view models\n   and resources, and most of our core domain business logic.\n2. Once our domain layer is in place, we'll slap a data access layer on top of it. This layer's sole responsibility is\n   database interaction - no more, no less.\n3. Following the data layer, we'll add our core business layer project that acts as the middle-man between our web layer\n   and our data access layer. We'll use MediatR and FluentValidator to do the heavy lifting in this layer.\n4. Once our core business logic layer is in place, we'll top things off with our API layer for the world to interact\n   with. This layer will contain our ASP.NET Core project, with things like thin controllers, NO business logic (this is\n   important, our API is the doorway to our application), and a simple Swagger doc for consumers to reference.\n\nIn this post, we'll get started with our domain layer. I should mention that we'll also be using .NET Core 3.0 with its\nnew bells and whistles. Let's fire up a terminal (apologies, I'll be working exclusively on a Mac), and get started. If\nyou're using Visual Studio, go ahead and initialize a new solution. In the terminal, let's start a new solution:\n\n```shell\n~$ mkdir Dappery && cd Dappery\n~/Dappery$ dotnet new sln\n```\n\nCaveat: it's totally okay to fire up your favorite IDE (I'll be using Rider) and doing all this setup through the GUI.\nThis is just my preference for project setup. Next, let's go ahead and add some `src` and `tests` directories, and spin\nup our domain layer project within the `src` directory:\n\n```shell\n~/Dappery$ mkdir src && mkdir tests\n~/Dappery$ cd src && dotnet new classlib -n Dappery.Domain\n```\n\nThings to note are the fact that this is a `classlib`, which means this is a `netstandard2.0` library that we can reuse\nin any .NET project that leverages the standard. Now that we've got our project skeleton, let's go ahead and link it to\nour solution:\n\n```shell\n~/Dappery/src$ dotnet sln ../Dappery.sln add Dappery.Domain/Dappery.Domain.csproj\nProject `src/Dappery.Domain/Dappery.Domain.csproj` added to the solution.\n```\n\nWith our solution linked to our domain project, let's go ahead and fire up our IDE with the project. As I mentioned\npreviously, I'll be using Rider. If your IDE hasn't already, I'd suggest adding the `src` and `tests` folders as project\nfolders, just to keep everything tidy. With our domain project skeleton in place, let's talk about what exactly we'll be\nputting in this layer.\n\n### The Domain Layer\n\nThere's a popular architectural design pattern in software engineering\ncalled [Domain Driven Design](https://en.wikipedia.org/wiki/Domain-driven_design), or DDD. To summarize, DDD takes the\napproach that your application should be centered around your core domain model and business logic. In layman's terms,\nwhat this means for us is that our domain layer project will house our beer and brewery entities and any special\nbusiness logic that pertains to these entities. This layer should not have ANY dependency on other layers; all this\nlayer knows, and cares about, is its entities and models. We'll also put our media types, or data transfer objects, in\nthis project as well to act as the middleman when moving data between layers. Let's create an `Entities` folder within\nour `Dapper.Domain` project. We'll place two POCOs (plain old C# classes) that will act as our persisted database\nentities, `Beer.cs` and `Brewery.cs`. To keep our code [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself),\nwe'll derive these classes from a `TimeStampedEntity` that will contain some common properies `Beer` and `Brewery` will\nneed.\n\n#### TimeStampedEntity.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    using System;\n\n    public class TimeStampedEntity\n    {\n        public int Id { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime UpdatedAt { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### Beer.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    public class Beer : TimeStampedEntity\n    {\n        public string Name { get; set; }\n\n        public BeerStyle BeerStyle { get; set; }\n\n        public Brewery Brewery { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### Brewery.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    using System.Collections.Generic;\n\n    public class Brewery : TimeStampedEntity\n    {\n        public Brewery()\n        {\n            Beers = new List<Beer>();\n        }\n\n        public string Name { get; set; }\n\n        public Address Address { get; set; }\n\n        public ICollection<Beer> Beers { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nYou'll notice I've put my `using` directives within my namespaces. This is purely preference, and has very little\ndifference than if I were to put them outside my\nnamespaces. [Here's](https://stackoverflow.com/questions/125319/should-using-directives-be-inside-or-outside-the-namespace)\na great discussion about the difference, for the curious. Also notice I've also created an `Address` class associated to\na `Brewery` and a `BeerStyle` enumeration so we can strongly type our families of beer. We've also initialized\nour `Beers` list within our `Brewery` model - this is a great pattern to get into when working within the domain layer,\nas consumers of our API should not have to worry about `NullReferenceExceptions` when interrogating logic based on a\ncollection from their API provider.\n\n#### Address.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    public class Address : TimeStampedEntity\n    {\n        public string StreetAddress { get; set; }\n\n        public string City { get; set; }\n\n        public string State { get; set; }\n\n        public int ZipCode { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### BeerStyle.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    public enum BeerStyle\n    {\n        Lager,\n        Pilsner,\n        Amber,\n        PaleAle,\n        Ipa,\n        DoubleIpa,\n        TripleIpa,\n        Stout\n    }\n}\n```\n\n&nbsp;\n\nFor the scope of this series, we'll keep things simple and stick with these properties for our entities. Our project\nshould look a little something like this:\n\n![Project](/images/net-core-dapper-and-crud-series/part-1/project-setup.png)\n\nWith our entities in place, let's go ahead add our DTOs. Before we do that, let's talk about what exactly we should be\n_putting_ in these DTOs.\n\n#### DTOs\n\nFor our implementation, we want our DTOs to reflect actions we can perform on our application. This a CRUD application,\nbut we're also going to\nutilize [Command and Query Responsibility Segregation](https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs),\nor CQRS, to distinguish actions we'll be performing on our database - read only queries, and write commands. For our\nsimple application, it's tempting to have all-purpose DTOs for each CRUD operation. While this is a viable solution, I\nwould _highly_ recommend against it. As our application grows, so do our needs for more complex queries and actions we\ncan perform on our database. Rather than trying to shove all that container logic into a few classes, we'll be\nseparating our DTOs by media type and action. Let's go ahead and add a `Dtos` folder, and within that folder, we'll add\nseparate folders for our different domains, `Beer`, and `Brewery`. and add our first create DTOs for a beer and a\nbrewery.\n\n#### Brewery/CreateBreweryDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Brewery\n{\n    public class CreateBreweryDto\n    {\n        public string Name { get; set; }\n\n        public AddressDto Address { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### Beer/CreateBeerDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Beer\n{\n    using Entities;\n\n    public class CreateBeerDto\n    {\n        public string Name { get; set; }\n\n        public BeerStyle Style { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nNotice I've also added an `AddressDto` as an acceptable media type to the `CreateBreweryDto` class, so let's define that\nas well at the root of the `Dtos` folder since this will be an all-purpose DTO since its properties do not change as we\ndo not directly CRUD with `Address` class.\n\n#### AddressDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos\n{\n    public class AddressDto\n    {\n        public string StreetAddress { get; set; }\n\n        public string City { get; set; }\n\n        public string State { get; set; }\n\n        public int ZipCode { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nIn our `CreateBeerDto` class, we're only exposing the name and beer style associated to a beer - why not a brewery? This\nis where we'll define our first business rule:\n\n#### Business Rule 1: A beer cannot be created with an associated brewery\n\nWhat does this mean for our users? In order to add a beer to our database through our API, we'll add an endpoint\nassociated with our breweries that will expose an add beer operation. This will simplify our API, as we will not need to\ndo any association at creation time to the brewery for the beer to be added - we'll know exactly what brewery to add it\nto!\n\nFor our `CreateBreweryDto` class, we're exposing the name and the address of the brewery, NOT the list of beers. This\nbrings us to our second business rule:\n\n#### Business Rule 2: A brewery cannot be created with beers on a request\n\nWhile this may seem arbitrary, this rule will simplify our API, forcing users to first create a brewery, and\nsubsequentially add the beers to that brewery at their leisure. We'll see later why we're implementing this design, both\nfor simplicity for the developer and ease of use for our users. This brings up a good point - metadata. Let's add some\nproperies to our `Brewery.cs` entity to easily extract the number of beers a brewery has to offer. Let's add\na `BeerCount` property:\n\n#### Brewery.cs\n\n```csharp\nnamespace Dappery.Domain.Entities\n{\n    using System.Collections.Generic;\n\n    public class Brewery : TimeStampedEntity\n    {\n        public string Name { get; set; }\n\n        public Address Address { get; set; }\n\n        public ICollection<Beer> Beers { get; set; }\n\n        public int BeerCount => Beers.Count;\n    }\n}\n```\n\n&nbsp;\n\nWe've added a `BeerCount` delegate that will simply give us a count of all beers related to that entity whenever we\nquery for a specific brewery. With our create DTOs out of the way, let's go ahead and implement the rest of our CRUD\nDTOs. For our reads, we'll create simple `BeerDto.cs` and `BreweryDto.cs` classes - no need to prefix these with an\noperation as they will more, or less, be our default DTO when moving between layers:\n\n#### BreweryDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Brewery\n{\n    using System.Collections.Generic;\n    using Entities;\n\n    public class BreweryDto\n    {\n        public int Id { get; set; }\n\n        public string Name { get; set; }\n\n        public AddressDto Address { get; set; }\n\n        public IEnumerable<Beer> Beers { get; set; }\n\n        public int BeerCount { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### BeerDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Beer\n{\n    using Brewery;\n    using Entities;\n\n    public class BeerDto\n    {\n        public int Id { get; set; }\n\n        public string Name { get; set; }\n\n        public BeerStyle Style { get; set; }\n\n        public BreweryDto Brewery { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nNothing special here, the only difference is we'll be pulling out the ID for each beer and brewery, respectively. Note,\nwe're using `IEnumerable<Beer>` as our iterative type on our beers because this is just an immutable list, whereas we\nused `ICollection<Beer>` in our entity due to the fact we will be modifying list over time.\n\nWith our reads out of the the way, let's go ahead and create `UpdateBeerDto.cs` and `UpdateBreweryDto.cs` classes:\n\n#### UpdateBeerDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Beer\n{\n    public class UpdateBeerDto\n    {\n        public int Id { get; set; }\n\n        public string Name { get; set; }\n\n        public AddressDto Address { get; set; }\n    }\n}\n```\n\n&nbsp;\n\n#### UpdateBreweryDto.cs\n\n```csharp\nnamespace Dappery.Domain.Dtos.Brewery\n{\n    using Entities;\n\n    public class UpdateBreweryDto\n    {\n        public int Id { get; set; }\n\n        public string Name { get; set; }\n\n        public AddressDto Type { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nAgain, nothing special here. We have an `Id` property on each DTO, as we'll need to know which beer, or brewery, to\nupdate for the user on the request, and we're only allowing a few properties to change on our entities. Luckily for us,\nfor our delete operation, we'll be relying on the user to pass in an ID associated with the beer, or brewery, and that's\nit. No need to include anything in the body, as long as we have the ID, we're good to. Let's take a minute to grab a\nbeer and take a look at where we're at so far. Our project structure should look more, or less, like this:\n\n![Project_thus_far](/images/net-core-dapper-and-crud-series/part-1/project-dtos-in-place.png)\n\nI promise we're almost done (sort of). That last knot for us to tie up is the media type we'll be presenting to our\nconsumer. To be quite honest, this implementation is _probably_ overkill for our use case, but a good exercise for us to\nbuild robust APIs. For our API, our entities and DTOs would suffice. However, in a real world enterprise setting, where\nour API interacts with tens of microservices all communicating with each other, a transfer data type that represents the\nmedia type and domain concern our API will provide to consumers is a good idea. Think of it as layers _within_ our\ndomain layer:\n\n-   Our entities represent the source of record stored within our database, that when extracted, are expected to modify\n    and persist their state\n-   Our DTOs act as containers to transport that persisted data between layers (e.g. the domain layer and the data layer,\n    and from the data layer to the API layer in the long run)\n-   Our API layer should **not** have any knowledge of our entities, as they contain audit properties (timestamps) and\n    relations to other entities that should only be interacted with at lower layers\n-   Our resource types will represent the models/media types we will provide to our consumers, as our DTOs are more, or\n    less, internal to our API\n\nWith the semantics out of the way, lets go ahead and create a `Media` folder and place a few resource types within that\nfolder:\n\n#### Resource.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    public class Resource<T>\n    {\n        public T Self { get; set; }\n    }\n}\n```\n\n&nbsp;\n\nOur general resource type that will serve as the template for all types our API will give to our consumers. As we build\nour API, we'll continue to add metadata for our consumers so that they can make decisions about our responses we give\nthem without having to inspect the data we _actually_ hand over. Next, let's create a `ResourceList.cs` class that will\nserve as an iterable collection we hand over to our callers:\n\n#### ResourceList.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    using System.Collections.Generic;\n    using System.Linq;\n\n    public class ResourceList<T>\n    {\n        public IEnumerable<T> Items { get; set; }\n\n        public int Count => Items.Count();\n    }\n}\n```\n\n&nbsp;\n\nWith a resource list in place, we have the building blocks to add our `Beer` and `Brewery` implementations of these\ngeneric types:\n\n#### BeerResource.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    using Dtos.Beer;\n\n    public class BeerResource : Resource<BeerDto>\n    {\n    }\n}\n```\n\n&nbsp;\n\n#### BreweryResource.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    using Dtos.Brewery;\n\n    public class BreweryResource : Resource<BreweryDto>\n    {\n    }\n}\n```\n\n&nbsp;\n\n#### BeerResourceList.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    using Dtos.Beer;\n\n    public class BeerResourceList : ResourceList<BeerDto>\n    {\n    }\n}\n```\n\n&nbsp;\n\n#### BreweryResourceList.cs\n\n```csharp\nnamespace Dappery.Domain.Media\n{\n    using Dtos.Brewery;\n\n    public class BreweryResourceList : ResourceList<BreweryDto>\n    {\n    }\n}\n```\n\n&nbsp;\n\nWhile these classes may be simple and quite unecessary for now, we now have the ability to extend these resource types\nbased on the model implmentation as we wish. Our `ResourceList` type has a few built in properties (`Items` and `Count`)\nfor our consumers to always expect on a list type response, for example. With everything all said and done, our project\nstructure should look like the following:\n\n![Domain_layer_finished](/images/net-core-dapper-and-crud-series/part-1/finished-domain-layer.png)\n\nFor those following along, [here's](https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-1-domain-layer) the\nrepository of what we've done so far.\n\nWe can see the light at the end of the tunnel! A few lingering questions remain though, in particular with our `tests`\ndirectory. We WILL be writing tests, but for our simple domain layer as of now, as there is really no logic in any of\nthe classes we've created so far, we're going to wait until we build the core functionality to start writing unit and\nintegration tests. For now, we'll stop here and continue with the meat and potatoes of our project in the next post in\nthe series, the data layer.\n\nCrack open a cold, you deserve it.\n",
      "html": "<p>Welcome to buzzword bingo, a.k.a. how many resume keywords can we fit in one blog post before someone stops reading. If\nyou're like me, you've comfortably relied on Entity Framework Core as your go-to ORM for .NET Core projects. Rightfully\nso, EF Core serves its purpose, and does its job <em>very</em> well. Primarily as a Java developer, I often daydream about\nhaving the ease, convenience, and configuration of EF Core in place of JPA (seriously, toss a few HQL queries in your\ncode base and then tell me how much fun you're having).</p>\n<p>I love EF Core for its tooling, ease of use, and deep integration with .NET Core. However, it's always nice to take a\nstep back from the tools are seemingly default to and explore new horizons. It just so happens that the folks at\nStackOverflow, the site primarily responsible for my paychecks, developed another useful micro-ORM that we can use - and\nboy, does that baby <em>purr</em>. Checkout Dapper's <a href=\"https://github.com/StackExchange/Dapper\">GitHub</a> page, in particular the\nbenchmarks recoreded by the team. Dapper not only rivals the use case of ORMs like EF Core and NHibernate, it damn near\nbeats them out of the water!</p>\n<p>In this series, we'll explore building a simple CRUD web application built with ASP.NET Core, Dapper, and MediatR (to\nspice things up a bit). Before we get started, let's discuss the architecture of exactly what we'll be building. Far too\noften, I read how-to articles of X technology and how to accomplish Y task. For a simple CRUD application like we'll be\nbuilding, and probably for most modern business software, shoving everything into one project solution will suffice.</p>\n<p>We'll be building a simple CRUD API for our fictional brewery management software, Dappery. I always try to encourage\nclean architecture, so we'll be doing things a little differently. Let's go over our project structure:</p>\n<ol>\n<li>First, we'll implement a simple domain layer containing our persisted entities, data transfer objects, view models\nand resources, and most of our core domain business logic.</li>\n<li>Once our domain layer is in place, we'll slap a data access layer on top of it. This layer's sole responsibility is\ndatabase interaction - no more, no less.</li>\n<li>Following the data layer, we'll add our core business layer project that acts as the middle-man between our web layer\nand our data access layer. We'll use MediatR and FluentValidator to do the heavy lifting in this layer.</li>\n<li>Once our core business logic layer is in place, we'll top things off with our API layer for the world to interact\nwith. This layer will contain our ASP.NET Core project, with things like thin controllers, NO business logic (this is\nimportant, our API is the doorway to our application), and a simple Swagger doc for consumers to reference.</li>\n</ol>\n<p>In this post, we'll get started with our domain layer. I should mention that we'll also be using .NET Core 3.0 with its\nnew bells and whistles. Let's fire up a terminal (apologies, I'll be working exclusively on a Mac), and get started. If\nyou're using Visual Studio, go ahead and initialize a new solution. In the terminal, let's start a new solution:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">~</span><span style=\"color:#DBD7CAEE\">$ mkdir Dappery </span><span style=\"color:#666666\">&#x26;&#x26;</span><span style=\"color:#B8A965\"> cd</span><span style=\"color:#C98A7D\"> Dappery</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">~</span><span style=\"color:#DBD7CAEE\">/Dappery$ dotnet new sln</span></span></code></pre></figure>\n<p>Caveat: it's totally okay to fire up your favorite IDE (I'll be using Rider) and doing all this setup through the GUI.\nThis is just my preference for project setup. Next, let's go ahead and add some <code>src</code> and <code>tests</code> directories, and spin\nup our domain layer project within the <code>src</code> directory:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">~</span><span style=\"color:#DBD7CAEE\">/Dappery$ mkdir src </span><span style=\"color:#666666\">&#x26;&#x26;</span><span style=\"color:#80A665\"> mkdir</span><span style=\"color:#C98A7D\"> tests</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">~</span><span style=\"color:#DBD7CAEE\">/Dappery$ cd src </span><span style=\"color:#666666\">&#x26;&#x26;</span><span style=\"color:#80A665\"> dotnet</span><span style=\"color:#C98A7D\"> new</span><span style=\"color:#C98A7D\"> classlib</span><span style=\"color:#C99076\"> -n</span><span style=\"color:#C98A7D\"> Dappery.Domain</span></span></code></pre></figure>\n<p>Things to note are the fact that this is a <code>classlib</code>, which means this is a <code>netstandard2.0</code> library that we can reuse\nin any .NET project that leverages the standard. Now that we've got our project skeleton, let's go ahead and link it to\nour solution:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">~</span><span style=\"color:#DBD7CAEE\">/Dappery/src$ dotnet sln ../Dappery.sln add Dappery.Domain/Dappery.Domain.csproj</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Project</span><span style=\"color:#666666\"> `</span><span style=\"color:#80A665\">src/Dappery.Domain/Dappery.Domain.csproj</span><span style=\"color:#666666\">`</span><span style=\"color:#80A665\"> added</span><span style=\"color:#C98A7D\"> to</span><span style=\"color:#C98A7D\"> the</span><span style=\"color:#C98A7D\"> solution.</span></span></code></pre></figure>\n<p>With our solution linked to our domain project, let's go ahead and fire up our IDE with the project. As I mentioned\npreviously, I'll be using Rider. If your IDE hasn't already, I'd suggest adding the <code>src</code> and <code>tests</code> folders as project\nfolders, just to keep everything tidy. With our domain project skeleton in place, let's talk about what exactly we'll be\nputting in this layer.</p>\n<h3>The Domain Layer</h3>\n<p>There's a popular architectural design pattern in software engineering\ncalled <a href=\"https://en.wikipedia.org/wiki/Domain-driven_design\">Domain Driven Design</a>, or DDD. To summarize, DDD takes the\napproach that your application should be centered around your core domain model and business logic. In layman's terms,\nwhat this means for us is that our domain layer project will house our beer and brewery entities and any special\nbusiness logic that pertains to these entities. This layer should not have ANY dependency on other layers; all this\nlayer knows, and cares about, is its entities and models. We'll also put our media types, or data transfer objects, in\nthis project as well to act as the middleman when moving data between layers. Let's create an <code>Entities</code> folder within\nour <code>Dapper.Domain</code> project. We'll place two POCOs (plain old C# classes) that will act as our persisted database\nentities, <code>Beer.cs</code> and <code>Brewery.cs</code>. To keep our code <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY</a>,\nwe'll derive these classes from a <code>TimeStampedEntity</code> that will contain some common properies <code>Beer</code> and <code>Brewery</code> will\nneed.</p>\n<h4>TimeStampedEntity.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TimeStampedEntity</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> DateTime</span><span style=\"color:#80A665\"> CreatedAt</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> DateTime</span><span style=\"color:#80A665\"> UpdatedAt</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>Beer.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Beer</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> TimeStampedEntity</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> BeerStyle</span><span style=\"color:#80A665\"> BeerStyle</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#80A665\"> Brewery</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>Brewery.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> TimeStampedEntity</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> Brewery</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Beers</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ICollection</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Beers</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>You'll notice I've put my <code>using</code> directives within my namespaces. This is purely preference, and has very little\ndifference than if I were to put them outside my\nnamespaces. <a href=\"https://stackoverflow.com/questions/125319/should-using-directives-be-inside-or-outside-the-namespace\">Here's</a>\na great discussion about the difference, for the curious. Also notice I've also created an <code>Address</code> class associated to\na <code>Brewery</code> and a <code>BeerStyle</code> enumeration so we can strongly type our families of beer. We've also initialized\nour <code>Beers</code> list within our <code>Brewery</code> model - this is a great pattern to get into when working within the domain layer,\nas consumers of our API should not have to worry about <code>NullReferenceExceptions</code> when interrogating logic based on a\ncollection from their API provider.</p>\n<h4>Address.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> TimeStampedEntity</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> StreetAddress</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> City</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> State</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> ZipCode</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BeerStyle.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> enum</span><span style=\"color:#5DA994\"> BeerStyle</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        Lager</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        Pilsner</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        Amber</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        PaleAle</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        Ipa</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        DoubleIpa</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        TripleIpa</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        Stout</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>For the scope of this series, we'll keep things simple and stick with these properties for our entities. Our project\nshould look a little something like this:</p>\n<p><img src=\"/images/net-core-dapper-and-crud-series/part-1/project-setup.png\" alt=\"Project\"></p>\n<p>With our entities in place, let's go ahead add our DTOs. Before we do that, let's talk about what exactly we should be\n<em>putting</em> in these DTOs.</p>\n<h4>DTOs</h4>\n<p>For our implementation, we want our DTOs to reflect actions we can perform on our application. This a CRUD application,\nbut we're also going to\nutilize <a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs\">Command and Query Responsibility Segregation</a>,\nor CQRS, to distinguish actions we'll be performing on our database - read only queries, and write commands. For our\nsimple application, it's tempting to have all-purpose DTOs for each CRUD operation. While this is a viable solution, I\nwould <em>highly</em> recommend against it. As our application grows, so do our needs for more complex queries and actions we\ncan perform on our database. Rather than trying to shove all that container logic into a few classes, we'll be\nseparating our DTOs by media type and action. Let's go ahead and add a <code>Dtos</code> folder, and within that folder, we'll add\nseparate folders for our different domains, <code>Beer</code>, and <code>Brewery</code>. and add our first create DTOs for a beer and a\nbrewery.</p>\n<h4>Brewery/CreateBreweryDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateBreweryDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> AddressDto</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>Beer/CreateBeerDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateBeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> BeerStyle</span><span style=\"color:#80A665\"> Style</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Notice I've also added an <code>AddressDto</code> as an acceptable media type to the <code>CreateBreweryDto</code> class, so let's define that\nas well at the root of the <code>Dtos</code> folder since this will be an all-purpose DTO since its properties do not change as we\ndo not directly CRUD with <code>Address</code> class.</p>\n<h4>AddressDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> AddressDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> StreetAddress</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> City</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> State</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> ZipCode</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>In our <code>CreateBeerDto</code> class, we're only exposing the name and beer style associated to a beer - why not a brewery? This\nis where we'll define our first business rule:</p>\n<h4>Business Rule 1: A beer cannot be created with an associated brewery</h4>\n<p>What does this mean for our users? In order to add a beer to our database through our API, we'll add an endpoint\nassociated with our breweries that will expose an add beer operation. This will simplify our API, as we will not need to\ndo any association at creation time to the brewery for the beer to be added - we'll know exactly what brewery to add it\nto!</p>\n<p>For our <code>CreateBreweryDto</code> class, we're exposing the name and the address of the brewery, NOT the list of beers. This\nbrings us to our second business rule:</p>\n<h4>Business Rule 2: A brewery cannot be created with beers on a request</h4>\n<p>While this may seem arbitrary, this rule will simplify our API, forcing users to first create a brewery, and\nsubsequentially add the beers to that brewery at their leisure. We'll see later why we're implementing this design, both\nfor simplicity for the developer and ease of use for our users. This brings up a good point - metadata. Let's add some\nproperies to our <code>Brewery.cs</code> entity to easily extract the number of beers a brewery has to offer. Let's add\na <code>BeerCount</code> property:</p>\n<h4>Brewery.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> TimeStampedEntity</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ICollection</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Beers</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> BeerCount</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Count</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>We've added a <code>BeerCount</code> delegate that will simply give us a count of all beers related to that entity whenever we\nquery for a specific brewery. With our create DTOs out of the way, let's go ahead and implement the rest of our CRUD\nDTOs. For our reads, we'll create simple <code>BeerDto.cs</code> and <code>BreweryDto.cs</code> classes - no need to prefix these with an\noperation as they will more, or less, be our default DTO when moving between layers:</p>\n<h4>BreweryDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BreweryDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> AddressDto</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Beers</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> BeerCount</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BeerDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> BeerStyle</span><span style=\"color:#80A665\"> Style</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> BreweryDto</span><span style=\"color:#80A665\"> Brewery</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Nothing special here, the only difference is we'll be pulling out the ID for each beer and brewery, respectively. Note,\nwe're using <code>IEnumerable&#x3C;Beer></code> as our iterative type on our beers because this is just an immutable list, whereas we\nused <code>ICollection&#x3C;Beer></code> in our entity due to the fact we will be modifying list over time.</p>\n<p>With our reads out of the the way, let's go ahead and create <code>UpdateBeerDto.cs</code> and <code>UpdateBreweryDto.cs</code> classes:</p>\n<h4>UpdateBeerDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateBeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> AddressDto</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>UpdateBreweryDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateBreweryDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Name</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> AddressDto</span><span style=\"color:#80A665\"> Type</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Again, nothing special here. We have an <code>Id</code> property on each DTO, as we'll need to know which beer, or brewery, to\nupdate for the user on the request, and we're only allowing a few properties to change on our entities. Luckily for us,\nfor our delete operation, we'll be relying on the user to pass in an ID associated with the beer, or brewery, and that's\nit. No need to include anything in the body, as long as we have the ID, we're good to. Let's take a minute to grab a\nbeer and take a look at where we're at so far. Our project structure should look more, or less, like this:</p>\n<p><img src=\"/images/net-core-dapper-and-crud-series/part-1/project-dtos-in-place.png\" alt=\"Project_thus_far\"></p>\n<p>I promise we're almost done (sort of). That last knot for us to tie up is the media type we'll be presenting to our\nconsumer. To be quite honest, this implementation is <em>probably</em> overkill for our use case, but a good exercise for us to\nbuild robust APIs. For our API, our entities and DTOs would suffice. However, in a real world enterprise setting, where\nour API interacts with tens of microservices all communicating with each other, a transfer data type that represents the\nmedia type and domain concern our API will provide to consumers is a good idea. Think of it as layers <em>within</em> our\ndomain layer:</p>\n<ul>\n<li>Our entities represent the source of record stored within our database, that when extracted, are expected to modify\nand persist their state</li>\n<li>Our DTOs act as containers to transport that persisted data between layers (e.g. the domain layer and the data layer,\nand from the data layer to the API layer in the long run)</li>\n<li>Our API layer should <strong>not</strong> have any knowledge of our entities, as they contain audit properties (timestamps) and\nrelations to other entities that should only be interacted with at lower layers</li>\n<li>Our resource types will represent the models/media types we will provide to our consumers, as our DTOs are more, or\nless, internal to our API</li>\n</ul>\n<p>With the semantics out of the way, lets go ahead and create a <code>Media</code> folder and place a few resource types within that\nfolder:</p>\n<h4>Resource.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Resource</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> T</span><span style=\"color:#80A665\"> Self</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>Our general resource type that will serve as the template for all types our API will give to our consumers. As we build\nour API, we'll continue to add metadata for our consumers so that they can make decisions about our responses we give\nthem without having to inspect the data we <em>actually</em> hand over. Next, let's create a <code>ResourceList.cs</code> class that will\nserve as an iterable collection we hand over to our callers:</p>\n<h4>ResourceList.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> ResourceList</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Items</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Count</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> Items</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Count</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>With a resource list in place, we have the building blocks to add our <code>Beer</code> and <code>Brewery</code> implementations of these\ngeneric types:</p>\n<h4>BeerResource.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BeerResource</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Resource</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BeerDto</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BreweryResource.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Resource</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryDto</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BeerResourceList.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BeerResourceList</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> ResourceList</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BeerDto</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<h4>BreweryResourceList.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BreweryResourceList</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> ResourceList</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryDto</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p> </p>\n<p>While these classes may be simple and quite unecessary for now, we now have the ability to extend these resource types\nbased on the model implmentation as we wish. Our <code>ResourceList</code> type has a few built in properties (<code>Items</code> and <code>Count</code>)\nfor our consumers to always expect on a list type response, for example. With everything all said and done, our project\nstructure should look like the following:</p>\n<p><img src=\"/images/net-core-dapper-and-crud-series/part-1/finished-domain-layer.png\" alt=\"Domain_layer_finished\"></p>\n<p>For those following along, <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-1-domain-layer\">here's</a> the\nrepository of what we've done so far.</p>\n<p>We can see the light at the end of the tunnel! A few lingering questions remain though, in particular with our <code>tests</code>\ndirectory. We WILL be writing tests, but for our simple domain layer as of now, as there is really no logic in any of\nthe classes we've created so far, we're going to wait until we build the core functionality to start writing unit and\nintegration tests. For now, we'll stop here and continue with the meat and potatoes of our project in the next post in\nthe series, the data layer.</p>\n<p>Crack open a cold, you deserve it.</p>"
    },
    "_id": "2019/net-core-dapper-and-crud-buzzword-bingo.md",
    "_raw": {
      "sourceFilePath": "2019/net-core-dapper-and-crud-buzzword-bingo.md",
      "sourceFileName": "net-core-dapper-and-crud-buzzword-bingo.md",
      "sourceFileDir": "2019",
      "contentType": "markdown",
      "flattenedPath": "2019/net-core-dapper-and-crud-buzzword-bingo"
    },
    "type": "Post",
    "url": "/blog/2019/net-core-dapper-and-crud-buzzword-bingo"
  },
  {
    "title": "Decoupling controllers with ApiEndpoints",
    "description": "No one likes monolithic controllers, and with ApiEndpoints, API design just got a whole lot easier.",
    "pubDate": "2020-09-23T07:00:00.000Z",
    "category": ".NET",
    "heroImage": "/images/decoupling-controllers-with-api-endpoints/friends-business-logic.jpg",
    "draft": false,
    "keywords": [
      "c#",
      ".net",
      "api"
    ],
    "body": {
      "raw": "\nAdmittedly, or not, we've all worked on projects during our careers that took the above meme's approach of \"just put it\nin the controller and we'll figure it out later\". Unfortunately for some, this is a way of life due to project budget\nconstraints, unrealistic product deadlines, and more senior developers refusing to change their ways because it \"works.\"\nIt's like how the old saying goes, you can't teach an old programmer to decouple independent concerns.\n\nOn a recent weekend getaway to the mountains, I did what I always do on long drives when my wife inevitably falls asleep\nin the car: put on episode of [.NET Rocks!](https://www.dotnetrocks.com/) and let Carl, Richard, and their guests\nfascinate me with the latest in the .NET ecosystem. On this fateful day, the guest happened to\nbe [Steve Smith](https://github.com/ardalis) talking about his relatively new\nproject - [ApiEndpoints](https://github.com/ardalis/ApiEndpoints). I've listened to a lot of .NET Rocks! over the years,\nand needless to say, a problem that has always bothered me throughout my relatively young career as a developer seemed\nto finally have a simple solution.\n\n## The Problem\n\nAs previously mentioned, we've all most likely worked on a legacy project at some point during our careers that makes\nthe company gobbles of money with no immediate plans of being sunsetted in place of a greenfield application, leaving\nother poor souls to maintain the mountain of tech debt accumulated over years of ignorance. While we could go down the\nrabbit hole of how a project eventually gets to this near unmaintainable state, I want to focus on a single area these\nprojects, more often than not, have in common: the fat controller.\n\n### Bloated controllers\n\nNot to be confused with the Thomas the Tank Engine character of the same name, fat controllers are a code smell,\nanti-pattern, etc. (pick your favorite buzzword) that boils down to a single issue at its root - controllers that are\ndoing _way_ too much, violating the [SRP](https://en.wikipedia.org/wiki/Single-responsibility_principle) to the fullest\nextent of the law.\n\nController bloat, in essence, is the product of compounding controller files with a plethora of action methods that,\nwhile related by their respective domain or managed resource, have no real dependence on one another. I'm not sure about\nyou, but I don't think I've ever seen a controller action being called by another action within the same file. Sure, we\nmight route resource requests at the API level to other methods with the same controller, but rarely is there a reason\nto directly call an action method explicitly from another. An unfortunate side effect of this phenomenon is a god class\nmentality developers take on, ignoring architectural boundaries, and injection of dependencies that service only a\nspecific use case within said controller, ignored by 90% of the other actions.\n\nWhat this eventually leads to (not in all cases, but a good majority), are controllers with thousands of lines of code\ncontaining an uncomfortable amount of business logic, constructors with an unnecessary amount of injected dependencies,\nand a regular trip to our local pharmacy for headache medication due to maintenance effort of these beasts.\n\n## ApiEndpoints to the rescue\n\nEnter [ApiEndpoints](https://github.com/ardalis/ApiEndpoints), a project started by Steve Smith with one goal in mind:\ndecoupling from controller-based solutions by encouraging\na [package by feature](https://phauer.com/2020/package-by-feature/#:~:text=%20A%20Recipe%20to%20Package%20by%20Feature%20,only%20have%20to%20delete%20the%20corresponding...%20More%20)\narchitecture from within our API project layers.\n\nWhat this means, in plain english, is a mindset change from the traditional MVC patterns we see in large web API\nprojects where there's most likely a `Controllers` folder that might contain tens of hundreds (yes, seriously)\ncontrollers that act as the gateway into the lower level working parts of our application and act as the liaison\nfor client requests. Traditionally, this sort of architecture is akin to _package by layer_ which we see in a grand\nmajority of projects within the enterprise, GitHub, your friend's sweet new app that's going to make them millions of\ndollars.\n\nWhat this boils down to, at the surface level, is an attempt to group related concerns and request work flows, i.e. how\na request enters and trickles through the system interacting with our various application resources, within the same\ndomain. What we're used to seeing might be similar to the following:\n\n```\n\\Controllers\n\\Models\n\\Views\n\\Services\n\n// ...and any number of layer-based components\n```\n\nOur controller directory might be broken down further:\n\n```\n\\Controllers\n    HomeController.cs\n    \\Orders\n        OrdersController.cs\n        OrderProcessingController.cs\n    \\Products\n        ProductsController.cs\n        ProductInventoryController.cs\n\n// ...again, any number of controllers nested within\n```\n\nOur `Models`, `Views`, and `Services` folders might very well contain the same, or very similar, structure. In this\nexample, we've created a package by layer architecture within our application - though everything exists in a single\nDLL, these would be more often utilized and referenced as separate class libraries, JARs, etc.\n\nWhat happens when a new business requirement comes in requiring a change, update, or addition to a specific feature? As\nyou might have guessed, from our example we'll most likely be making changes in _four_ separate places/layers of our\napplication, though the feature falls under a single domain. As with everything in software, your preferred package\nmethodology will always have payoffs, and the tried and true, handy dandy, all encompassing answer to the question of\nwhich ideology is best is simply... _it depends_.\n\nWhile we could dedicate an entire post about putting things where they belong and the tradeoffs of different packaging\narchitectures, we're focusing on just the API layer of our applications, namely everything under the `Controllers`\nfolder. Our aim, with help from the ApiEndpoints library, will be to sort concerns within individual `Feature` folders.\nSpecific to the API layer, a.k.a. our controllers, as we want to decouple services, dependencies, and independent\nprocesses from bloated, monolithic controllers. Imagine our orders controllers containing the following actions:\n\n### OrdersController.cs\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing SomeAwesomeNamespace.Services.Orders;\n\nnamespace SomeAwesomeNamespace.Controllers.Orders\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class OrdersController : ControllerBase\n    {\n        private readonly ILogger<OrdersController> _logger;\n        private readonly OrderServiceOne _serviceOne;\n        private readonly OrderServiceTwo _serviceTwo;\n        private readonly OrderServiceThree _serviceThree;\n\n\n        public OrdersController(\n            ILogger<OrdersController> logger,\n            OrderServiceOne serviceOne,\n            OrderServiceTwo serviceTwo,\n            OrderServiceThree serviceThree)\n        {\n            _logger = logger;\n            _serviceOne = serviceOne\n            _serviceTwo = serviceTwo\n            _serviceThree = serviceThree\n        }\n\n        [HttpGet]\n        public ActionResult SomeActionThatUsesServiceOne()\n        {\n            // Do some processing requiring service one...\n        }\n\n        [HttpPost]\n        public ActionResult SomeActionThatUsesServiceTwo()\n        {\n            // Do some processing requiring service two...\n        }\n\n        [HttpPut]\n        public ActionResult SomeActionThatUsesServiceThree()\n        {\n            // Do some processing requiring service three...\n        }\n\n        // ...and any number of action methods to be utilized elsewhere\n    }\n}\n```\n\nOur controller contains three service-based dependencies only utilized by a single method. Our controller is now coupled\nto three services, independent of one another, and consumed in only a third of its methods on a per service basis. While\nthis might be a bit of a contrived example, it's easy to see how we might extrapolate this controller into a real world\nscenario, adding more services and methods that have nothing to do with one another, making it more difficult to change\nand modify this controller as it becomes more coupled to its injected dependencies. When the time comes to test this bad\nboy, it will inevitably become a mocking nightmare.\n\nSo... how can we improve upon the paved path the old guard has laid before us?\n\n## Endpoints as units of work\n\nContinuing from our example above, let's think about what our API routing structure might look like:\n\n```\n/api/orders\n/api/orders/process\n/api/orders/:orderId\n/api/orders/:orderId/products\n/api/products\n/api/products/:productId\n/api/products/:productId/orders\n\n// ...and any number of routes our application might service\n```\n\nFrom the above, we could argue that based on domain, those routes probably belong in two separate controllers,\nproduct-based and order-based controllers. While that would suffice and get the job done for us, what about taking each\nof the above routes as an individual unit of work? Not to be confused with\nthe [design pattern](https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application#:~:text=The%20repository%20and%20unit%20of%20work%20patterns%20are,facilitate%20automated%20unit%20testing%20or%20test-driven%20development%20%28TDD%29.)\nof the same name, our definition of a unit of work in this context represents a processing silo in charge of one thing,\nand one thing only: `/api/orders` would be in charge of retrieving all outstanding/pending\norders, `/api/products/:productId`, would be in charge of retrieving products given a unique identifying\nkey, `/api/orders/:orderId/products` retrieves all the products on a particular order, etc. Each of these routes, while\nrelated by domain, performs a very specific task unrelated to its sibling routes with a good chance that each requires\nsome sort of injected service that may, or may not, be utilized by the others.\n\nWhile we could, again, dedicate an entire post to discuss API design semantics, let's break away from our conventional\nthinking and explore building an API without traditional controllers.\n\n## Individual endpoints with ApiEndpoints\n\nAs I'm sure the fine folks reading this article would love for me to continue aimlessly writing about orders and\nproducts for a fictional company, I'll shut up for now and finally get into some code. To start, let's create a new web\nAPI project using your preferred project bootstrapping method. I'll be using Visual Studio for Mac, so I'll go ahead and\nselect a new ASP.NET Core Web Application project using the API template, since we won't be doing anything with views.\n\nOnce we've got a project ready to roll, let's open up our solution and do a bit of immediate refactoring. Let's start by\nadding a package reference to `Ardalis.ApiEndpoints`:\n\n![Business_logic](/images/decoupling-controllers-with-api-endpoints/api-endpoints-nuget.png)\n\nOnce our package has been added, let's create a `Features` folder at the root of our project, and immediately beneath\nthat, a `Weather` directory.\nLet's go ahead and create two more directories beneath our `Weather` folder to house our concerns that have to deal with\neverything related to weather in `Models` and `Endpoints`. By creating feature slices within our application, we can\ngroup things by concern rather than by layer so that every feature request coming in from the business will be easily\ncontained within its corresponding domain. Let's start by offering up an endpoint to retrieve a weather forecast, akin\nto the already existing method within the `WeatherController.cs` file underneath the `Controllers` folder. Go ahead and\nadd a new file underneath our `Endpoints` folder called `GetWeatherForecasts.cs`, where we'll place the action method's\ncode from the `WeatherController`'s `Get()` method:\n\n### GetWeatherForecasts.cs\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Ardalis.ApiEndpoints;\nusing DecoupledControllersWithApiEndpoints.Features.Beers;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace DecoupledControllersWithApiEndpoints.Features.Weather.Endpoints\n{\n    [Route(Routes.WeatherUri)]\n    public class GetWeatherForecast : BaseEndpoint<IEnumerable<WeatherForecast>>\n    {\n        private static readonly string[] Summaries = new[]\n        {\n            \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n        };\n\n        [HttpGet]\n        public override ActionResult<IEnumerable<WeatherForecast>> Handle()\n        {\n            var rng = new Random();\n\n            var forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = rng.Next(-20, 55),\n                Summary = Summaries[rng.Next(Summaries.Length)]\n            })\n            .ToArray();\n\n            return Ok(forecasts);\n        }\n    }\n}\n```\n\nAs the method definition for `Handle()` is the same as the `Get()` action method along with the other parts I've\ndirectly copied over from the default `WeatherController` that the ASP.NET Core scaffold tools includes in its template,\nlet's focus on the unfamiliar parts of this file that ApiEndpoints brings to the table:\n\n-   We're still utilizing the `[Route]` and `[HttpGet]` attributes available to our controllers thanks to\n    the `Microsoft.AspNetCore.Mvc` namespace\n-   We're inheriting from the `BaseEndpoint<TResponse>` class that ApiEndpoints provides for us, signaling on application\n    startup that this is, in fact, a controller in disguise and will be treated just like a regular old ASP.NET Core\n    controller\n-   `BaseEndpoint<TResponse>` is an abstract class with a single method exposed for us to override in `Handle()` that\n    an `ActionResult<TResponse>` type, akin to action methods from within a controller\n-   If we follow the inheritance chain of `BaseEndpoint`, or any of its derivatives with higher order arity (thanks for\n    the vocab upgrade in my personal arsenal, Jon Skeet) in `BaseEndpoint<TResponse>`\n    or `BaseEndpoint<TRequest, TResponse>`, we see the base type ultimately pointing to ASP.NET Core's `ControllerBase`\n    type, solving the mystery as to why we have access to all the ASP.NET Core attributes and types in endpoints\n\nWe have a single named route thanks to the `[Route(Routes.WeatherUri])]` attribute, where I've defined `Routes.cs` at\nthe root of our `Features` folder below:\n\n### Features/Routes.cs\n\n```csharp\nnamespace DecoupledControllersWithApiEndpoints.Features.Beers\n{\n    public static class Routes\n    {\n        public const string WeatherUri = \"api/weather\";\n    }\n}\n```\n\nWhile most likely unnecessary for our small demo application, I find it helpful to have a single place containing our\nAPI routes for reference in other parts of our apps, should we need them. We'll add to this a bit later, but for now,\nthis should suffice.\n\nLet's spin up our application now using `F5`, or hitting a `dotnet run` in the terminal, and using Postman (or your\nfavorite web request utility), let's send a request to `https://localhost:5001/api/weather` and examine the response:\n\n```\n[\n    {\n        \"date\": \"2020-09-23T12:52:27.408507-07:00\",\n        \"temperatureC\": 6,\n        \"temperatureF\": 42,\n        \"summary\": \"Mild\"\n    },\n    {\n        \"date\": \"2020-09-24T12:52:27.408951-07:00\",\n        \"temperatureC\": -19,\n        \"temperatureF\": -2,\n        \"summary\": \"Freezing\"\n    },\n\n    // ...and several other random forecasts\n]\n```\n\nThanks to the `rng` we've built into our forecast generator, your response will look a bit different than mine, but\nlet's not gloss over the fact that we've just performed a complete request/response cycle within our API without using a\ncontroller!\n",
      "html": "<p>Admittedly, or not, we've all worked on projects during our careers that took the above meme's approach of \"just put it\nin the controller and we'll figure it out later\". Unfortunately for some, this is a way of life due to project budget\nconstraints, unrealistic product deadlines, and more senior developers refusing to change their ways because it \"works.\"\nIt's like how the old saying goes, you can't teach an old programmer to decouple independent concerns.</p>\n<p>On a recent weekend getaway to the mountains, I did what I always do on long drives when my wife inevitably falls asleep\nin the car: put on episode of <a href=\"https://www.dotnetrocks.com/\">.NET Rocks!</a> and let Carl, Richard, and their guests\nfascinate me with the latest in the .NET ecosystem. On this fateful day, the guest happened to\nbe <a href=\"https://github.com/ardalis\">Steve Smith</a> talking about his relatively new\nproject - <a href=\"https://github.com/ardalis/ApiEndpoints\">ApiEndpoints</a>. I've listened to a lot of .NET Rocks! over the years,\nand needless to say, a problem that has always bothered me throughout my relatively young career as a developer seemed\nto finally have a simple solution.</p>\n<h2>The Problem</h2>\n<p>As previously mentioned, we've all most likely worked on a legacy project at some point during our careers that makes\nthe company gobbles of money with no immediate plans of being sunsetted in place of a greenfield application, leaving\nother poor souls to maintain the mountain of tech debt accumulated over years of ignorance. While we could go down the\nrabbit hole of how a project eventually gets to this near unmaintainable state, I want to focus on a single area these\nprojects, more often than not, have in common: the fat controller.</p>\n<h3>Bloated controllers</h3>\n<p>Not to be confused with the Thomas the Tank Engine character of the same name, fat controllers are a code smell,\nanti-pattern, etc. (pick your favorite buzzword) that boils down to a single issue at its root - controllers that are\ndoing <em>way</em> too much, violating the <a href=\"https://en.wikipedia.org/wiki/Single-responsibility_principle\">SRP</a> to the fullest\nextent of the law.</p>\n<p>Controller bloat, in essence, is the product of compounding controller files with a plethora of action methods that,\nwhile related by their respective domain or managed resource, have no real dependence on one another. I'm not sure about\nyou, but I don't think I've ever seen a controller action being called by another action within the same file. Sure, we\nmight route resource requests at the API level to other methods with the same controller, but rarely is there a reason\nto directly call an action method explicitly from another. An unfortunate side effect of this phenomenon is a god class\nmentality developers take on, ignoring architectural boundaries, and injection of dependencies that service only a\nspecific use case within said controller, ignored by 90% of the other actions.</p>\n<p>What this eventually leads to (not in all cases, but a good majority), are controllers with thousands of lines of code\ncontaining an uncomfortable amount of business logic, constructors with an unnecessary amount of injected dependencies,\nand a regular trip to our local pharmacy for headache medication due to maintenance effort of these beasts.</p>\n<h2>ApiEndpoints to the rescue</h2>\n<p>Enter <a href=\"https://github.com/ardalis/ApiEndpoints\">ApiEndpoints</a>, a project started by Steve Smith with one goal in mind:\ndecoupling from controller-based solutions by encouraging\na <a href=\"https://phauer.com/2020/package-by-feature/#:~:text=%20A%20Recipe%20to%20Package%20by%20Feature%20,only%20have%20to%20delete%20the%20corresponding...%20More%20\">package by feature</a>\narchitecture from within our API project layers.</p>\n<p>What this means, in plain english, is a mindset change from the traditional MVC patterns we see in large web API\nprojects where there's most likely a <code>Controllers</code> folder that might contain tens of hundreds (yes, seriously)\ncontrollers that act as the gateway into the lower level working parts of our application and act as the liaison\nfor client requests. Traditionally, this sort of architecture is akin to <em>package by layer</em> which we see in a grand\nmajority of projects within the enterprise, GitHub, your friend's sweet new app that's going to make them millions of\ndollars.</p>\n<p>What this boils down to, at the surface level, is an attempt to group related concerns and request work flows, i.e. how\na request enters and trickles through the system interacting with our various application resources, within the same\ndomain. What we're used to seeing might be similar to the following:</p>\n<pre><code>\\Controllers\n\\Models\n\\Views\n\\Services\n\n// ...and any number of layer-based components\n</code></pre>\n<p>Our controller directory might be broken down further:</p>\n<pre><code>\\Controllers\n    HomeController.cs\n    \\Orders\n        OrdersController.cs\n        OrderProcessingController.cs\n    \\Products\n        ProductsController.cs\n        ProductInventoryController.cs\n\n// ...again, any number of controllers nested within\n</code></pre>\n<p>Our <code>Models</code>, <code>Views</code>, and <code>Services</code> folders might very well contain the same, or very similar, structure. In this\nexample, we've created a package by layer architecture within our application - though everything exists in a single\nDLL, these would be more often utilized and referenced as separate class libraries, JARs, etc.</p>\n<p>What happens when a new business requirement comes in requiring a change, update, or addition to a specific feature? As\nyou might have guessed, from our example we'll most likely be making changes in <em>four</em> separate places/layers of our\napplication, though the feature falls under a single domain. As with everything in software, your preferred package\nmethodology will always have payoffs, and the tried and true, handy dandy, all encompassing answer to the question of\nwhich ideology is best is simply... <em>it depends</em>.</p>\n<p>While we could dedicate an entire post about putting things where they belong and the tradeoffs of different packaging\narchitectures, we're focusing on just the API layer of our applications, namely everything under the <code>Controllers</code>\nfolder. Our aim, with help from the ApiEndpoints library, will be to sort concerns within individual <code>Feature</code> folders.\nSpecific to the API layer, a.k.a. our controllers, as we want to decouple services, dependencies, and independent\nprocesses from bloated, monolithic controllers. Imagine our orders controllers containing the following actions:</p>\n<h3>OrdersController.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">AspNetCore</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Mvc</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> SomeAwesomeNamespace</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Orders</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> SomeAwesomeNamespace</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Controllers</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Orders</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    [</span><span style=\"color:#5DA994\">ApiController</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    [</span><span style=\"color:#5DA994\">Route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">[controller]</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> OrdersController</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> ControllerBase</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">OrdersController</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> OrderServiceOne</span><span style=\"color:#80A665\"> _serviceOne</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> OrderServiceTwo</span><span style=\"color:#80A665\"> _serviceTwo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> OrderServiceThree</span><span style=\"color:#80A665\"> _serviceThree</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> OrdersController</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">OrdersController</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            OrderServiceOne</span><span style=\"color:#80A665\"> serviceOne</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            OrderServiceTwo</span><span style=\"color:#80A665\"> serviceTwo</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            OrderServiceThree</span><span style=\"color:#80A665\"> serviceThree</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _serviceOne</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> serviceOne</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _serviceTwo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> serviceTwo</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _serviceThree</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> serviceThree</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">HttpGet</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ActionResult</span><span style=\"color:#80A665\"> SomeActionThatUsesServiceOne</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Do some processing requiring service one...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">HttpPost</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ActionResult</span><span style=\"color:#80A665\"> SomeActionThatUsesServiceTwo</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Do some processing requiring service two...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">HttpPut</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ActionResult</span><span style=\"color:#80A665\"> SomeActionThatUsesServiceThree</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Do some processing requiring service three...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // ...and any number of action methods to be utilized elsewhere</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our controller contains three service-based dependencies only utilized by a single method. Our controller is now coupled\nto three services, independent of one another, and consumed in only a third of its methods on a per service basis. While\nthis might be a bit of a contrived example, it's easy to see how we might extrapolate this controller into a real world\nscenario, adding more services and methods that have nothing to do with one another, making it more difficult to change\nand modify this controller as it becomes more coupled to its injected dependencies. When the time comes to test this bad\nboy, it will inevitably become a mocking nightmare.</p>\n<p>So... how can we improve upon the paved path the old guard has laid before us?</p>\n<h2>Endpoints as units of work</h2>\n<p>Continuing from our example above, let's think about what our API routing structure might look like:</p>\n<pre><code>/api/orders\n/api/orders/process\n/api/orders/:orderId\n/api/orders/:orderId/products\n/api/products\n/api/products/:productId\n/api/products/:productId/orders\n\n// ...and any number of routes our application might service\n</code></pre>\n<p>From the above, we could argue that based on domain, those routes probably belong in two separate controllers,\nproduct-based and order-based controllers. While that would suffice and get the job done for us, what about taking each\nof the above routes as an individual unit of work? Not to be confused with\nthe <a href=\"https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application#:~:text=The%20repository%20and%20unit%20of%20work%20patterns%20are,facilitate%20automated%20unit%20testing%20or%20test-driven%20development%20%28TDD%29.\">design pattern</a>\nof the same name, our definition of a unit of work in this context represents a processing silo in charge of one thing,\nand one thing only: <code>/api/orders</code> would be in charge of retrieving all outstanding/pending\norders, <code>/api/products/:productId</code>, would be in charge of retrieving products given a unique identifying\nkey, <code>/api/orders/:orderId/products</code> retrieves all the products on a particular order, etc. Each of these routes, while\nrelated by domain, performs a very specific task unrelated to its sibling routes with a good chance that each requires\nsome sort of injected service that may, or may not, be utilized by the others.</p>\n<p>While we could, again, dedicate an entire post to discuss API design semantics, let's break away from our conventional\nthinking and explore building an API without traditional controllers.</p>\n<h2>Individual endpoints with ApiEndpoints</h2>\n<p>As I'm sure the fine folks reading this article would love for me to continue aimlessly writing about orders and\nproducts for a fictional company, I'll shut up for now and finally get into some code. To start, let's create a new web\nAPI project using your preferred project bootstrapping method. I'll be using Visual Studio for Mac, so I'll go ahead and\nselect a new ASP.NET Core Web Application project using the API template, since we won't be doing anything with views.</p>\n<p>Once we've got a project ready to roll, let's open up our solution and do a bit of immediate refactoring. Let's start by\nadding a package reference to <code>Ardalis.ApiEndpoints</code>:</p>\n<p><img src=\"/images/decoupling-controllers-with-api-endpoints/api-endpoints-nuget.png\" alt=\"Business_logic\"></p>\n<p>Once our package has been added, let's create a <code>Features</code> folder at the root of our project, and immediately beneath\nthat, a <code>Weather</code> directory.\nLet's go ahead and create two more directories beneath our <code>Weather</code> folder to house our concerns that have to deal with\neverything related to weather in <code>Models</code> and <code>Endpoints</code>. By creating feature slices within our application, we can\ngroup things by concern rather than by layer so that every feature request coming in from the business will be easily\ncontained within its corresponding domain. Let's start by offering up an endpoint to retrieve a weather forecast, akin\nto the already existing method within the <code>WeatherController.cs</code> file underneath the <code>Controllers</code> folder. Go ahead and\nadd a new file underneath our <code>Endpoints</code> folder called <code>GetWeatherForecasts.cs</code>, where we'll place the action method's\ncode from the <code>WeatherController</code>'s <code>Get()</code> method:</p>\n<h3>GetWeatherForecasts.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Ardalis</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">ApiEndpoints</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> DecoupledControllersWithApiEndpoints</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beers</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">AspNetCore</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Mvc</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DecoupledControllersWithApiEndpoints</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Weather</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Endpoints</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    [</span><span style=\"color:#5DA994\">Route</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">Routes</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">WeatherUri</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> GetWeatherForecast</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> BaseEndpoint</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">WeatherForecast</span><span style=\"color:#666666\">>></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> Summaries</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#666666\">[]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#C98A7D\">Freezing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Bracing</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Chilly</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Cool</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Mild</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Warm</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Balmy</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hot</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Sweltering</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Scorching</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">HttpGet</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#5DA994\"> ActionResult</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">WeatherForecast</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> rng</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Random</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> forecasts</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> Enumerable</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Range</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 5</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">Select</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">index</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> WeatherForecast</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Date</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Now</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddDays</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">index</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                TemperatureC</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> rng</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Next</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">-</span><span style=\"color:#4C9A91\">20</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 55</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Summary</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> Summaries</span><span style=\"color:#666666\">[</span><span style=\"color:#BD976A\">rng</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Next</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">Summaries</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Length</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            })</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">ToArray</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#80A665\"> Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">forecasts</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>As the method definition for <code>Handle()</code> is the same as the <code>Get()</code> action method along with the other parts I've\ndirectly copied over from the default <code>WeatherController</code> that the ASP.NET Core scaffold tools includes in its template,\nlet's focus on the unfamiliar parts of this file that ApiEndpoints brings to the table:</p>\n<ul>\n<li>We're still utilizing the <code>[Route]</code> and <code>[HttpGet]</code> attributes available to our controllers thanks to\nthe <code>Microsoft.AspNetCore.Mvc</code> namespace</li>\n<li>We're inheriting from the <code>BaseEndpoint&#x3C;TResponse></code> class that ApiEndpoints provides for us, signaling on application\nstartup that this is, in fact, a controller in disguise and will be treated just like a regular old ASP.NET Core\ncontroller</li>\n<li><code>BaseEndpoint&#x3C;TResponse></code> is an abstract class with a single method exposed for us to override in <code>Handle()</code> that\nan <code>ActionResult&#x3C;TResponse></code> type, akin to action methods from within a controller</li>\n<li>If we follow the inheritance chain of <code>BaseEndpoint</code>, or any of its derivatives with higher order arity (thanks for\nthe vocab upgrade in my personal arsenal, Jon Skeet) in <code>BaseEndpoint&#x3C;TResponse></code>\nor <code>BaseEndpoint&#x3C;TRequest, TResponse></code>, we see the base type ultimately pointing to ASP.NET Core's <code>ControllerBase</code>\ntype, solving the mystery as to why we have access to all the ASP.NET Core attributes and types in endpoints</li>\n</ul>\n<p>We have a single named route thanks to the <code>[Route(Routes.WeatherUri])]</code> attribute, where I've defined <code>Routes.cs</code> at\nthe root of our <code>Features</code> folder below:</p>\n<h3>Features/Routes.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DecoupledControllersWithApiEndpoints</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Routes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> const</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> WeatherUri</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">api/weather</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>While most likely unnecessary for our small demo application, I find it helpful to have a single place containing our\nAPI routes for reference in other parts of our apps, should we need them. We'll add to this a bit later, but for now,\nthis should suffice.</p>\n<p>Let's spin up our application now using <code>F5</code>, or hitting a <code>dotnet run</code> in the terminal, and using Postman (or your\nfavorite web request utility), let's send a request to <code>https://localhost:5001/api/weather</code> and examine the response:</p>\n<pre><code>[\n    {\n        \"date\": \"2020-09-23T12:52:27.408507-07:00\",\n        \"temperatureC\": 6,\n        \"temperatureF\": 42,\n        \"summary\": \"Mild\"\n    },\n    {\n        \"date\": \"2020-09-24T12:52:27.408951-07:00\",\n        \"temperatureC\": -19,\n        \"temperatureF\": -2,\n        \"summary\": \"Freezing\"\n    },\n\n    // ...and several other random forecasts\n]\n</code></pre>\n<p>Thanks to the <code>rng</code> we've built into our forecast generator, your response will look a bit different than mine, but\nlet's not gloss over the fact that we've just performed a complete request/response cycle within our API without using a\ncontroller!</p>"
    },
    "_id": "2020/decoupling-controllers-with-api-endpoints.md",
    "_raw": {
      "sourceFilePath": "2020/decoupling-controllers-with-api-endpoints.md",
      "sourceFileName": "decoupling-controllers-with-api-endpoints.md",
      "sourceFileDir": "2020",
      "contentType": "markdown",
      "flattenedPath": "2020/decoupling-controllers-with-api-endpoints"
    },
    "type": "Post",
    "url": "/blog/2020/decoupling-controllers-with-api-endpoints"
  },
  {
    "title": "Clean architecture, Dapper, MediatR, and buzzword bingo (part 4)",
    "description": "Write encapsulated business logic with the help of MediatR and the CQRS pattern.",
    "pubDate": "2020-02-02T08:00:00.000Z",
    "category": ".NET",
    "heroImage": "/images/net-core-dapper-and-crud-series/part-4/use-automapper-meme.jpeg",
    "draft": false,
    "keywords": [
      ".net",
      "c#",
      "dapper",
      "mediatr"
    ],
    "body": {
      "raw": "\nThe wait is finally over (sort of). As we recover from the scrupulous amount of Christmas cookies we consumed during our\nannual holiday bulking season (at least what I tell myself), I figured it's time to jump into the bulk of our fictional\nbrewery app, Dappery. So far, we've:\n\n-   Defined our domain layer and business entities used application wide\n-   Implemented our data access layer with the help of repositories wrapped in a unit of work\n-   Written unit tests for our persistence layer to ensure future proofing our code\n\nAnd with most of the groundwork out of the way, we can finally jump into the core layer of Dappery. Before we dive into\nthe code, let's remind ourselves of _why_ exactly we've split our core business logic layer out into a high level detail\nof our application, with the lower level details (data access and API layers, in our case) _depending_ on this layer:\n\n1. Our core business logic layer is the most complex in terms of duties it performs (not so much code-wise)\n2. Encompassing the business logic with this layer prevents rules and policies from leaking into the low level details (\n   the data access layer should not know _how_ the data is mapped, for example)\n3. We invert the dependency of the API layer and the business layer, as the API layer now depends on the core business\n   layer\n4. The API layer has no notion of exactly _how_ we interact with our data, it only talks to the core logic to perform\n   services\n\nNoting the super meta meme at the top, some of you may be asserting through clenched teeth \"hey, AutoMapper is awesome!\"\nand rightfully so, [AutoMapper](https://github.com/AutoMapper/AutoMapper) _is_ in fact awesome. I'm a firm believer in\nthe library and use it quite extensively in other applications. **However**, I believe for our use case, the overhead of\nan entire mapping library that we will grossly under utilize the capabilities of, writing a few custom mappers within\nour core business logic layer will suffice. With that said, mapper libraries like AutoMapper do make writing the mind\nnumbing boilerplate mapping code in large, complex applications much easier (as long as you know where a few of the \"\ngotchas\" can happen).\n\nAlright, with the preamble out of the way, let's get a game plan going for how we'll implement this layer:\n\n-   We'll use our data access layer contracts (i.e. the interfaces we've defined in this layer) to access our database\n-   Using MediatR, we'll break our requests into queries and commands, effectively containing a finite set of application\n    features that will be easier to code to and debug\n-   While it may seem a little boilerplate-y, we avoid things like\n    the [God Object](https://en.wikipedia.org/wiki/God_object) anti-pattern, where everything gets shoved into one helper\n    or\n    service class\n-   We'll write two custom mappers that will map our beer and brewery entities into DTOs and resource to transport the\n    database entities out of the lower levels\n-   Each feature request will be validated using the [FluentValidation](https://github.com/JeremySkinner/FluentValidation)\n    library, acting as a guard between the API layer and core business layer to protect invalid state from making its way\n    to the database\n-   We'll handle invalid scenarios in this layer and enforce business rules\n\nAs we can see, that's a lot of stuff - thus the reason our core business layer is in a layer of its own, independent of\nthe lower level details. Without further ado, let's cut the chit chat and get down to business (pun intended). Let's\nstart off by creating a `Breweries` directory within our `Dappery.Core` project, followed by creating two additional\ndirectories of `Queries` and `Commands` nested beneath our newly created `Breweries` directory. Let's add one more\nfolder underneath `Breweries/Commands` called `CreateBrewery`. I know, I know... that's some deep structure we're\nbuilding, but the architecture will help keep our application flows and paths neatly separated and easy to drill down\ninto. Underneath `Breweries/Commands/CreateBeer`, let's add a new C# file called `CreateBreweryCommand.cs` that will\nserve as the issuing command MediatR will emit to our application layer to begin the transaction for adding a brewery to\nthe database.\n\n### CreateBreweryCommand.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.CreateBrewery\n{\n    using Domain.Dtos.Brewery;\n    using Domain.Media;\n    using MediatR;\n\n    public class CreateBreweryCommand : IRequest<BreweryResource>\n    {\n        public CreateBreweryCommand(CreateBreweryDto dto) => Dto = dto;\n\n        public CreateBreweryDto Dto { get; }\n    }\n}\n```\n\nThe `IRequest<BreweryResource>` parent interface we're inheriting from is a MediatR interface that registers with our\nMediatR instance, with `BreweryResource` being the response type we should expect when this request is issued. A pretty\nsimple command, as we do nothing more than construct the request DTO that is passed into the business logic layer from\nthe API layer (which we'll implement a little later), with `CreateBreweryCommand` being the wrapper for the data we'll\neventually use. We could also issue commands directly from the API layer, rather than wrapping requests for that layer\nin a command, or query - this is just my preference, so the API layer does not need to know what dependencies our\ncommands and queries have, just that it needs to send its version of the object request. With our command in place,\nlet's add a validator within the same directory by creating `CreateBreweryCommandValidator.cs`:\n\n### CreateBreweryCommandValidator.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.CreateBrewery\n{\n    using Extensions;\n    using FluentValidation;\n\n    public class CreateBreweryCommandValidator : AbstractValidator<CreateBreweryCommand>\n    {\n        public CreateBreweryCommandValidator()\n        {\n            RuleFor(b => b.Dto)\n                .NotNull()\n                .WithMessage(\"A request must contain valid creation data\");\n\n            RuleFor(b => b.Dto.Name)\n                .NotNullOrEmpty();\n\n            RuleFor(b => b.Dto.Address)\n                .NotNull()\n                .WithMessage(\"Must supply the address of the brewery when creating\");\n\n            RuleFor(b => b.Dto.Address!.City)\n                .NotNullOrEmpty();\n\n            RuleFor(b => b.Dto.Address!.State)\n                .HasValidStateAbbreviation();\n\n            RuleFor(b => b.Dto.Address!.StreetAddress)\n                .HasValidStreetAddress();\n\n            RuleFor(b => b.Dto.Address!.ZipCode)\n                .HasValidZipCode();\n        }\n    }\n}\n```\n\nUsing the FluentValidation interface `AbstractValidator<CreateBreweryCommand>`, we're telling our validator instance (\nregistered at startup, which again, we'll eventually see) that requests sending a `CreateBreweryCommand` need to adhere\nto the simple validation rules we've defined within the constructor of the class. Anytime we attempt to validate an\ninstance of the `CreateBreweryCommand` using the FluentValidation `ValidationContext` class (which we'll see in just a\nbit), the library will give us back a context containing any errors the instantiated class contains. Since we've opted\nin to enable nullable reference types in our `Dappery.Core.csproj` file (inheriting from `Dappery.targets` - a place to\ndefine build commonality amongst multiple projects and solutions), we use the `!` bang operator to tell the compiler \"I\nknow that `Address` has the possibility to be null, but that won't happen\" because of the previous validation we've\ndefined that will fire if we receive any DTO that does not have an `Address` instance. The last three validations\nactually use custom validators I've defined in a separate rule behavior class within an `Extensions` folder at the base\nof our `Dappery.Core` project:\n\n### RuleBuilderExtensions.cs\n\n```csharp\nnamespace Dappery.Core.Extensions\n{\n    using System.Text.RegularExpressions;\n    using FluentValidation;\n\n    public static class RuleBuilderExtensions\n    {\n        // Normally, would put things like this in a shared project, like a separate Dappery.Common project\n        private static readonly Regex ValidStateRegex = new Regex(\"^((A[LKZR])|(C[AOT])|(D[EC])|(FL)|(GA)|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EDAINSOT])|(N[EVHJMYCD])|(O[HKR])|(PA)|(RI)|(S[CD])|(T[NX])|(UT)|(V[TA])|(W[AVIY]))$\");\n        private static readonly Regex StreetAddressRegex = new Regex(\"\\\\d{1,5}\\\\s(\\\\b\\\\w*\\\\b\\\\s){1,2}\\\\w*\\\\.\");\n        private static readonly Regex ZipCodeRegex = new Regex(\"^\\\\d{5}$\");\n\n        public static void NotNullOrEmpty<T>(this IRuleBuilder<T, string?> ruleBuilder)\n        {\n            ruleBuilder.Custom((stringToValidate, context) =>\n            {\n                if (string.IsNullOrWhiteSpace(stringToValidate))\n                {\n                    context.AddFailure($\"{context.PropertyName} cannot be null, or empty\");\n                }\n            });\n        }\n\n        public static void HasValidStateAbbreviation<T>(this IRuleBuilder<T, string?> ruleBuilder)\n        {\n            ruleBuilder.Custom((stateAbbreviation, context) =>\n            {\n                if (!ValidStateRegex.IsMatch(stateAbbreviation))\n                {\n                    context.AddFailure($\"{stateAbbreviation} is not a valid state code\");\n                }\n            })\n            .NotEmpty()\n            .WithMessage(\"State code cannot be empty\");\n        }\n\n        public static void HasValidStreetAddress<T>(this IRuleBuilder<T, string?> ruleBuilder)\n        {\n            ruleBuilder.Custom((streetAddress, context) =>\n            {\n                if (string.IsNullOrWhiteSpace(streetAddress))\n                {\n                    // Add the context failure and break out of the validation\n                    context.AddFailure(\"Must supply a street address\");\n                    return;\n                }\n\n                if (!StreetAddressRegex.IsMatch(context.PropertyValue.ToString()))\n                {\n                    context.AddFailure($\"{streetAddress} is not a valid street address\");\n                }\n            });\n        }\n\n        public static void HasValidZipCode<T>(this IRuleBuilder<T, string?> ruleBuilder)\n        {\n            ruleBuilder.Custom((zipCode, context) =>\n            {\n                if (string.IsNullOrWhiteSpace(zipCode))\n                {\n                    // Add the context failure and break out of the validation\n                    context.AddFailure(\"Must supply the zip code\");\n                    return;\n                }\n\n                if (!ZipCodeRegex.IsMatch(context.PropertyValue.ToString()))\n                {\n                    context.AddFailure($\"{zipCode} is not a valid zipcode\");\n                }\n            });\n        }\n    }\n}\n```\n\nNothing too complicated here, we're just building some extension methods off of the\nFluentValidation `IRuleBuilder<T, TProperty>` interface to combine several validations on the validation context, as\nwell as add some custom validations like the state code regex for convenience. Inside each extension method, we utilize\nthe `Custom` extension method of the `IRuleBuilder` interface and pass an `Action<TProperty, CustomContext>` lambda\nwhere we make our custom assertions and failures to the returned validation context that then gets passed down the chain\nwith our query and command validator classes. I highly recommend checking out\nthe [documentation for FluentValidation](https://fluentvalidation.net/) as the maintainers have done a great job\nutilizing examples and references similar to the above. Next, with our brewery command and request validator in place,\nlet's add the main staple of functionality within our application layer - the MediatR handler.\n\n### CreateBreweryCommandHandler.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.CreateBrewery\n{\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Data;\n    using Domain.Entities;\n    using Domain.Media;\n    using Extensions;\n    using MediatR;\n\n    public class CreateBreweryCommandHandler : IRequestHandler<CreateBreweryCommand, BreweryResource>\n    {\n        private readonly IUnitOfWork _unitOfWork;\n\n        public CreateBreweryCommandHandler(IUnitOfWork unitOfWork)\n        {\n            _unitOfWork = unitOfWork;\n        }\n\n        public async Task<BreweryResource> Handle(CreateBreweryCommand request, CancellationToken cancellationToken)\n        {\n            var breweryToCreate = new Brewery\n            {\n                Name = request.Dto.Name,\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow,\n                Address = new Address\n                {\n                    StreetAddress = request.Dto.Address?.StreetAddress,\n                    City = request.Dto.Address?.City,\n                    State = request.Dto.Address?.State,\n                    ZipCode = request.Dto.Address?.ZipCode,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow\n                }\n            };\n\n            // Create our brewery, retrieve the brewery so we can map it to the response, and clean up our resources\n            var breweryId = await _unitOfWork.BreweryRepository.CreateBrewery(breweryToCreate, cancellationToken);\n            var insertedBrewery = await _unitOfWork.BreweryRepository.GetBreweryById(breweryId, cancellationToken);\n            _unitOfWork.Commit();\n\n            // Map and return the response\n            return new BreweryResource(insertedBrewery.ToBreweryDto());\n        }\n    }\n}\n```\n\nAs we'll see with each command and query handler, the core business logic of CRUD'ing our way through the application\nwill happen within each of these class types. For our creates (our beer create operations will be eerily similar), we\ninstantiate a new `Brewery` entity that will be added to our database with all the proper fields validated by\nour `CreateBreweryCommandValidator` so we can rest assured the fields we require to store a brewery are there (avoiding\na bunch of `if (field is null) { // Do something, or throw an exception }` checks that will clutter things up), and call\nour data layer operations to create and retrieve the brewery. Recall that when we create a brewery through our\nrepository method, we get back the last inserted brewery record ID from the `Breweries` table, which we can then turn\naround and retrieve that newly inserted brewery using the `GetBreweryById` method. Now granted, there's multiple way\nthis could be optimized and refactored, but this was my deliberate decision to keep our CRUD operations simple and\nadhering to only conform to a [single responsibility](https://en.wikipedia.org/wiki/Single_responsibility_principle).\nThere may times where the command to create the brewery does in fact fail at the database level, however, where the\nconnection to physical server may be bad, or the server might be down, etc., so I figured I would leave the failure\ncases to the smart guys reading this post as an exercise for the audience.\n\nOnce our brewery entity has been retrieved, we then construct an instance of the `BreweryResource` to hand back to the\nAPI layer with a brewery DTO injected into the instance. Let's take a look at our mappers while we're here to get a\nsense of how this mapping is done exactly. Let's create a directory in our `Dappery.Core` project called `Extensions`\nwhere we'll create a `BreweryExtensions.cs` class:\n\n### BreweryExtensions.cs\n\n```csharp\nnamespace Dappery.Core.Extensions\n{\n    using System.Linq;\n    using Domain.Dtos;\n    using Domain.Dtos.Beer;\n    using Domain.Dtos.Brewery;\n    using Domain.Entities;\n\n    public static class BreweryExtensions\n    {\n        public static BreweryDto ToBreweryDto(this Brewery brewery, bool includeBeerList = true)\n        {\n            return new BreweryDto\n            {\n                Id = brewery.Id,\n                Name = brewery.Name,\n                Beers = includeBeerList ? brewery.Beers.Select(b => new BeerDto\n                {\n                    Id = b.Id,\n                    Name = b.Name,\n                    Style = b.BeerStyle.ToString()\n                }) : default,\n                Address = new AddressDto\n                {\n                    City = brewery.Address?.City,\n                    State = brewery.Address?.State,\n                    StreetAddress = brewery.Address?.StreetAddress,\n                    ZipCode = brewery.Address?.ZipCode\n                },\n                BeerCount = includeBeerList ? brewery.BeerCount : (int?) null\n            };\n        }\n    }\n}\n```\n\nWe see that our mapper is nothing but a simple extension method of the `Brewery` entity class that transforms the entity\ninto our friendly DTO, omitting fields that don't necessarily need to be transported between layers (i.e. audit\nproperties, or IDs of related entities, just to name a few). From a relationship perspective, remember that a brewery\n_has many_ beers, where a beer _has one_ brewery; we control the nested relational mapping with the `includeBeerList`\ndefault flag, as to avoid recursively mapped beers and breweries. Nothing too complicated here, just a nice simple\nmapper, and for those interested, I've written\na [few unit tests](https://github.com/JoeyMckenzie/Dappery/blob/master/tests/Dappery.Core.Tests/Extensions/BreweryExtensionsTest.cs)\nto capture the expected behavior of our custom mapping class. While we're at it, let's go ahead and add\na `BeerExtensions.cs` class within our `Extensions` directory:\n\n### BeerExtensions.cs\n\n```csharp\nnamespace Dappery.Core.Extensions\n{\n    using Domain.Dtos.Beer;\n    using Domain.Entities;\n\n    public static class BeerExtensions\n    {\n        public static BeerDto ToBeerDto(this Beer beer)\n        {\n             return new BeerDto\n            {\n                Id = beer.Id,\n                Name = beer.Name,\n                Style = beer.BeerStyle.ToString(),\n                Brewery = beer.Brewery?.ToBreweryDto(false),\n            };\n        }\n    }\n}\n```\n\nEven simpler, our custom beer mapper just transforms a `Beer` entity into a slim DTO, while utilizing\nour `.ToBreweryDto()` brewery extension method to non-recursively map the beer's brewery.\n\nAt this point, you're probably wondering \"this is great, but how exactly _does_ our validation catch validation errors?\"\nThat's a great question, with the answer being the MediatR library's `IPipelineBehavior<TRequest, TResponse>` interface.\nFor the interested, [Jimmy Boggard](https://github.com/jbogard), an absolute rockstar for the .NET community, and the\nmaintainers of MediatR have a great [library doc](https://github.com/jbogard/MediatR/wiki) explaining the exact behavior\nof pipelines and why they are useful to the library. In essence, a every message we send with MediatR will flow through\nour registered pipeline (which we'll register as a dependency within our API layer), giving us the power to check\nrequests for certain properties, validate behaviors, log specific messages based on the request - really anything we\nwant. For our use case, we'll implement the `IPipelineBehavior<TRequest, TResponse>` interface to define\na `RequestValidationBehavior<TRequest, TResponse>` piece of the request pipeline that will take care of inspecting every\nrequest to make sure it's confiding by our FluentValidation validation rules that we define for each command and some\nqueries. When we register our FluentValidation classes at application startup, we'll tell the library that all of our\nvalidators will be within the `Dappery.Core` assembly, letting FluentValidator scan the assembly to find and register\neach of our validation contexts, so that we can generically call each request's validation context to then validate the\nrequest with our registered validators. Pretty cool, huh? Side note: I've never used _validate_, or any of its\nderivatives, that much in a sentence ever in my entire life.\n\nLet's go ahead and create an `Infrastructure` folder within our `Dappery.Core` project, and then create\na `RequestValidationBehavior.cs` class that will implement an `IPipelineBehavior`:\n\n### RequestValidationBehavior.cs\n\n```csharp\nnamespace Dappery.Core.Infrastructure\n{\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using FluentValidation;\n    using MediatR;\n    using Microsoft.Extensions.Logging;\n\n    public class RequestValidationBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse>\n        where TRequest : IRequest<TResponse>\n    {\n        private readonly IEnumerable<IValidator<TRequest>> _validators;\n        private readonly ILogger<TRequest> _logger;\n\n        public RequestValidationBehavior(IEnumerable<IValidator<TRequest>> validators, ILogger<TRequest> logger)\n        {\n            _validators = validators;\n            _logger = logger;\n        }\n\n        public Task<TResponse> Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate<TResponse> next)\n        {\n            var context = new ValidationContext(request);\n\n            var failures = _validators\n                .Select(v => v.Validate(context))\n                .SelectMany(result => result.Errors)\n                .Where(f => f != null)\n                .ToList();\n\n            if (failures.Any())\n            {\n                _logger.LogInformation($\"Validation failures for request [{request}]\");\n                throw new ValidationException(failures);\n            }\n\n            return next();\n        }\n    }\n}\n```\n\nLet's break it down:\n\n-   First, we inject from the DI container (which we'll see in the API layer with the help of ASP.NET Core) all of the\n    validations that were found in the assembly that all descended from `AbstractValidator<TCommand>` and retrieves the\n    rules we've defined per instance\n-   We retrieve the validators from the request, which we'll know at runtime\n-   Using LINQ, we run through each validator, validate the context (whatever the request type may be), flatten\n    the `ValidationResult` enumerable by mapping just the error property with `.SelectMany()`, and collect any that return\n    errors\n-   We check to see if there were any violations of our rules, and throw the `ValidationException` that we'll catch within\n    a global exception handler within the API layer so we can return detailed validation messages to the consumers\n-   Finally, we let the request thread continue on its merry way throughout the layers of our application (unscathed if\n    there were no errors)\n\nWhew, that small bit of code is doing _a lot_ of big things for us. Using MediatR and FluentValidator in tandem is a\nmatch made in heaven, letting developers customize their application request flow, providing convention to help reduce\nthe complexity of our software. Now that we've gotten our pipeline behavior piece implemented, let's go ahead and extend\nthe `IServiceCollection` from the `Microsoft.Extensions.DependencyInjection` namespace that will do all the leg work of\nresolving our dependencies. Within our `Extensions` folder, let's add a `StartupExtensions.cs` class. We\nuse `StartupExtensions` here which is a bit specific for my liking, but our use case is just a simple ASP.NET Core\napplication (you may see this with the name `DependencyInjection.cs` or something similar around various .NET libraries\non GitHub).\n\n### StartupExtensions.cs\n\n```csharp\nnamespace Dappery.Core.Extensions\n{\n    using System.Reflection;\n    using Infrastructure;\n    using MediatR;\n    using Microsoft.Extensions.DependencyInjection;\n\n    public static class StartupExtensions\n    {\n        /// <summary>\n        /// Extension to contain all of our business layer dependencies for our external server providers (ASP.NET Core in our case).\n        /// </summary>\n        /// <param name=\"services\">Service collection for dependency injection</param>\n        public static void AddDapperyCore(this IServiceCollection services)\n        {\n            // Add our MediatR and FluentValidation dependencies\n            services.AddMediatR(Assembly.GetExecutingAssembly());\n\n            // Add our MediatR validation pipeline\n            services.AddTransient(typeof(IPipelineBehavior<,>), typeof(RequestValidationBehavior<,>));\n        }\n    }\n}\n```\n\nNothing too complicated just here, just adding MediatR to the service registry, telling it to scan this assembly for\nimplemented types of the library so that it can wire things up correctly for our internal \"messaging\" system, then\nfinishing up by adding an a reference to the service container for our MediatR pipeline with\na [transient](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1#service-lifetimes-and-registration-options)\nlifetime. If you're unfamiliar with the different ways we can register service dependencies in .NET Core, check out the\nlinked docs for a quite delightful Sunday morning read. I won't go into detail, as the docs do a pretty good job of\nexplaining our use of the transient lifetime here, but in summary, services with this lifetime are dolled out each time\nthe the service is requested when a thread just so happens to hit a piece of code that requires one. From the docs:\n\n> Transient lifetime services (AddTransient) are created each time they're requested from the service container. This\n> lifetime works best for lightweight, stateless services.\n\nNow that we've got most of our core layer plumbing out of the way, we can now just focus on implementing our query and\ncommand handlers in a similar fashion to the `CreateBreweryCommandHandler` from above. We've given users the option of\ncreating breweries, so now let's add an update feature to modify a previously created brewery. Let's add\nan `UpdateBrewery` folder within the `Breweries/Commands` directory. For the curious, my preference for the folder\nstructure is to mimic an application use case, solely for the case of debug-ability and easily being able to identify\nwhat areas of the application are in charge of what. This is more often than not referred to as _vertical slice\narchitecture_, and there's a [great article](https://jimmybogard.com/vertical-slice-architecture/), again by Jimmy\nBoggard, that discusses the power of utilizing this pattern. Notwithstanding, there are a few places where I've been a\nbit lazy and not so idiomatic in designing with that in mind (particularly in the domain layer), but I'll leave the\nclean up as an exercise for the reader. Let's add an `UpdateBreweryCommand.cs` underneath the `UpdateBrewery` folder:\n\n### UpdateBreweryCommand.cs\n\n```csharp\nnamespace Dappery.Core.Beers.Commands.UpdateBeery\n{\n    using Domain.Dtos.Beer;\n    using Domain.Media;\n    using MediatR;\n\n    public class UpdateBeerCommand : IRequest<BeerResource>\n    {\n        public UpdateBeerCommand(UpdateBeerDto beerDto, int requestId) => (Dto, BeerId) = (beerDto, requestId);\n\n        public UpdateBeerDto Dto { get; }\n\n        public int BeerId { get; }\n    }\n}\n```\n\nEasy enough, all our `UpdateBreweryCommand` requires is an ID for the brewery and the properties we've exposed that\nconsumer are allowed to update. Next, let's define our validators in an `UpdateBreweryCommandValidator.cs` class:\n\n### UpdateBreweryCommandValidator.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.UpdateBrewery\n{\n    using FluentValidation;\n\n    public class UpdateBreweryCommandValidator : AbstractValidator<UpdateBreweryCommand>\n    {\n        public UpdateBreweryCommandValidator()\n        {\n            RuleFor(request => request.Dto)\n                .NotNull()\n                .WithMessage(\"Must supply a request body\");\n\n            RuleFor(request => request.BreweryId)\n                .NotNull()\n                .WithMessage(\"Must supply a valid brewery ID\");\n        }\n    }\n}\n```\n\nWe want each request that comes in for a brewery update to have a valid DTO in the body, along with a brewery ID that\nwe'll retrieve from the URI. There's an argument to be made for sticking the ID as a requirement within the DTO, but\nthis just my preference since we'll assume our consumers will be following RESTful best practices (and that's a _hefty_\nassumption). Next, we'll go ahead and define our command handler within a new `UpdateBreweryCommandHandler.cs` class\nwithin our `UpdateBrewery` directory:\n\n### UpdateBreweryCommandHandler.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.UpdateBrewery\n{\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Extensions;\n    using Data;\n    using Domain.Media;\n    using Exceptions;\n    using MediatR;\n\n    public class UpdateBreweryCommandHandler : IRequestHandler<UpdateBreweryCommand, BreweryResource>\n    {\n        private readonly IUnitOfWork _unitOfWork;\n\n        public UpdateBreweryCommandHandler(IUnitOfWork unitOfWork)\n        {\n            _unitOfWork = unitOfWork;\n        }\n\n        public async Task<BreweryResource> Handle(UpdateBreweryCommand request, CancellationToken cancellationToken)\n        {\n            // Retrieve the brewery on the request\n            var breweryToUpdate = await _unitOfWork.BreweryRepository.GetBreweryById(request.BreweryId, cancellationToken);\n\n            // Invalidate the request if no brewery was found\n            if (breweryToUpdate is null)\n            {\n                throw new DapperyApiException($\"No brewery was found with ID {request.BreweryId}\", HttpStatusCode.NotFound);\n            }\n\n            // Update the properties on the brewery entity\n            breweryToUpdate.Name = request.Dto.Name;\n            var updateBreweryAddress = false;\n\n            // If the request contains an address, set the flag for the persistence layer to update the address table\n            if (request.Dto.Address != null && breweryToUpdate.Address != null)\n            {\n                updateBreweryAddress = true;\n                breweryToUpdate.Address.StreetAddress = request.Dto.Address.StreetAddress;\n                breweryToUpdate.Address.City = request.Dto.Address.City;\n                breweryToUpdate.Address.State = request.Dto.Address.State;\n                breweryToUpdate.Address.ZipCode = request.Dto.Address.ZipCode;\n            }\n\n            // Update the brewery in the database, retrieve it, and clean up our resources\n            await _unitOfWork.BreweryRepository.UpdateBrewery(breweryToUpdate, cancellationToken, updateBreweryAddress);\n            var updatedBrewery = await _unitOfWork.BreweryRepository.GetBreweryById(request.BreweryId, cancellationToken);\n            _unitOfWork.Commit();\n\n            // Map and return the brewery\n            return new BreweryResource(updatedBrewery.ToBreweryDto());\n        }\n    }\n}\n```\n\nFirst, we see that we're using the `BreweryId` that was passed along in the request to retrieve the brewery we should be\nupdating. If no brewery is found, we'll throw a 404 back to the consumer using a custom exception we'll define in just a\nminute. Once we know we've got our brewery, we update each of the updatable fields on the entity, and set a flag for the\nrepository implementation to update the address if need be. Due to our schema design, we probably could have opted for\nthe [value object](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/implement-value-objects)\npattern here and nested the address within the brewery table, and maybe one of these weekends I'll get around to making\nthat update. Let's create an `Exceptions` folder underneath the `Dappery.Core` project root, and inside that, we'll\ncreate a `DapperyApiException.cs` class:\n\n### DapperyApiException.cs\n\n```csharp\nnamespace Dappery.Core.Exceptions\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Net;\n\n    public class DapperyApiException : Exception\n    {\n        public DapperyApiException(string message, HttpStatusCode statusCode)\n            : base(message)\n        {\n            StatusCode = statusCode;\n            ApiErrors = new List<DapperyApiError>();\n        }\n\n        public HttpStatusCode StatusCode { get; }\n\n        public ICollection<DapperyApiError> ApiErrors { get; }\n    }\n}\n```\n\nNow, there's an argument to be made about using\nexceptions [as control flow within an application](https://wiki.c2.com/?DontUseExceptionsForFlowControl) which is\nessentially what we're doing here, but I'll let that holy war continue on StackOverflow. For our simple use case, we'll\nuse this exception to handle any sort of operation that cannot be performed to protect misinformation from reaching the\nlower level concerns and handle the situation with a global (at least within the scope of our API) exception handler in\nthat layer that will decipher and determine the proper message to send back to consumers. We've also defined\na `DapperyApiError` type that will encapsulate and be used as a translator of sorts to convey to consumers exactly what\nhappened to cause the exception:\n\n### DapperyApiError.cs\n\n```csharp\nnamespace Dappery.Core.Exceptions\n{\n    public class DapperyApiError\n    {\n        public DapperyApiError(string errorMessage, string propertyName)\n        {\n            ErrorMessage = errorMessage;\n            PropertyName = propertyName;\n        }\n\n        public string ErrorMessage { get; }\n\n        public string PropertyName { get; }\n    }\n}\n```\n\nOur `DapperyApiException` and `DapperyApiError` will work in tandem to help to give us a predefined convention for\nhandling any sort of error scenario within the core application layer so that we can easily contextualize the content of\nthe error and pass the information back up rather than leaking bad state down to our other layers. We'll see in the API\nlayer how we define a handler within our request pipeline to handle error scenarios in a somewhat graceful manner,\nthough there are quite a few ways to do this. For now, our simple error and exception classes will work just fine, but\nwe might want to rethink the approach at scale when coordinating between multiple API (micro)services, whether prosumer,\nor consumer. With the last piece of the infrastructure plumping out of the way, let's set our focus back on the commands\nand queries we're in the midst of writing.\n\nSince we're building a (probably overcomplicated) CRUD solution, let's give users the option to retrieve and search for\nbreweries. Let's create a `Queries` folder underneath our `Breweries` directory, and start off by creating another\nfolder of `RetrieveBrewery`. After that's done, let's create a `RetrieveBreweryQuery.cs` file:\n\n### RetrieveBreweryQuery.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Queries.RetrieveBrewery\n{\n    using Domain.Media;\n    using MediatR;\n\n    public class RetrieveBreweryQuery : IRequest<BreweryResource>\n    {\n        public RetrieveBreweryQuery(int id) => Id = id;\n\n        public int Id { get; }\n    }\n}\n```\n\nEasy enough, just a simple `IRequest` that will return a `BreweryResource` back to the consumer, given an ID to match\non. With that out of the way, let's create a `RetrieveBreweryQueryValidator.cs` validator class to catch mischievous\nconsumers that will try and invoke this operation and somehow manage to fool the ASP.NET Core route matching system:\n\n### RetrieveBreweryQueryValidator.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Queries.RetrieveBrewery\n{\n    using FluentValidation;\n\n    public class RetrieveBreweryQueryValidator : AbstractValidator<RetrieveBreweryQuery>\n    {\n        public RetrieveBreweryQueryValidator()\n        {\n            RuleFor(b => b.Id)\n                .NotNull()\n                .NotEmpty()\n                .WithMessage(\"Must supply an ID to retrieve a brewery\")\n                .GreaterThanOrEqualTo(1)\n                .WithMessage(\"Must be a valid brewery ID\");\n\n        }\n    }\n}\n```\n\nHere, we define two validations in not allowing null IDs to propogate to this layer (shouldn't happen in the first\nplace, since we did not declare the ID as nullable), and the ID should be greater than zero, as our table constraint is\nusing the ID as an index and primary key. Next, let's define our query handler with a\nnew `RetrieveBreweryQueryHandler.cs` class:\n\n### RetrieveBreweryQueryHandler.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Queries.RetrieveBrewery\n{\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Data;\n    using Domain.Media;\n    using Exceptions;\n    using Extensions;\n    using MediatR;\n\n    public class RetrieveBreweryQueryHandler : IRequestHandler<RetrieveBreweryQuery, BreweryResource>\n    {\n        private readonly IUnitOfWork _unitOfWork;\n\n        public RetrieveBreweryQueryHandler(IUnitOfWork unitOfWork)\n        {\n            _unitOfWork = unitOfWork;\n        }\n\n        public async Task<BreweryResource> Handle(RetrieveBreweryQuery request, CancellationToken cancellationToken)\n        {\n            // Retrieve the brewery and clean up our resources\n            var brewery = await _unitOfWork.BreweryRepository.GetBreweryById(request.Id, cancellationToken);\n            _unitOfWork.Commit();\n\n            // Invalidate the request if no brewery is found\n            if (brewery is null)\n            {\n                throw new DapperyApiException($\"No brewery found with ID {request.Id}\", HttpStatusCode.NotFound);\n            }\n\n            // Map and return the brewery\n            return new BreweryResource(brewery.ToBreweryDto());\n        }\n    }\n}\n```\n\nThis is about as standard as a retrieve request gets: attempt to grab the brewery from the database using our\napplication repositories, clean up our resources, throw our custom exception for not found if no brewery was returned,\nand return the resource with a view model friendly representation of our brewery entity. While we're at the 'R' in CRUD,\nlet's add an operation for our consumers to get a list of all breweries. Inside the `Brewery/Queries` folder, go ahead\nand create a `GetBreweries` folder, followed by a `GetBreweriesQuery.cs` class inside the newly created folder:\n\n### GetBreweryQuery.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Queries.GetBreweries\n{\n    using Domain.Media;\n    using MediatR;\n\n    public class GetBreweriesQuery : IRequest<BreweryResourceList>\n    {\n    }\n}\n```\n\nOur simplest form of an `IRequest`, we're letting MediatR know that anytime a message is sent with the context\nof `GetBreweriesQuery`, the library will map that request to a `GetBreweriesQueryHandler` (below) and return\na `BreweryResourceList`. Let's implement the handler:\n\n### GetBreweryQuery.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Queries.GetBreweries\n{\n    using System.Linq;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Data;\n    using Domain.Media;\n    using Extensions;\n    using MediatR;\n\n    public class GetBreweriesQueryHandler : IRequestHandler<GetBreweriesQuery, BreweryResourceList>\n    {\n        private readonly IUnitOfWork _unitOfWork;\n\n        public GetBreweriesQueryHandler(IUnitOfWork unitOfWork)\n        {\n            _unitOfWork = unitOfWork;\n        }\n\n        public async Task<BreweryResourceList> Handle(GetBreweriesQuery request, CancellationToken cancellationToken)\n        {\n            // Retrieve the breweries and clean up our resources\n            var breweries = await _unitOfWork.BreweryRepository.GetAllBreweries(cancellationToken);\n            _unitOfWork.Commit();\n\n            // Map our breweries from the returned query\n            var mappedBreweries = breweries.Select(b => b.ToBreweryDto());\n\n            // Map each brewery to its corresponding DTO\n            return new BreweryResourceList(mappedBreweries);\n        }\n    }\n}\n```\n\nAs straightforward as a search request be, we're simply just grabbing all the breweries from the database, projecting\neach entity into its view model representation, and returning the list to the consumer. No execptions, and we also\nhandle the case if there are no breweries in the database to just return an empty list (which we'll cover with a unit\ntest). Now, since we're building just a small demo application, we _probably_ shouldn't be returning the entirety of\nrecords from the breweries table within the database. A more sound and performant implementation of this handler would\nbe to pass query filters and options for pagination on the `GetBreweriesQuery`, so that we could refine our SQL and not\nhave Dapper try to map every record to its corresponding C# POCO. Again, I'll leave this as an exercise for the reader,\nor maybe comeback on a rainy day to refactor this (most likely not, though). For Completeness, let's finish up our set\nof brewery operations by adding a delete command to our application by creating a `DeleteBrewery` folder nested within\nour `Breweries/Commands` directory, then creating a `DeleteBreweryCommand.cs` file:\n\n### DeleteBreweryCommand.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.DeleteBrewery\n{\n    using MediatR;\n\n    public class DeleteBreweryCommand : IRequest<Unit>\n    {\n        public DeleteBreweryCommand(int id) => BreweryId = id;\n\n        public int BreweryId { get; }\n    }\n}\n```\n\nAll we require for a delete command is just the ID, which we'll get from the API layer. Let's create a validator for the\nhooligans that might try and break the chain of command within the same `DeleteBrewery` directory:\n\n### DeleteBreweryCommandValidator.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.DeleteBrewery\n{\n    using FluentValidation;\n\n    public class DeleteBreweryCommandValidator : AbstractValidator<DeleteBreweryCommand>\n    {\n        public DeleteBreweryCommandValidator()\n        {\n            RuleFor(b => b.BreweryId)\n                .NotNull()\n                .WithMessage(\"Must supply the brewery ID\");\n        }\n    }\n}\n```\n\nWe don't want to perform any delete request if we haven't an ID to validate the beer exists in the database, first and\nforemost. Again, since our delete command is correct by construction since we did _not_ tell the command to expect a\nnullable `int`, we should never<sup>tm</sup> see this behavior, but it doesn't hurt to have an extra layer of\nvalidation. Finally, let's finish up by implementing the `DeleteBreweryCommandHandler.cs` class:\n\n### DeleteBreweryCommandHandler.cs\n\n```csharp\nnamespace Dappery.Core.Breweries.Commands.DeleteBrewery\n{\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Data;\n    using Exceptions;\n    using MediatR;\n\n    public class DeleteBreweryCommandHandler : IRequestHandler<DeleteBreweryCommand, Unit>\n    {\n        private readonly IUnitOfWork _unitOfWork;\n\n        public DeleteBreweryCommandHandler(IUnitOfWork unitOfWork)\n        {\n            _unitOfWork = unitOfWork;\n        }\n\n        public async Task<Unit> Handle(DeleteBreweryCommand request, CancellationToken cancellationToken)\n        {\n            // Retrieve the brewery and invalidate the request if none is found\n            var breweryToDelete = await _unitOfWork.BreweryRepository.GetBreweryById(request.BreweryId, cancellationToken);\n\n            // Invalidate the request if no brewery is found\n            if (breweryToDelete is null)\n            {\n                throw new DapperyApiException($\"No brewery was found with ID {request.BreweryId}\", HttpStatusCode.NotFound);\n            }\n\n            // Delete the brewery from the database and clean up our resources once we know we have a valid beer\n            await _unitOfWork.BreweryRepository.DeleteBrewery(request.BreweryId, cancellationToken);\n            _unitOfWork.Commit();\n\n            return Unit.Value;\n        }\n    }\n}\n```\n\nAgain, no shenanigans here, as we retrieve the brewery first to validate it exists, handle the case of no brewery found,\nand remove it from the database and pass nothing but a `Unit.Value` (from the `MediatR` namespace) to signal the work we\nperformed is finished and successful.\n\nAlright, let's take a minute to breathe, as that was a lot of code we just cranked out. To cleanse our minds, I'll take\na break from finishing our beer operations by showing some examples of how we might write some unit tests for this\nlayer. [I'll leave this link](https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-3-core-layer/tests/Dappery.Core.Tests)\nfor the interested to scan through how I wrote each handler test (happy paths only). Using\nthe `CreateBreweryCommandHandlerTest.cs` xUnit spec as an example:\n\n### CreateBeerCommandHandlerTest.cs\n\n```csharp\nnamespace Dappery.Core.Tests.Beers\n{\n    using System.Net;\n    using System.Threading.Tasks;\n    using Core.Beers.Commands.CreateBeer;\n    using Domain.Dtos.Beer;\n    using Domain.Entities;\n    using Domain.Media;\n    using Exceptions;\n    using Shouldly;\n    using Xunit;\n\n    public class CreateBeerCommandHandlerTest : TestFixture\n    {\n        [Fact]\n        public async Task GivenValidRequest_WhenBreweryExists_ReturnsMappedAndCreatedBeer()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var beerCommand = new CreateBeerCommand(new CreateBeerDto\n            {\n                Name = \"Test Beer\",\n                Style = \"Lager\",\n                BreweryId = 1\n            });\n            var handler = new CreateBeerCommandHandler(unitOfWork);\n\n            // Act\n            var result = await handler.Handle(beerCommand, CancellationTestToken);\n\n            // Assert\n            result.ShouldNotBeNull();\n            result.ShouldBeOfType<BeerResource>();\n            result.Self.ShouldNotBeNull();\n            result.Self.Brewery.ShouldNotBeNull();\n            result.Self.Brewery?.Address.ShouldNotBeNull();\n            result.Self.Brewery?.Address?.StreetAddress.ShouldBe(\"1030 E Cypress Ave Ste D\");\n            result.Self.Brewery?.Address?.City.ShouldBe(\"Redding\");\n            result.Self.Brewery?.Address?.State.ShouldBe(\"CA\");\n            result.Self.Brewery?.Address?.ZipCode.ShouldBe(\"96002\");\n            result.Self.Brewery?.Beers.ShouldBeNull();\n            result.Self.Brewery?.Id.ShouldBe(1);\n            result.Self.Brewery?.Name.ShouldBe(\"Fall River Brewery\");\n            result.Self.Id.ShouldNotBeNull();\n            result.Self.Name.ShouldBe(beerCommand.Dto.Name);\n            result.Self.Style.ShouldBe(beerCommand.Dto.Style);\n        }\n\n        [Fact]\n        public async Task GivenValidRequest_WhenBreweryDoesNotExist_ThrowsApiExceptionForBadRequest()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var beerCommand = new CreateBeerCommand(new CreateBeerDto\n            {\n                Name = \"Test Beer\",\n                Style = \"Lager\",\n                BreweryId = 11\n            });\n            var handler = new CreateBeerCommandHandler(unitOfWork);\n\n            // Act\n            var result = await Should.ThrowAsync<DapperyApiException>(async () => await handler.Handle(beerCommand, CancellationTestToken));\n\n            // Assert\n            result.ShouldNotBeNull();\n            result.StatusCode.ShouldBe(HttpStatusCode.BadRequest);\n        }\n\n        [Fact]\n        public async Task GivenValidRequest_WithInvalidBeerStyle_ReturnsMappedAndCreatedBeerWithOtherAsStyle()\n        {\n            // Arrange\n            using var unitOfWork = UnitOfWork;\n            var beerCommand = new CreateBeerCommand(new CreateBeerDto\n            {\n                Name = \"Test Beer\",\n                Style = \"Not defined!\",\n                BreweryId = 1\n            });\n            var handler = new CreateBeerCommandHandler(unitOfWork);\n\n            // Act\n            var result = await handler.Handle(beerCommand, CancellationTestToken);\n\n            // Assert\n            result.ShouldNotBeNull();\n            result.ShouldBeOfType<BeerResource>();\n            result.Self.ShouldNotBeNull();\n            result.Self.Brewery.ShouldNotBeNull();\n            result.Self.Brewery?.Address.ShouldNotBeNull();\n            result.Self.Brewery?.Address?.StreetAddress.ShouldBe(\"1030 E Cypress Ave Ste D\");\n            result.Self.Brewery?.Address?.City.ShouldBe(\"Redding\");\n            result.Self.Brewery?.Address?.State.ShouldBe(\"CA\");\n            result.Self.Brewery?.Address?.ZipCode.ShouldBe(\"96002\");\n            result.Self.Brewery?.Beers.ShouldBeNull();\n            result.Self.Brewery?.Id.ShouldBe(1);\n            result.Self.Brewery?.Name.ShouldBe(\"Fall River Brewery\");\n            result.Self.Id.ShouldNotBeNull();\n            result.Self.Name.ShouldBe(beerCommand.Dto.Name);\n            result.Self.Style.ShouldBe(BeerStyle.Other.ToString());\n        }\n    }\n}\n```\n\nWe see that there are quite a few similarities with how we wrote unit tests for the data layer. We define a\ncommon `TestFixture` that our test files descend from in order to capture a clean test context between specs where all\nof our dependencies are wired up for us and guaranteed fresh for each test run. Then, we write just a few simple tests\nthat cover each scenario we could possibly see within the `CreateBreweryCommandHandler` implementation by setting up the\ncommand, declaring and assigning a reference to the handler, and capturing the resulting `handler.Handle()` response to\nvalidate against. I won't include the other tests here for brevity, but I definitely encourage the curious out there to\ncheck out how I've written the other tests, and even more so encourage any method of where we might improve these tests.\n\nIn an effort to not bore you guys _too much_, I'll snap the chalk line for this post here, as the beer operations share\na lot of the same ideas with how we wrote the brewery operations,\nand [I'll leave this link here](https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-3-core-layer/src/Dappery.Core/Beers)\nfor you guys to checkout how, exactly, we might write those commands and queries. For the most part, it'll feel eerily\nsimilar in setup, with just a few minor tweaks since we're working within the context of the child in the beer-brewery\nrelationship. While this might seem like a lot of redundant, rather boilerplate-y code, I think we should discuss the\ntradeoffs of using MediatR with the CQRS pattern:\n\n-   Since we've separated commands from queries, we've implicitly created clearly defined boundaries within the core\n    application layer\n-   If we want to add additional features, we can easily do so without fear of modifying existing behavior as we've\n    compartmentalized each request in total isolation from one another\n-   We've greatly reduced number of states our application could possibly create, with a finite number of logical paths a\n    request thread could take\n-   Notice we have no classical service-type classes as we we're deliberate about not creating an all encompassing service\n    that would mix our commands and queries together\n-   While all this sounds great, one could also argue that we've complicated the code by adding such convention all over\n    the place\n\nAt the end of the day, no matter how we implement the core application layer, it will still have just one\nresponsibility - encompass all the business logic. We've seen that using MediatR, FluentValidation, and a few simple\nmappers, we can build a flexible, modular business logic layer that is easy to extend and modify to fit our business\nneeds and requirements. In our next post, we'll _finally_ finish up our application by slapping an API layer on top of\nall the code we've written thus far and see if this thing actually works.\n\nAnd with that... I think it's time for a beer. Cheers everyone!\n\nimport BlogLayout from '@/layouts/BlogLayout';\n\nexport default ({ children }) => <BlogLayout>{children}</BlogLayout>;\n",
      "html": "<p>The wait is finally over (sort of). As we recover from the scrupulous amount of Christmas cookies we consumed during our\nannual holiday bulking season (at least what I tell myself), I figured it's time to jump into the bulk of our fictional\nbrewery app, Dappery. So far, we've:</p>\n<ul>\n<li>Defined our domain layer and business entities used application wide</li>\n<li>Implemented our data access layer with the help of repositories wrapped in a unit of work</li>\n<li>Written unit tests for our persistence layer to ensure future proofing our code</li>\n</ul>\n<p>And with most of the groundwork out of the way, we can finally jump into the core layer of Dappery. Before we dive into\nthe code, let's remind ourselves of <em>why</em> exactly we've split our core business logic layer out into a high level detail\nof our application, with the lower level details (data access and API layers, in our case) <em>depending</em> on this layer:</p>\n<ol>\n<li>Our core business logic layer is the most complex in terms of duties it performs (not so much code-wise)</li>\n<li>Encompassing the business logic with this layer prevents rules and policies from leaking into the low level details (\nthe data access layer should not know <em>how</em> the data is mapped, for example)</li>\n<li>We invert the dependency of the API layer and the business layer, as the API layer now depends on the core business\nlayer</li>\n<li>The API layer has no notion of exactly <em>how</em> we interact with our data, it only talks to the core logic to perform\nservices</li>\n</ol>\n<p>Noting the super meta meme at the top, some of you may be asserting through clenched teeth \"hey, AutoMapper is awesome!\"\nand rightfully so, <a href=\"https://github.com/AutoMapper/AutoMapper\">AutoMapper</a> <em>is</em> in fact awesome. I'm a firm believer in\nthe library and use it quite extensively in other applications. <strong>However</strong>, I believe for our use case, the overhead of\nan entire mapping library that we will grossly under utilize the capabilities of, writing a few custom mappers within\nour core business logic layer will suffice. With that said, mapper libraries like AutoMapper do make writing the mind\nnumbing boilerplate mapping code in large, complex applications much easier (as long as you know where a few of the \"\ngotchas\" can happen).</p>\n<p>Alright, with the preamble out of the way, let's get a game plan going for how we'll implement this layer:</p>\n<ul>\n<li>We'll use our data access layer contracts (i.e. the interfaces we've defined in this layer) to access our database</li>\n<li>Using MediatR, we'll break our requests into queries and commands, effectively containing a finite set of application\nfeatures that will be easier to code to and debug</li>\n<li>While it may seem a little boilerplate-y, we avoid things like\nthe <a href=\"https://en.wikipedia.org/wiki/God_object\">God Object</a> anti-pattern, where everything gets shoved into one helper\nor\nservice class</li>\n<li>We'll write two custom mappers that will map our beer and brewery entities into DTOs and resource to transport the\ndatabase entities out of the lower levels</li>\n<li>Each feature request will be validated using the <a href=\"https://github.com/JeremySkinner/FluentValidation\">FluentValidation</a>\nlibrary, acting as a guard between the API layer and core business layer to protect invalid state from making its way\nto the database</li>\n<li>We'll handle invalid scenarios in this layer and enforce business rules</li>\n</ul>\n<p>As we can see, that's a lot of stuff - thus the reason our core business layer is in a layer of its own, independent of\nthe lower level details. Without further ado, let's cut the chit chat and get down to business (pun intended). Let's\nstart off by creating a <code>Breweries</code> directory within our <code>Dappery.Core</code> project, followed by creating two additional\ndirectories of <code>Queries</code> and <code>Commands</code> nested beneath our newly created <code>Breweries</code> directory. Let's add one more\nfolder underneath <code>Breweries/Commands</code> called <code>CreateBrewery</code>. I know, I know... that's some deep structure we're\nbuilding, but the architecture will help keep our application flows and paths neatly separated and easy to drill down\ninto. Underneath <code>Breweries/Commands/CreateBeer</code>, let's add a new C# file called <code>CreateBreweryCommand.cs</code> that will\nserve as the issuing command MediatR will emit to our application layer to begin the transaction for adding a brewery to\nthe database.</p>\n<h3>CreateBreweryCommand.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateBreweryCommand</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateBreweryCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">CreateBreweryDto</span><span style=\"color:#80A665\"> dto</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> Dto</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> dto</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> CreateBreweryDto</span><span style=\"color:#80A665\"> Dto</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>The <code>IRequest&#x3C;BreweryResource></code> parent interface we're inheriting from is a MediatR interface that registers with our\nMediatR instance, with <code>BreweryResource</code> being the response type we should expect when this request is issued. A pretty\nsimple command, as we do nothing more than construct the request DTO that is passed into the business logic layer from\nthe API layer (which we'll implement a little later), with <code>CreateBreweryCommand</code> being the wrapper for the data we'll\neventually use. We could also issue commands directly from the API layer, rather than wrapping requests for that layer\nin a command, or query - this is just my preference, so the API layer does not need to know what dependencies our\ncommands and queries have, just that it needs to send its version of the object request. With our command in place,\nlet's add a validator within the same directory by creating <code>CreateBreweryCommandValidator.cs</code>:</p>\n<h3>CreateBreweryCommandValidator.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Extensions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateBreweryCommandValidator</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> AbstractValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">CreateBreweryCommand</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateBreweryCommandValidator</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">A request must contain valid creation data</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNullOrEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply the address of the brewery when creating</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNullOrEmpty</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">HasValidStateAbbreviation</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">HasValidStreetAddress</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">HasValidZipCode</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Using the FluentValidation interface <code>AbstractValidator&#x3C;CreateBreweryCommand></code>, we're telling our validator instance (\nregistered at startup, which again, we'll eventually see) that requests sending a <code>CreateBreweryCommand</code> need to adhere\nto the simple validation rules we've defined within the constructor of the class. Anytime we attempt to validate an\ninstance of the <code>CreateBreweryCommand</code> using the FluentValidation <code>ValidationContext</code> class (which we'll see in just a\nbit), the library will give us back a context containing any errors the instantiated class contains. Since we've opted\nin to enable nullable reference types in our <code>Dappery.Core.csproj</code> file (inheriting from <code>Dappery.targets</code> - a place to\ndefine build commonality amongst multiple projects and solutions), we use the <code>!</code> bang operator to tell the compiler \"I\nknow that <code>Address</code> has the possibility to be null, but that won't happen\" because of the previous validation we've\ndefined that will fire if we receive any DTO that does not have an <code>Address</code> instance. The last three validations\nactually use custom validators I've defined in a separate rule behavior class within an <code>Extensions</code> folder at the base\nof our <code>Dappery.Core</code> project:</p>\n<h3>RuleBuilderExtensions.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Text</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">RegularExpressions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RuleBuilderExtensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Normally, would put things like this in a shared project, like a separate Dappery.Common project</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#80A665\"> ValidStateRegex</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">^((A[LKZR])|(C[AOT])|(D[EC])|(FL)|(GA)|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EDAINSOT])|(N[EVHJMYCD])|(O[HKR])|(PA)|(RI)|(S[CD])|(T[NX])|(UT)|(V[TA])|(W[AVIY]))$</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#80A665\"> StreetAddressRegex</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">d{1,5}</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">s(</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">b</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">w*</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">b</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">s){1,2}</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">w*</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#80A665\"> ZipCodeRegex</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Regex</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">^</span><span style=\"color:#C99076\">\\\\</span><span style=\"color:#C98A7D\">d{5}$</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> NotNullOrEmpty</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> IRuleBuilder</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?></span><span style=\"color:#80A665\"> ruleBuilder</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ruleBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Custom</span><span style=\"color:#666666\">((</span><span style=\"color:#80A665\">stringToValidate</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> context</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">stringToValidate</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">context</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">PropertyName</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> cannot be null, or empty</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> HasValidStateAbbreviation</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> IRuleBuilder</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?></span><span style=\"color:#80A665\"> ruleBuilder</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ruleBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Custom</span><span style=\"color:#666666\">((</span><span style=\"color:#80A665\">stateAbbreviation</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> context</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">ValidStateRegex</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsMatch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">stateAbbreviation</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">stateAbbreviation</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> is not a valid state code</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            })</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">NotEmpty</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">State code cannot be empty</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> HasValidStreetAddress</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> IRuleBuilder</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?></span><span style=\"color:#80A665\"> ruleBuilder</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ruleBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Custom</span><span style=\"color:#666666\">((</span><span style=\"color:#80A665\">streetAddress</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> context</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">streetAddress</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                    // Add the context failure and break out of the validation</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply a street address</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    return</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">StreetAddressRegex</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsMatch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">context</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">PropertyValue</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">()))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">streetAddress</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> is not a valid street address</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> HasValidZipCode</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> IRuleBuilder</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?></span><span style=\"color:#80A665\"> ruleBuilder</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ruleBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Custom</span><span style=\"color:#666666\">((</span><span style=\"color:#80A665\">zipCode</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> context</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">zipCode</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                    // Add the context failure and break out of the validation</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply the zip code</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    return</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">ZipCodeRegex</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsMatch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">context</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">PropertyValue</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">()))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    context</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFailure</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">zipCode</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> is not a valid zipcode</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too complicated here, we're just building some extension methods off of the\nFluentValidation <code>IRuleBuilder&#x3C;T, TProperty></code> interface to combine several validations on the validation context, as\nwell as add some custom validations like the state code regex for convenience. Inside each extension method, we utilize\nthe <code>Custom</code> extension method of the <code>IRuleBuilder</code> interface and pass an <code>Action&#x3C;TProperty, CustomContext></code> lambda\nwhere we make our custom assertions and failures to the returned validation context that then gets passed down the chain\nwith our query and command validator classes. I highly recommend checking out\nthe <a href=\"https://fluentvalidation.net/\">documentation for FluentValidation</a> as the maintainers have done a great job\nutilizing examples and references similar to the above. Next, with our brewery command and request validator in place,\nlet's add the main staple of functionality within our application layer - the MediatR handler.</p>\n<h3>CreateBreweryCommandHandler.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Extensions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateBreweryCommandHandler</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequestHandler</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">CreateBreweryCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> _unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateBreweryCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IUnitOfWork</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResource</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">CreateBreweryCommand</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToCreate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Brewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                CreatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    State</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    CreatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    UpdatedAt</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> DateTime</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UtcNow</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create our brewery, retrieve the brewery so we can map it to the response, and clean up our resources</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToCreate</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> insertedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryId</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map and return the response</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">insertedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToBreweryDto</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>As we'll see with each command and query handler, the core business logic of CRUD'ing our way through the application\nwill happen within each of these class types. For our creates (our beer create operations will be eerily similar), we\ninstantiate a new <code>Brewery</code> entity that will be added to our database with all the proper fields validated by\nour <code>CreateBreweryCommandValidator</code> so we can rest assured the fields we require to store a brewery are there (avoiding\na bunch of <code>if (field is null) { // Do something, or throw an exception }</code> checks that will clutter things up), and call\nour data layer operations to create and retrieve the brewery. Recall that when we create a brewery through our\nrepository method, we get back the last inserted brewery record ID from the <code>Breweries</code> table, which we can then turn\naround and retrieve that newly inserted brewery using the <code>GetBreweryById</code> method. Now granted, there's multiple way\nthis could be optimized and refactored, but this was my deliberate decision to keep our CRUD operations simple and\nadhering to only conform to a <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">single responsibility</a>.\nThere may times where the command to create the brewery does in fact fail at the database level, however, where the\nconnection to physical server may be bad, or the server might be down, etc., so I figured I would leave the failure\ncases to the smart guys reading this post as an exercise for the audience.</p>\n<p>Once our brewery entity has been retrieved, we then construct an instance of the <code>BreweryResource</code> to hand back to the\nAPI layer with a brewery DTO injected into the instance. Let's take a look at our mappers while we're here to get a\nsense of how this mapping is done exactly. Let's create a directory in our <code>Dappery.Core</code> project called <code>Extensions</code>\nwhere we'll create a <code>BreweryExtensions.cs</code> class:</p>\n<h3>BreweryExtensions.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Brewery</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BreweryExtensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> BreweryDto</span><span style=\"color:#80A665\"> ToBreweryDto</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> Brewery</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> includeBeerList</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> true</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Beers</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> includeBeerList</span><span style=\"color:#CB7676\"> ?</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Select</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                })</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#CB7676\"> default</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Address</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> AddressDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    State</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                },</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                BeerCount</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> includeBeerList</span><span style=\"color:#CB7676\"> ?</span><span style=\"color:#BD976A\"> brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerCount</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">?)</span><span style=\"color:#CB7676\"> null</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We see that our mapper is nothing but a simple extension method of the <code>Brewery</code> entity class that transforms the entity\ninto our friendly DTO, omitting fields that don't necessarily need to be transported between layers (i.e. audit\nproperties, or IDs of related entities, just to name a few). From a relationship perspective, remember that a brewery\n<em>has many</em> beers, where a beer <em>has one</em> brewery; we control the nested relational mapping with the <code>includeBeerList</code>\ndefault flag, as to avoid recursively mapped beers and breweries. Nothing too complicated here, just a nice simple\nmapper, and for those interested, I've written\na <a href=\"https://github.com/JoeyMckenzie/Dappery/blob/master/tests/Dappery.Core.Tests/Extensions/BreweryExtensionsTest.cs\">few unit tests</a>\nto capture the expected behavior of our custom mapping class. While we're at it, let's go ahead and add\na <code>BeerExtensions.cs</code> class within our <code>Extensions</code> directory:</p>\n<h3>BeerExtensions.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BeerExtensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> BeerDto</span><span style=\"color:#80A665\"> ToBeerDto</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> Beer</span><span style=\"color:#80A665\"> beer</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">             return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> beer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToBreweryDto</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Even simpler, our custom beer mapper just transforms a <code>Beer</code> entity into a slim DTO, while utilizing\nour <code>.ToBreweryDto()</code> brewery extension method to non-recursively map the beer's brewery.</p>\n<p>At this point, you're probably wondering \"this is great, but how exactly <em>does</em> our validation catch validation errors?\"\nThat's a great question, with the answer being the MediatR library's <code>IPipelineBehavior&#x3C;TRequest, TResponse></code> interface.\nFor the interested, <a href=\"https://github.com/jbogard\">Jimmy Boggard</a>, an absolute rockstar for the .NET community, and the\nmaintainers of MediatR have a great <a href=\"https://github.com/jbogard/MediatR/wiki\">library doc</a> explaining the exact behavior\nof pipelines and why they are useful to the library. In essence, a every message we send with MediatR will flow through\nour registered pipeline (which we'll register as a dependency within our API layer), giving us the power to check\nrequests for certain properties, validate behaviors, log specific messages based on the request - really anything we\nwant. For our use case, we'll implement the <code>IPipelineBehavior&#x3C;TRequest, TResponse></code> interface to define\na <code>RequestValidationBehavior&#x3C;TRequest, TResponse></code> piece of the request pipeline that will take care of inspecting every\nrequest to make sure it's confiding by our FluentValidation validation rules that we define for each command and some\nqueries. When we register our FluentValidation classes at application startup, we'll tell the library that all of our\nvalidators will be within the <code>Dappery.Core</code> assembly, letting FluentValidator scan the assembly to find and register\neach of our validation contexts, so that we can generically call each request's validation context to then validate the\nrequest with our registered validators. Pretty cool, huh? Side note: I've never used <em>validate</em>, or any of its\nderivatives, that much in a sentence ever in my entire life.</p>\n<p>Let's go ahead and create an <code>Infrastructure</code> folder within our <code>Dappery.Core</code> project, and then create\na <code>RequestValidationBehavior.cs</code> class that will implement an <code>IPipelineBehavior</code>:</p>\n<h3>RequestValidationBehavior.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Infrastructure</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RequestValidationBehavior</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TResponse</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IPipelineBehavior</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TResponse</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        where</span><span style=\"color:#5DA994\"> TRequest</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> _validators</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> RequestValidationBehavior</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> validators</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _validators</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> validators</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TRequest</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> RequestHandlerDelegate</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> next</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> context</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> ValidationContext</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> failures</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> _validators</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">Select</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">v</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> v</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Validate</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">context</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">SelectMany</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">result</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Errors</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">Where</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">f</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> f</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">failures</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Any</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Validation failures for request [</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">request</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">]</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> ValidationException</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">failures</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#80A665\"> next</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Let's break it down:</p>\n<ul>\n<li>First, we inject from the DI container (which we'll see in the API layer with the help of ASP.NET Core) all of the\nvalidations that were found in the assembly that all descended from <code>AbstractValidator&#x3C;TCommand></code> and retrieves the\nrules we've defined per instance</li>\n<li>We retrieve the validators from the request, which we'll know at runtime</li>\n<li>Using LINQ, we run through each validator, validate the context (whatever the request type may be), flatten\nthe <code>ValidationResult</code> enumerable by mapping just the error property with <code>.SelectMany()</code>, and collect any that return\nerrors</li>\n<li>We check to see if there were any violations of our rules, and throw the <code>ValidationException</code> that we'll catch within\na global exception handler within the API layer so we can return detailed validation messages to the consumers</li>\n<li>Finally, we let the request thread continue on its merry way throughout the layers of our application (unscathed if\nthere were no errors)</li>\n</ul>\n<p>Whew, that small bit of code is doing <em>a lot</em> of big things for us. Using MediatR and FluentValidator in tandem is a\nmatch made in heaven, letting developers customize their application request flow, providing convention to help reduce\nthe complexity of our software. Now that we've gotten our pipeline behavior piece implemented, let's go ahead and extend\nthe <code>IServiceCollection</code> from the <code>Microsoft.Extensions.DependencyInjection</code> namespace that will do all the leg work of\nresolving our dependencies. Within our <code>Extensions</code> folder, let's add a <code>StartupExtensions.cs</code> class. We\nuse <code>StartupExtensions</code> here which is a bit specific for my liking, but our use case is just a simple ASP.NET Core\napplication (you may see this with the name <code>DependencyInjection.cs</code> or something similar around various .NET libraries\non GitHub).</p>\n<h3>StartupExtensions.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reflection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Infrastructure</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> StartupExtensions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /// </span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">summary</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /// Extension to contain all of our business layer dependencies for our external server providers (ASP.NET Core in our case).</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /// </span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">summary</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /// </span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">param</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">services</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#758575DD\">Service collection for dependency injection</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">param</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> AddDapperyCore</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">this</span><span style=\"color:#5DA994\"> IServiceCollection</span><span style=\"color:#80A665\"> services</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add our MediatR and FluentValidation dependencies</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddMediatR</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">Assembly</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetExecutingAssembly</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add our MediatR validation pipeline</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddTransient</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">typeof</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IPipelineBehavior</span><span style=\"color:#666666\">&#x3C;,>),</span><span style=\"color:#CB7676\"> typeof</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">RequestValidationBehavior</span><span style=\"color:#666666\">&#x3C;,>));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too complicated just here, just adding MediatR to the service registry, telling it to scan this assembly for\nimplemented types of the library so that it can wire things up correctly for our internal \"messaging\" system, then\nfinishing up by adding an a reference to the service container for our MediatR pipeline with\na <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1#service-lifetimes-and-registration-options\">transient</a>\nlifetime. If you're unfamiliar with the different ways we can register service dependencies in .NET Core, check out the\nlinked docs for a quite delightful Sunday morning read. I won't go into detail, as the docs do a pretty good job of\nexplaining our use of the transient lifetime here, but in summary, services with this lifetime are dolled out each time\nthe the service is requested when a thread just so happens to hit a piece of code that requires one. From the docs:</p>\n<blockquote>\n<p>Transient lifetime services (AddTransient) are created each time they're requested from the service container. This\nlifetime works best for lightweight, stateless services.</p>\n</blockquote>\n<p>Now that we've got most of our core layer plumbing out of the way, we can now just focus on implementing our query and\ncommand handlers in a similar fashion to the <code>CreateBreweryCommandHandler</code> from above. We've given users the option of\ncreating breweries, so now let's add an update feature to modify a previously created brewery. Let's add\nan <code>UpdateBrewery</code> folder within the <code>Breweries/Commands</code> directory. For the curious, my preference for the folder\nstructure is to mimic an application use case, solely for the case of debug-ability and easily being able to identify\nwhat areas of the application are in charge of what. This is more often than not referred to as <em>vertical slice\narchitecture</em>, and there's a <a href=\"https://jimmybogard.com/vertical-slice-architecture/\">great article</a>, again by Jimmy\nBoggard, that discusses the power of utilizing this pattern. Notwithstanding, there are a few places where I've been a\nbit lazy and not so idiomatic in designing with that in mind (particularly in the domain layer), but I'll leave the\nclean up as an exercise for the reader. Let's add an <code>UpdateBreweryCommand.cs</code> underneath the <code>UpdateBrewery</code> folder:</p>\n<h3>UpdateBreweryCommand.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateBeery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateBeerCommand</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BeerResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateBeerCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">UpdateBeerDto</span><span style=\"color:#80A665\"> beerDto</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> requestId</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> BeerId</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">beerDto</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> requestId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> UpdateBeerDto</span><span style=\"color:#80A665\"> Dto</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> BeerId</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Easy enough, all our <code>UpdateBreweryCommand</code> requires is an ID for the brewery and the properties we've exposed that\nconsumer are allowed to update. Next, let's define our validators in an <code>UpdateBreweryCommandValidator.cs</code> class:</p>\n<h3>UpdateBreweryCommandValidator.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateBreweryCommandValidator</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> AbstractValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateBreweryCommand</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateBreweryCommandValidator</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">request</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply a request body</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">request</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply a valid brewery ID</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We want each request that comes in for a brewery update to have a valid DTO in the body, along with a brewery ID that\nwe'll retrieve from the URI. There's an argument to be made for sticking the ID as a requirement within the DTO, but\nthis just my preference since we'll assume our consumers will be following RESTful best practices (and that's a <em>hefty</em>\nassumption). Next, we'll go ahead and define our command handler within a new <code>UpdateBreweryCommandHandler.cs</code> class\nwithin our <code>UpdateBrewery</code> directory:</p>\n<h3>UpdateBreweryCommandHandler.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Extensions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Exceptions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateBreweryCommandHandler</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequestHandler</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateBreweryCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> _unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateBreweryCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IUnitOfWork</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResource</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">UpdateBreweryCommand</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Retrieve the brewery on the request</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToUpdate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Invalidate the request if no brewery was found</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> DapperyApiException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">No brewery was found with ID </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">BreweryId</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HttpStatusCode</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">NotFound</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Update the properties on the brewery entity</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updateBreweryAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If the request contains an address, set the flag for the persistence layer to update the address table</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#BD976A\"> breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                updateBreweryAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> true</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                breweryToUpdate</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Update the brewery in the database, retrieve it, and clean up our resources</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UpdateBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">breweryToUpdate</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> updateBreweryAddress</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updatedBrewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map and return the brewery</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">updatedBrewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToBreweryDto</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>First, we see that we're using the <code>BreweryId</code> that was passed along in the request to retrieve the brewery we should be\nupdating. If no brewery is found, we'll throw a 404 back to the consumer using a custom exception we'll define in just a\nminute. Once we know we've got our brewery, we update each of the updatable fields on the entity, and set a flag for the\nrepository implementation to update the address if need be. Due to our schema design, we probably could have opted for\nthe <a href=\"https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/implement-value-objects\">value object</a>\npattern here and nested the address within the brewery table, and maybe one of these weekends I'll get around to making\nthat update. Let's create an <code>Exceptions</code> folder underneath the <code>Dappery.Core</code> project root, and inside that, we'll\ncreate a <code>DapperyApiException.cs</code> class:</p>\n<h3>DapperyApiException.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Exceptions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DapperyApiException</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Exception</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DapperyApiException</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> message</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> HttpStatusCode</span><span style=\"color:#80A665\"> statusCode</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            :</span><span style=\"color:#C99076\"> base</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            StatusCode</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> statusCode</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ApiErrors</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DapperyApiError</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> HttpStatusCode</span><span style=\"color:#80A665\"> StatusCode</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> ICollection</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DapperyApiError</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> ApiErrors</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now, there's an argument to be made about using\nexceptions <a href=\"https://wiki.c2.com/?DontUseExceptionsForFlowControl\">as control flow within an application</a> which is\nessentially what we're doing here, but I'll let that holy war continue on StackOverflow. For our simple use case, we'll\nuse this exception to handle any sort of operation that cannot be performed to protect misinformation from reaching the\nlower level concerns and handle the situation with a global (at least within the scope of our API) exception handler in\nthat layer that will decipher and determine the proper message to send back to consumers. We've also defined\na <code>DapperyApiError</code> type that will encapsulate and be used as a translator of sorts to convey to consumers exactly what\nhappened to cause the exception:</p>\n<h3>DapperyApiError.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Exceptions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DapperyApiError</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DapperyApiError</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> errorMessage</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> propertyName</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ErrorMessage</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> errorMessage</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            PropertyName</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> propertyName</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> ErrorMessage</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> PropertyName</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our <code>DapperyApiException</code> and <code>DapperyApiError</code> will work in tandem to help to give us a predefined convention for\nhandling any sort of error scenario within the core application layer so that we can easily contextualize the content of\nthe error and pass the information back up rather than leaking bad state down to our other layers. We'll see in the API\nlayer how we define a handler within our request pipeline to handle error scenarios in a somewhat graceful manner,\nthough there are quite a few ways to do this. For now, our simple error and exception classes will work just fine, but\nwe might want to rethink the approach at scale when coordinating between multiple API (micro)services, whether prosumer,\nor consumer. With the last piece of the infrastructure plumping out of the way, let's set our focus back on the commands\nand queries we're in the midst of writing.</p>\n<p>Since we're building a (probably overcomplicated) CRUD solution, let's give users the option to retrieve and search for\nbreweries. Let's create a <code>Queries</code> folder underneath our <code>Breweries</code> directory, and start off by creating another\nfolder of <code>RetrieveBrewery</code>. After that's done, let's create a <code>RetrieveBreweryQuery.cs</code> file:</p>\n<h3>RetrieveBreweryQuery.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Queries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">RetrieveBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RetrieveBreweryQuery</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> RetrieveBreweryQuery</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Easy enough, just a simple <code>IRequest</code> that will return a <code>BreweryResource</code> back to the consumer, given an ID to match\non. With that out of the way, let's create a <code>RetrieveBreweryQueryValidator.cs</code> validator class to catch mischievous\nconsumers that will try and invoke this operation and somehow manage to fool the ASP.NET Core route matching system:</p>\n<h3>RetrieveBreweryQueryValidator.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Queries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">RetrieveBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RetrieveBreweryQueryValidator</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> AbstractValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">RetrieveBreweryQuery</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> RetrieveBreweryQueryValidator</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotEmpty</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply an ID to retrieve a brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">GreaterThanOrEqualTo</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must be a valid brewery ID</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Here, we define two validations in not allowing null IDs to propogate to this layer (shouldn't happen in the first\nplace, since we did not declare the ID as nullable), and the ID should be greater than zero, as our table constraint is\nusing the ID as an index and primary key. Next, let's define our query handler with a\nnew <code>RetrieveBreweryQueryHandler.cs</code> class:</p>\n<h3>RetrieveBreweryQueryHandler.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Queries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">RetrieveBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Exceptions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Extensions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RetrieveBreweryQueryHandler</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequestHandler</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">RetrieveBreweryQuery</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> _unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> RetrieveBreweryQueryHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IUnitOfWork</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResource</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">RetrieveBreweryQuery</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Retrieve the brewery and clean up our resources</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> brewery</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Invalidate the request if no brewery is found</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">brewery</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> DapperyApiException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">No brewery found with ID </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HttpStatusCode</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">NotFound</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map and return the brewery</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryResource</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToBreweryDto</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>This is about as standard as a retrieve request gets: attempt to grab the brewery from the database using our\napplication repositories, clean up our resources, throw our custom exception for not found if no brewery was returned,\nand return the resource with a view model friendly representation of our brewery entity. While we're at the 'R' in CRUD,\nlet's add an operation for our consumers to get a list of all breweries. Inside the <code>Brewery/Queries</code> folder, go ahead\nand create a <code>GetBreweries</code> folder, followed by a <code>GetBreweriesQuery.cs</code> class inside the newly created folder:</p>\n<h3>GetBreweryQuery.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Queries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">GetBreweries</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> GetBreweriesQuery</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResourceList</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our simplest form of an <code>IRequest</code>, we're letting MediatR know that anytime a message is sent with the context\nof <code>GetBreweriesQuery</code>, the library will map that request to a <code>GetBreweriesQueryHandler</code> (below) and return\na <code>BreweryResourceList</code>. Let's implement the handler:</p>\n<h3>GetBreweryQuery.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Queries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">GetBreweries</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Extensions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> GetBreweriesQueryHandler</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequestHandler</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">GetBreweriesQuery</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> BreweryResourceList</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> _unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> GetBreweriesQueryHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IUnitOfWork</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BreweryResourceList</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">GetBreweriesQuery</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Retrieve the breweries and clean up our resources</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweries</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetAllBreweries</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map our breweries from the returned query</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> mappedBreweries</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Select</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToBreweryDto</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Map each brewery to its corresponding DTO</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> BreweryResourceList</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mappedBreweries</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>As straightforward as a search request be, we're simply just grabbing all the breweries from the database, projecting\neach entity into its view model representation, and returning the list to the consumer. No execptions, and we also\nhandle the case if there are no breweries in the database to just return an empty list (which we'll cover with a unit\ntest). Now, since we're building just a small demo application, we <em>probably</em> shouldn't be returning the entirety of\nrecords from the breweries table within the database. A more sound and performant implementation of this handler would\nbe to pass query filters and options for pagination on the <code>GetBreweriesQuery</code>, so that we could refine our SQL and not\nhave Dapper try to map every record to its corresponding C# POCO. Again, I'll leave this as an exercise for the reader,\nor maybe comeback on a rainy day to refactor this (most likely not, though). For Completeness, let's finish up our set\nof brewery operations by adding a delete command to our application by creating a <code>DeleteBrewery</code> folder nested within\nour <code>Breweries/Commands</code> directory, then creating a <code>DeleteBreweryCommand.cs</code> file:</p>\n<h3>DeleteBreweryCommand.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteBreweryCommand</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequest</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Unit</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteBreweryCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> BreweryId</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>All we require for a delete command is just the ID, which we'll get from the API layer. Let's create a validator for the\nhooligans that might try and break the chain of command within the same <code>DeleteBrewery</code> directory:</p>\n<h3>DeleteBreweryCommandValidator.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> FluentValidation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteBreweryCommandValidator</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> AbstractValidator</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteBreweryCommand</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteBreweryCommandValidator</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            RuleFor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">b</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> b</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">NotNull</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">WithMessage</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Must supply the brewery ID</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We don't want to perform any delete request if we haven't an ID to validate the beer exists in the database, first and\nforemost. Again, since our delete command is correct by construction since we did <em>not</em> tell the command to expect a\nnullable <code>int</code>, we should nevertm see this behavior, but it doesn't hurt to have an extra layer of\nvalidation. Finally, let's finish up by implementing the <code>DeleteBreweryCommandHandler.cs</code> class:</p>\n<h3>DeleteBreweryCommandHandler.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Breweries</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteBrewery</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Exceptions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> MediatR</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteBreweryCommandHandler</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IRequestHandler</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteBreweryCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Unit</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IUnitOfWork</span><span style=\"color:#80A665\"> _unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteBreweryCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IUnitOfWork</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> unitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Unit</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">DeleteBreweryCommand</span><span style=\"color:#80A665\"> request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CancellationToken</span><span style=\"color:#80A665\"> cancellationToken</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Retrieve the brewery and invalidate the request if none is found</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> breweryToDelete</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetBreweryById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Invalidate the request if no brewery is found</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">breweryToDelete</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> DapperyApiException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">No brewery was found with ID </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">BreweryId</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HttpStatusCode</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">NotFound</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Delete the brewery from the database and clean up our resources once we know we have a valid beer</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryRepository</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteBrewery</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BreweryId</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> cancellationToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _unitOfWork</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Commit</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> Unit</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Again, no shenanigans here, as we retrieve the brewery first to validate it exists, handle the case of no brewery found,\nand remove it from the database and pass nothing but a <code>Unit.Value</code> (from the <code>MediatR</code> namespace) to signal the work we\nperformed is finished and successful.</p>\n<p>Alright, let's take a minute to breathe, as that was a lot of code we just cranked out. To cleanse our minds, I'll take\na break from finishing our beer operations by showing some examples of how we might write some unit tests for this\nlayer. <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-3-core-layer/tests/Dappery.Core.Tests\">I'll leave this link</a>\nfor the interested to scan through how I wrote each handler test (happy paths only). Using\nthe <code>CreateBreweryCommandHandlerTest.cs</code> xUnit spec as an example:</p>\n<h3>CreateBeerCommandHandlerTest.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> Dappery</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tests</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Core</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateBeer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Beer</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Entities</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Domain</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Media</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Exceptions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Shouldly</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    using</span><span style=\"color:#5DA994\"> Xunit</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateBeerCommandHandlerTest</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> TestFixture</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GivenValidRequest_WhenBreweryExists_ReturnsMappedAndCreatedBeer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> beerCommand</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateBeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Test Beer</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Lager</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> handler</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">unitOfWork</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> handler</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> CancellationTestToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BeerResource</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">1030 E Cypress Ave Ste D</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">96002</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Style</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Style</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GivenValidRequest_WhenBreweryDoesNotExist_ThrowsApiExceptionForBadRequest</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> beerCommand</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateBeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Test Beer</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Lager</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 11</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> handler</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">unitOfWork</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> Should</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ThrowAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DapperyApiException</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">async</span><span style=\"color:#666666\"> ()</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> handler</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> CancellationTestToken</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StatusCode</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatusCode</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BadRequest</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Fact</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> GivenValidRequest_WithInvalidBeerStyle_ReturnsMappedAndCreatedBeerWithOtherAsStyle</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> unitOfWork</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> UnitOfWork</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> beerCommand</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommand</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateBeerDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Test Beer</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                Style</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Not defined!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                BreweryId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> handler</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateBeerCommandHandler</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">unitOfWork</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Act</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> handler</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Handle</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> CancellationTestToken</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Assert</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeOfType</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">BeerResource</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StreetAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">1030 E Cypress Ave Ste D</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Redding</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Address</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ZipCode</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">96002</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Beers</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Brewery</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Fall River Brewery</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldNotBeNull</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beerCommand</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Dto</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Name</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            result</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Style</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ShouldBe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">BeerStyle</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Other</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToString</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We see that there are quite a few similarities with how we wrote unit tests for the data layer. We define a\ncommon <code>TestFixture</code> that our test files descend from in order to capture a clean test context between specs where all\nof our dependencies are wired up for us and guaranteed fresh for each test run. Then, we write just a few simple tests\nthat cover each scenario we could possibly see within the <code>CreateBreweryCommandHandler</code> implementation by setting up the\ncommand, declaring and assigning a reference to the handler, and capturing the resulting <code>handler.Handle()</code> response to\nvalidate against. I won't include the other tests here for brevity, but I definitely encourage the curious out there to\ncheck out how I've written the other tests, and even more so encourage any method of where we might improve these tests.</p>\n<p>In an effort to not bore you guys <em>too much</em>, I'll snap the chalk line for this post here, as the beer operations share\na lot of the same ideas with how we wrote the brewery operations,\nand <a href=\"https://github.com/JoeyMckenzie/Dappery/tree/dappery-part-3-core-layer/src/Dappery.Core/Beers\">I'll leave this link here</a>\nfor you guys to checkout how, exactly, we might write those commands and queries. For the most part, it'll feel eerily\nsimilar in setup, with just a few minor tweaks since we're working within the context of the child in the beer-brewery\nrelationship. While this might seem like a lot of redundant, rather boilerplate-y code, I think we should discuss the\ntradeoffs of using MediatR with the CQRS pattern:</p>\n<ul>\n<li>Since we've separated commands from queries, we've implicitly created clearly defined boundaries within the core\napplication layer</li>\n<li>If we want to add additional features, we can easily do so without fear of modifying existing behavior as we've\ncompartmentalized each request in total isolation from one another</li>\n<li>We've greatly reduced number of states our application could possibly create, with a finite number of logical paths a\nrequest thread could take</li>\n<li>Notice we have no classical service-type classes as we we're deliberate about not creating an all encompassing service\nthat would mix our commands and queries together</li>\n<li>While all this sounds great, one could also argue that we've complicated the code by adding such convention all over\nthe place</li>\n</ul>\n<p>At the end of the day, no matter how we implement the core application layer, it will still have just one\nresponsibility - encompass all the business logic. We've seen that using MediatR, FluentValidation, and a few simple\nmappers, we can build a flexible, modular business logic layer that is easy to extend and modify to fit our business\nneeds and requirements. In our next post, we'll <em>finally</em> finish up our application by slapping an API layer on top of\nall the code we've written thus far and see if this thing actually works.</p>\n<p>And with that... I think it's time for a beer. Cheers everyone!</p>\n<p>import BlogLayout from '@/layouts/BlogLayout';</p>\n<p>export default ({ children }) => {children};</p>"
    },
    "_id": "2020/net-core-dapper-and-crud-buzzword-bingo-part-4.md",
    "_raw": {
      "sourceFilePath": "2020/net-core-dapper-and-crud-buzzword-bingo-part-4.md",
      "sourceFileName": "net-core-dapper-and-crud-buzzword-bingo-part-4.md",
      "sourceFileDir": "2020",
      "contentType": "markdown",
      "flattenedPath": "2020/net-core-dapper-and-crud-buzzword-bingo-part-4"
    },
    "type": "Post",
    "url": "/blog/2020/net-core-dapper-and-crud-buzzword-bingo-part-4"
  },
  {
    "title": ".NET Core service lifetimes in a nutshell",
    "description": "Learn to register your lifetimes accordingly with .NET Core's built-in dependency injection and IoC container.",
    "pubDate": "2020-09-23T07:00:00.000Z",
    "category": ".NET",
    "heroImage": "https://imgs.xkcd.com/comics/dependencies.png",
    "draft": false,
    "keywords": [
      "c#",
      ".net",
      "service lifetimes"
    ],
    "body": {
      "raw": "\nNo matter the side of the dependency injection debate fence you fall, you've probably worked with some .NET code that\nhad some form of object composition through DI at some point, or another. Heck, with libraries\nin [Autofac](https://autofac.org/) and .NET Core's dependency injection extension namespace, DI and service container\nregistration is a breeze with all the heavy lifting done virtually for us.\n\nIf you've been reading along for the past several posts, you're wondering why I'm _not_ writing about Blazor. Don't get\nme wrong, I've got quite a few ideas I'd like to get out on paper here as we venture off deeper into Blazor-land. I\nwanted to take a break from the Blazor-scape for a while and write a bit on a topic I've been quite curious about for\nsome time now. Admittedly, I've fallen victim to the mindset of defaulting most of my .NET Core services lifetimes to\nthe good ole fashioned `.AddTransient()` simply because I figured when in doubt, you can't go wrong with the transient\nlifetime.\n\nBut then I started thinking to myself: \"self, do you _really_ understand the difference between service lifetimes?\"\nWhile I thought I had a clear understanding of the basics going just off the docs, I really wanted to make sure I\nunderstood _why_ I was choosing the lifetimes I was for my services. Not only that, I wanted to understand what\ndifferent types of application scenarios called for particular lifetimes.\n\n> Disclaimer: I'm not an Autofac expert, so I'll just be covering services within the scope (no pun intended)\n> of `Microsoft.Extensions.DependencyInjection` for the remainder of this post\n\nIf you're not familiar with the differing service lifetimes one can choose from when registering a service in a .NET\nCore application, the team at Microsoft has provided us with three varieties: transient, scoped, and singleton service\nlifetimes. Before we breakdown each service lifetime and write a bit of code to help us better understand the difference\nin these service types, let's talk about _why_ we might want to use service registration in an application.\n\n## Dependency Injection and Inversion of Control\n\nNow, I like to preface often that I am in no way, shape, or form an expert in the field of software engineering. I write\nthe blog posts, for the most part, to help me better understand the .NET ecosystem and the tools I use on a daily basis.\nSo, before I go down the rabbit hole of service lifetimes, it might be best if we understand why we register services in\nthe first place using something like .NET Core's `ServiceCollection` type from\nthe `Microsoft.Extensions.DependencyInjection` namespace. I like to think of this service container implementation in\nthe following manner:\n\n&nbsp;\n\n![Dependency_injection_flow](/images/dependency-injection-service-lifetimes/dependency_inject.png)\n\n&nbsp;\n\nBreaking it down, starting from an incoming application request:\n\n1. Request comes in ultimately requiring the construction of an object to do some sort of application processing\n2. The object in question requires _another_ service object to be composed correctly\n3. Since we've registered that required service in the IoC container, the request object will ask for the service object\n   to be injected during construction time\n4. Once the service object has been supplied, the object can properly construct itself and continue on to do whatever\n   job it has been invoked to do\n\nWhat this means code wise for us .NET-ers is that we effectively need to supply registered services within a class'\nconstructor, where the service container will recognize there's a dependency on said registered service in order for the\ndependent class to be properly constructed. If that's not a circular explanation, I don't know what is.\n\nIn our .NET Core applications, we deal with registered service container objects and classes on a regular basis -\nASP.NET Core `Controller`s, Entity Framework Core's `DbContext`\ns, [MediatR's](https://github.com/jbogard/MediatR) `IRequest` object, and the list goes on. Thanks to the IoC container,\nthe details of how these objects are registered and requested at runtime are abstracted from us, allowing us to\neffectively construct our registered classes with any number of other registered services of our choosing. There's\nprobably something I'm missing here, but I'll let the experts chime in and fill the gaps where necessary.\n\n## Service lifetimes\n\nAlright, back to business. Like we mentioned, there are three service lifetimes we can access through the dependency\ninjection extension namespace in transient, scoped, and singleton. The plain english explanation is as follows:\n\n-   **transient** - these services are constructed anew _every_ single time they're request from the service container and\n    will never persist across registered containers (i.e. `ServiceCollection`s that have outlived the scope of one\n    another)\n-   **scoped** - services that are constructed once during the lifetime scope of a `ServiceCollection` and persist across\n    service requests each time they're requested within the lifetime scope of a service container\n-   **singleton** - services that are constructed only a single time during the lifetime of an application, and persistent\n    across service container lifetime scopes\n\nThat seems like a lot of hoobla, so let's see service lifetimes in action to really try and make sense of all of this.\n\n## An example console application\n\nLet's kick things off by creating a new console application. I'll be using Visual Studio for Mac to change things up a\nbit, and I'll create a simple console application using the `File > New Project`. I'll name my\nproject `DependencyInjectionServiceLifetimes` and let leave the rest of the defaults. Feel free to checkout\nthe [source code](https://github.com/JoeyMckenzie/DependencyInjectionServiceLifetimes) anytime.\n\nWith our application bootstrapped, we should see just a single class file with `Program.cs` and nothing else. Now, we\n_could_ do this demonstration using an ASP.NET Core project, but we want to keep things simple without much project\noverhead. Let's go ahead and add a package reference to the latest version of `Microsoft.Extensions.DependencyInjection`\nto our `.csproj` file using your preferred method. Again, I'll be using the Package Manager interface in VS for Mac, but\nyou're welcome to use the command line as well. Once we've a few got the package reference, let's go ahead and add\na `Services` folder to the root of our project.\n\nWith our `Services` folder in place, let's add three simple service classes that we'll each register with a different\nlifetime. Go ahead and create three classes underneath `Services`: `TransientService`, `ScopedService`,\nand `SingletonService` (creative, I know):\n\n### TransientService.cs\n\n```csharp\nusing System;\n\nnamespace DependencyInjectionServiceLifetimes.Services\n{\n    public class TransientService : IDisposable\n    {\n        public TransientService() =>\n            Console.WriteLine(\"Constructing a transient service...\");\n\n        public void Dispose() =>\n            Console.WriteLine(\"Disposing of transient service...\");\n    }\n}\n\n```\n\n### ScopedService.cs\n\n```csharp\nusing System;\n\nnamespace DependencyInjectionServiceLifetimes.Services\n{\n    public class ScopedService : IDisposable\n    {\n        public ScopedService() =>\n            Console.WriteLine(\"Constructing a scoped service...\");\n\n        public void Dispose() =>\n            Console.WriteLine(\"Disposing of scoped service...\");\n    }\n}\n\n```\n\n### SingletonService.cs\n\n```csharp\nusing System;\n\nnamespace DependencyInjectionServiceLifetimes.Services\n{\n    public class SingletonService : IDisposable\n    {\n        public SingletonService() =>\n            Console.WriteLine(\"Constructing a singleton service...\");\n\n        public void Dispose() =>\n            Console.WriteLine(\"Disposing of singleton service...\");\n    }\n}\n```\n\nAs we see, each of our services just informs us when they are constructed and disposed of, nothing else. Since we're\nonly exploring lifetimes, we don't need our services to do any sort of processing for the purposes of this post, so\nwe'll keep them nice and simple. We should point out that we're descending from an `IDisposable` parent in each\nservice - if we take a look at\nthe [`IServiceProvider`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.iservicescope?view=dotnet-plat-ext-3.1)\ninterface in the `Microsoft.Extensions.DependencyInjection` library, we see that it also inherits from `IDisposable`.\nWhen we create our service container and reference a scoped provider instance, the service scope in reference will\ninternally call `Dispose` at the end of its lifetime and subsequently `Dispose` of all applicable services within this\nscope. We implement the `Dispose` method in each service simply for visibility to see this in action.\n\nLet's go ahead and replace the current code in `Program.cs` with the following to kick things off and see what's going\non with all this service registration and request business:\n\n### Program.cs\n\n```csharp\nusing System;\nusing System.Diagnostics;\nusing DependencyInjectionServiceLifetimes.Services;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DependencyInjectionServiceLifetimes\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // Instantiate a service container and add each of our service lifetime types\n            var builder = new ServiceCollection();\n            builder.AddScoped<ScopedService>();\n            builder.AddTransient<TransientService>();\n            builder.AddSingleton<SingletonService>();\n\n            // Build our service container within the scope of our current program\n            using var serviceProvider = builder.BuildServiceProvider();\n\n            // Create a disposable instance of our service container and grab a couple of scoped references\n            Console.WriteLine(\"Building the first service container...\\n\");\n            using var firstScopedContainer = serviceProvider.CreateScope();\n        }\n    }\n}\n```\n\nInitially, all we're doing is instantiating a service container instance with our `builder` reference to a\nnew `ServiceCollection` object, and adding each of our services as their respective lifetimes to the service container.\nTypically, we'd use the `.Add{LifetimeScope}<IMyService, MyService>()` variant of the add method, but this will suffice\nfor our purposes - that's more a discussion of dependency inversion rather than injection and service lifetimes, maybe\nI'll save that for a rainy day. With our services added, we'll construct a scoped instance of our service container with\nthe line `using var serviceProvider = builder.BuildServiceProvider();`, only valid until the end of our program, or\nuntil we manually call `Dispose`. Once we have this scoped service provider reference, we'll grab _another_ scoped\ninstance of the container to mimic an application request coming in to do some processing, requiring the IoC container\nto pull services from.\n\nWhew, there's quite a bit going on in just those few lines of code, but with that out of the way, let's do something a\nbit more familiar to us - requesting scoped services. After we've created our `firstScopedContainer` reference, let's\ngrab a few scoped services from the container. Just below `firstScopedContainer`, let's add the following:\n\n```csharp\nusing System;\nusing System.Diagnostics;\nusing DependencyInjectionServiceLifetimes.Services;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DependencyInjectionServiceLifetimes\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // Previous service setup...\n\n            // Create a disposable instance of our service container and grab a couple of scoped references\n            Console.WriteLine(\"Building the first service container...\\n\");\n            using var firstScopedContainer = serviceProvider.CreateScope();\n            var scopedServiceOne = firstScopedContainer.ServiceProvider.GetRequiredService<ScopedService>();\n            var scopedServiceTwo = firstScopedContainer.ServiceProvider.GetRequiredService<ScopedService>();\n\n            // Validate that our scoped services are the same object reference, existing within the same service container scope lifetime\n            Debug.Assert(scopedServiceOne == scopedServiceTwo);\n        }\n    }\n}\n```\n\nWith a couple references to our scoped services, fire up this application and see what's going on. Since I'm using\nVisual Studio for Mac, I'll go ahead and hit F5, but a simple `dotnet run` from the command line of your choice should\ndo the trick as well. Let's see what we get:\n\n```\nBuilding the first service container...\n\nConstructing a scoped service...\nDisposing of scoped service...\n```\n\nNotice how we only saw the constructor of `IScopedService` called once, as its only purpose was to inform us its\nconstructor was called. Recall that scoped services are constructed _once_ per request, where our `firstScopedContainer`\nis effectively playing the role of an application request to do some processing. Even though we requested\nthe `ScopedService` twice, our service container instantiated said service _one_ time, and upon requesting the same\nscoped service again with `scopedServiceTwo`, we got back the same reference to the previously\nconstructed `ScopedService` object. As our application lifecycle comes to an end, we see that the `Dispose` method of\nour `ScopedService` was called as our program cleans up its resources.\n\nIf you're unfamiliar debug assertions (i.e. the line `Debug.Assert(scopedServiceOne == scopedServiceTwo);`), it's quite\na useful tool provided by the `System.Diagnostics` namespace. Anytime we place a `Debug.Assert(bool condition)` within\nour code, our application will automatically break, similar to a hitting a breakpoint, when we run in debug mode and\nour `condition` evaluates to `false`. Note that this has no effect when running in a release configuration. Here, we use\nthe assertion to check that our scoped service references are in fact the same object reference, as scoped services are\nconstructed only a single time per application request.\n\nAlright, with our scoped services constructed, let's see what happens when we grab some references to our transient\nservices. Just below our debug assertion for our scoped services, let's add the following:\n\n```csharp\nusing System;\nusing System.Diagnostics;\nusing DependencyInjectionServiceLifetimes.Services;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DependencyInjectionServiceLifetimes\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // Just below our Debug.Assert() line...\n\n            // Create our transient services are difference object references within the same service scope\n            var transientServiceOne = firstScopedContainer.ServiceProvider.GetRequiredService<TransientService>();\n            var transientServiceTwo = firstScopedContainer.ServiceProvider.GetRequiredService<TransientService>();\n\n            // Validate that our transient services are not the same object reference, newly created for each request from the container\n            Debug.Assert(transientServiceOne != transientServiceTwo);\n        }\n    }\n}\n```\n\nWith a couple of references to initialized to our `TransientService` retrieved from our service container, let's run our\napplication once more to see what's going on. Again, hitting F5 in Visual Studio:\n\n```\nBuilding the first service container...\n\nConstructing a scoped service...\nConstructing a transient service...\nConstructing a transient service...\nDisposing of transient service...\nDisposing of transient service...\nDisposing of scoped service...\n```\n\nOkay, so we got a bit of different output this time. Notice that still we only get one instance constructed for\nour `ScopedService` type, but now we get _two_ constructed instances of our `TransientService` type. Recall that the\ntransient service lifetime will construct its registered service _per request_ from the container, regardless of request\nscope. In plain english, each time we request a transient service, we're getting a fresh, brand spanking new service\nobject. Again, we'll use a debug assertion to assert that our transient services are different object references just to\nbe sure. Once more, when our application lifecycle comes to an end, all the services are cleaned up, as we can see from\nthe three lines letting us know that each requested service had its `Dispose` method called.\n\nWith our transient services in place now, let's see what happens when we bring our singleton service into the mix. Just\nbelow the debug assertion for our transient services, let's add the following:\n\n```csharp\nusing System;\nusing System.Diagnostics;\nusing DependencyInjectionServiceLifetimes.Services;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DependencyInjectionServiceLifetimes\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // Just below our Debug.Assert() line...\n\n            // Create our singleton services are the same object reference within the same service scope\n            var singletonServiceOne = firstScopedContainer.ServiceProvider.GetRequiredService<SingletonService>();\n            var singletonServiceTwo = firstScopedContainer.ServiceProvider.GetRequiredService<SingletonService>();\n\n            // Validate that our singleton services are the same object reference, existing for the lifetime of the application\n            Debug.Assert(singletonServiceOne == singletonServiceTwo);\n\n            // Dispose of our current service container and create a new one\n            firstScopedContainer.Dispose();\n        }\n    }\n}\n```\n\nRunning our code now should produce the following output:\n\n```\nBuilding the first service container...\n\nConstructing a scoped service...\nConstructing a transient service...\nConstructing a transient service...\nConstructing a singleton service...\nDisposing of transient service...\nDisposing of transient service...\nDisposing of scoped service...\nDisposing of singleton service...\n```\n\nNothing has changed with our scoped and transient service constructions, or disposals. The only new lines we see now are\nthe construction and disposal of our singleton service. It might be tempting to infer that singleton services and scoped\nservices might act similarly, but that's not the case. Recall that singleton services are constructed _once_ per\napplication lifetime. Our application lifetime only has one \"request\" coming in so far, and finishes its \"processing\"\nonce we hit the line `firstScopedContainer.Dispose();`. This is all fine and dandy, but what happens when we have\nmultiple request coming in?\n\nLet's add another request facade in our application and see what happens we ask for services. Just below the debug\nassertion for our singleton service, let's add the following:\n\n```csharp\nusing System;\nusing System.Diagnostics;\nusing DependencyInjectionServiceLifetimes.Services;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DependencyInjectionServiceLifetimes\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // Just below our Debug.Assert() line...\n\n            // Create another scoped service container instance and grab a few more of our lifetime services for comparison\n            Console.WriteLine(\"\\nBuilding our second service container...\");\n            using var secondScopedContainer = serviceProvider.CreateScope();\n\n            // Create another scoped service instance and compare it's object reference to the previous scoped instances\n            Console.WriteLine(\"\\nGrabbing a reference to another scoped service...\");\n            var anotherScopedService = secondScopedContainer.ServiceProvider.GetRequiredService<ScopedService>();\n            Debug.Assert(anotherScopedService != scopedServiceOne && anotherScopedService != scopedServiceTwo);\n        }\n    }\n}\n```\n\nRunning our program now, we get the following:\n\n```\nBuilding the first service container...\n\nConstructing a scoped service...\nConstructing a transient service...\nConstructing a transient service...\nConstructing a singleton service...\nDisposing of transient service...\nDisposing of transient service...\nDisposing of scoped service...\n\nBuilding our second service container...\n\nGrabbing a reference to another scoped service...\nConstructing a scoped service...\nDisposing of scoped service...\nDisposing of singleton service...\n```\n\nCan you spot the difference in output now? After our first service scope has been disposed, we clean up our references\nto our transient and scoped services, but our singleton service lives on. When we create a new request scope and grab\nanother scoped service instance, our scoped service container creates _another_ scoped service for us, as our scoped\nservice lifetimes does _not_ persist across application request scopes. Once our program ends, we do our usual cleaning\nup of our newly requested scoped services, but notice now that our singleton service is disposed of _after_ our second\napplication \"request\" comes in and our application's life comes to end (harsh). Let's see what happens when we add\nanother transient service reference. Again, just below our last debug assertion:\n\n```csharp\nusing System;\nusing System.Diagnostics;\nusing DependencyInjectionServiceLifetimes.Services;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DependencyInjectionServiceLifetimes\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // Just below our Debug.Assert() line...\n\n            // Create another transient service instance and compare it's object reference to the previous transient instances\n            Console.WriteLine(\"\\nGrabbing a reference to another transient service...\");\n            var anotherTransientService = secondScopedContainer.ServiceProvider.GetRequiredService<TransientService>();\n            Debug.Assert(anotherTransientService != transientServiceOne && anotherTransientService != transientServiceTwo);\n        }\n    }\n}\n```\n\nAnd once again, running this code we get:\n\n```\nBuilding the first service container...\n\nConstructing a scoped service...\nConstructing a transient service...\nConstructing a transient service...\nConstructing a singleton service...\nDisposing of transient service...\nDisposing of transient service...\nDisposing of scoped service...\n\nBuilding our second service container...\n\nGrabbing a reference to another scoped service...\nConstructing a scoped service...\n\nGrabbing a reference to another transient service...\nConstructing a transient service...\nDisposing of transient service...\nDisposing of scoped service...\nDisposing of singleton service...\n```\n\nFocusing on the output after our second scoped application request, we see that as we request another transient service,\nour service container constructs yet _another_ service instance for us, as transient services are instantiated each time\nthey're requested regardless of request scope. Once again, all of our request services from the second request scope are\ndisposed of as our application cleans up its resources. Lastly, let's add one more reference to our singleton service:\n\n```csharp\nusing System;\nusing System.Diagnostics;\nusing DependencyInjectionServiceLifetimes.Services;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace DependencyInjectionServiceLifetimes\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // Just below our Debug.Assert() line...\n\n            // Create another singleton service instance and compare it's object reference to the previous singleton instances\n            Console.WriteLine(\"\\nGrabbing a reference to another singleton service...\");\n            var anotherSingletonService = secondScopedContainer.ServiceProvider.GetRequiredService<SingletonService>();\n            Debug.Assert(anotherSingletonService == singletonServiceOne && anotherSingletonService == singletonServiceTwo);\n        }\n    }\n}\n```\n\nOnce again running this code, we get:\n\n```\nBuilding the first service container...\n\nConstructing a scoped service...\nConstructing a transient service...\nConstructing a transient service...\nConstructing a singleton service...\nDisposing of transient service...\nDisposing of transient service...\nDisposing of scoped service...\n\nBuilding our second service container...\n\nGrabbing a reference to another scoped service...\nConstructing a scoped service...\n\nGrabbing a reference to another transient service...\nConstructing a transient service...\n\nGrabbing a reference to another singleton service...\nDisposing of transient service...\nDisposing of scoped service...\nDisposing of singleton service...\n```\n\nAgain focusing on the output after we create another request scope, we see that even across requests, when we reference\na singleton service from our container, we get the same reference back from the first time it was constructed within the\nscope of our first request. Remember that singletons are created only _once_ per application lifetime, so we don't see\nthe call to the constructor once we request it once again from our second request scope. Nothing new with our resource\ncleanup either.\n\n## Wrapping up\n\nAnother day, another service lifetime explored. We've seen how different service lifetimes construct themselves at\nrequest time and are cleaned up by their respective resource manager. When registering service lifetimes, we have to put\nsome thought into what kind of lifetime scope it should. Would you want a service that utilizes `IDbConnection` to be a\nsingleton? Probably not, as you might have a few angry customers on your hands. After today, I know I'll be a little\nmore conscious about the lifetimes I choose.\n\nUntil next time, amigos!\n",
      "html": "<p>No matter the side of the dependency injection debate fence you fall, you've probably worked with some .NET code that\nhad some form of object composition through DI at some point, or another. Heck, with libraries\nin <a href=\"https://autofac.org/\">Autofac</a> and .NET Core's dependency injection extension namespace, DI and service container\nregistration is a breeze with all the heavy lifting done virtually for us.</p>\n<p>If you've been reading along for the past several posts, you're wondering why I'm <em>not</em> writing about Blazor. Don't get\nme wrong, I've got quite a few ideas I'd like to get out on paper here as we venture off deeper into Blazor-land. I\nwanted to take a break from the Blazor-scape for a while and write a bit on a topic I've been quite curious about for\nsome time now. Admittedly, I've fallen victim to the mindset of defaulting most of my .NET Core services lifetimes to\nthe good ole fashioned <code>.AddTransient()</code> simply because I figured when in doubt, you can't go wrong with the transient\nlifetime.</p>\n<p>But then I started thinking to myself: \"self, do you <em>really</em> understand the difference between service lifetimes?\"\nWhile I thought I had a clear understanding of the basics going just off the docs, I really wanted to make sure I\nunderstood <em>why</em> I was choosing the lifetimes I was for my services. Not only that, I wanted to understand what\ndifferent types of application scenarios called for particular lifetimes.</p>\n<blockquote>\n<p>Disclaimer: I'm not an Autofac expert, so I'll just be covering services within the scope (no pun intended)\nof <code>Microsoft.Extensions.DependencyInjection</code> for the remainder of this post</p>\n</blockquote>\n<p>If you're not familiar with the differing service lifetimes one can choose from when registering a service in a .NET\nCore application, the team at Microsoft has provided us with three varieties: transient, scoped, and singleton service\nlifetimes. Before we breakdown each service lifetime and write a bit of code to help us better understand the difference\nin these service types, let's talk about <em>why</em> we might want to use service registration in an application.</p>\n<h2>Dependency Injection and Inversion of Control</h2>\n<p>Now, I like to preface often that I am in no way, shape, or form an expert in the field of software engineering. I write\nthe blog posts, for the most part, to help me better understand the .NET ecosystem and the tools I use on a daily basis.\nSo, before I go down the rabbit hole of service lifetimes, it might be best if we understand why we register services in\nthe first place using something like .NET Core's <code>ServiceCollection</code> type from\nthe <code>Microsoft.Extensions.DependencyInjection</code> namespace. I like to think of this service container implementation in\nthe following manner:</p>\n<p> </p>\n<p><img src=\"/images/dependency-injection-service-lifetimes/dependency_inject.png\" alt=\"Dependency_injection_flow\"></p>\n<p> </p>\n<p>Breaking it down, starting from an incoming application request:</p>\n<ol>\n<li>Request comes in ultimately requiring the construction of an object to do some sort of application processing</li>\n<li>The object in question requires <em>another</em> service object to be composed correctly</li>\n<li>Since we've registered that required service in the IoC container, the request object will ask for the service object\nto be injected during construction time</li>\n<li>Once the service object has been supplied, the object can properly construct itself and continue on to do whatever\njob it has been invoked to do</li>\n</ol>\n<p>What this means code wise for us .NET-ers is that we effectively need to supply registered services within a class'\nconstructor, where the service container will recognize there's a dependency on said registered service in order for the\ndependent class to be properly constructed. If that's not a circular explanation, I don't know what is.</p>\n<p>In our .NET Core applications, we deal with registered service container objects and classes on a regular basis -\nASP.NET Core <code>Controller</code>s, Entity Framework Core's <code>DbContext</code>\ns, <a href=\"https://github.com/jbogard/MediatR\">MediatR's</a> <code>IRequest</code> object, and the list goes on. Thanks to the IoC container,\nthe details of how these objects are registered and requested at runtime are abstracted from us, allowing us to\neffectively construct our registered classes with any number of other registered services of our choosing. There's\nprobably something I'm missing here, but I'll let the experts chime in and fill the gaps where necessary.</p>\n<h2>Service lifetimes</h2>\n<p>Alright, back to business. Like we mentioned, there are three service lifetimes we can access through the dependency\ninjection extension namespace in transient, scoped, and singleton. The plain english explanation is as follows:</p>\n<ul>\n<li><strong>transient</strong> - these services are constructed anew <em>every</em> single time they're request from the service container and\nwill never persist across registered containers (i.e. <code>ServiceCollection</code>s that have outlived the scope of one\nanother)</li>\n<li><strong>scoped</strong> - services that are constructed once during the lifetime scope of a <code>ServiceCollection</code> and persist across\nservice requests each time they're requested within the lifetime scope of a service container</li>\n<li><strong>singleton</strong> - services that are constructed only a single time during the lifetime of an application, and persistent\nacross service container lifetime scopes</li>\n</ul>\n<p>That seems like a lot of hoobla, so let's see service lifetimes in action to really try and make sense of all of this.</p>\n<h2>An example console application</h2>\n<p>Let's kick things off by creating a new console application. I'll be using Visual Studio for Mac to change things up a\nbit, and I'll create a simple console application using the <code>File > New Project</code>. I'll name my\nproject <code>DependencyInjectionServiceLifetimes</code> and let leave the rest of the defaults. Feel free to checkout\nthe <a href=\"https://github.com/JoeyMckenzie/DependencyInjectionServiceLifetimes\">source code</a> anytime.</p>\n<p>With our application bootstrapped, we should see just a single class file with <code>Program.cs</code> and nothing else. Now, we\n<em>could</em> do this demonstration using an ASP.NET Core project, but we want to keep things simple without much project\noverhead. Let's go ahead and add a package reference to the latest version of <code>Microsoft.Extensions.DependencyInjection</code>\nto our <code>.csproj</code> file using your preferred method. Again, I'll be using the Package Manager interface in VS for Mac, but\nyou're welcome to use the command line as well. Once we've a few got the package reference, let's go ahead and add\na <code>Services</code> folder to the root of our project.</p>\n<p>With our <code>Services</code> folder in place, let's add three simple service classes that we'll each register with a different\nlifetime. Go ahead and create three classes underneath <code>Services</code>: <code>TransientService</code>, <code>ScopedService</code>,\nand <code>SingletonService</code> (creative, I know):</p>\n<h3>TransientService.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TransientService</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IDisposable</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> TransientService</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Constructing a transient service...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Disposing of transient service...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<h3>ScopedService.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> ScopedService</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IDisposable</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> ScopedService</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Constructing a scoped service...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Disposing of scoped service...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<h3>SingletonService.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> SingletonService</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> IDisposable</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> SingletonService</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Constructing a singleton service...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Disposing of singleton service...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>As we see, each of our services just informs us when they are constructed and disposed of, nothing else. Since we're\nonly exploring lifetimes, we don't need our services to do any sort of processing for the purposes of this post, so\nwe'll keep them nice and simple. We should point out that we're descending from an <code>IDisposable</code> parent in each\nservice - if we take a look at\nthe <a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.iservicescope?view=dotnet-plat-ext-3.1\"><code>IServiceProvider</code></a>\ninterface in the <code>Microsoft.Extensions.DependencyInjection</code> library, we see that it also inherits from <code>IDisposable</code>.\nWhen we create our service container and reference a scoped provider instance, the service scope in reference will\ninternally call <code>Dispose</code> at the end of its lifetime and subsequently <code>Dispose</code> of all applicable services within this\nscope. We implement the <code>Dispose</code> method in each service simply for visibility to see this in action.</p>\n<p>Let's go ahead and replace the current code in <code>Program.cs</code> with the following to kick things off and see what's going\non with all this service registration and request business:</p>\n<h3>Program.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Diagnostics</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Instantiate a service container and add each of our service lifetime types</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> builder</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> ServiceCollection</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddScoped</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">ScopedService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddTransient</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TransientService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddSingleton</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">SingletonService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Build our service container within the scope of our current program</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> serviceProvider</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> builder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">BuildServiceProvider</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create a disposable instance of our service container and grab a couple of scoped references</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Building the first service container...</span><span style=\"color:#C99076\">\\n</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> firstScopedContainer</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> serviceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateScope</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Initially, all we're doing is instantiating a service container instance with our <code>builder</code> reference to a\nnew <code>ServiceCollection</code> object, and adding each of our services as their respective lifetimes to the service container.\nTypically, we'd use the <code>.Add{LifetimeScope}&#x3C;IMyService, MyService>()</code> variant of the add method, but this will suffice\nfor our purposes - that's more a discussion of dependency inversion rather than injection and service lifetimes, maybe\nI'll save that for a rainy day. With our services added, we'll construct a scoped instance of our service container with\nthe line <code>using var serviceProvider = builder.BuildServiceProvider();</code>, only valid until the end of our program, or\nuntil we manually call <code>Dispose</code>. Once we have this scoped service provider reference, we'll grab <em>another</em> scoped\ninstance of the container to mimic an application request coming in to do some processing, requiring the IoC container\nto pull services from.</p>\n<p>Whew, there's quite a bit going on in just those few lines of code, but with that out of the way, let's do something a\nbit more familiar to us - requesting scoped services. After we've created our <code>firstScopedContainer</code> reference, let's\ngrab a few scoped services from the container. Just below <code>firstScopedContainer</code>, let's add the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Diagnostics</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Previous service setup...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create a disposable instance of our service container and grab a couple of scoped references</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Building the first service container...</span><span style=\"color:#C99076\">\\n</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> firstScopedContainer</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> serviceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateScope</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> scopedServiceOne</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> firstScopedContainer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ServiceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetRequiredService</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">ScopedService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> scopedServiceTwo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> firstScopedContainer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ServiceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetRequiredService</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">ScopedService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Validate that our scoped services are the same object reference, existing within the same service container scope lifetime</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Debug</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Assert</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">scopedServiceOne</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> scopedServiceTwo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With a couple references to our scoped services, fire up this application and see what's going on. Since I'm using\nVisual Studio for Mac, I'll go ahead and hit F5, but a simple <code>dotnet run</code> from the command line of your choice should\ndo the trick as well. Let's see what we get:</p>\n<pre><code>Building the first service container...\n\nConstructing a scoped service...\nDisposing of scoped service...\n</code></pre>\n<p>Notice how we only saw the constructor of <code>IScopedService</code> called once, as its only purpose was to inform us its\nconstructor was called. Recall that scoped services are constructed <em>once</em> per request, where our <code>firstScopedContainer</code>\nis effectively playing the role of an application request to do some processing. Even though we requested\nthe <code>ScopedService</code> twice, our service container instantiated said service <em>one</em> time, and upon requesting the same\nscoped service again with <code>scopedServiceTwo</code>, we got back the same reference to the previously\nconstructed <code>ScopedService</code> object. As our application lifecycle comes to an end, we see that the <code>Dispose</code> method of\nour <code>ScopedService</code> was called as our program cleans up its resources.</p>\n<p>If you're unfamiliar debug assertions (i.e. the line <code>Debug.Assert(scopedServiceOne == scopedServiceTwo);</code>), it's quite\na useful tool provided by the <code>System.Diagnostics</code> namespace. Anytime we place a <code>Debug.Assert(bool condition)</code> within\nour code, our application will automatically break, similar to a hitting a breakpoint, when we run in debug mode and\nour <code>condition</code> evaluates to <code>false</code>. Note that this has no effect when running in a release configuration. Here, we use\nthe assertion to check that our scoped service references are in fact the same object reference, as scoped services are\nconstructed only a single time per application request.</p>\n<p>Alright, with our scoped services constructed, let's see what happens when we grab some references to our transient\nservices. Just below our debug assertion for our scoped services, let's add the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Diagnostics</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Just below our Debug.Assert() line...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create our transient services are difference object references within the same service scope</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> transientServiceOne</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> firstScopedContainer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ServiceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetRequiredService</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TransientService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> transientServiceTwo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> firstScopedContainer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ServiceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetRequiredService</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TransientService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Validate that our transient services are not the same object reference, newly created for each request from the container</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Debug</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Assert</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">transientServiceOne</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#BD976A\"> transientServiceTwo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With a couple of references to initialized to our <code>TransientService</code> retrieved from our service container, let's run our\napplication once more to see what's going on. Again, hitting F5 in Visual Studio:</p>\n<pre><code>Building the first service container...\n\nConstructing a scoped service...\nConstructing a transient service...\nConstructing a transient service...\nDisposing of transient service...\nDisposing of transient service...\nDisposing of scoped service...\n</code></pre>\n<p>Okay, so we got a bit of different output this time. Notice that still we only get one instance constructed for\nour <code>ScopedService</code> type, but now we get <em>two</em> constructed instances of our <code>TransientService</code> type. Recall that the\ntransient service lifetime will construct its registered service <em>per request</em> from the container, regardless of request\nscope. In plain english, each time we request a transient service, we're getting a fresh, brand spanking new service\nobject. Again, we'll use a debug assertion to assert that our transient services are different object references just to\nbe sure. Once more, when our application lifecycle comes to an end, all the services are cleaned up, as we can see from\nthe three lines letting us know that each requested service had its <code>Dispose</code> method called.</p>\n<p>With our transient services in place now, let's see what happens when we bring our singleton service into the mix. Just\nbelow the debug assertion for our transient services, let's add the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Diagnostics</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Just below our Debug.Assert() line...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create our singleton services are the same object reference within the same service scope</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> singletonServiceOne</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> firstScopedContainer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ServiceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetRequiredService</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">SingletonService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> singletonServiceTwo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> firstScopedContainer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ServiceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetRequiredService</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">SingletonService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Validate that our singleton services are the same object reference, existing for the lifetime of the application</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Debug</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Assert</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">singletonServiceOne</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> singletonServiceTwo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Dispose of our current service container and create a new one</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            firstScopedContainer</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispose</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Running our code now should produce the following output:</p>\n<pre><code>Building the first service container...\n\nConstructing a scoped service...\nConstructing a transient service...\nConstructing a transient service...\nConstructing a singleton service...\nDisposing of transient service...\nDisposing of transient service...\nDisposing of scoped service...\nDisposing of singleton service...\n</code></pre>\n<p>Nothing has changed with our scoped and transient service constructions, or disposals. The only new lines we see now are\nthe construction and disposal of our singleton service. It might be tempting to infer that singleton services and scoped\nservices might act similarly, but that's not the case. Recall that singleton services are constructed <em>once</em> per\napplication lifetime. Our application lifetime only has one \"request\" coming in so far, and finishes its \"processing\"\nonce we hit the line <code>firstScopedContainer.Dispose();</code>. This is all fine and dandy, but what happens when we have\nmultiple request coming in?</p>\n<p>Let's add another request facade in our application and see what happens we ask for services. Just below the debug\nassertion for our singleton service, let's add the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Diagnostics</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Just below our Debug.Assert() line...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create another scoped service container instance and grab a few more of our lifetime services for comparison</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C99076\">\\n</span><span style=\"color:#C98A7D\">Building our second service container...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            using</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> secondScopedContainer</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> serviceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateScope</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create another scoped service instance and compare it's object reference to the previous scoped instances</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C99076\">\\n</span><span style=\"color:#C98A7D\">Grabbing a reference to another scoped service...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> anotherScopedService</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> secondScopedContainer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ServiceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetRequiredService</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">ScopedService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Debug</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Assert</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">anotherScopedService</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#BD976A\"> scopedServiceOne</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#BD976A\"> anotherScopedService</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#BD976A\"> scopedServiceTwo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Running our program now, we get the following:</p>\n<pre><code>Building the first service container...\n\nConstructing a scoped service...\nConstructing a transient service...\nConstructing a transient service...\nConstructing a singleton service...\nDisposing of transient service...\nDisposing of transient service...\nDisposing of scoped service...\n\nBuilding our second service container...\n\nGrabbing a reference to another scoped service...\nConstructing a scoped service...\nDisposing of scoped service...\nDisposing of singleton service...\n</code></pre>\n<p>Can you spot the difference in output now? After our first service scope has been disposed, we clean up our references\nto our transient and scoped services, but our singleton service lives on. When we create a new request scope and grab\nanother scoped service instance, our scoped service container creates <em>another</em> scoped service for us, as our scoped\nservice lifetimes does <em>not</em> persist across application request scopes. Once our program ends, we do our usual cleaning\nup of our newly requested scoped services, but notice now that our singleton service is disposed of <em>after</em> our second\napplication \"request\" comes in and our application's life comes to end (harsh). Let's see what happens when we add\nanother transient service reference. Again, just below our last debug assertion:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Diagnostics</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Just below our Debug.Assert() line...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create another transient service instance and compare it's object reference to the previous transient instances</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C99076\">\\n</span><span style=\"color:#C98A7D\">Grabbing a reference to another transient service...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> anotherTransientService</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> secondScopedContainer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ServiceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetRequiredService</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TransientService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Debug</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Assert</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">anotherTransientService</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#BD976A\"> transientServiceOne</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#BD976A\"> anotherTransientService</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#BD976A\"> transientServiceTwo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>And once again, running this code we get:</p>\n<pre><code>Building the first service container...\n\nConstructing a scoped service...\nConstructing a transient service...\nConstructing a transient service...\nConstructing a singleton service...\nDisposing of transient service...\nDisposing of transient service...\nDisposing of scoped service...\n\nBuilding our second service container...\n\nGrabbing a reference to another scoped service...\nConstructing a scoped service...\n\nGrabbing a reference to another transient service...\nConstructing a transient service...\nDisposing of transient service...\nDisposing of scoped service...\nDisposing of singleton service...\n</code></pre>\n<p>Focusing on the output after our second scoped application request, we see that as we request another transient service,\nour service container constructs yet <em>another</em> service instance for us, as transient services are instantiated each time\nthey're requested regardless of request scope. Once again, all of our request services from the second request scope are\ndisposed of as our application cleans up its resources. Lastly, let's add one more reference to our singleton service:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Diagnostics</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> DependencyInjectionServiceLifetimes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        static</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Just below our Debug.Assert() line...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create another singleton service instance and compare it's object reference to the previous singleton instances</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C99076\">\\n</span><span style=\"color:#C98A7D\">Grabbing a reference to another singleton service...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> anotherSingletonService</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> secondScopedContainer</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ServiceProvider</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetRequiredService</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">SingletonService</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Debug</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Assert</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">anotherSingletonService</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> singletonServiceOne</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#BD976A\"> anotherSingletonService</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#BD976A\"> singletonServiceTwo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Once again running this code, we get:</p>\n<pre><code>Building the first service container...\n\nConstructing a scoped service...\nConstructing a transient service...\nConstructing a transient service...\nConstructing a singleton service...\nDisposing of transient service...\nDisposing of transient service...\nDisposing of scoped service...\n\nBuilding our second service container...\n\nGrabbing a reference to another scoped service...\nConstructing a scoped service...\n\nGrabbing a reference to another transient service...\nConstructing a transient service...\n\nGrabbing a reference to another singleton service...\nDisposing of transient service...\nDisposing of scoped service...\nDisposing of singleton service...\n</code></pre>\n<p>Again focusing on the output after we create another request scope, we see that even across requests, when we reference\na singleton service from our container, we get the same reference back from the first time it was constructed within the\nscope of our first request. Remember that singletons are created only <em>once</em> per application lifetime, so we don't see\nthe call to the constructor once we request it once again from our second request scope. Nothing new with our resource\ncleanup either.</p>\n<h2>Wrapping up</h2>\n<p>Another day, another service lifetime explored. We've seen how different service lifetimes construct themselves at\nrequest time and are cleaned up by their respective resource manager. When registering service lifetimes, we have to put\nsome thought into what kind of lifetime scope it should. Would you want a service that utilizes <code>IDbConnection</code> to be a\nsingleton? Probably not, as you might have a few angry customers on your hands. After today, I know I'll be a little\nmore conscious about the lifetimes I choose.</p>\n<p>Until next time, amigos!</p>"
    },
    "_id": "2020/service-lifetimes-in-plain-english.md",
    "_raw": {
      "sourceFilePath": "2020/service-lifetimes-in-plain-english.md",
      "sourceFileName": "service-lifetimes-in-plain-english.md",
      "sourceFileDir": "2020",
      "contentType": "markdown",
      "flattenedPath": "2020/service-lifetimes-in-plain-english"
    },
    "type": "Post",
    "url": "/blog/2020/service-lifetimes-in-plain-english"
  },
  {
    "title": "State Management with Blazor using Fluxor (Part 1)",
    "description": "Manage state in your Blazor applications using the tried-and-true flux pattern with Fluxor.",
    "pubDate": "2020-06-26T07:00:00.000Z",
    "category": "blazor",
    "heroImage": "https://imgs.xkcd.com/comics/unreachable_state.png",
    "draft": false,
    "keywords": [
      "state management",
      "flux",
      "c#",
      ".net"
    ],
    "body": {
      "raw": "\nI'm gonna give it to you straight, uncensored, and off the cuff. Building reactive, fault tolerant, pleasant-to-use\nfrontend single page applications in the modern web-based world is not an easy task; building _stateful_ applications,\non top of all that, can be the most difficult part of frontend application engineering. Nowadays in the modern\nenterprise, frontend applications are more complicated than ever - managing user data, interacting with a plethora of\nAPIs, all while allowing users to navigate from page to page and back again carrying what seems like (from an end user's\nperspective) a history of all their page interactions and application data they've inherently requested just by clicking\nbuttons.\n\nTo the untrained eye, this may seem like some form of complicated JavaScript dark magic, and alas, I ensure you for the\nmost part, it is. However, sometime around the rise of React in the mid-2010s, Facebook developed a rather useful design\npattern for managing frontend applications in a sane, predictable\nmanner - [Flux](https://facebook.github.io/flux/docs/in-depth-overview). Using flux, Facebook (and by proxy, the React\ndevelopment community), pioneered a derivative of the subscriber pattern for the frontend, eventually leading to the\ndevelopment of the well-known [Redux](https://redux.js.org/) JavaScript library for building React applications. With\nthe popularity of Redux and React together, state management adhering to the flux spec came into the mainstream, and a\nplethora of flux-based libraries, heavily influenced by redux, hit the market (as an Angular reformist, I'm quite\npartial to [NgRx](https://ngrx.io/)).\n\nWith flux in our back pocket, state management on the frontend has become a tried and true design pattern for building\nrich, interactive applications that are predictable by nature and seemingly eliminate the infinite state machine that\nwas the early days of JS on the web (if you think I'm joking, look at some JS written circa mid-1990's). The question\nthen becomes, what about Blazor? I've put all my eggs in the Blazor basket, and one of the last things holding me back\nfrom full immersion was the existence of a flux-based library for the framework.\nEnter [Fluxor](https://github.com/mrpmorris/fluxor), an amazing open source library headed\nby [Peter Morris](https://github.com/mrpmorris) and the GitHub community, that provides an easy-to-use flux\nimplementation for .NET Core and Blazor. In this series, I'll guide us as we develop a simple flux-based application\nusing Fluxor with Blazor alongside [Redux DevTools](https://github.com/reduxjs/redux-devtools) (available for\nChrome/Edge and Firefox), to manage everyone's favorite list - the todos.\n\n## What we'll build\n\nFor the completed source code of what we'll be building in the first part of this (at least planned, so far) three part\nseries can be found [here](https://github.com/JoeyMckenzie/StateManagementWithFluxor/tree/feature/todos-part-1). With\nthe help of the [JSON Placeholder](https://jsonplaceholder.typicode.com/guide.html) project, we'll be using their \"\nAPI\" (in quotes since it's not really a persistence server, simply just for making dummy calls) to build a simple CRUD\napplication using the todo models from JSON Placeholder.\n\n## Getting started\n\nTo kick things off, let's go ahead and bootstrap a new Blazor WebAssembly project from your preferred project template\nprovider. I'll be using Visual Studio throughout this series, but you're more than welcome to use Rider, VS Code, or\njust the command line. In Visual Studio, let's go ahead and hit up a `File > New Project` and select\nthe `Blazor WebAssembly` project template. I'll name my project `StateManagementWithFluxor`, but you're welcome to pick\na name of your choosing. Leaving the defaults, as we don't need any authentication or hosting from an ASP.NET Core\nserver, let's go ahead and hit `Create`.\n\nWith our project ready to roll within VS, let's add a package reference to `Fluxor.Blazor.Web`\nand `Fluxor.Blazor.Web.ReduxDevTools` using your preferred installation method:\n\n-   Using the command line, `dotnet add package Fluxor.Blazor.Web`\n    and `dotnet add package Fluxor.Blazor.Web.ReduxDevTools`\n-   Using Package Manager with VS `Install-Package Fluxor.Blazor.Web`\n    and `Install-Package Fluxor.Blazor.Web.ReduxDevTools`\n-   Or, just simply add the package references through the NuGet GUI within VS\n\nOnce we've got Fluxor added to the project, we'll need to add a few references to the library through our code to bring\ninto scope. In our `index.html` file, let's add the required JavaScript bundle just above the closing `</body>` tag:\n\n#### index.html\n\n```html\n<!doctype html>\n<html>\n    <head>\n        <!-- Meta and CSS references -->\n    </head>\n\n    <body>\n        <!-- Existing bootstrapped HTML -->\n\n        <!-- Fluxor JS dependencies -->\n        <script src=\"_content/Fluxor.Blazor.Web/scripts/index.js\"></script>\n    </body>\n</html>\n```\n\nWith our JS references in scope, let's add a project reference to our `_Imports.razor` file below all of our other\nimported namespaces\n\n### \\_Imports.razor\n\n```csharp\n@* ...existing project references *@\n@using Fluxor\n```\n\nNow, in our `Program.cs` entry point file, let's add Fluxor to the DI container so we can utilize its services\nthroughout our components:\n\n#### Program.cs\n\n```csharp\n// Imported namespaces...\n\nnamespace StateManagementWithFluxor\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n\n            builder.Services.AddTransient(sp => new HttpClient { BaseAddress = new Uri(\"https://jsonplaceholder.typicode.com\") });\n\n            // Add Fluxor\n            builder.Services.AddFluxor(options =>\n            {\n                options.ScanAssemblies(Assembly.GetExecutingAssembly());\n                options.UseReduxDevTools();\n            });\n\n            await builder.Build().RunAsync();\n        }\n    }\n}\n```\n\nNotice I've also updated the base URI our default HTTP client instance points to (defaults to the project host) to the\nJSON Placeholder base API address in `https://jsonplaceholder.typicode.com`. In a later post, we'll refactor this HTTP\nservice instance to\na [typed HTTP client](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests)\ninstance; for now, this will do just fine. Along with adding our Fluxor instance to the DI container, we've also told it\nto enable Redux Dev Tools that will allow us to see, in realtime, our flux workflow as we interact with our application,\nwhere we'll be able to debug, time travel between state transitions, and a few other powerful features that come in\nhandy when working with flux-based frontend applications.\n\nLastly, let's add a reference to the flux store that will serve as the source of record for our entire application,\ncontaining all current stateful information, within `App.razor`\n\n#### App.razor\n\n```csharp\n<Fluxor.Blazor.Web.StoreInitializer />\n\n<Router AppAssembly=\"@typeof(Program).Assembly\">\n    <Found Context=\"routeData\">\n        <RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\" />\n    </Found>\n    <NotFound>\n        <LayoutView Layout=\"@typeof(MainLayout)\">\n            <p>Sorry, there's nothing at this address.</p>\n        </LayoutView>\n    </NotFound>\n</Router>\n```\n\nAt the top, we've added a reference to Fluxor's `StoreInitializer` that will bootstrap our state container,\namong [a few other things](https://github.com/mrpmorris/Fluxor/blob/master/Source/Fluxor.Blazor.Web/StoreInitializer.cs),\nbut I'll let the curious folks parse through the lifecycle hooks to get a feel of what it does for us.\n\nWith Fluxor ready to roll, let's take a few minutes to talk shop about the center of attention and the entire reason for\nthis series, flux.\n\n## Flux in a nutshell\n\n![Flux_flow](/images/state-management-with-blazor-using-fluxor/part-1/flux-in-a-nutshell.png)\n\nIn my totally awesome flowchart, I've outlined the big ideas with flux and what an application's architecture, using the\ndesign pattern, might look like. We'll go through each key term in the flux lexicon, but to skim the top, there are six\nkey terms you'll hear frequently when using any flux/redux library:\n\n-   **Dispatcher** - Nothing more than a request delegator of sorts, this guy/gal is in charge of issuing actions anytime\n    a user decides to do something on our page\n-   **Actions** - A metadata container containing information about _what_ the user did and what our application should do\n    after the user has performed the interaction with our page to kick off our flux pipeline\n-   **Side Effects** - As subscribers to dispatched actions, I like to think of effects as listeners of specific actions,\n    performing resulting tasks based on what action was just issued\n-   **Reducers** - Simple pure methods whose only job is to take state _in_, and spit state _out_ by way of\n    non-destructive mutation, i.e. taking our current state object in, examining what action was just dispatched and how\n    the state should be transformed, and spitting out a _new_ state object with said transformations\n-   **State** - A snapshot of the currently rendered page, containing any and all data our application is concerned about\n    at that point in time\n-   **Store** - The central piece, our store is the state container, holding on to all current slices of state that all\n    components ultimately subscribe to and react to any store changes accordingly when the store notifies listeners\n    there's been an update\n\nLet's break each of those down in correlation to the flux application flowchart above, starting at step 1:\n\n1. To kick things off, a user of our web application lands on our site, in absolute awe of our CSS ability, and wants to\n   interact with the page. In our example scenario, let's pretend our user clicks a button that ultimately navigates\n   them to another page that will have some data loaded from an external API in a table\n2. When the user clicks the button to kick off the workflow, we tie said button click to a **dispatcher** that, you\n   guessed it, _dispatches_ an action that contains the metadata related to \"hey, the user just pressed this button\"\n3. With the action in flight, we've kicked off our flux cycle that will eventually end up in a state mutation that will\n   contain the aforementioned API data our components will pull in and render on the page for the user\n4. A **side effect** that listens for specific button clicks is notified the button they're interested in was clicked,\n   and that they should make (in our case) an HTTP network call to the API in question to retrieve some data\n5. As our button click action fires off, a **reducer** listening for that specific button click evaluates the current\n   state and determines _what_ the new state should look like. In our case, we've issued a kickoff action, so the\n   reducer might mutate our current state to produce a new state that contains a boolean flag notifying components\n   there's an API call in progress\n6. This new state is then set within our flux **store**, causing a notification to fire off to all concerned components\n   that \"hey, there's a new piece of state!\" and cause our pages to render accordingly to what conditional state\n   properties they might be interested in (possibly rendering a loading spinner, for our case)\n\nWhew, that's quite a bit for just making a simple API call. You might be asking the question, however, due to the\nunfortunate limit on the speed of light, what happens when the API call returns? Our state has already been set from the\ninitial kickoff button click, so how do we get the data that has now been returned from the API to display on the page?\nI'm glad you asked. **Side effects** themselves also have the ability to dispatch actions, kicking off the entire flux\ncycle anew, and there's a common pattern in flux to issue _success_ and _failure_ commands (somewhat debated, as I fall\ninto this camp to keep clean action separation) from effects given the response to a blocking action (like an external\nnetwork call, file I/O, etc.). When our side effect has confirmed the network call came back successfully with the data\nin question, we can dispatch _another_ action containing said data, that will ultimately kick off this cycle once more,\nreach a reducer waiting to be notified for that particular success action, and produce a new state with the data\ncontained from the action, which will then be set within our store where our components will be notified once again\ncausing them to re-render.\n\nOkay, let's catch our breath here for a sec, as that was more, or less, flux in a nutshell. At this point, we should\nprobably ask ourselves the question: why even bother with flux? That's quite a bit going on, only to become increasingly\nmore complex the more interaction we add to an application. While we could probably answer that a few different ways,\none of my favorite reasons for using flux/redux in any frontend application is _predictable state transitions_. In other\nwords, using flux/redux, we _reduce_ the number of states our site can have and find ourselves less and less wondering \"\nhow in the _heck_ did that happen?\"\n\nTake for example a modern Angular application. A large application will have tens of hundreds (yes, you heard that\nright) of components all dynamically interacting with middle-tier data storage services that call other services that\nmake network calls, etc. and are used all over the place. Your middle-tier data storage service (in flux/redux, this\nwould be your state) might be used by many components, all independently interacting with this singular service, and\nmight unknowingly effect _another_ reliant component's local rendered state without any notification. This happens quite\noften in large Angular projects without redux providers, and at scale, can cause a lot of unnecessary headache.\n\n## Back to business\n\nOkay, now that we've covered the syllabus for flux 101, let's jump into the code and put these things to practice. I've\nremoved the `Counter.razor`, `FetchData.razor`, and `SurveyPrompt.razor` pages simply because we don't need them, and\nI've updated our `NavMenu.razor` component to reflect those changes:\n\n#### NavMenu.razor\n\n```csharp\n<div class=\"top-row pl-4 navbar navbar-dark\">\n    <a class=\"navbar-brand\" href=\"\">StateManagementWithFluxor</a>\n    <button class=\"navbar-toggler\" @onclick=\"ToggleNavMenu\">\n        <span class=\"navbar-toggler-icon\"></span>\n    </button>\n</div>\n\n<div class=\"@NavMenuCssClass\" @onclick=\"ToggleNavMenu\">\n    <ul class=\"nav flex-column\">\n        <li class=\"nav-item px-3\">\n            <NavLink class=\"nav-link\" href=\"\" Match=\"NavLinkMatch.All\">\n                <span class=\"oi oi-home\" aria-hidden=\"true\"></span> Home\n            </NavLink>\n        </li>\n        <li class=\"nav-item px-3\">\n            <NavLink class=\"nav-link\" href=\"todos\">\n                <span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span> Todos\n            </NavLink>\n        </li>\n    </ul>\n</div>\n\n@code {\n\n    // Nothing new here...\n\n}\n```\n\nI've added a hyperlink to a new route, `/todos`, and to accommodate, let's go ahead and create a new page under\nthe `Pages` folder called `Todos.razor` with the following markup:\n\n#### Todos.razor\n\n```csharp\n@inherits Fluxor.Blazor.Web.Components.FluxorComponent\n\n@page \"/todos\"\n\n<h3 class=\"text-center mb-3\">Todos</h3>\n\n@code {\n\n    protected override void OnInitialized()\n    {\n        base.OnInitialized();\n    }\n\n}\n```\n\nInside `Todos.razor`, we've inherited from a `FluxorComponent`, which in turn inherits from a `ComponentBase`, which,\nagain you've guessed, serves as the parent for all `.razor` pages in a Blazor application. Inheriting from\na `FluxorComponent` allows us to call its implmentation of `OnInitialized()`, the first lifecycle hook a `.razor` page\ngoes through during its rendering process.\n\nIf we start up our application now, either by hitting F5 in Visual Studio, or running `dotnet watch run` from the\ncommand line, we nothing particularly exciting on our site just yet (just a a landing page and one route-able page).\nWith our central flux architecture in place, let's go ahead and start wiring things up. First, let's create a model that\nwill house the response from our network calls to the JSON Placeholder API. Let's create a `Models` folder in the root\nof our project, and underneath that, let's add a `Todos` folder as well. In our `Todos` directory, let's create\na `TodoDto.cs` class file with the following content:\n\n#### TodoDto.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Models.Todos\n{\n    public class TodoDto\n    {\n        public int Id { get; set; }\n\n        public string? Title { get; set; }\n\n        public bool Completed { get; set; }\n\n        public int UserId { get; set; }\n    }\n}\n```\n\nNothing super exciting here, only to note that for this project, I've enabled nullable reference types (see\nour `.csproj` file) and the compiler will complain if I we're to mark the `Title` as a `string` type rather than a\nnullable `string?` type without an explicit constructor initializing it's value. The ASP.NET Core HTTP client class is\nresponsible for serializing requests and deserializing responses. While it's perfectly fine for our requests to be\nimmutable data types (which we'll be doing throughout this series), upon deserialization from an HTTP response, the\nframework will internally call our model's setters, so we need to make them publicly available.\n\nWith our response model taken care of, let's go ahead and wire up our first application workflow: retrieving a list of\ntodos.\n\n### Defining our first action\n\nIf we call the JSON Placeholder API `/todos` endpoint, we'll see the following response:\n\n```json\n[\n    {\n        \"userId\": 1,\n        \"id\": 1,\n        \"title\": \"delectus aut autem\",\n        \"completed\": false\n    },\n    {\n        \"userId\": 1,\n        \"id\": 2,\n        \"title\": \"quis ut nam facilis et officia qui\",\n        \"completed\": false\n    }\n    // Repeat 100 times...\n]\n```\n\nWe'll need to define a piece of state to hold the API response for the list of todos so that we can display it on the\ntodos page. Let's start be defining our todos state that we'll be interacting with throughout our application. At the\nroot of our project, let's create a `Store` folder, and underneath that, let's add a `State` directory. You're free use\nany flux/redux folder structure you feel comfortable with, but I tend to take an opinionated approach similar to the\nfollowing file structure:\n\n```\n/Store\n    /Features\n        /Feature1\n            /Actions\n            /Reducers\n            /Effects\n            Feature1.cs\n        /Feature2\n            /Actions\n            /Reducers\n            /Effects\n            Feature2.cs\n    /State\n        FeatureState1.cs\n        FeatureState2.cs\n```\n\nTo set ourselves up for ease of feature extension in the future, let's define a `RootState.cs` class file that will hold\ncommon feature state properties (loading flags, common errors, etc.):\n\n#### RootState.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Store.State\n{\n    public abstract class RootState\n    {\n        public RootState(bool isLoading, string? currentErrorMessage) =>\n            (IsLoading, CurrentErrorMessage) = (isLoading, currentErrorMessage);\n\n        public bool IsLoading { get; }\n\n        public string? CurrentErrorMessage { get; }\n\n        public bool HasCurrentErrors => !string.IsNullOrWhiteSpace(CurrentErrorMessage);\n    }\n}\n```\n\nExactly as mentioned above, our `RootState` will serve the purpose of playing the parent to all feature state slices\nwhere we'll be able to define common properties. In large applications, you might have multiple feature\nstates (`TodosState.cs`, `ArticlesState.cs`, `UsersState.cs`, etc.) so defining a common state for all to descend from\nallows us to build in shared state properties without duplicating such properties across multiple states. Notice we've\nmarked this class as `abstract` to convey the intent to our fellow developers that this class should be inherited from,\nnot instantiated on its own.\n\nWith our common state defined, let's add a `TodosState.cs` file inside of our `State` subfolder to contain all of our\nrelevant state properties:\n\n#### TodosState.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos;\nusing System.Collections.Generic;\n\nnamespace StateManagementWithFluxor.Store.State\n{\n    public class TodosState : RootState\n    {\n        public TodosState(bool isLoading, string? currentErrorMessage, IEnumerable<TodoDto>? currentTodos, TodoDto? currentTodo)\n            : base(isLoading, currentErrorMessage)\n        {\n            CurrentTodos = currentTodos;\n            CurrentTodo = currentTodo;\n        }\n\n        public IEnumerable<TodoDto>? CurrentTodos { get; }\n\n        public TodoDto? CurrentTodo { get; }\n    }\n}\n```\n\nDescending from our `RootState` we construct an immutable state object (i.e. no setters on any properties) and define\ntwo feature specific properties: `CurrentTodos` and `CurrentTodo`. `CurrentTodos` will hold the most recent list of\ntodos returned from the JSON Placeholder API's `/todos` endpoint, with `CurrentTodo` holding the most recent todo\nreturned from the `/todos/:id` endpoint. Again, I've declared these explicitly as nullable, since there may be points in\nour application's lifecycle that we'll have yet to interact with any APIs, and no data will be presently available\nwithin our store.\n\nWith our state objects defined, let's define our first feature. Inside the `Store` folder, let's add a `Features`\nfolder, and within that, a `Todos` folder. Again, sticking to the saforementioned file structure, let's add\na `TodosFeature.cs` file underneath our `Features` folder:\n\n#### TodosFeature.cs\n\n```csharp\nusing Fluxor;\nusing StateManagementWithFluxor.Store.State;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos\n{\n    public class TodosFeature : Feature<TodosState>\n    {\n        public override string GetName() => \"Todos\";\n\n        protected override TodosState GetInitialState() =>\n            new TodosState(false, null, null, null);\n    }\n}\n```\n\nDescending from `Feature<TodosState>`, this tells Fluxor at startup (during its initial assembly scanning) that this\nwill be a store feature named `Todos` that will house a `TodosState` object. Later when we look at our current state\nwith Redux Dev Tools, we'll see that our store is nothing more than a JSON object containing a `Todos` node with all the\nproperties we've defined in the `TodosState` class. Fluxor needs to know what initial state our todos feature slice\nshould have, so we add a constructor to initialize an initial state object. Some people might cringe when they\nsee `null` being explicitly passed to a constructor, but thanks to C#'s nullable reference type, we're telling our\nfellow developers that our intent is to express the absence of those properties, and before dereferencing those\nproperties in a component, the compiler will warn them if they do not check for `null` before doing so. Pretty cool,\nhuh?\n\nWith our first feature defined, let's create our first workflow. Let's create an `Actions` folder underneath our `Todos`\ndirectory and add one more folder called `LoadTodos` underneath our newly created `Actions` folder. In our `LoadTodos`\nsubfolder, let's create three classes: `LoadTodosAction.cs`, `LoadTodosSuccessAction.cs`,\nand `LoadTodosFailureAction.cs` action:\n\n#### LoadTodosAction.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos\n{\n    public class LoadTodosAction\n    {\n    }\n}\n```\n\n#### LoadTodosSuccessAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos;\nusing System.Collections.Generic;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos\n{\n    public class LoadTodosSuccessAction\n    {\n        public LoadTodosSuccessAction(IEnumerable<TodoDto> todos) =>\n            Todos = todos;\n\n        public IEnumerable<TodoDto> Todos { get; }\n    }\n}\n```\n\n#### LoadTodosFailureAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Store.Features.Shared.Actions;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos\n{\n    public class LoadTodosFailureAction : FailureAction\n    {\n        public LoadTodosFailureAction(string errorMessage)\n            : base(errorMessage)\n        {\n        }\n    }\n}\n```\n\n-   Our `LoadTodosAction.cs` class contains no logic, and is used for nothing more that a typed action for the flux\n    pipeline to signal to its subscribers of the `LoadTodos` workflow. Kickoff actions can contain metadata and we'll see\n    this when we retrieve todo details by ID.\n-   Our `LoadTodosSuccessAction.cs` class contains a list of non-nullable `TodoDto` items that will act as the transport\n    object moving the JSON Placeholder API response into our flux store.\n-   Our `LoadTodosFailureAction.cs` class will trigger an error workflow, allowing us to gracefully respond to any network\n    failures or errors returned from the API to be propagated back to our components.\n\nNotice I've also defined a `FailureAction.cs` class that acts as the root for all failure actions. For our simple\napplication, failure actions will more often that not contain some type of error identifier (in our case, a message, but\ncould also contain an ID), and I've defined it in a `Shared` feature folder underneath an `Actions` subdirectory:\n\n#### Features/Shared/Actions/FailureAction.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Store.Features.Shared.Actions\n{\n    public abstract class FailureAction\n    {\n        protected FailureAction(string errorMessage) =>\n            ErrorMessage = errorMessage;\n\n        public string ErrorMessage { get; }\n    }\n}\n```\n\nAgain, this `abstract` class tells other developers that this should be seen as the common failure action all failure\nactions should descend from, so we can reuse common error properties (message, ID, etc.). With our action defined, let's\ncreate a reducer to help set the pieces of state according to dispatched action. Underneath the `Todos` feature folder,\nlet's add a `Reducers` folder with a `LoadTodosActionsReducer.cs` class:\n\n#### LoadTodosActionsReducer.cs\n\n```csharp\nusing Fluxor;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos;\nusing StateManagementWithFluxor.Store.State;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Reducers\n{\n    public static class LoadTodosActionsReducer\n    {\n        [ReducerMethod]\n        public static TodosState ReduceLoadTodosAction(TodosState state, LoadTodosAction _) =>\n            new TodosState(true, null, null, state.CurrentTodo);\n\n        [ReducerMethod]\n        public static TodosState ReduceLoadTodosSuccessAction(TodosState state, LoadTodosSuccessAction action) =>\n            new TodosState(false, null, action.Todos, state.CurrentTodo);\n\n        [ReducerMethod]\n        public static TodosState ReduceLoadTodosFailureAction(TodosState state, LoadTodosFailureAction action) =>\n            new TodosState(false, action.ErrorMessage, null, state.CurrentTodo);\n    }\n}\n```\n\nOur reducer class is simply just a `static` object with `static` methods invoked at runtime that takes in the current\nfeature slice state, and returns a new `TodosState` object based on any relevant data contained within the action that\ncaused the reducer method to be invoked.\n\n-   The `ReduceLoadTodosAction` method causes our reducer to create a new state with the `IsLoading` flag set to `true`,\n    telling components there's currently an API call in flight. Since our current action workflow is just dealing with\n    gathering a list of todos and does not effect the currently selected todo piece of state, we set whatever\n    the `CurrentTodo` property was from the old state on the new state as to not effect any components concerned with that\n    particular property.\n-   The `ReduceLoadTodosSuccessAction` method returns a new state setting the `IsLoading` to `false` letting components\n    know our API call has completed, and we set the `CurrentTodos` state property to the `Todo` property dereferenced from\n    the `LoadTodosSuccessAction` passed in. We'll see how this property is initially populated in\n    the `LoadTodosSuccessAction` class shortly.\n-   The `ReduceLoadTodosFailureAction` method again sets the `IsLoading` flag to `false` for the reasons mentioned above,\n    and we populate the `CurrentErrors` property on our state so that our components may react accordingly to the API\n    failure.\n\nWith our reducer defined, let's go ahead and create a side effect that will do the work of calling the API and\ndispatching the success or failure action based on its response. Again, back in our `Features/Todos` subfolder, let's\nadd an `Effects` folder with a `LoadTodosEffect.cs` class:\n\n#### LoadTodosEffect.cs\n\n```csharp\n\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Models.Todos;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos;\nusing System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects\n{\n    public class LoadTodosEffect : Effect<LoadTodosAction>\n    {\n        private readonly ILogger<LoadTodosEffect> _logger;\n        private readonly HttpClient _httpClient;\n\n        public LoadTodosEffect(ILogger<LoadTodosEffect> logger, HttpClient httpClient) =>\n            (_logger, _httpClient) = (logger, httpClient);\n\n        protected override async Task HandleAsync(LoadTodosAction action, IDispatcher dispatcher)\n        {\n            try\n            {\n                _logger.LogInformation(\"Loading todos...\");\n\n                // Add a little extra latency for dramatic effect...\n                await Task.Delay(TimeSpan.FromMilliseconds(1000));\n                var todosResponse = await _httpClient.GetFromJsonAsync<IEnumerable<TodoDto>>(\"todos\");\n\n                _logger.LogInformation(\"Todos loaded successfully!\");\n                dispatcher.Dispatch(new LoadTodosSuccessAction(todosResponse));\n            }\n            catch (Exception e)\n            {\n                _logger.LogError($\"Error loading todos, reason: {e.Message}\");\n                dispatcher.Dispatch(new LoadTodosFailureAction(e.Message));\n            }\n\n        }\n    }\n}\n```\n\nLet's break this code down:\n\n-   First, we descend from Fluxor's `Effect<TAction>` class, with our `TAction` generic type being our `LoadTodosAction`\n    class so this effect knows to invoke its `HandleAsync` method whenever that action is dispatched\n-   Fluxor scans our assembly for all classes descending from `Effect<TAction>` and adds them to the DI container, so we\n    have the ease of injecting dependencies at runtime\n-   We inject an `HttpClient` instance and a logger into the class using an expression bodied tuple constructor (some C#\n    syntactic sugar)\n-   `HandleAsync` ships with an `IDispatcher` instance for us to utilize to issue more actions inside our effect\n-   We make the API call using the injected `HttpClient` instance, and use the `GetFromJsonAsync<TResponse>` extension\n    method from the `System.Net.Http` namespace the .NET team has so generously provided us to make the HTTP call and\n    deserialize the response into our `TodoDto` list\n-   If all goes well and the API call is successful, we issue another action in the form of a `LoadTodosSuccessAction`\n    class constructed with the endpoint's response\n-   If there's any exceptions thrown, we'll `catch` and log the error, as well as issue a failure action with the\n    exception message\n\nRecall the flux pipeline mentioned earlier. Throughout our list retrieval process, we'll be going through two iterations\nof dispatcher > action > effect/reducer > store:\n\n1. (Initial) `LoadTodosAction` > `LoadTodosEffect` / `LoadTodosActionsReducer` > `TodosState` set in the store\n2. (Post API call) `LoadTodosSuccessAction`/`LoadTodosFailureAction` > `LoadTodosActionsReducer` > `TodosState` set in\n   the store\n\nIn the first iteration, we fire our initial action to signal to our application to call to the API and retrieve some\ndata, with the following iteration being the outcome of the API call. When the API call completes and another action is\nissued, either the success or failure actions, we'll again invoke the proper reducer method to produce a new slice of\nfeature state in store with either the loaded data for components to access, or an error message for the components to\ndisplay back to the user.\n\nWith our actions, reducer, and side effect defined, let's add one more service to help with dispatching actions that our\ncomponents will be able to inject and use accordingly: our `StateFacade.cs` service:\n\n#### StateFacade.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodoDetail;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.LoadTodos;\n\nnamespace StateManagementWithFluxor.Services\n{\n    public class StateFacade\n    {\n        private readonly ILogger<StateFacade> _logger;\n        private readonly IDispatcher _dispatcher;\n\n        public StateFacade(ILogger<StateFacade> logger, IDispatcher dispatcher) =>\n            (_logger, _dispatcher) = (logger, dispatcher);\n\n        public void LoadTodos()\n        {\n            _logger.LogInformation(\"Issuing action to load todos...\");\n            _dispatcher.Dispatch(new LoadTodosAction());\n        }\n    }\n}\n```\n\nBefore we break this code down, let's discuss why we might want to use a facade, and furthermore, what the heck even is\na \"facade.\"\n\n#### Decoupling components from flux\n\nWith flux being a proven robust frontend application architecture, in large codebases, you'll most likely have hundreds\nof different actions with many different feature state slices in a store. For those with Redux Dev Tools installed, if\nyou we're to navigate to [Reddit](https://reddit.com) with the dev console Redux tab open, you'll see the reddit store\ncontains roughly 50 or so different state slices, each complexly nested with various pieces of that particular state's\nnode. In Redux, there's an idea used quite often called the _facade pattern_ that provides a layer of separation between\nour view components and our store interactions. As we tend to think of backend architectures in various layers, the\ngrowing complexity of the frontend can be thought of in the same way, with a layered architecture to encapsulate the\nvarious features of an application.\n\n![facade](/images/state-management-with-blazor-using-fluxor/part-1/facade_redirection.png)\n\nIf we consider the rendered view our user interacts with as the innermost layer akin to the domain layer in onion\narchitecture, then our flux implementation for state management would be a low-level detail in charge of providing the\ndata for those view components. If we think of the classic onion diagram, outermost dependencies should always point\ninward, implying that our rendered views should not be concerned with, or even care, how the data they display is given\nto them. We simply give our views read-only access to the store for them to treat as the source of record; how the data\ngets there is none of their concern.\n\nBy providing a facade interface between our components and the flux cycle, our components do not need to know about\nindividual actions, only workflows concerning what data they need. For simple applications like ours, it may be a bit\noverkill, but I would argue in large complex applications, adding a facade layer does provide the benefit of\nimplementation details being shrouded from the view components and allowing us to rework actions and workflows without\nbreaking our contracts between the view layer and the flux layer.\n\nAlright, now back to our regularly scheduled program.\n\n### Back to business\n\nWith our facade in place, our `.razor` components now need only to inject the `StateFacade` and whatever feature slice\nstate they're concerned about to render their markup. As we're adding a service, we also need to add it to the DI\ncontainer. Back in our `Program.cs`:\n\n#### Program.cs\n\n```csharp\n// Existing namespaces...\nusing StateManagementWithFluxor.Services;\n\nnamespace StateManagementWithFluxor\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            // Previous services being wired up...\n\n            // Add custom application services\n            builder.Services.AddScoped<StateFacade>();\n\n            await builder.Build().RunAsync();\n        }\n    }\n}\n```\n\nWe've added our `StateFacade` as a scoped service available for injection anew every time the service is plucked from\nthe DI container and injected at runtime into a `.razor` page.\n\n### Putting it all together\n\nWith our feature, actions, reducers, side effect, and store defined and ready to go, let's FINALLY start writing some\nmarkup to display all this darn data. First, let's open up our `MainLayout.razor` file and have it inherit from\na `FluxorComponent` as it'll be housing components interacting with pieces of state that involve event handlers, and\nwill be in need of proper disposal later in the series:\n\n#### MainLayout.razor\n\n```csharp\n@inherits Fluxor.Blazor.Web.Components.FluxorLayout\n\n<div class=\"sidebar\">\n    <NavMenu />\n</div>\n\n<div class=\"main\">\n    <div class=\"top-row px-4\">\n        <a href=\"http://blazor.net\" target=\"_blank\" class=\"ml-md-auto\">About</a>\n    </div>\n\n    <div class=\"content px-4\">\n        @Body\n    </div>\n</div>\n\n@code {\n\n    protected override void OnInitialized()\n    {\n        base.OnInitialized();\n    }\n\n}\n```\n\nWe've add the `@inherits Fluxor.Blazor.Web.Components.FluxorLayout` directive so that we can call `FluxorLayout`'s\nimplementation of the `OnInitialized()` lifecycle hook similarly to our `Todos.razor` file. With this in place, let's\nopen up our `Todos.razor` page again and add some markup, as well as the injected services we'll need to properly render\nthe data:\n\n#### Todos.razor\n\n```csharp\n@inherits Fluxor.Blazor.Web.Components.FluxorComponent\n\n@page \"/todos\"\n\n@using StateManagementWithFluxor.Store.State\n@using StateManagementWithFluxor.Services\n\n@inject IState<TodosState> TodosState\n@inject StateFacade Facade\n\n<h3 class=\"text-center mb-3\">Todos</h3>\n\n@if (TodosState.Value.IsLoading)\n{\n    <div class=\"d-flex flex-row justify-content-center\">\n        <div class=\"spinner-border\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span>\n        </div>\n    </div>\n}\nelse if (TodosState.Value.HasCurrentErrors)\n{\n    <span>Whoops! Looks like an issue occurred loading todos :(</span>\n}\nelse if (!(TodosState.Value.CurrentTodos is null) && TodosState.Value.CurrentTodos.Any())\n{\n    <table class=\"table table-hover\">\n        <thead>\n            <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Title</th>\n                <th scope=\"col\">Completed</th>\n                <th scope=\"col\">User ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var todo in TodosState.Value.CurrentTodos.Take(10))\n            {\n                <tr>\n                    <td>@todo.Id</td>\n                    <td>@todo.Title</td>\n                    <td>@todo.Completed</td>\n                    <td>@todo.UserId</td>\n                </tr>\n            }\n        </tbody>\n    </table>\n}\n\n@code {\n\n    protected override void OnInitialized()\n    {\n        // Issue the load todos command, if no current todos have been loaded\n        if (TodosState.Value.CurrentTodos is null)\n        {\n            Facade.LoadTodos();\n        }\n\n        base.OnInitialized();\n    }\n\n}\n```\n\nFinally, we've got some testable markup! Using some simple Bootstrap (feel free to use your favorite CSS provider,\nyou'll have to pry Bootstrap out of my cold, dead hands), we've added a table to display our todos, taking only the\nfirst 10 for brevity, as well as some logic to load todos using our `StateFacade` with the line `Facade.LoadTodos();`.\nOur Todos component has no concern with _how_ the todos are loaded or what actions are involved, it's only concerned\nabout issuing a command to get the todos loaded into the store. If we to fire up our application once more and navigate\nto the `Todos` nav item (open your dev console to the Network tab), we should see an API call being made to the `todos`\nendpoint, a loading spinner spinning for just a few seconds, and then... a todo list!\n\nLet's explore a little using Redux Dev Tools (download for your favorite browser). After you installed the addon, let's\nhead back to the home page and refresh the application with the `Redux` tab selected in the dev console. Right off the\nbat, we see three actions being issued:\n\n-   `@@INIT` - Redux Dev Tool's internal action\n-   `StoreInitializedAction` - Recall the `<Fluxor.Blazor.Web.StoreInitializer />` component we added to `App.razor`, this\n    is Fluxor initializing our feature states from the `Feature<TState>` found during assembly scanning and setting up our\n    default states from the `GetInitialState()` method\n-   `GoAction` - Fluxor's internal navigation action that sets the `@routing` piece of state on our store with the `Uri`\n    node within it (we'll hook into this action as well in a later post)\n\nNow, if we navigate to `Todos` on the side nav, we should see three more actions being issued in the following order:\n\n-   Another `GoAction` issued internally by Fluxor\n-   Our `LoadTodosAction` we defined earlier\n-   And finally, our `LoadTodosSuccessAction` containing the todo items returned from the API (click on the `Action` tab\n    on the action in the list and you see see our `Todo` property underneath the `Payload` property)\n\nIf we click on the `LoadTodosSuccessAction` on the action list and then the `State` tab, we should see our `Todos`\nfeature slice node with a `CurrentTodos` node that contains an array of all the todo items returned from the API!\n\nYou might be asking the question - how does the page know to render the list? Recall the `IState<TodosState> State`\ndirective we injected into our `Todos.razor` page - because we've inheried from a `FluxorComponent`, when we\ncall `OnInitialized()`, our component subscribes to state changes of the injected state type (`TodosState` in our case),\nand when a new state is set (from reducers producing a new state on an issued action), Blazor's built\nin `StateHasChanged()` is called for us, forcing components to re-render their markup accordingly. The hard work is done\nfor us, while we get to sit back and gaze at our beautiful todos in all their glory.\n\n### Wrapping up\n\nSo far, we've seen what flux is, why we would want to use it in a single page application, and how to setup Fluxor with\nBlazor. For brevity, I've also added a workflow to retrieve todos by ID, but I'll leave the implementation details up to\nthe reader (take a look a the source\ncode [here](https://github.com/JoeyMckenzie/StateManagementWithFluxor/tree/feature/todos-part-1) to see exactly how I've\ndone it - nothing crazy, just a new page with some more actions, reducers, and effects). We've seen how using Redux Dev\nTools, we're able to peek into the workflow step-by-step of our application and observe incremental state changes, and\nlater, we'll see the real power of Dev Tools in time travel state transitions.\n\nNext up, we'll implement some CRUD operations and make a few improvements to our current implementation, but for now,\nwe'll call that a day. Cheers!\n",
      "html": "<p>I'm gonna give it to you straight, uncensored, and off the cuff. Building reactive, fault tolerant, pleasant-to-use\nfrontend single page applications in the modern web-based world is not an easy task; building <em>stateful</em> applications,\non top of all that, can be the most difficult part of frontend application engineering. Nowadays in the modern\nenterprise, frontend applications are more complicated than ever - managing user data, interacting with a plethora of\nAPIs, all while allowing users to navigate from page to page and back again carrying what seems like (from an end user's\nperspective) a history of all their page interactions and application data they've inherently requested just by clicking\nbuttons.</p>\n<p>To the untrained eye, this may seem like some form of complicated JavaScript dark magic, and alas, I ensure you for the\nmost part, it is. However, sometime around the rise of React in the mid-2010s, Facebook developed a rather useful design\npattern for managing frontend applications in a sane, predictable\nmanner - <a href=\"https://facebook.github.io/flux/docs/in-depth-overview\">Flux</a>. Using flux, Facebook (and by proxy, the React\ndevelopment community), pioneered a derivative of the subscriber pattern for the frontend, eventually leading to the\ndevelopment of the well-known <a href=\"https://redux.js.org/\">Redux</a> JavaScript library for building React applications. With\nthe popularity of Redux and React together, state management adhering to the flux spec came into the mainstream, and a\nplethora of flux-based libraries, heavily influenced by redux, hit the market (as an Angular reformist, I'm quite\npartial to <a href=\"https://ngrx.io/\">NgRx</a>).</p>\n<p>With flux in our back pocket, state management on the frontend has become a tried and true design pattern for building\nrich, interactive applications that are predictable by nature and seemingly eliminate the infinite state machine that\nwas the early days of JS on the web (if you think I'm joking, look at some JS written circa mid-1990's). The question\nthen becomes, what about Blazor? I've put all my eggs in the Blazor basket, and one of the last things holding me back\nfrom full immersion was the existence of a flux-based library for the framework.\nEnter <a href=\"https://github.com/mrpmorris/fluxor\">Fluxor</a>, an amazing open source library headed\nby <a href=\"https://github.com/mrpmorris\">Peter Morris</a> and the GitHub community, that provides an easy-to-use flux\nimplementation for .NET Core and Blazor. In this series, I'll guide us as we develop a simple flux-based application\nusing Fluxor with Blazor alongside <a href=\"https://github.com/reduxjs/redux-devtools\">Redux DevTools</a> (available for\nChrome/Edge and Firefox), to manage everyone's favorite list - the todos.</p>\n<h2>What we'll build</h2>\n<p>For the completed source code of what we'll be building in the first part of this (at least planned, so far) three part\nseries can be found <a href=\"https://github.com/JoeyMckenzie/StateManagementWithFluxor/tree/feature/todos-part-1\">here</a>. With\nthe help of the <a href=\"https://jsonplaceholder.typicode.com/guide.html\">JSON Placeholder</a> project, we'll be using their \"\nAPI\" (in quotes since it's not really a persistence server, simply just for making dummy calls) to build a simple CRUD\napplication using the todo models from JSON Placeholder.</p>\n<h2>Getting started</h2>\n<p>To kick things off, let's go ahead and bootstrap a new Blazor WebAssembly project from your preferred project template\nprovider. I'll be using Visual Studio throughout this series, but you're more than welcome to use Rider, VS Code, or\njust the command line. In Visual Studio, let's go ahead and hit up a <code>File > New Project</code> and select\nthe <code>Blazor WebAssembly</code> project template. I'll name my project <code>StateManagementWithFluxor</code>, but you're welcome to pick\na name of your choosing. Leaving the defaults, as we don't need any authentication or hosting from an ASP.NET Core\nserver, let's go ahead and hit <code>Create</code>.</p>\n<p>With our project ready to roll within VS, let's add a package reference to <code>Fluxor.Blazor.Web</code>\nand <code>Fluxor.Blazor.Web.ReduxDevTools</code> using your preferred installation method:</p>\n<ul>\n<li>Using the command line, <code>dotnet add package Fluxor.Blazor.Web</code>\nand <code>dotnet add package Fluxor.Blazor.Web.ReduxDevTools</code></li>\n<li>Using Package Manager with VS <code>Install-Package Fluxor.Blazor.Web</code>\nand <code>Install-Package Fluxor.Blazor.Web.ReduxDevTools</code></li>\n<li>Or, just simply add the package references through the NuGet GUI within VS</li>\n</ul>\n<p>Once we've got Fluxor added to the project, we'll need to add a few references to the library through our code to bring\ninto scope. In our <code>index.html</code> file, let's add the required JavaScript bundle just above the closing <code>&#x3C;/body></code> tag:</p>\n<h4>index.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;!</span><span style=\"color:#4D9375\">doctype</span><span style=\"color:#BD976A\"> html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Meta and CSS references --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Existing bootstrapped HTML --></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Fluxor JS dependencies --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">script</span><span style=\"color:#BD976A\"> src</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">_content/Fluxor.Blazor.Web/scripts/index.js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>&#x3C;/</span><span style=\"color:#4D9375\">script</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>With our JS references in scope, let's add a project reference to our <code>_Imports.razor</code> file below all of our other\nimported namespaces</p>\n<h3>_Imports.razor</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#DBD7CAEE\">@</span><span style=\"color:#CB7676\">*</span><span style=\"color:#CB7676\"> ..</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">existing</span><span style=\"color:#BD976A\"> project</span><span style=\"color:#BD976A\"> references</span><span style=\"color:#CB7676\"> *</span><span style=\"color:#DBD7CAEE\">@</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> Fluxor</span></span></code></pre></figure>\n<p>Now, in our <code>Program.cs</code> entry point file, let's add Fluxor to the DI container so we can utilize its services\nthroughout our components:</p>\n<h4>Program.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// Imported namespaces...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> builder</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> WebAssemblyHostBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">args</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">RootComponents</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">App</span><span style=\"color:#666666\">>(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">app</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddTransient</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">sp</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> HttpClient</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> BaseAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Uri</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://jsonplaceholder.typicode.com</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add Fluxor</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFluxor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">options</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                options</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ScanAssemblies</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">Assembly</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetExecutingAssembly</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                options</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UseReduxDevTools</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> builder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Build</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">RunAsync</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Notice I've also updated the base URI our default HTTP client instance points to (defaults to the project host) to the\nJSON Placeholder base API address in <code>https://jsonplaceholder.typicode.com</code>. In a later post, we'll refactor this HTTP\nservice instance to\na <a href=\"https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests\">typed HTTP client</a>\ninstance; for now, this will do just fine. Along with adding our Fluxor instance to the DI container, we've also told it\nto enable Redux Dev Tools that will allow us to see, in realtime, our flux workflow as we interact with our application,\nwhere we'll be able to debug, time travel between state transitions, and a few other powerful features that come in\nhandy when working with flux-based frontend applications.</p>\n<p>Lastly, let's add a reference to the flux store that will serve as the source of record for our entire application,\ncontaining all current stateful information, within <code>App.razor</code></p>\n<h4>App.razor</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#BD976A\">Fluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Blazor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Web</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StoreInitializer</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Router</span><span style=\"color:#80A665\"> AppAssembly</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">@typeof(Program).Assembly</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">Found</span><span style=\"color:#BD976A\"> Context</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">routeData</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">RouteView</span><span style=\"color:#BD976A\"> RouteData</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">@routeData</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> DefaultLayout</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">@typeof(MainLayout)</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">Found</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">NotFound</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">LayoutView</span><span style=\"color:#BD976A\"> Layout</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">@typeof(MainLayout)</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">p</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Sorry</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> there</span><span style=\"color:#DBD7CAEE\">'</span><span style=\"color:#80A665\">s</span><span style=\"color:#80A665\"> nothing</span><span style=\"color:#80A665\"> at</span><span style=\"color:#80A665\"> this</span><span style=\"color:#80A665\"> address</span><span style=\"color:#DBD7CAEE\">.&#x3C;/</span><span style=\"color:#80A665\">p</span><span style=\"color:#DBD7CAEE\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        &#x3C;/</span><span style=\"color:#80A665\">LayoutView</span><span style=\"color:#DBD7CAEE\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    &#x3C;/</span><span style=\"color:#80A665\">NotFound</span><span style=\"color:#DBD7CAEE\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">&#x3C;/</span><span style=\"color:#80A665\">Router</span><span style=\"color:#DBD7CAEE\">></span></span></code></pre></figure>\n<p>At the top, we've added a reference to Fluxor's <code>StoreInitializer</code> that will bootstrap our state container,\namong <a href=\"https://github.com/mrpmorris/Fluxor/blob/master/Source/Fluxor.Blazor.Web/StoreInitializer.cs\">a few other things</a>,\nbut I'll let the curious folks parse through the lifecycle hooks to get a feel of what it does for us.</p>\n<p>With Fluxor ready to roll, let's take a few minutes to talk shop about the center of attention and the entire reason for\nthis series, flux.</p>\n<h2>Flux in a nutshell</h2>\n<p><img src=\"/images/state-management-with-blazor-using-fluxor/part-1/flux-in-a-nutshell.png\" alt=\"Flux_flow\"></p>\n<p>In my totally awesome flowchart, I've outlined the big ideas with flux and what an application's architecture, using the\ndesign pattern, might look like. We'll go through each key term in the flux lexicon, but to skim the top, there are six\nkey terms you'll hear frequently when using any flux/redux library:</p>\n<ul>\n<li><strong>Dispatcher</strong> - Nothing more than a request delegator of sorts, this guy/gal is in charge of issuing actions anytime\na user decides to do something on our page</li>\n<li><strong>Actions</strong> - A metadata container containing information about <em>what</em> the user did and what our application should do\nafter the user has performed the interaction with our page to kick off our flux pipeline</li>\n<li><strong>Side Effects</strong> - As subscribers to dispatched actions, I like to think of effects as listeners of specific actions,\nperforming resulting tasks based on what action was just issued</li>\n<li><strong>Reducers</strong> - Simple pure methods whose only job is to take state <em>in</em>, and spit state <em>out</em> by way of\nnon-destructive mutation, i.e. taking our current state object in, examining what action was just dispatched and how\nthe state should be transformed, and spitting out a <em>new</em> state object with said transformations</li>\n<li><strong>State</strong> - A snapshot of the currently rendered page, containing any and all data our application is concerned about\nat that point in time</li>\n<li><strong>Store</strong> - The central piece, our store is the state container, holding on to all current slices of state that all\ncomponents ultimately subscribe to and react to any store changes accordingly when the store notifies listeners\nthere's been an update</li>\n</ul>\n<p>Let's break each of those down in correlation to the flux application flowchart above, starting at step 1:</p>\n<ol>\n<li>To kick things off, a user of our web application lands on our site, in absolute awe of our CSS ability, and wants to\ninteract with the page. In our example scenario, let's pretend our user clicks a button that ultimately navigates\nthem to another page that will have some data loaded from an external API in a table</li>\n<li>When the user clicks the button to kick off the workflow, we tie said button click to a <strong>dispatcher</strong> that, you\nguessed it, <em>dispatches</em> an action that contains the metadata related to \"hey, the user just pressed this button\"</li>\n<li>With the action in flight, we've kicked off our flux cycle that will eventually end up in a state mutation that will\ncontain the aforementioned API data our components will pull in and render on the page for the user</li>\n<li>A <strong>side effect</strong> that listens for specific button clicks is notified the button they're interested in was clicked,\nand that they should make (in our case) an HTTP network call to the API in question to retrieve some data</li>\n<li>As our button click action fires off, a <strong>reducer</strong> listening for that specific button click evaluates the current\nstate and determines <em>what</em> the new state should look like. In our case, we've issued a kickoff action, so the\nreducer might mutate our current state to produce a new state that contains a boolean flag notifying components\nthere's an API call in progress</li>\n<li>This new state is then set within our flux <strong>store</strong>, causing a notification to fire off to all concerned components\nthat \"hey, there's a new piece of state!\" and cause our pages to render accordingly to what conditional state\nproperties they might be interested in (possibly rendering a loading spinner, for our case)</li>\n</ol>\n<p>Whew, that's quite a bit for just making a simple API call. You might be asking the question, however, due to the\nunfortunate limit on the speed of light, what happens when the API call returns? Our state has already been set from the\ninitial kickoff button click, so how do we get the data that has now been returned from the API to display on the page?\nI'm glad you asked. <strong>Side effects</strong> themselves also have the ability to dispatch actions, kicking off the entire flux\ncycle anew, and there's a common pattern in flux to issue <em>success</em> and <em>failure</em> commands (somewhat debated, as I fall\ninto this camp to keep clean action separation) from effects given the response to a blocking action (like an external\nnetwork call, file I/O, etc.). When our side effect has confirmed the network call came back successfully with the data\nin question, we can dispatch <em>another</em> action containing said data, that will ultimately kick off this cycle once more,\nreach a reducer waiting to be notified for that particular success action, and produce a new state with the data\ncontained from the action, which will then be set within our store where our components will be notified once again\ncausing them to re-render.</p>\n<p>Okay, let's catch our breath here for a sec, as that was more, or less, flux in a nutshell. At this point, we should\nprobably ask ourselves the question: why even bother with flux? That's quite a bit going on, only to become increasingly\nmore complex the more interaction we add to an application. While we could probably answer that a few different ways,\none of my favorite reasons for using flux/redux in any frontend application is <em>predictable state transitions</em>. In other\nwords, using flux/redux, we <em>reduce</em> the number of states our site can have and find ourselves less and less wondering \"\nhow in the <em>heck</em> did that happen?\"</p>\n<p>Take for example a modern Angular application. A large application will have tens of hundreds (yes, you heard that\nright) of components all dynamically interacting with middle-tier data storage services that call other services that\nmake network calls, etc. and are used all over the place. Your middle-tier data storage service (in flux/redux, this\nwould be your state) might be used by many components, all independently interacting with this singular service, and\nmight unknowingly effect <em>another</em> reliant component's local rendered state without any notification. This happens quite\noften in large Angular projects without redux providers, and at scale, can cause a lot of unnecessary headache.</p>\n<h2>Back to business</h2>\n<p>Okay, now that we've covered the syllabus for flux 101, let's jump into the code and put these things to practice. I've\nremoved the <code>Counter.razor</code>, <code>FetchData.razor</code>, and <code>SurveyPrompt.razor</code> pages simply because we don't need them, and\nI've updated our <code>NavMenu.razor</code> component to reflect those changes:</p>\n<h4>NavMenu.razor</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">div</span><span style=\"color:#80A665\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">top-row pl-4 navbar navbar-dark</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">a</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">navbar-brand</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">StateManagementWithFluxor</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">navbar-toggler</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @onclick</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">ToggleNavMenu</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">navbar-toggler-icon</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">@NavMenuCssClass</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @onclick</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">ToggleNavMenu</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">ul</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">nav flex-column</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">li</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">nav-item px-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">NavLink</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">nav-link</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"\"</span><span style=\"color:#BD976A\"> Match</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">NavLinkMatch.All</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">oi oi-home</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> aria</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\"> Home</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">NavLink</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">li</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">li</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">nav-item px-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">NavLink</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">nav-link</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">oi oi-list-rich</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> aria</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\"> Todos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">NavLink</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">li</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">ul</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@code</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Nothing new here...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I've added a hyperlink to a new route, <code>/todos</code>, and to accommodate, let's go ahead and create a new page under\nthe <code>Pages</code> folder called <code>Todos.razor</code> with the following markup:</p>\n<h4>Todos.razor</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">@inherits</span><span style=\"color:#BD976A\"> Fluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Blazor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Web</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Components</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">FluxorComponent</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@page</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">/todos</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">h3</span><span style=\"color:#80A665\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center mb-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">h3</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@code</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    protected</span><span style=\"color:#BD976A\"> override</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> OnInitialized</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        base</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">OnInitialized</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Inside <code>Todos.razor</code>, we've inherited from a <code>FluxorComponent</code>, which in turn inherits from a <code>ComponentBase</code>, which,\nagain you've guessed, serves as the parent for all <code>.razor</code> pages in a Blazor application. Inheriting from\na <code>FluxorComponent</code> allows us to call its implmentation of <code>OnInitialized()</code>, the first lifecycle hook a <code>.razor</code> page\ngoes through during its rendering process.</p>\n<p>If we start up our application now, either by hitting F5 in Visual Studio, or running <code>dotnet watch run</code> from the\ncommand line, we nothing particularly exciting on our site just yet (just a a landing page and one route-able page).\nWith our central flux architecture in place, let's go ahead and start wiring things up. First, let's create a model that\nwill house the response from our network calls to the JSON Placeholder API. Let's create a <code>Models</code> folder in the root\nof our project, and underneath that, let's add a <code>Todos</code> folder as well. In our <code>Todos</code> directory, let's create\na <code>TodoDto.cs</code> class file with the following content:</p>\n<h4>TodoDto.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TodoDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> Title</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> Completed</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> UserId</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing super exciting here, only to note that for this project, I've enabled nullable reference types (see\nour <code>.csproj</code> file) and the compiler will complain if I we're to mark the <code>Title</code> as a <code>string</code> type rather than a\nnullable <code>string?</code> type without an explicit constructor initializing it's value. The ASP.NET Core HTTP client class is\nresponsible for serializing requests and deserializing responses. While it's perfectly fine for our requests to be\nimmutable data types (which we'll be doing throughout this series), upon deserialization from an HTTP response, the\nframework will internally call our model's setters, so we need to make them publicly available.</p>\n<p>With our response model taken care of, let's go ahead and wire up our first application workflow: retrieving a list of\ntodos.</p>\n<h3>Defining our first action</h3>\n<p>If we call the JSON Placeholder API <code>/todos</code> endpoint, we'll see the following response:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">[</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">userId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">delectus aut autem</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> false</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">userId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">quis ut nam facilis et officia qui</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> false</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Repeat 100 times...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">]</span></span></code></pre></figure>\n<p>We'll need to define a piece of state to hold the API response for the list of todos so that we can display it on the\ntodos page. Let's start be defining our todos state that we'll be interacting with throughout our application. At the\nroot of our project, let's create a <code>Store</code> folder, and underneath that, let's add a <code>State</code> directory. You're free use\nany flux/redux folder structure you feel comfortable with, but I tend to take an opinionated approach similar to the\nfollowing file structure:</p>\n<pre><code>/Store\n    /Features\n        /Feature1\n            /Actions\n            /Reducers\n            /Effects\n            Feature1.cs\n        /Feature2\n            /Actions\n            /Reducers\n            /Effects\n            Feature2.cs\n    /State\n        FeatureState1.cs\n        FeatureState2.cs\n</code></pre>\n<p>To set ourselves up for ease of feature extension in the future, let's define a <code>RootState.cs</code> class file that will hold\ncommon feature state properties (loading flags, common errors, etc.):</p>\n<h4>RootState.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">State</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> abstract</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> RootState</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> RootState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">bool</span><span style=\"color:#80A665\"> isLoading</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> currentErrorMessage</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">IsLoading</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> CurrentErrorMessage</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">isLoading</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> currentErrorMessage</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> IsLoading</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> CurrentErrorMessage</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> HasCurrentErrors</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> !</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">CurrentErrorMessage</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Exactly as mentioned above, our <code>RootState</code> will serve the purpose of playing the parent to all feature state slices\nwhere we'll be able to define common properties. In large applications, you might have multiple feature\nstates (<code>TodosState.cs</code>, <code>ArticlesState.cs</code>, <code>UsersState.cs</code>, etc.) so defining a common state for all to descend from\nallows us to build in shared state properties without duplicating such properties across multiple states. Notice we've\nmarked this class as <code>abstract</code> to convey the intent to our fellow developers that this class should be inherited from,\nnot instantiated on its own.</p>\n<p>With our common state defined, let's add a <code>TodosState.cs</code> file inside of our <code>State</code> subfolder to contain all of our\nrelevant state properties:</p>\n<h4>TodosState.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">State</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> RootState</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">bool</span><span style=\"color:#80A665\"> isLoading</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> currentErrorMessage</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">>?</span><span style=\"color:#80A665\"> currentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TodoDto</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> currentTodo</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            :</span><span style=\"color:#C99076\"> base</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">isLoading</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> currentErrorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            CurrentTodos</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> currentTodos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            CurrentTodo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> currentTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">>?</span><span style=\"color:#80A665\"> CurrentTodos</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> TodoDto</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> CurrentTodo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Descending from our <code>RootState</code> we construct an immutable state object (i.e. no setters on any properties) and define\ntwo feature specific properties: <code>CurrentTodos</code> and <code>CurrentTodo</code>. <code>CurrentTodos</code> will hold the most recent list of\ntodos returned from the JSON Placeholder API's <code>/todos</code> endpoint, with <code>CurrentTodo</code> holding the most recent todo\nreturned from the <code>/todos/:id</code> endpoint. Again, I've declared these explicitly as nullable, since there may be points in\nour application's lifecycle that we'll have yet to interact with any APIs, and no data will be presently available\nwithin our store.</p>\n<p>With our state objects defined, let's define our first feature. Inside the <code>Store</code> folder, let's add a <code>Features</code>\nfolder, and within that, a <code>Todos</code> folder. Again, sticking to the saforementioned file structure, let's add\na <code>TodosFeature.cs</code> file underneath our <code>Features</code> folder:</p>\n<h4>TodosFeature.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">State</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TodosFeature</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Feature</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> GetName</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> GetInitialState</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Descending from <code>Feature&#x3C;TodosState></code>, this tells Fluxor at startup (during its initial assembly scanning) that this\nwill be a store feature named <code>Todos</code> that will house a <code>TodosState</code> object. Later when we look at our current state\nwith Redux Dev Tools, we'll see that our store is nothing more than a JSON object containing a <code>Todos</code> node with all the\nproperties we've defined in the <code>TodosState</code> class. Fluxor needs to know what initial state our todos feature slice\nshould have, so we add a constructor to initialize an initial state object. Some people might cringe when they\nsee <code>null</code> being explicitly passed to a constructor, but thanks to C#'s nullable reference type, we're telling our\nfellow developers that our intent is to express the absence of those properties, and before dereferencing those\nproperties in a component, the compiler will warn them if they do not check for <code>null</code> before doing so. Pretty cool,\nhuh?</p>\n<p>With our first feature defined, let's create our first workflow. Let's create an <code>Actions</code> folder underneath our <code>Todos</code>\ndirectory and add one more folder called <code>LoadTodos</code> underneath our newly created <code>Actions</code> folder. In our <code>LoadTodos</code>\nsubfolder, let's create three classes: <code>LoadTodosAction.cs</code>, <code>LoadTodosSuccessAction.cs</code>,\nand <code>LoadTodosFailureAction.cs</code> action:</p>\n<h4>LoadTodosAction.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">LoadTodos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> LoadTodosAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h4>LoadTodosSuccessAction.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">LoadTodos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> LoadTodosSuccessAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> LoadTodosSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> todos</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Todos</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> todos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Todos</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h4>LoadTodosFailureAction.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Shared</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">LoadTodos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> LoadTodosFailureAction</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> FailureAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> LoadTodosFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            :</span><span style=\"color:#C99076\"> base</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<ul>\n<li>Our <code>LoadTodosAction.cs</code> class contains no logic, and is used for nothing more that a typed action for the flux\npipeline to signal to its subscribers of the <code>LoadTodos</code> workflow. Kickoff actions can contain metadata and we'll see\nthis when we retrieve todo details by ID.</li>\n<li>Our <code>LoadTodosSuccessAction.cs</code> class contains a list of non-nullable <code>TodoDto</code> items that will act as the transport\nobject moving the JSON Placeholder API response into our flux store.</li>\n<li>Our <code>LoadTodosFailureAction.cs</code> class will trigger an error workflow, allowing us to gracefully respond to any network\nfailures or errors returned from the API to be propagated back to our components.</li>\n</ul>\n<p>Notice I've also defined a <code>FailureAction.cs</code> class that acts as the root for all failure actions. For our simple\napplication, failure actions will more often that not contain some type of error identifier (in our case, a message, but\ncould also contain an ID), and I've defined it in a <code>Shared</code> feature folder underneath an <code>Actions</code> subdirectory:</p>\n<h4>Features/Shared/Actions/FailureAction.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Shared</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> abstract</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> FailureAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#80A665\"> FailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> errorMessage</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            ErrorMessage</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> errorMessage</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> ErrorMessage</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Again, this <code>abstract</code> class tells other developers that this should be seen as the common failure action all failure\nactions should descend from, so we can reuse common error properties (message, ID, etc.). With our action defined, let's\ncreate a reducer to help set the pieces of state according to dispatched action. Underneath the <code>Todos</code> feature folder,\nlet's add a <code>Reducers</code> folder with a <code>LoadTodosActionsReducer.cs</code> class:</p>\n<h4>LoadTodosActionsReducer.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">LoadTodos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">State</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reducers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> LoadTodosActionsReducer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceLoadTodosAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> LoadTodosAction</span><span style=\"color:#80A665\"> _</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceLoadTodosSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> LoadTodosSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceLoadTodosFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> LoadTodosFailureAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ErrorMessage</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our reducer class is simply just a <code>static</code> object with <code>static</code> methods invoked at runtime that takes in the current\nfeature slice state, and returns a new <code>TodosState</code> object based on any relevant data contained within the action that\ncaused the reducer method to be invoked.</p>\n<ul>\n<li>The <code>ReduceLoadTodosAction</code> method causes our reducer to create a new state with the <code>IsLoading</code> flag set to <code>true</code>,\ntelling components there's currently an API call in flight. Since our current action workflow is just dealing with\ngathering a list of todos and does not effect the currently selected todo piece of state, we set whatever\nthe <code>CurrentTodo</code> property was from the old state on the new state as to not effect any components concerned with that\nparticular property.</li>\n<li>The <code>ReduceLoadTodosSuccessAction</code> method returns a new state setting the <code>IsLoading</code> to <code>false</code> letting components\nknow our API call has completed, and we set the <code>CurrentTodos</code> state property to the <code>Todo</code> property dereferenced from\nthe <code>LoadTodosSuccessAction</code> passed in. We'll see how this property is initially populated in\nthe <code>LoadTodosSuccessAction</code> class shortly.</li>\n<li>The <code>ReduceLoadTodosFailureAction</code> method again sets the <code>IsLoading</code> flag to <code>false</code> for the reasons mentioned above,\nand we populate the <code>CurrentErrors</code> property on our state so that our components may react accordingly to the API\nfailure.</li>\n</ul>\n<p>With our reducer defined, let's go ahead and create a side effect that will do the work of calling the API and\ndispatching the success or failure action based on its response. Again, back in our <code>Features/Todos</code> subfolder, let's\nadd an <code>Effects</code> folder with a <code>LoadTodosEffect.cs</code> class:</p>\n<h4>LoadTodosEffect.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">LoadTodos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> LoadTodosEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LoadTodosAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LoadTodosEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> HttpClient</span><span style=\"color:#80A665\"> _httpClient</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> LoadTodosEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LoadTodosEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> HttpClient</span><span style=\"color:#80A665\"> httpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> httpClient</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">LoadTodosAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            try</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Loading todos...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                // Add a little extra latency for dramatic effect...</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                await</span><span style=\"color:#BD976A\"> Task</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Delay</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">TimeSpan</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FromMilliseconds</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1000</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> todosResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetFromJsonAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">IEnumerable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">>>(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Todos loaded successfully!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> LoadTodosSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">todosResponse</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            catch</span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">Exception</span><span style=\"color:#80A665\"> e</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogError</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Error loading todos, reason: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> LoadTodosFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Message</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Let's break this code down:</p>\n<ul>\n<li>First, we descend from Fluxor's <code>Effect&#x3C;TAction></code> class, with our <code>TAction</code> generic type being our <code>LoadTodosAction</code>\nclass so this effect knows to invoke its <code>HandleAsync</code> method whenever that action is dispatched</li>\n<li>Fluxor scans our assembly for all classes descending from <code>Effect&#x3C;TAction></code> and adds them to the DI container, so we\nhave the ease of injecting dependencies at runtime</li>\n<li>We inject an <code>HttpClient</code> instance and a logger into the class using an expression bodied tuple constructor (some C#\nsyntactic sugar)</li>\n<li><code>HandleAsync</code> ships with an <code>IDispatcher</code> instance for us to utilize to issue more actions inside our effect</li>\n<li>We make the API call using the injected <code>HttpClient</code> instance, and use the <code>GetFromJsonAsync&#x3C;TResponse></code> extension\nmethod from the <code>System.Net.Http</code> namespace the .NET team has so generously provided us to make the HTTP call and\ndeserialize the response into our <code>TodoDto</code> list</li>\n<li>If all goes well and the API call is successful, we issue another action in the form of a <code>LoadTodosSuccessAction</code>\nclass constructed with the endpoint's response</li>\n<li>If there's any exceptions thrown, we'll <code>catch</code> and log the error, as well as issue a failure action with the\nexception message</li>\n</ul>\n<p>Recall the flux pipeline mentioned earlier. Throughout our list retrieval process, we'll be going through two iterations\nof dispatcher > action > effect/reducer > store:</p>\n<ol>\n<li>(Initial) <code>LoadTodosAction</code> > <code>LoadTodosEffect</code> / <code>LoadTodosActionsReducer</code> > <code>TodosState</code> set in the store</li>\n<li>(Post API call) <code>LoadTodosSuccessAction</code>/<code>LoadTodosFailureAction</code> > <code>LoadTodosActionsReducer</code> > <code>TodosState</code> set in\nthe store</li>\n</ol>\n<p>In the first iteration, we fire our initial action to signal to our application to call to the API and retrieve some\ndata, with the following iteration being the outcome of the API call. When the API call completes and another action is\nissued, either the success or failure actions, we'll again invoke the proper reducer method to produce a new slice of\nfeature state in store with either the loaded data for components to access, or an error message for the components to\ndisplay back to the user.</p>\n<p>With our actions, reducer, and side effect defined, let's add one more service to help with dispatching actions that our\ncomponents will be able to inject and use accordingly: our <code>StateFacade.cs</code> service:</p>\n<h4>StateFacade.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">LoadTodoDetail</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">LoadTodos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> StateFacade</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StateFacade</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> _dispatcher</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> StateFacade</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StateFacade</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _dispatcher</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> dispatcher</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> LoadTodos</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Issuing action to load todos...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> LoadTodosAction</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Before we break this code down, let's discuss why we might want to use a facade, and furthermore, what the heck even is\na \"facade.\"</p>\n<h4>Decoupling components from flux</h4>\n<p>With flux being a proven robust frontend application architecture, in large codebases, you'll most likely have hundreds\nof different actions with many different feature state slices in a store. For those with Redux Dev Tools installed, if\nyou we're to navigate to <a href=\"https://reddit.com\">Reddit</a> with the dev console Redux tab open, you'll see the reddit store\ncontains roughly 50 or so different state slices, each complexly nested with various pieces of that particular state's\nnode. In Redux, there's an idea used quite often called the <em>facade pattern</em> that provides a layer of separation between\nour view components and our store interactions. As we tend to think of backend architectures in various layers, the\ngrowing complexity of the frontend can be thought of in the same way, with a layered architecture to encapsulate the\nvarious features of an application.</p>\n<p><img src=\"/images/state-management-with-blazor-using-fluxor/part-1/facade_redirection.png\" alt=\"facade\"></p>\n<p>If we consider the rendered view our user interacts with as the innermost layer akin to the domain layer in onion\narchitecture, then our flux implementation for state management would be a low-level detail in charge of providing the\ndata for those view components. If we think of the classic onion diagram, outermost dependencies should always point\ninward, implying that our rendered views should not be concerned with, or even care, how the data they display is given\nto them. We simply give our views read-only access to the store for them to treat as the source of record; how the data\ngets there is none of their concern.</p>\n<p>By providing a facade interface between our components and the flux cycle, our components do not need to know about\nindividual actions, only workflows concerning what data they need. For simple applications like ours, it may be a bit\noverkill, but I would argue in large complex applications, adding a facade layer does provide the benefit of\nimplementation details being shrouded from the view components and allowing us to rework actions and workflows without\nbreaking our contracts between the view layer and the flux layer.</p>\n<p>Alright, now back to our regularly scheduled program.</p>\n<h3>Back to business</h3>\n<p>With our facade in place, our <code>.razor</code> components now need only to inject the <code>StateFacade</code> and whatever feature slice\nstate they're concerned about to render their markup. As we're adding a service, we also need to add it to the DI\ncontainer. Back in our <code>Program.cs</code>:</p>\n<h4>Program.cs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// Existing namespaces...</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Previous services being wired up...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add custom application services</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddScoped</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StateFacade</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> builder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Build</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">RunAsync</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We've added our <code>StateFacade</code> as a scoped service available for injection anew every time the service is plucked from\nthe DI container and injected at runtime into a <code>.razor</code> page.</p>\n<h3>Putting it all together</h3>\n<p>With our feature, actions, reducers, side effect, and store defined and ready to go, let's FINALLY start writing some\nmarkup to display all this darn data. First, let's open up our <code>MainLayout.razor</code> file and have it inherit from\na <code>FluxorComponent</code> as it'll be housing components interacting with pieces of state that involve event handlers, and\nwill be in need of proper disposal later in the series:</p>\n<h4>MainLayout.razor</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">@inherits</span><span style=\"color:#BD976A\"> Fluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Blazor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Web</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Components</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">FluxorLayout</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">div</span><span style=\"color:#80A665\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sidebar</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">NavMenu</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">main</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">top-row px-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">a</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">http://blazor.net</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> target</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">_blank</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">ml-md-auto</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">About</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">content px-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        @Body</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@code</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    protected</span><span style=\"color:#BD976A\"> override</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> OnInitialized</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        base</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">OnInitialized</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We've add the <code>@inherits Fluxor.Blazor.Web.Components.FluxorLayout</code> directive so that we can call <code>FluxorLayout</code>'s\nimplementation of the <code>OnInitialized()</code> lifecycle hook similarly to our <code>Todos.razor</code> file. With this in place, let's\nopen up our <code>Todos.razor</code> page again and add some markup, as well as the injected services we'll need to properly render\nthe data:</p>\n<h4>Todos.razor</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">@inherits</span><span style=\"color:#BD976A\"> Fluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Blazor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Web</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Components</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">FluxorComponent</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@page</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">/todos</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@inject</span><span style=\"color:#BD976A\"> IState</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\"> TodosState</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@inject</span><span style=\"color:#BD976A\"> StateFacade</span><span style=\"color:#BD976A\"> Facade</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">h3</span><span style=\"color:#80A665\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center mb-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">h3</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">@if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsLoading</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">spinner-border</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> role</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">status</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sr-only</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Loading</span><span style=\"color:#CB7676\">..</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span><span style=\"color:#80A665\"> if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">HasCurrentErrors</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Whoops</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\"> Looks</span><span style=\"color:#BD976A\"> like</span><span style=\"color:#BD976A\"> an</span><span style=\"color:#BD976A\"> issue</span><span style=\"color:#BD976A\"> occurred</span><span style=\"color:#BD976A\"> loading</span><span style=\"color:#BD976A\"> todos</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#666666\">(&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span><span style=\"color:#80A665\"> if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#BD976A\"> TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Any</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">table</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">table table-hover</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">thead</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">User</span><span style=\"color:#BD976A\"> ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">thead</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">tbody</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            @foreach</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">var</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#CB7676\"> in</span><span style=\"color:#BD976A\"> TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Take</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">10</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">tbody</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">table</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@code</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    protected</span><span style=\"color:#BD976A\"> override</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> OnInitialized</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Issue the load todos command, if no current todos have been loaded</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Facade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LoadTodos</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C99076\">        base</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">OnInitialized</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Finally, we've got some testable markup! Using some simple Bootstrap (feel free to use your favorite CSS provider,\nyou'll have to pry Bootstrap out of my cold, dead hands), we've added a table to display our todos, taking only the\nfirst 10 for brevity, as well as some logic to load todos using our <code>StateFacade</code> with the line <code>Facade.LoadTodos();</code>.\nOur Todos component has no concern with <em>how</em> the todos are loaded or what actions are involved, it's only concerned\nabout issuing a command to get the todos loaded into the store. If we to fire up our application once more and navigate\nto the <code>Todos</code> nav item (open your dev console to the Network tab), we should see an API call being made to the <code>todos</code>\nendpoint, a loading spinner spinning for just a few seconds, and then... a todo list!</p>\n<p>Let's explore a little using Redux Dev Tools (download for your favorite browser). After you installed the addon, let's\nhead back to the home page and refresh the application with the <code>Redux</code> tab selected in the dev console. Right off the\nbat, we see three actions being issued:</p>\n<ul>\n<li><code>@@INIT</code> - Redux Dev Tool's internal action</li>\n<li><code>StoreInitializedAction</code> - Recall the <code>&#x3C;Fluxor.Blazor.Web.StoreInitializer /></code> component we added to <code>App.razor</code>, this\nis Fluxor initializing our feature states from the <code>Feature&#x3C;TState></code> found during assembly scanning and setting up our\ndefault states from the <code>GetInitialState()</code> method</li>\n<li><code>GoAction</code> - Fluxor's internal navigation action that sets the <code>@routing</code> piece of state on our store with the <code>Uri</code>\nnode within it (we'll hook into this action as well in a later post)</li>\n</ul>\n<p>Now, if we navigate to <code>Todos</code> on the side nav, we should see three more actions being issued in the following order:</p>\n<ul>\n<li>Another <code>GoAction</code> issued internally by Fluxor</li>\n<li>Our <code>LoadTodosAction</code> we defined earlier</li>\n<li>And finally, our <code>LoadTodosSuccessAction</code> containing the todo items returned from the API (click on the <code>Action</code> tab\non the action in the list and you see see our <code>Todo</code> property underneath the <code>Payload</code> property)</li>\n</ul>\n<p>If we click on the <code>LoadTodosSuccessAction</code> on the action list and then the <code>State</code> tab, we should see our <code>Todos</code>\nfeature slice node with a <code>CurrentTodos</code> node that contains an array of all the todo items returned from the API!</p>\n<p>You might be asking the question - how does the page know to render the list? Recall the <code>IState&#x3C;TodosState> State</code>\ndirective we injected into our <code>Todos.razor</code> page - because we've inheried from a <code>FluxorComponent</code>, when we\ncall <code>OnInitialized()</code>, our component subscribes to state changes of the injected state type (<code>TodosState</code> in our case),\nand when a new state is set (from reducers producing a new state on an issued action), Blazor's built\nin <code>StateHasChanged()</code> is called for us, forcing components to re-render their markup accordingly. The hard work is done\nfor us, while we get to sit back and gaze at our beautiful todos in all their glory.</p>\n<h3>Wrapping up</h3>\n<p>So far, we've seen what flux is, why we would want to use it in a single page application, and how to setup Fluxor with\nBlazor. For brevity, I've also added a workflow to retrieve todos by ID, but I'll leave the implementation details up to\nthe reader (take a look a the source\ncode <a href=\"https://github.com/JoeyMckenzie/StateManagementWithFluxor/tree/feature/todos-part-1\">here</a> to see exactly how I've\ndone it - nothing crazy, just a new page with some more actions, reducers, and effects). We've seen how using Redux Dev\nTools, we're able to peek into the workflow step-by-step of our application and observe incremental state changes, and\nlater, we'll see the real power of Dev Tools in time travel state transitions.</p>\n<p>Next up, we'll implement some CRUD operations and make a few improvements to our current implementation, but for now,\nwe'll call that a day. Cheers!</p>"
    },
    "_id": "2020/state-management-with-fluxor-blazor-part-1.md",
    "_raw": {
      "sourceFilePath": "2020/state-management-with-fluxor-blazor-part-1.md",
      "sourceFileName": "state-management-with-fluxor-blazor-part-1.md",
      "sourceFileDir": "2020",
      "contentType": "markdown",
      "flattenedPath": "2020/state-management-with-fluxor-blazor-part-1"
    },
    "type": "Post",
    "url": "/blog/2020/state-management-with-fluxor-blazor-part-1"
  },
  {
    "title": "State Management with Blazor using Fluxor (Part 2)",
    "description": "Use Fluxor to encapsulate the business logic of our Blazor apps and build clean view components.",
    "pubDate": "2020-07-26T07:00:00.000Z",
    "category": "blazor",
    "heroImage": "/images/state-management-with-blazor-using-fluxor/part-2/fluxor_meme_small.jpg",
    "draft": false,
    "keywords": [
      "state management",
      "flux",
      "c#",
      ".net"
    ],
    "body": {
      "raw": "\nMemes aside, if you've been following along with our flux-ified Blazor project, you may have noticed the plethora of\ninitial, success, and failure action types. While this may seem like overkill to some, by creating this separation of\nconcern between action types, we ensure each action has a _single_ responsibility in the flux workflow. If (read: when)\nour business requirements change that cause us to modify existing actions, we can do so without fear of unintentionally\nbreaking another workflow that might reuse the same action. It's like I always say, \"when in doubt, create a new\naction.\"\n\n## Continuing where we left off\n\nIn our [last post](/images/fluxor-state-management-with-blazor-part-1/), we discussed what the flux design pattern is,\nwhat problems it seeks to solve, and how to integrate it with Blazor using the Fluxor library. So far, we've created two\naction workflows to interact with the JSON Placeholder API: a todo list retrieve workflow and a todo retrieval by ID\nworkflow. With the help of a few services and effects, we successfully implemented the R of our CRUD operations using\nactions, reducers, and our central application store to allow our components to simply get only the state features they\ncare about and display them on the page. In this (hopefully shorter) post, we'll do a bit of service refactoring and add\na few more CRUD operations to give us a functioning application that'll allow us to interface with the todos from the\nJSON Placeholder API.\n\n## Refactoring to typed HTTP services\n\nTo kick things off, let's start by refactoring how we've been calling the API. So far, we've been injecting\nan `HttpClient` instance directly into our effects with the help of the DI container from\nthe `Microsoft.Extensions.DependencyInjection` library. A more robust, unit test-able approach would be to utilize a\ncentralized service that contains the `HttpClient` instance injected into it so that we can configure a single client\ninstance to our liking (attach headers, set base paths, etc.) and funnel all external network calls into a single place,\nrather than have `HttpClient`s spread throughout all of our flux effects. In our `Services` folder at the root of our\nproject, let's add a file named `JsonPlaceholderApiService.cs` with the following code:\n\n### JsonPlaceholderApiService.cs\n\n```csharp\nusing Microsoft.Extensions.Logging;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Services\n{\n    public class JsonPlaceholderApiService\n    {\n        private readonly ILogger<JsonPlaceholderApiService> _logger;\n        private readonly HttpClient _httpClient;\n\n        public JsonPlaceholderApiService(ILogger<JsonPlaceholderApiService> logger, HttpClient httpClient) =>\n            (_logger, _httpClient) = (logger, httpClient);\n\n        public Task<TResponse> GetAsync<TResponse>(string path)\n        {\n            _logger.LogInformation($\"GET: Retrieving resource of type {typeof(TResponse).Name}\");\n            return _httpClient.GetFromJsonAsync<TResponse>(path);\n        }\n\n        public Task<HttpResponseMessage> PostAsync<TBody>(string path, TBody body)\n        {\n            _logger.LogInformation($\"POST: Creating resource of type {typeof(TBody).Name}\");\n            return _httpClient.PostAsJsonAsync(path, body);\n        }\n\n        public Task<HttpResponseMessage> PutAsync<TBody>(string path, TBody body)\n        {\n            _logger.LogInformation($\"PUT: Updating resource of type {typeof(TBody).Name}\");\n            return _httpClient.PutAsJsonAsync(path, body);\n        }\n\n        public Task<HttpResponseMessage> DeleteAsync(string path)\n        {\n            _logger.LogInformation(\"DELETE: Removing resource\");\n            return _httpClient.DeleteAsync(path);\n        }\n    }\n}\n```\n\nWith our centralized HTTP service in place, we've effectively created\na [typed client](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-3.1) that we\ncan configure within the DI container to inject into our effects, with a configured HTTP client service wired up at\nruntime. Back in our `Program.cs`, we'll need to add a service reference to our `JsonPlaceholderApiService`, but before\ndoing so, let's add a package reference to the `Microsoft.Extensions.Http` NuGet package so that we can properly\nconfigure the HTTP client that will be injected into this service. I'm using Visual Studio's package manager to add the\nreference to our project, but feel free to use the command line (`dotnet add package Microsoft.Extensions.Http`), or the\nPackage Manager console (`Install-Package Microsoft.Extensions.Http`). Once we've successfully added the package, let's\nadd the following code to `Program.cs`:\n\n### Program.cs\n\n```csharp\nusing System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Fluxor;\nusing System.Reflection;\nusing StateManagementWithFluxor.Services;\nusing System.Net.Mime;\n\nnamespace StateManagementWithFluxor\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"app\");\n\n            // Add Fluxor\n            builder.Services.AddFluxor(options =>\n            {\n                options.ScanAssemblies(Assembly.GetExecutingAssembly());\n                options.UseReduxDevTools();\n            });\n\n            // Add custom application services\n            builder.Services.AddScoped<StateFacade>();\n            builder.Services.AddHttpClient<JsonPlaceholderApiService>(client =>\n            {\n                client.DefaultRequestHeaders.Add(\"Content-Control\", $\"{MediaTypeNames.Application.Json}; charset=utf-8\");\n                client.BaseAddress = new Uri(\"https://jsonplaceholder.typicode.com\");\n            });\n\n            await builder.Build().RunAsync();\n        }\n    }\n}\n```\n\nFrom the above, we can see that we've added the line `builder.Services.AddHttpClient<JsonPlaceholderApiService>`\nconfiguring the `HttpClient` instance that will be injected into the API service for us at runtime. Every time\na `JsonPlaceholderApiService` instance is requested at runtime within our effects, the DI container will inject a\nconfigured `HttpClient` instance with the base address we've pointed to here and the default headers on each request.\nWith our API service wired up, let's go ahead and add some markup to allow users to create todos. When creating a todo\nand sending the corresponding POST request to JSON Placeholder API, we won't actually be creating a resource on the\nserver (we'll see the consequences of this later).\n\nThe Placeholder API is simply just that - a dummy API that acts as a placeholder for realtime requests and responses.\nOur create request will send back a 201 with the created todo resource. We'll take that todo and simply append it to our\ncurrent list of todos and re-render the list within our `Todos.razor` component to reflect the addition of the newly\ncreated todo. In a real world scenario, this isn't really something you'd want to be doing on the frontend. A better\nsolution, and more common in practice, would be to send a create request to a downstream server from the client, and\nupon a successful status returned from the server, we'd send another request to the server to retrieve the list again\nthat should contain our newly created resource. There's a few reason as to why we would implement the design in this\nway, but a bit irrelevant and out of scope for this post.\n\nLet's go ahead create a `Components` folder at our solution root and within that directory, let's add a razor file\ncalled `CreateTodoForm.razor` with the following markup:\n\n### CreateTodoForm.razor\n\n```csharp\n@inherits Fluxor.Blazor.Web.Components.FluxorComponent\n\n@using StateManagementWithFluxor.Models.Todos.Validation\n@using StateManagementWithFluxor.Services\n\n@inject StateFacade Facade\n\n<EditForm Model=\"validationModel\" OnValidSubmit=\"HandleValidSubmit\">\n    <DataAnnotationsValidator />\n    <div class=\"d-flex flex-column align-items-center\">\n        <ValidationSummary />\n    </div>\n\n    <div class=\"d-flex flex-row justify-content-center\">\n        <div class=\"form-group px-2\">\n            <label for=\"create-todo-title\">Title</label>\n            <InputText  id=\"create-todo-title\"  @bind-Value=\"validationModel.Title\" class=\"form-control\"/>\n        </div>\n        <div class=\"form-group px-2\">\n            <label for=\"create-todo-completed\">User ID</label>\n            <InputNumber ParsingErrorMessage=\"That is not a valid user ID\" id=\"create-todo-user-id\" @bind-Value=\"validationModel.UserId\" class=\"form-control\"/>\n        </div>\n        <div class=\"form-group px-2 mt-3 d-flex flex-column align-items-center\">\n            <label for=\"create-todo-completed\">Completed?</label>\n            <InputCheckbox id=\"create-todo-completed\" @bind-Value=\"validationModel.Completed\" class=\"form-check\"/>\n        </div>\n    </div>\n\n    <div class=\"pt-2 d-flex flex-row justify-content-center\">\n        <button class=\"btn btn-primary\" type=\"submit\">Create</button>\n    </div>\n</EditForm>\n\n\n@code {\n\n    private CreateOrUpdateTodoValidationModel validationModel = new CreateOrUpdateTodoValidationModel();\n\n    protected override void OnInitialized()\n    {\n        validationModel.UserId = 1;\n\n        base.OnInitialized();\n    }\n\n    private void HandleValidSubmit()\n    {\n        // We use the bang operator (!) to tell the compiler we'll know this string field will not be null\n        Facade.CreateTodo(validationModel.Title!, validationModel.Completed, validationModel.UserId);\n    }\n\n}\n```\n\nIn our `CreateTodoForm.razor` component, we're simply just adding a bit of form markup to allow users to input a todo\ntitle, user ID, and the current status of the todo (done/not done). We're using Blazor's built-in `EditForm` to perform\nfield validations on our model that we'll ultimately send to the server containing the todo data, again letting these\nbuilt-in Blazor tools handle the heavy input validation lifting for us. Using the `DataAnnotationsValidator`\nand `ValidationSummary` components, we're able to dynamically render validation messages when the user input does not\nmeet our criteria for handling form submission. Using a little Bootstrap, we'll be able to display our error messages in\na somewhat pleasant manner as well.\n\nNotice that we've added a new model type with the `CreateOrUpdateTodoValidationModel` reference that will have it's\nproperties `set` as we've bound it to our `EditForm` using the `Model` attribute. Let's go ahead and add a `Validation`\nfolder underneath the `Todos` feature folder within our `Models` directory. Within the `Validation` folder, let's add\nthe `CreateOrUpdateTodoValidationModel.cs` class file:\n\n### CreateOrUpdateTodoValidationModel.cs\n\n```csharp\nusing System.ComponentModel.DataAnnotations;\n\nnamespace StateManagementWithFluxor.Models.Todos.Validation\n{\n    public class CreateOrUpdateTodoValidationModel\n    {\n        [Required(AllowEmptyStrings = false, ErrorMessage = \"Your todo must have a title\")]\n        public string? Title { get; set; }\n\n        [Required(ErrorMessage = \"Status of this todo is required\")]\n        public bool Completed { get; set; }\n\n        [Required(ErrorMessage = \"User ID associated with this todo is required\")]\n        [Range(1, 100)]\n        public int UserId { get; set; }\n    }\n}\n```\n\nUsing .NET's `System.ComponentModel.DataAnnotations` library, we add a few `Required` attributes to each of the\nproperties, with an additional `Range` attribute on the `UserId` to enforce users stay within the 1 to 100 user ID\nvalues. While it might seem a bit overkill to add this validation model when we could just simply bind each of the\nproperties to a model to be sent off to a server, we have to keep in mind that we don't want our models to\nbecome [god objects](https://en.wikipedia.org/wiki/God_object). If you've ever worked on a large enterprise codebase,\nyou've more than likely seen this at some point or another - API models reused across multiple endpoint request payloads\ntrying to fit the mold everywhere, \"helper\" classes that only \"help\" you magically break this unintentionally when\nmaking slight changes, and the list goes on. Our request models and validation models should be responsible for one\nthing, and one thing only - the `CreateOrUpdateTodoValidationModel` is only concerned about validating input.\n\nBack in our `CreateTodoForm.razor` with the `EditForm` referencing our `validationModel`, we bind each of the properties\nwithin the `validationModel` to an input tag. Luckily for us, the .NET team has provider a few nice custom input\ncomponents when dealing with `EditForm`s within our application. We bind each of the `Title`, `Completed`, and `UserId`\nproperties to a wrapping input component in `InputText`, `InputCheckbox`, and `InputNumber` respectively. Adding a\nfew `form-control` Bootstrap classes and we've got a semi-decent looking form!\n\nIn our `OnInitialized` component lifecycle method, we initialize the user ID to 1 since the rendered markup with be\na `type=\"number\"` input. We've also added another method to our `StateFacade` service with `CreateTodo` - let's go ahead\nand add that to the facade:\n\n### StateFacade.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Models.Todos.Dtos;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo;\n\n\nnamespace StateManagementWithFluxor.Services\n{\n    public class StateFacade\n    {\n        // Previous constructor and methods...\n\n        public void CreateTodo(string title, bool completed, int userId)\n        {\n            // Construct our validated todo\n            var todoDto = new CreateOrUpdateTodoDto(title, completed, userId);\n\n            _logger.LogInformation($\"Issuing action to create todo [{title}] for user [{userId}]\");\n            _dispatcher.Dispatch(new CreateTodoAction(todoDto));\n        }\n    }\n}\n```\n\nIf you're curious about why we've added this \"facade\" service, I mention the reasons for doing so in the first post.\nOur `CreateTodo` method simply constructs a `CreateOrUpdateTodoDto` immutable request model and issues\na `CreateTodoAction` with it as the payload. Let's add each of those classes to their respective folders:\n\n### Models/Todos/Dtos/CreateOrUpdateTodoDto.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Models.Todos.Dtos\n{\n    public class CreateOrUpdateTodoDto\n    {\n        public CreateOrUpdateTodoDto(string title, bool completed, int userId) =>\n            (Title, Completed, UserId) = (title, completed, userId);\n\n        public string Title { get; }\n\n        public bool Completed { get; }\n\n        public int UserId { get; }\n    }\n}\n```\n\n### Store/Features/Todos/Actions/CreateTodo/CreateTodoAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos.Dtos;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo\n{\n    public class CreateTodoAction\n    {\n        public CreateTodoAction(CreateOrUpdateTodoDto todo) =>\n            Todo = todo;\n\n        public CreateOrUpdateTodoDto Todo { get; }\n    }\n}\n```\n\nWith our newly created action `CreateTodoAction`, let's add our success and failure actions while we're here before\ncreating the reducer methods that will subscribe to these actions:\n\n### CreateTodoSuccessAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos.Dtos;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo\n{\n    public class CreateTodoSuccessAction\n    {\n        public CreateTodoSuccessAction(TodoDto todo) =>\n            Todo = todo;\n\n        public TodoDto Todo { get; }\n    }\n}\n```\n\n### CreateTodoFailureAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Store.Features.Shared.Actions;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo\n{\n    public class CreateTodoFailureAction : FailureAction\n    {\n        public CreateTodoFailureAction(string errorMessage)\n            : base(errorMessage)\n        {\n        }\n    }\n}\n```\n\nRecall from our previous post that we created a common `FailureAction` for all of our failure type actions to descend\nfrom, allowing us to store common error properties within this shared action for all failure actions to tap into. With\nour create action in place, let's add a reducer to our our `Reducers` directory within our todos feature folder to\nhandle the create actions:\n\n### Store/Features/Reducers/CreateTodoActionsReducer.cs\n\n```csharp\nusing Fluxor;\nusing StateManagementWithFluxor.Models.Todos.Dtos;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo;\nusing StateManagementWithFluxor.Store.State;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Reducers\n{\n    public static class CreateTodoActionsReducer\n    {\n        [ReducerMethod]\n        public static TodosState ReduceCreateTodoAction(TodosState state, CreateTodoAction _) =>\n            new TodosState(true, null, state.CurrentTodos, state.CurrentTodo);\n\n        [ReducerMethod]\n        public static TodosState ReduceCreateTodoSuccessAction(TodosState state, CreateTodoSuccessAction action)\n        {\n            // Grab a reference to the current todo list, or initialize one if we do not currently have any loaded\n            var currentTodos = state.CurrentTodos is null ?\n                new List<TodoDto>() :\n                state.CurrentTodos.ToList();\n\n            // Add the newly created todo to our list and sort by ID\n            currentTodos.Add(action.Todo);\n            currentTodos = currentTodos\n                .OrderBy(t => t.Id)\n                .ToList();\n\n            return new TodosState(false, null, currentTodos, state.CurrentTodo);\n        }\n\n        [ReducerMethod]\n        public static TodosState ReduceCreateTodoFailureAction(TodosState state, CreateTodoFailureAction action) =>\n            new TodosState(false, action.ErrorMessage, state.CurrentTodos, state.CurrentTodo);\n    }\n}\n```\n\nWhen an initial `CreateTodoAction` is dispatched, we set the `TodoState` with the loading property set to true and the\nexisting todos and selected todo, as we don't want to alter the current state those actions ultimately produce as our\ncreate workflow has no concern with either workflow. Upon a successful creation, i.e. the API returning a successful 201\nstatus code back to us, we'll produce a _new_ `TodosState` by appending the newly created todo item to a copy of the\ncurrent list of todos, and set the sorted list within the constructor of the `TodosState` object. Finally, upon\na `CreateTodoFailureAction` being dispatched, we keep the currently loaded todos piece of state intact, making sure to\nproduce a new `TodosState` containing an error that we issued the failure action with.\n\nWith our reducer in place, we'll need to add a side effect (if you're a little fuzzy on the flux workflow, checkout the\nfirst post) that will do the actual calling of the API using our `JsonPlaceholderApiService` and issue either a success,\nor failure, action based on the response. In our `Effects` directory underneath our todos feature folder, let's add\na `CreateTodoEffect.cs` file:\n\n### CreateTodoEffect.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Models.Todos.Dtos;\nusing StateManagementWithFluxor.Services;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.CreateTodo;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects.CreateTodo\n{\n    public class CreateTodoEffect : Effect<CreateTodoAction>\n    {\n        private readonly ILogger<CreateTodoEffect> _logger;\n        private readonly JsonPlaceholderApiService _apiService;\n\n        public CreateTodoEffect(ILogger<CreateTodoEffect> logger, JsonPlaceholderApiService httpClient) =>\n            (_logger, _apiService) = (logger, httpClient);\n\n        protected override async Task HandleAsync(CreateTodoAction action, IDispatcher dispatcher)\n        {\n            try\n            {\n                _logger.LogInformation($\"Creating todo {action.Todo}...\");\n                var createResponse = await _apiService.PostAsync(\"todos\", action.Todo);\n\n                if (!createResponse.IsSuccessStatusCode)\n                {\n                    throw new HttpRequestException($\"Error creating todo: {createResponse.ReasonPhrase}\");\n                }\n\n                _logger.LogInformation(\"Todo created successfully!\");\n                var createdTodo = await createResponse.Content.ReadFromJsonAsync<TodoDto>();\n                dispatcher.Dispatch(new CreateTodoSuccessAction(createdTodo));\n            }\n            catch (Exception e)\n            {\n                _logger.LogError($\"Could not create todo, reason: {e.Message}\");\n                dispatcher.Dispatch(new CreateTodoFailureAction(e.Message));\n            }\n        }\n    }\n}\n```\n\nNothing too out of the ordinary here, but let's do a quick code breakdown:\n\n-   We inject a logger and our API service from the DI container, using an expression-bodied tuple constructor (C#\n    syntactic sugar)\n-   Using our API service, we call the `PostAsync` method passing in the todo from the `CreateTodoAction` payload\n    and `await` for the response\n-   If we get back a good looking 201, we'll go ahead and dispatch a `CreateTodoSuccessAction` with the todo response\n    returned from the API as the payload\n-   Upon any unchecked exceptions, or any non-successful status code returned from the server, we'll dispatch an error\n    action with the corresponding error message from the exception\n\nWith our create workflow in place, let's go ahead and add our `CreateTodoForm.razor` component to our `Todos.razor`\npage. In the markup section of `Todos.razor`, we'll replace the current markup with the following:\n\n### Todos.razor\n\n```csharp\n<h3 class=\"text-center mb-3\">Todos</h3>\n\n@if (TodosState.Value.IsLoading)\n{\n    <div class=\"d-flex flex-row justify-content-center\">\n        <div class=\"spinner-border\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span>\n        </div>\n    </div>\n}\nelse if (TodosState.Value.HasCurrentErrors || TodosState.Value.CurrentTodos is null)\n{\n    <div class=\"d-flex flex-column align-items-center\">\n        <span class=\"py-2\">Whoops! Looks like an issue occurred loading todos :(</span>\n        <button class=\"btn btn-info py-2\" @onclick=\"() => Facade.LoadTodos()\">Reload Todos</button>\n    </div>\n}\nelse if (!TodosState.Value.CurrentTodos.Any())\n{\n    <CreateTodoForm />\n\n    <div class=\"d-flex flex-column align-items-center mt-2\">\n        <span class=\"py-2\">Looks like there's no todos...</span>\n        <button class=\"btn btn-info py-2\" @onclick=\"() => Facade.LoadTodos()\">Reload Todos</button>\n    </div>\n}\nelse\n{\n    <CreateTodoForm />\n\n    <table class=\"table table-hover mt-2\">\n        <thead>\n            <tr class=\"text-center\">\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Title</th>\n                <th scope=\"col\">Completed</th>\n                <th scope=\"col\">User ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            @foreach (var todo in TodosState.Value.CurrentTodos)\n            {\n                <tr style=\"cursor: pointer;\" class=\"text-center\" @onclick=\"() => NavigateToTodoDetail(todo.Id)\">\n                    <td>@todo.Id</td>\n                    <td>@todo.Title</td>\n                    <td>@todo.Completed</td>\n                    <td>@todo.UserId</td>\n                </tr>\n            }\n        </tbody>\n    </table>\n}\n```\n\nWe've added a reference to our create todo form with the `<CreateTodoForm />` markup component in this razor page, so\nwhen we navigate to the page, we should see a simple form after the todos have been loaded from the API:\n\n![Create_todo_Form](/images/state-management-with-blazor-using-fluxor/part-2/create_todo_Form.png)\n\nNotice we've added the `<CreateTodoForm />` component in two sections of our markup, once when a rendered list is pulled\nfrom the store, and again when there are no todos loaded available in state. With the help of Fluxor, we can easily\nrender these conditional pieces of markup based on our current state value, tapping into `TodosState.Value` to access\nour properties we've added to that particular piece of state.\nInternally, [Fluxor](https://github.com/mrpmorris/Fluxor/blob/master/Source/Fluxor.Blazor.Web/Components/FluxorComponent.cs#L29)\nwill call `StateHasChanged` for us when we have components descending from a `FluxorComponent` anytime the our store\npublished a new `TodosState` (triggered by the store), signaling Blazor to re-render the current markup based on our\nnew `TodosState` value. If you're familiar with Angular, `StateHasChanged` is the analog to the `ChangeDetectorRef`\nservice commonly utilized by Angular components that turn off automatic change detection\nwhen `ChangeDetectionStrategy.OnPush` is used for that component's change detection strategy.\n\nWith our form in place, let's test our create workflow to make sure everything works as expected. With Redux Dev Tools\nopen in the dev console, let's go ahead and fire up our application. When it's up and running, navigate to the `Todos`\nnav menu item, and we should a few actions fire off, namely the `LoadTodosAction` and the `LoadTodosSuccessAction` (\nhopefully). Inspecting these actions, we can look at the action payloads, the current `Todos` state value, and the\ncomputed diff between states once the action was dispatched. If we fill in some values for the create todo form on the\ntop of the page and hit the submit button, we should again see two more actions dispatched in the form\nof `CreateTodoAction` carrying the form data we entered in the action payload, and a\ncorresponding `CreateTodoSuccessAction` computed state diff with an extra todo item added to the `CurrentTodos` property\nstate. The change should then be reflected in our table, since the store pushed out two corresponding `TodosState`\nchanges, causing Blazor to re-render its current markup twice and rendering the corresponding HTML based on the values\nwithin our `TodosState`.\n\n## Updating todos\n\nWith our create workflow in place, let's iron out our update workflow. Since we've already put in place our retrieve\nworkflows, all we really need to do is add a bit code code to the `TodoDetail.razor` page to allow users to modify the\ntodo values when they've been selected from the todos table. To kick things off, let's add some actions for updating a\ntodo. In our `Actions` folder within our `Todos` feature folder, let's add an `UpdateTodo` folder. Inside that\ndirectory, we'll add three actions corresponding to the kickoff, success, and failure actions:\n\n### UpdateTodoAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos.Dtos;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo\n{\n    public class UpdateTodoAction\n    {\n        public UpdateTodoAction(int id, CreateOrUpdateTodoDto todo) =>\n            (Id, Todo) = (id, todo);\n\n        public int Id { get; }\n\n        public CreateOrUpdateTodoDto Todo { get; }\n    }\n}\n```\n\n### UpdateTodoSuccessAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Models.Todos.Dtos;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo\n{\n    public class UpdateTodoSuccessAction\n    {\n        public UpdateTodoSuccessAction(TodoDto todo) =>\n            Todo = todo;\n\n        public TodoDto Todo { get; }\n    }\n}\n```\n\n### UpdateTodoFailureAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Store.Features.Shared.Actions;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo\n{\n    public class UpdateTodoFailureAction : FailureAction\n    {\n        public UpdateTodoFailureAction(string errorMessage)\n            : base(errorMessage)\n        {\n        }\n    }\n}\n```\n\nSimilar to our create workflow, we've allowed users to update todos using our `CreateOrUpdateTodoDto` class we created\nto keep consistent with the properties they can use to create and update todos. With our actions in place, let's add the\ncorresponding reducer methods that will compute the state upon dispatch of these actions. In our `Reducers` folder,\nlet's add an `UpdateTodoActionsReducer.cs` class file:\n\n### UpdateTodoActionsReducer.cs\n\n```csharp\nusing Fluxor;\nusing StateManagementWithFluxor.Models.Todos.Dtos;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo;\nusing StateManagementWithFluxor.Store.State;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Reducers\n{\n    public static class UpdateTodoActionsReducer\n    {\n        [ReducerMethod]\n        public static TodosState ReduceUpdateTodoAction(TodosState state, UpdateTodoAction _) =>\n            new TodosState(true, null, state.CurrentTodos, state.CurrentTodo);\n\n        [ReducerMethod]\n        public static TodosState ReduceUpdateTodoSuccessAction(TodosState state, UpdateTodoSuccessAction action)\n        {\n            // If the current todos list is null, set the state with a new list containing the updated todo\n            if (state.CurrentTodos is null)\n            {\n                return new TodosState(false, null, new List<TodoDto> { action.Todo }, state.CurrentTodo);\n            }\n\n            // Rather than mutating in place, let's construct a new list and add our updated item\n            var updatedList = state.CurrentTodos\n                .Where(t => t.Id != action.Todo.Id)\n                .ToList();\n\n            // Add the todo and sort the list\n            updatedList.Add(action.Todo);\n            updatedList = updatedList\n                .OrderBy(t => t.Id)\n                .ToList();\n\n            return new TodosState(false, null, updatedList, null);\n        }\n\n        [ReducerMethod]\n        public static TodosState ReduceUpdateTodoFailureAction(TodosState state, UpdateTodoFailureAction action) =>\n            new TodosState(false, action.ErrorMessage, state.CurrentTodos, state.CurrentTodo);\n    }\n}\n```\n\nNothing too exciting with our `ReduceUpdateTodoAction` and `ReduceUpdateTodoFailureAction` state reducers, as they\nsimply compute a new `TodosState` based on the action payload. Upon a successful update action being dispatched,\nour `ReduceUpdateTodoSuccessAction` will create a new list based on the `CurrentTodos` values, excluding the value we've\nupdated, add the updated todo from the `UpdateTodoSuccessAction` payload, and create a new `TodosState` with this new\nlist. Again, we probably wouldn't do this in a real world production application, where we might opt instead to recall\nthe API to rehydrate the current list view.\n\nWith our reducer in place, let's add a couple side effects for the `UpdateTodoAction` and `UpdateTodoSuccessAction`\nbeing dispatched. In our `Effects` folder, let's add an `UpdateTodo` subfolder with two effects, `UpdateTodoEffect.cs`\nand `UpdateTodoSuccessEffect.cs`:\n\n### UpdateTodoEffect.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Models.Todos.Dtos;\nusing StateManagementWithFluxor.Services;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects.UpdateTodoEffect\n{\n    public class UpdateTodoEffect : Effect<UpdateTodoAction>\n    {\n        private readonly ILogger<UpdateTodoEffect> _logger;\n        private readonly JsonPlaceholderApiService _apiService;\n\n        public UpdateTodoEffect(ILogger<UpdateTodoEffect> logger, JsonPlaceholderApiService httpClient) =>\n            (_logger, _apiService) = (logger, httpClient);\n\n        protected override async Task HandleAsync(UpdateTodoAction action, IDispatcher dispatcher)\n        {\n            try\n            {\n                _logger.LogInformation($\"Updating todo {action.Id}...\");\n                var updateResponse = await _apiService.PutAsync($\"todos/{action.Id}\", action.Todo);\n\n                if (!updateResponse.IsSuccessStatusCode)\n                {\n                    throw new HttpRequestException($\"Error updating todo: {updateResponse.ReasonPhrase}\");\n                }\n\n                _logger.LogInformation(\"Todo updated successfully!\");\n                var updatedTodo = await updateResponse.Content.ReadFromJsonAsync<TodoDto>();\n                dispatcher.Dispatch(new UpdateTodoSuccessAction(updatedTodo));\n            }\n            catch (Exception e)\n            {\n                _logger.LogError($\"Could not update todo, reason: {e.Message}\");\n                dispatcher.Dispatch(new UpdateTodoFailureAction(e.Message));\n            }\n        }\n    }\n}\n```\n\n### UpdateTodoSuccessEffect.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects.UpdateTodoEffect\n{\n    public class UpdateTodoSuccessEffect : Effect<UpdateTodoSuccessAction>\n    {\n        private readonly ILogger<UpdateTodoSuccessEffect> _logger;\n        private readonly NavigationManager _navigation;\n\n        public UpdateTodoSuccessEffect(ILogger<UpdateTodoSuccessEffect> logger, NavigationManager navigation) =>\n            (_logger, _navigation) = (logger, navigation);\n\n        protected override Task HandleAsync(UpdateTodoSuccessAction action, IDispatcher dispatcher)\n        {\n            _logger.LogInformation(\"Updated todo successfully, navigating back to todo listing...\");\n            _navigation.NavigateTo(\"todos\");\n\n            return Task.CompletedTask;\n        }\n    }\n}\n```\n\nOur `UpdateTodoEffect.cs` utilizes our `JsonPlaceholderApiService` to make a PUT call to the API using the action's\npayload (our `CreateOrUpdateTodoDto` object), and issues an update success action upon a successful response from the\nAPI. In our `UpdateTodoSuccessEffect`, we navigate the user back to the todos page, where the list should now display\nthe updated values we've just entered and submitted on the todo details form. We choose to navigate users back to the\ntodos page only on a successful action dispatched, rather than navigating users back regardless, as we want to inform\nusers of unexpected errors while still on the details page before navigating back to the page. We're also controlling\nthe user's navigation, building in predictable UX for the user rather than having them navigate back manually, or\nnavigating else where in our application that we might not expect during this workflow.\n\nWith our core flux workflow in place for the update actions, let's add a method to our `StateFacade` so that we can\nissue these actions from our `TodosDetail.razor` page. In our `StateFacade` service:\n\n### StateFacade.cs\n\n```csharp\n// Previously existing imported namespaces...\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.UpdateTodo;\n\nnamespace StateManagementWithFluxor.Services\n{\n    public class StateFacade\n    {\n        // Previous facade methods...\n\n        public void UpdateTodo(int id, string title, bool completed, int userId)\n        {\n            // Construct our validated todo\n            var todoDto = new CreateOrUpdateTodoDto(title, completed, userId);\n\n            _logger.LogInformation($\"Issuing action to update todo {id}\");\n            _dispatcher.Dispatch(new UpdateTodoAction(id, todoDto));\n        }\n    }\n}\n```\n\nWith our `UpdateTodo` facade method in place, let's finally add to the markup in `TodoDetail.razor` to dispatch the\nupdate action and allow users to modify the currently selected todo values:\n\n### TodoDetail.razor\n\n```csharp\n@inherits Fluxor.Blazor.Web.Components.FluxorComponent\n\n@page \"/todos/{todoId}\"\n\n@using StateManagementWithFluxor.Models.Todos.Validation\n@using StateManagementWithFluxor.Store.State\n@using StateManagementWithFluxor.Services\n\n@inject IState<TodosState> TodosState\n@inject StateFacade Facade\n\n<h3 class=\"text-center mb-3\">Detail for todo item @TodoId</h3>\n\n@if (TodosState.Value.IsLoading)\n{\n    <div class=\"d-flex flex-row justify-content-center\">\n        <div class=\"spinner-border\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span>\n        </div>\n    </div>\n}\nelse if (TodosState.Value.HasCurrentErrors || TodosState.Value.CurrentTodo is null)\n{\n    <div class=\"d-flex flex-column align-items-center\">\n        <span>Whoops! Looks like an issue occurred loading todos :(</span>\n        <div class=\"py-3\">\n            <a class=\"btn btn-primary\" href=\"/todos\">Back to Todos</a>\n        </div>\n    </div>\n}\nelse\n{\n    <EditForm Model=\"validationModel\" OnValidSubmit=\"HandleValidSubmit\">\n        <DataAnnotationsValidator />\n        <div class=\"d-flex flex-column align-items-center\">\n            <ValidationSummary />\n        </div>\n\n        <div class=\"d-flex flex-column align-items-center py-1\">\n            <div class=\"d-flex flex-row py-2\">\n                <strong>ID</strong>: @TodosState.Value.CurrentTodo.Id\n            </div>\n            <div class=\"py-2 d-flex flex-row align-items-center\">\n                <strong class=\"px-2\">Completed:</strong>\n                <InputCheckbox class=\"form-check\" @bind-Value=\"validationModel.Completed\" />\n            </div>\n            <div class=\"py-2 d-flex flex-row align-items-center\">\n                <strong class=\"px-2\">User:</strong>\n                <InputNumber class=\"form-control\" @bind-Value=\"validationModel.UserId\"/>\n            </div>\n            <div class=\"py-2 d-flex flex-row align-items-center\">\n                <strong class=\"px-2\">Title:</strong>\n                <InputText class=\"form-control\" @bind-Value=\"validationModel.Title\"/>\n            </div>\n\n            <div class=\"d-flex flex-row justify-content-center pt-2\">\n                <button type=\"submit\" class=\"btn btn-secondary\">Update</button>\n                <span class=\"px-2\"></span>\n                <button class=\"btn btn-danger\">Delete</button>\n            </div>\n\n            <div class=\"py-3\">\n                <a class=\"btn btn-primary\" href=\"/todos\">Back to Todos</a>\n            </div>\n        </div>\n    </EditForm>\n\n}\n\n@code {\n\n    private CreateOrUpdateTodoValidationModel validationModel = new CreateOrUpdateTodoValidationModel();\n\n    [Parameter]\n    public string? TodoId { get; set; }\n\n    protected override void OnInitialized()\n    {\n        // Load the todo detail on initial page navigation\n        if (int.TryParse(TodoId, out var parsedId))\n        {\n            Facade.LoadTodoById(parsedId);\n        }\n\n        // Register a state change to assign the validation fields\n        TodosState.StateChanged += (sender, state) =>\n        {\n            if (state.CurrentTodo is null)\n            {\n                return;\n            }\n\n            validationModel.Title = state.CurrentTodo.Title;\n            validationModel.Completed = state.CurrentTodo.Completed;\n            validationModel.UserId = state.CurrentTodo.UserId;\n\n            StateHasChanged();\n        };\n\n        base.OnInitialized();\n    }\n\n    protected override void Dispose(bool disposing)\n    {\n        base.Dispose(disposing);\n    }\n\n    private void HandleValidSubmit()\n    {\n        // We use the bang operator (!) to tell the compiler we'll know this string field will not be null\n        Facade.UpdateTodo(TodosState.Value.CurrentTodo!.Id, validationModel.Title!, validationModel.Completed, validationModel.UserId);\n    }\n\n}\n```\n\nSince we've changed quite a few things in this detail page, let's do a quick code breakdown:\n\n-   First, we've added an `EditForm` to handle validating the user's input when updating values similar to how we've setup\n    our `CreateTodoForm.razor` component\n-   We've added a `CreateOrUpdateTodoValidationModel` validation model that will react to user input and display any\n    validation errors with the help of the `<DataAnnotationsValidator />` and `<ValidationSummary />` built-in Blazor\n    components\n-   We've modified our `OnInitialized` lifecycle method to react to state changes so we can reassign the validation model\n    fields from the current todo fields and trigger an additional `StateHasChanged()` event to tell Blazor to re-render\n    the markup to reflect these changes within the inputs of the form\n-   Since we're subscribing to additional state changes outside of the scope of Fluxor, we need make sure to manually\n    dispose of our component to avoid memory leaks; again, if you're familiar with Angular, this is similar to destroying\n    your observable subscriptions when a component is disposed\n-   Upon a valid submit, we'll issue the `UpdateTodo` facade method that will dispatch the `UpdateTodoAction` and kickoff\n    the update workflow\n\nAwesome, now that our todo detail page has been updated, if we select a todo from the todos table, we should now be able\nto update that particular todo's values and see those changes reflected back in the table once we hit submit (and the\nAPI responds successfully). I'll leave it as an exercise for the reader to see what actions are dispatched in the Redux\nDev Tools console panel and inspect the actions, payloads, and diffs that are computed.\n\n## Deleting todos\n\nWith the light at the end of the tunnel now within sight, we just need to add one more workflow to delete todos.\nThankfully, most of the internal plumbing we've already done, so we'll only have to hookup the delete actions to the\ndelete button we've added to our detail page. Let's start by adding a `DeleteTodos` folder within our `Actions`\ndirectory, with three actions in `DeleteTodoAction.cs`, `DeleteTodoSuccessAction.cs`, `DeleteTodoFailureAction.cs`:\n\n### DeleteTodoAction.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo\n{\n    public class DeleteTodoAction\n    {\n        public DeleteTodoAction(int id) =>\n            Id = id;\n\n        public int Id { get; }\n    }\n}\n```\n\n### DeleteTodoSuccessAction.cs\n\n```csharp\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo\n{\n    public class DeleteTodoSuccessAction\n    {\n        public DeleteTodoSuccessAction(int id) =>\n            Id = id;\n\n        public int Id { get; }\n    }\n}\n```\n\n### DeleteTodoFailureAction.cs\n\n```csharp\nusing StateManagementWithFluxor.Store.Features.Shared.Actions;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo\n{\n    public class DeleteTodoFailureAction : FailureAction\n    {\n        public DeleteTodoFailureAction(string errorMessage)\n            : base(errorMessage)\n        {\n        }\n    }\n}\n```\n\nFrom the above actions, we see that we're simply only transporting the todo ID in the kickoff and success action\npayloads, as we only need a reference to the ID to remove the todo from our list. While it _might_ be tempting to reuse\nthe kickoff and success actions as they are effectively the same class, the overhead of adding actions is rather small\nand doesn't add much complexity. If our requirements change, maybe the business analysts want a message transmitted upon\na successful delete, we'll only be refactoring a single action sub-workflow (the success flow for the delete todo\nworkflow) with zero fear of unintentionally breaking the kickoff sub-workflow. With our actions in place, let's add our\nlast reducer in our `Reducers` folder with `DeleteTodoActionsReducer.cs`:\n\n### DeleteTodoActionsReducer.cs\n\n```csharp\nusing Fluxor;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo;\nusing StateManagementWithFluxor.Store.State;\nusing System.Linq;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Reducers\n{\n    public static class DeleteTodoActionsReducer\n    {\n        [ReducerMethod]\n        public static TodosState ReduceDeleteTodoAction(TodosState state, DeleteTodoAction _) =>\n            new TodosState(true, null, state.CurrentTodos, state.CurrentTodo);\n\n        [ReducerMethod]\n        public static TodosState ReduceDeleteTodoSuccessAction(TodosState state, DeleteTodoSuccessAction action)\n        {\n            // Return the default state if no list of todos is found\n            if (state.CurrentTodos is null)\n            {\n                return new TodosState(false, null, null, state.CurrentTodo);\n            }\n\n            // Create a new list with all todo items excluding the todo with the deleted ID\n            var updatedTodos = state.CurrentTodos.Where(t => t.Id != action.Id);\n\n            return new TodosState(false, null, updatedTodos, state.CurrentTodo);\n        }\n\n        [ReducerMethod]\n        public static TodosState ReduceDeleteTodoFailureAction(TodosState state, DeleteTodoFailureAction action) =>\n            new TodosState(false, action.ErrorMessage, state.CurrentTodos, state.CurrentTodo);\n    }\n}\n```\n\nAgain, nothing special with our `ReduceDeleteTodoAction` and `ReduceDeleteTodoFailureAction`, as they're simply just\ncomputing action-based stated. With our `ReduceDeleteTodoSuccessAction`, we grab a reference to a list with the help of\nLINQ containing all todos excluding the todo who's ID matches the ID from the issued action. Using this newly created\nlist, we'll create a new `TodosState` using this list and notify our components. With our reducer in place, let's add a\nfew side effects to help with calling the API with `DeleteTodoEffect.cs` and `DeleteTodoSuccessEffect.cs`. In\nour `Effects` folder, let's add a `DeleteTodos` subfolder with the following classes:\n\n### DeleteTodoEffect.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Services;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo;\nusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects.DeleteTodo\n{\n    public class DeleteTodoEffect : Effect<DeleteTodoAction>\n    {\n        private readonly ILogger<DeleteTodoEffect> _logger;\n        private readonly JsonPlaceholderApiService _apiService;\n\n        public DeleteTodoEffect(ILogger<DeleteTodoEffect> logger, JsonPlaceholderApiService apiService) =>\n            (_logger, _apiService) = (logger, apiService);\n\n        protected override async Task HandleAsync(DeleteTodoAction action, IDispatcher dispatcher)\n        {\n            try\n            {\n                _logger.LogInformation($\"Deleting todo {action.Id}...\");\n                var deleteResponse = await _apiService.DeleteAsync($\"todos/{action.Id}\");\n\n                if (!deleteResponse.IsSuccessStatusCode)\n                {\n                    throw new HttpRequestException($\"Error deleting todo: {deleteResponse.ReasonPhrase}\");\n                }\n\n                _logger.LogInformation($\"Todo deleted successfully!\");\n                dispatcher.Dispatch(new DeleteTodoSuccessAction(action.Id));\n            }\n            catch (Exception e)\n            {\n                _logger.LogError($\"Could not create todo, reason: {e.Message}\");\n                dispatcher.Dispatch(new DeleteTodoFailureAction(e.Message));\n            }\n        }\n    }\n}\n```\n\n### DeleteTodoSuccessEffect.cs\n\n```csharp\nusing Fluxor;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.Extensions.Logging;\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo;\nusing System.Threading.Tasks;\n\nnamespace StateManagementWithFluxor.Store.Features.Todos.Effects\n{\n    public class DeleteTodoSuccessEffect : Effect<DeleteTodoSuccessAction>\n    {\n        private readonly ILogger<DeleteTodoSuccessEffect> _logger;\n        private readonly NavigationManager _navigation;\n\n        public DeleteTodoSuccessEffect(ILogger<DeleteTodoSuccessEffect> logger, NavigationManager navigation) =>\n            (_logger, _navigation) = (logger, navigation);\n\n        protected override Task HandleAsync(DeleteTodoSuccessAction action, IDispatcher dispatcher)\n        {\n            _logger.LogInformation(\"Deleted todo successfully, navigating back to todo listing...\");\n            _navigation.NavigateTo(\"todos\");\n\n            return Task.CompletedTask;\n        }\n    }\n}\n```\n\nWith our `DeleteTodoEffect`, we setup an eerily similar workflow to our other issued actions, simply using our API\nservice to call the DELETE endpoint with the ID from the action's payload. On a successful response we'll issue the\nsuccess action that will trigger the `DeleteTodoSuccessEffect` to fire off, navigating the user back to the todos page\nwith a new version of the table without the todo we just deleted. Again, we use effects as a form of navigation control\nto selectively guide users around our application in a predicable manner. With our effects in place, let's add a facade\nmethod to help facilitate the dispatching of the delete actions from our components. Back in our `StateFacade` service:\n\n### StateFacade.cs\n\n```csharp\n// Previously existing imported namespaces...\nusing StateManagementWithFluxor.Store.Features.Todos.Actions.DeleteTodo;\n\nnamespace StateManagementWithFluxor.Services\n{\n    public class StateFacade\n    {\n        // Previous facade methods...\n\n        public void DeleteTodo(int id)\n        {\n            _logger.LogInformation($\"Issuing action to delete todo {id}\");\n            _dispatcher.Dispatch(new DeleteTodoAction(id));\n        }\n    }\n}\n```\n\nWith our facade method in place, let's finally add the interaction to the delete button on our todo detail page with\njust a simple `@onclick` event handler within our `EditForm` markup block:\n\n### TodoDetail.razor\n\n```csharp\n<EditForm Model=\"validationModel\" OnValidSubmit=\"HandleValidSubmit\">\n    <DataAnnotationsValidator />\n    <div class=\"d-flex flex-column align-items-center\">\n        <ValidationSummary />\n    </div>\n\n    <div class=\"d-flex flex-column align-items-center py-1\">\n        <div class=\"d-flex flex-row py-2\">\n            <strong>ID</strong>: @TodosState.Value.CurrentTodo.Id\n        </div>\n        <div class=\"py-2 d-flex flex-row align-items-center\">\n            <strong class=\"px-2\">Completed:</strong>\n            <InputCheckbox class=\"form-check\" @bind-Value=\"validationModel.Completed\" />\n        </div>\n        <div class=\"py-2 d-flex flex-row align-items-center\">\n            <strong class=\"px-2\">User:</strong>\n            <InputNumber class=\"form-control\" @bind-Value=\"validationModel.UserId\"/>\n        </div>\n        <div class=\"py-2 d-flex flex-row align-items-center\">\n            <strong class=\"px-2\">Title:</strong>\n            <InputText class=\"form-control\" @bind-Value=\"validationModel.Title\"/>\n        </div>\n\n        <div class=\"d-flex flex-row justify-content-center pt-2\">\n            <button type=\"submit\" class=\"btn btn-secondary\">Update</button>\n            <span class=\"px-2\"></span>\n            <button class=\"btn btn-danger\" @onclick=\"() => Facade.DeleteTodo(TodosState.Value.CurrentTodo.Id)\">Delete</button>\n        </div>\n\n        <div class=\"py-3\">\n            <a class=\"btn btn-primary\" href=\"/todos\">Back to Todos</a>\n        </div>\n    </div>\n</EditForm>\n```\n\nNotice we've only just added the `@onclick=\"() => Facade.DeleteTodo(TodosState.Value.CurrentTodo.Id)\"` event handler to\nthe delete button to fire off the initial delete action based on the ID of the currently displayed todo.\n\nWhew... that was quite a bit of code. Let's sit back and enjoy the fruits of our labor and test out the delete workflow.\nIf we navigate to the todos page to see the list of displayed todos, go ahead and select a todo. Once we're navigated to\nthe detail page, with the Redux Dev tools console open, go ahead and hit the delete button. What actions do we see\nissued in the console? Checkout the diffs and the action payloads for a little extra credit. Once we see\nthe `DeleteTodoSuccessAction` issued, we're navigated back to our todos page and see the table has been updated to\nreflect the removal of our todo! Pretty cool, huh?\n\n### Wrapping up\n\nIn the final stretch, we've seen one strategy for implementing CRUD workflows with the help of Fluxor in our Blazor\napplications. Bringing the redux experience to Blazor empowers us .NET developers to build bulletproof and predictable\nBlazor applications simplifying the complex problem of state management on the frontend, bringing a tried-and-true\ndesign patter in flux along with us. Feel free to play around with the code we've written so far, and maybe even improve\nthe workflows we already have set in place (see what happens when you reload the todo detail with a selected todo and\ntry to delete it). All the code we've written so far is available\non [GitHub](https://github.com/JoeyMckenzie/StateManagementWithFluxor) for those following along. Next up, we'll explore\nautomated integration testing on our todos application using Cypress to help further strengthen our codebase and provide\nyet another tool we can bring into the development process to assist with bulletproofing our workflows, along with a few\nconsiderations and potential refactors we could make with our current application architecture to make it a bit more\nrobust.\n\nUntil next time, friends!\n",
      "html": "<p>Memes aside, if you've been following along with our flux-ified Blazor project, you may have noticed the plethora of\ninitial, success, and failure action types. While this may seem like overkill to some, by creating this separation of\nconcern between action types, we ensure each action has a <em>single</em> responsibility in the flux workflow. If (read: when)\nour business requirements change that cause us to modify existing actions, we can do so without fear of unintentionally\nbreaking another workflow that might reuse the same action. It's like I always say, \"when in doubt, create a new\naction.\"</p>\n<h2>Continuing where we left off</h2>\n<p>In our <a href=\"/images/fluxor-state-management-with-blazor-part-1/\">last post</a>, we discussed what the flux design pattern is,\nwhat problems it seeks to solve, and how to integrate it with Blazor using the Fluxor library. So far, we've created two\naction workflows to interact with the JSON Placeholder API: a todo list retrieve workflow and a todo retrieval by ID\nworkflow. With the help of a few services and effects, we successfully implemented the R of our CRUD operations using\nactions, reducers, and our central application store to allow our components to simply get only the state features they\ncare about and display them on the page. In this (hopefully shorter) post, we'll do a bit of service refactoring and add\na few more CRUD operations to give us a functioning application that'll allow us to interface with the todos from the\nJSON Placeholder API.</p>\n<h2>Refactoring to typed HTTP services</h2>\n<p>To kick things off, let's start by refactoring how we've been calling the API. So far, we've been injecting\nan <code>HttpClient</code> instance directly into our effects with the help of the DI container from\nthe <code>Microsoft.Extensions.DependencyInjection</code> library. A more robust, unit test-able approach would be to utilize a\ncentralized service that contains the <code>HttpClient</code> instance injected into it so that we can configure a single client\ninstance to our liking (attach headers, set base paths, etc.) and funnel all external network calls into a single place,\nrather than have <code>HttpClient</code>s spread throughout all of our flux effects. In our <code>Services</code> folder at the root of our\nproject, let's add a file named <code>JsonPlaceholderApiService.cs</code> with the following code:</p>\n<h3>JsonPlaceholderApiService.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">JsonPlaceholderApiService</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> HttpClient</span><span style=\"color:#80A665\"> _httpClient</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> JsonPlaceholderApiService</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">JsonPlaceholderApiService</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> HttpClient</span><span style=\"color:#80A665\"> httpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> httpClient</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> GetAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">>(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> path</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">GET: Retrieving resource of type </span><span style=\"color:#666666\">{</span><span style=\"color:#CB7676\">typeof</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">).</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetFromJsonAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TResponse</span><span style=\"color:#666666\">>(</span><span style=\"color:#BD976A\">path</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HttpResponseMessage</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> PostAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TBody</span><span style=\"color:#666666\">>(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> path</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TBody</span><span style=\"color:#80A665\"> body</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">POST: Creating resource of type </span><span style=\"color:#666666\">{</span><span style=\"color:#CB7676\">typeof</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TBody</span><span style=\"color:#666666\">).</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PostAsJsonAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">path</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HttpResponseMessage</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> PutAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TBody</span><span style=\"color:#666666\">>(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> path</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TBody</span><span style=\"color:#80A665\"> body</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">PUT: Updating resource of type </span><span style=\"color:#666666\">{</span><span style=\"color:#CB7676\">typeof</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TBody</span><span style=\"color:#666666\">).</span><span style=\"color:#C98A7D\">Name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PutAsJsonAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">path</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HttpResponseMessage</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> DeleteAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> path</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">DELETE: Removing resource</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> _httpClient</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">path</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our centralized HTTP service in place, we've effectively created\na <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-3.1\">typed client</a> that we\ncan configure within the DI container to inject into our effects, with a configured HTTP client service wired up at\nruntime. Back in our <code>Program.cs</code>, we'll need to add a service reference to our <code>JsonPlaceholderApiService</code>, but before\ndoing so, let's add a package reference to the <code>Microsoft.Extensions.Http</code> NuGet package so that we can properly\nconfigure the HTTP client that will be injected into this service. I'm using Visual Studio's package manager to add the\nreference to our project, but feel free to use the command line (<code>dotnet add package Microsoft.Extensions.Http</code>), or the\nPackage Manager console (<code>Install-Package Microsoft.Extensions.Http</code>). Once we've successfully added the package, let's\nadd the following code to <code>Program.cs</code>:</p>\n<h3>Program.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">AspNetCore</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Components</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">WebAssembly</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Hosting</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DependencyInjection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reflection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Mime</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Program</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> Main</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">[]</span><span style=\"color:#80A665\"> args</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> builder</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> WebAssemblyHostBuilder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateDefault</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">args</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">RootComponents</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">App</span><span style=\"color:#666666\">>(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">app</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add Fluxor</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddFluxor</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">options</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                options</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ScanAssemblies</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">Assembly</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">GetExecutingAssembly</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                options</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UseReduxDevTools</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add custom application services</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddScoped</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StateFacade</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            builder</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">AddHttpClient</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">JsonPlaceholderApiService</span><span style=\"color:#666666\">>(</span><span style=\"color:#80A665\">client</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                client</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">DefaultRequestHeaders</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Content-Control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> $\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">MediaTypeNames</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Application</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Json</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">; charset=utf-8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                client</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">BaseAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Uri</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://jsonplaceholder.typicode.com</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            await</span><span style=\"color:#BD976A\"> builder</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Build</span><span style=\"color:#666666\">().</span><span style=\"color:#80A665\">RunAsync</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>From the above, we can see that we've added the line <code>builder.Services.AddHttpClient&#x3C;JsonPlaceholderApiService></code>\nconfiguring the <code>HttpClient</code> instance that will be injected into the API service for us at runtime. Every time\na <code>JsonPlaceholderApiService</code> instance is requested at runtime within our effects, the DI container will inject a\nconfigured <code>HttpClient</code> instance with the base address we've pointed to here and the default headers on each request.\nWith our API service wired up, let's go ahead and add some markup to allow users to create todos. When creating a todo\nand sending the corresponding POST request to JSON Placeholder API, we won't actually be creating a resource on the\nserver (we'll see the consequences of this later).</p>\n<p>The Placeholder API is simply just that - a dummy API that acts as a placeholder for realtime requests and responses.\nOur create request will send back a 201 with the created todo resource. We'll take that todo and simply append it to our\ncurrent list of todos and re-render the list within our <code>Todos.razor</code> component to reflect the addition of the newly\ncreated todo. In a real world scenario, this isn't really something you'd want to be doing on the frontend. A better\nsolution, and more common in practice, would be to send a create request to a downstream server from the client, and\nupon a successful status returned from the server, we'd send another request to the server to retrieve the list again\nthat should contain our newly created resource. There's a few reason as to why we would implement the design in this\nway, but a bit irrelevant and out of scope for this post.</p>\n<p>Let's go ahead create a <code>Components</code> folder at our solution root and within that directory, let's add a razor file\ncalled <code>CreateTodoForm.razor</code> with the following markup:</p>\n<h3>CreateTodoForm.razor</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">@inherits</span><span style=\"color:#BD976A\"> Fluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Blazor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Web</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Components</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">FluxorComponent</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Validation</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@inject</span><span style=\"color:#BD976A\"> StateFacade</span><span style=\"color:#BD976A\"> Facade</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">EditForm</span><span style=\"color:#80A665\"> Model</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> OnValidSubmit</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">HandleValidSubmit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">DataAnnotationsValidator</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">ValidationSummary</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-group px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">label</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">label</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputText</span><span style=\"color:#BD976A\">  id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\">  @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-group px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">label</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">User</span><span style=\"color:#BD976A\"> ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">label</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputNumber</span><span style=\"color:#BD976A\"> ParsingErrorMessage</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">That is not a valid user ID</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-user-id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.UserId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-group px-2 mt-3 d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">label</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">label</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputCheckbox</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">create-todo-completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-check</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">pt-2 d-flex flex-row justify-content-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-primary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">submit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Create</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">EditForm</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@code</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    private</span><span style=\"color:#BD976A\"> CreateOrUpdateTodoValidationModel</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoValidationModel</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    protected</span><span style=\"color:#BD976A\"> override</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> OnInitialized</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C99076\">        base</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">OnInitialized</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    private</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> HandleValidSubmit</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // We use the bang operator (!) to tell the compiler we'll know this string field will not be null</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Facade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">CreateTodo</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>In our <code>CreateTodoForm.razor</code> component, we're simply just adding a bit of form markup to allow users to input a todo\ntitle, user ID, and the current status of the todo (done/not done). We're using Blazor's built-in <code>EditForm</code> to perform\nfield validations on our model that we'll ultimately send to the server containing the todo data, again letting these\nbuilt-in Blazor tools handle the heavy input validation lifting for us. Using the <code>DataAnnotationsValidator</code>\nand <code>ValidationSummary</code> components, we're able to dynamically render validation messages when the user input does not\nmeet our criteria for handling form submission. Using a little Bootstrap, we'll be able to display our error messages in\na somewhat pleasant manner as well.</p>\n<p>Notice that we've added a new model type with the <code>CreateOrUpdateTodoValidationModel</code> reference that will have it's\nproperties <code>set</code> as we've bound it to our <code>EditForm</code> using the <code>Model</code> attribute. Let's go ahead and add a <code>Validation</code>\nfolder underneath the <code>Todos</code> feature folder within our <code>Models</code> directory. Within the <code>Validation</code> folder, let's add\nthe <code>CreateOrUpdateTodoValidationModel.cs</code> class file:</p>\n<h3>CreateOrUpdateTodoValidationModel.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">ComponentModel</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DataAnnotations</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Validation</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoValidationModel</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Required</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">AllowEmptyStrings</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> ErrorMessage</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Your todo must have a title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> Title</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Required</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">ErrorMessage</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Status of this todo is required</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> Completed</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Required</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">ErrorMessage</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">User ID associated with this todo is required</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">Range</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 100</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> UserId</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> set</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Using .NET's <code>System.ComponentModel.DataAnnotations</code> library, we add a few <code>Required</code> attributes to each of the\nproperties, with an additional <code>Range</code> attribute on the <code>UserId</code> to enforce users stay within the 1 to 100 user ID\nvalues. While it might seem a bit overkill to add this validation model when we could just simply bind each of the\nproperties to a model to be sent off to a server, we have to keep in mind that we don't want our models to\nbecome <a href=\"https://en.wikipedia.org/wiki/God_object\">god objects</a>. If you've ever worked on a large enterprise codebase,\nyou've more than likely seen this at some point or another - API models reused across multiple endpoint request payloads\ntrying to fit the mold everywhere, \"helper\" classes that only \"help\" you magically break this unintentionally when\nmaking slight changes, and the list goes on. Our request models and validation models should be responsible for one\nthing, and one thing only - the <code>CreateOrUpdateTodoValidationModel</code> is only concerned about validating input.</p>\n<p>Back in our <code>CreateTodoForm.razor</code> with the <code>EditForm</code> referencing our <code>validationModel</code>, we bind each of the properties\nwithin the <code>validationModel</code> to an input tag. Luckily for us, the .NET team has provider a few nice custom input\ncomponents when dealing with <code>EditForm</code>s within our application. We bind each of the <code>Title</code>, <code>Completed</code>, and <code>UserId</code>\nproperties to a wrapping input component in <code>InputText</code>, <code>InputCheckbox</code>, and <code>InputNumber</code> respectively. Adding a\nfew <code>form-control</code> Bootstrap classes and we've got a semi-decent looking form!</p>\n<p>In our <code>OnInitialized</code> component lifecycle method, we initialize the user ID to 1 since the rendered markup with be\na <code>type=\"number\"</code> input. We've also added another method to our <code>StateFacade</code> service with <code>CreateTodo</code> - let's go ahead\nand add that to the facade:</p>\n<h3>StateFacade.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> StateFacade</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Previous constructor and methods...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> CreateTodo</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> title</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> userId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Construct our validated todo</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> todoDto</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> userId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Issuing action to create todo [</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">] for user [</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">userId</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">]</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">todoDto</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>If you're curious about why we've added this \"facade\" service, I mention the reasons for doing so in the first post.\nOur <code>CreateTodo</code> method simply constructs a <code>CreateOrUpdateTodoDto</code> immutable request model and issues\na <code>CreateTodoAction</code> with it as the payload. Let's add each of those classes to their respective folders:</p>\n<h3>Models/Todos/Dtos/CreateOrUpdateTodoDto.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateOrUpdateTodoDto</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> title</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> userId</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> UserId</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> userId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Title</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> Completed</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> UserId</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>Store/Features/Todos/Actions/CreateTodo/CreateTodoAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateTodoAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">CreateOrUpdateTodoDto</span><span style=\"color:#80A665\"> todo</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Todo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span><span style=\"color:#80A665\"> Todo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our newly created action <code>CreateTodoAction</code>, let's add our success and failure actions while we're here before\ncreating the reducer methods that will subscribe to these actions:</p>\n<h3>CreateTodoSuccessAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateTodoSuccessAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#80A665\"> todo</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Todo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> TodoDto</span><span style=\"color:#80A665\"> Todo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>CreateTodoFailureAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Shared</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateTodoFailureAction</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> FailureAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            :</span><span style=\"color:#C99076\"> base</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Recall from our previous post that we created a common <code>FailureAction</code> for all of our failure type actions to descend\nfrom, allowing us to store common error properties within this shared action for all failure actions to tap into. With\nour create action in place, let's add a reducer to our our <code>Reducers</code> directory within our todos feature folder to\nhandle the create actions:</p>\n<h3>Store/Features/Reducers/CreateTodoActionsReducer.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">State</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reducers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateTodoActionsReducer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceCreateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CreateTodoAction</span><span style=\"color:#80A665\"> _</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceCreateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CreateTodoSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Grab a reference to the current todo list, or initialize one if we do not currently have any loaded</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> currentTodos</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#CB7676\"> ?</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">>()</span><span style=\"color:#CB7676\"> :</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add the newly created todo to our list and sort by ID</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            currentTodos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            currentTodos</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> currentTodos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">OrderBy</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">t</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> t</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> currentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceCreateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CreateTodoFailureAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ErrorMessage</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>When an initial <code>CreateTodoAction</code> is dispatched, we set the <code>TodoState</code> with the loading property set to true and the\nexisting todos and selected todo, as we don't want to alter the current state those actions ultimately produce as our\ncreate workflow has no concern with either workflow. Upon a successful creation, i.e. the API returning a successful 201\nstatus code back to us, we'll produce a <em>new</em> <code>TodosState</code> by appending the newly created todo item to a copy of the\ncurrent list of todos, and set the sorted list within the constructor of the <code>TodosState</code> object. Finally, upon\na <code>CreateTodoFailureAction</code> being dispatched, we keep the currently loaded todos piece of state intact, making sure to\nproduce a new <code>TodosState</code> containing an error that we issued the failure action with.</p>\n<p>With our reducer in place, we'll need to add a side effect (if you're a little fuzzy on the flux workflow, checkout the\nfirst post) that will do the actual calling of the API using our <code>JsonPlaceholderApiService</code> and issue either a success,\nor failure, action based on the response. In our <code>Effects</code> directory underneath our todos feature folder, let's add\na <code>CreateTodoEffect.cs</code> file:</p>\n<h3>CreateTodoEffect.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">CreateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> CreateTodoEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">CreateTodoAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">CreateTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> _apiService</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> CreateTodoEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">CreateTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> httpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> httpClient</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">CreateTodoAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            try</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Creating todo </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Todo</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> createResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PostAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">createResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsSuccessStatusCode</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> HttpRequestException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Error creating todo: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">createResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">ReasonPhrase</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Todo created successfully!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> createdTodo</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> createResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Content</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ReadFromJsonAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">createdTodo</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            catch</span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">Exception</span><span style=\"color:#80A665\"> e</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogError</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Could not create todo, reason: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> CreateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Message</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too out of the ordinary here, but let's do a quick code breakdown:</p>\n<ul>\n<li>We inject a logger and our API service from the DI container, using an expression-bodied tuple constructor (C#\nsyntactic sugar)</li>\n<li>Using our API service, we call the <code>PostAsync</code> method passing in the todo from the <code>CreateTodoAction</code> payload\nand <code>await</code> for the response</li>\n<li>If we get back a good looking 201, we'll go ahead and dispatch a <code>CreateTodoSuccessAction</code> with the todo response\nreturned from the API as the payload</li>\n<li>Upon any unchecked exceptions, or any non-successful status code returned from the server, we'll dispatch an error\naction with the corresponding error message from the exception</li>\n</ul>\n<p>With our create workflow in place, let's go ahead and add our <code>CreateTodoForm.razor</code> component to our <code>Todos.razor</code>\npage. In the markup section of <code>Todos.razor</code>, we'll replace the current markup with the following:</p>\n<h3>Todos.razor</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">h3</span><span style=\"color:#80A665\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center mb-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">h3</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">@if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsLoading</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">spinner-border</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> role</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">status</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sr-only</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Loading</span><span style=\"color:#CB7676\">..</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span><span style=\"color:#80A665\"> if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">HasCurrentErrors</span><span style=\"color:#CB7676\"> ||</span><span style=\"color:#BD976A\"> TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Whoops</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\"> Looks</span><span style=\"color:#BD976A\"> like</span><span style=\"color:#BD976A\"> an</span><span style=\"color:#BD976A\"> issue</span><span style=\"color:#BD976A\"> occurred</span><span style=\"color:#BD976A\"> loading</span><span style=\"color:#BD976A\"> todos</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#666666\">(&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-info py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @onclick</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">() => Facade.LoadTodos()</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Reload</span><span style=\"color:#BD976A\"> Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span><span style=\"color:#80A665\"> if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Any</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">CreateTodoForm</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center mt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Looks</span><span style=\"color:#BD976A\"> like</span><span style=\"color:#BD976A\"> there</span><span style=\"color:#666666\">'</span><span style=\"color:#C98A7D\">s no todos...&#x3C;/span</span><span style=\"color:#FDAEB7;font-style:italic\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-info py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @onclick</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">() => Facade.LoadTodos()</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Reload</span><span style=\"color:#BD976A\"> Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">CreateTodoForm</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">table</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">table table-hover mt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">thead</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">User</span><span style=\"color:#BD976A\"> ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">thead</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">tbody</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            @foreach</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">var</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#CB7676\"> in</span><span style=\"color:#BD976A\"> TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#BD976A\"> style</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">cursor: pointer;</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @onclick</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">() => NavigateToTodoDetail(todo.Id)</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">@todo</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">tbody</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">table</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We've added a reference to our create todo form with the <code>&#x3C;CreateTodoForm /></code> markup component in this razor page, so\nwhen we navigate to the page, we should see a simple form after the todos have been loaded from the API:</p>\n<p><img src=\"/images/state-management-with-blazor-using-fluxor/part-2/create_todo_Form.png\" alt=\"Create_todo_Form\"></p>\n<p>Notice we've added the <code>&#x3C;CreateTodoForm /></code> component in two sections of our markup, once when a rendered list is pulled\nfrom the store, and again when there are no todos loaded available in state. With the help of Fluxor, we can easily\nrender these conditional pieces of markup based on our current state value, tapping into <code>TodosState.Value</code> to access\nour properties we've added to that particular piece of state.\nInternally, <a href=\"https://github.com/mrpmorris/Fluxor/blob/master/Source/Fluxor.Blazor.Web/Components/FluxorComponent.cs#L29\">Fluxor</a>\nwill call <code>StateHasChanged</code> for us when we have components descending from a <code>FluxorComponent</code> anytime the our store\npublished a new <code>TodosState</code> (triggered by the store), signaling Blazor to re-render the current markup based on our\nnew <code>TodosState</code> value. If you're familiar with Angular, <code>StateHasChanged</code> is the analog to the <code>ChangeDetectorRef</code>\nservice commonly utilized by Angular components that turn off automatic change detection\nwhen <code>ChangeDetectionStrategy.OnPush</code> is used for that component's change detection strategy.</p>\n<p>With our form in place, let's test our create workflow to make sure everything works as expected. With Redux Dev Tools\nopen in the dev console, let's go ahead and fire up our application. When it's up and running, navigate to the <code>Todos</code>\nnav menu item, and we should a few actions fire off, namely the <code>LoadTodosAction</code> and the <code>LoadTodosSuccessAction</code> (\nhopefully). Inspecting these actions, we can look at the action payloads, the current <code>Todos</code> state value, and the\ncomputed diff between states once the action was dispatched. If we fill in some values for the create todo form on the\ntop of the page and hit the submit button, we should again see two more actions dispatched in the form\nof <code>CreateTodoAction</code> carrying the form data we entered in the action payload, and a\ncorresponding <code>CreateTodoSuccessAction</code> computed state diff with an extra todo item added to the <code>CurrentTodos</code> property\nstate. The change should then be reflected in our table, since the store pushed out two corresponding <code>TodosState</code>\nchanges, causing Blazor to re-render its current markup twice and rendering the corresponding HTML based on the values\nwithin our <code>TodosState</code>.</p>\n<h2>Updating todos</h2>\n<p>With our create workflow in place, let's iron out our update workflow. Since we've already put in place our retrieve\nworkflows, all we really need to do is add a bit code code to the <code>TodoDetail.razor</code> page to allow users to modify the\ntodo values when they've been selected from the todos table. To kick things off, let's add some actions for updating a\ntodo. In our <code>Actions</code> folder within our <code>Todos</code> feature folder, let's add an <code>UpdateTodo</code> folder. Inside that\ndirectory, we'll add three actions corresponding to the kickoff, success, and failure actions:</p>\n<h3>UpdateTodoAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span><span style=\"color:#80A665\"> todo</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Todo</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">id</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span><span style=\"color:#80A665\"> Todo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>UpdateTodoSuccessAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoSuccessAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#80A665\"> todo</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Todo</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#5DA994\"> TodoDto</span><span style=\"color:#80A665\"> Todo</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>UpdateTodoFailureAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Shared</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoFailureAction</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> FailureAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            :</span><span style=\"color:#C99076\"> base</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Similar to our create workflow, we've allowed users to update todos using our <code>CreateOrUpdateTodoDto</code> class we created\nto keep consistent with the properties they can use to create and update todos. With our actions in place, let's add the\ncorresponding reducer methods that will compute the state upon dispatch of these actions. In our <code>Reducers</code> folder,\nlet's add an <code>UpdateTodoActionsReducer.cs</code> class file:</p>\n<h3>UpdateTodoActionsReducer.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">State</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Collections</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Generic</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reducers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoActionsReducer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceUpdateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> UpdateTodoAction</span><span style=\"color:#80A665\"> _</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceUpdateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> UpdateTodoSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If the current todos list is null, set the state with a new list containing the updated todo</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\"> },</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Rather than mutating in place, let's construct a new list and add our updated item</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updatedList</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">Where</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">t</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> t</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Add the todo and sort the list</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedList</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            updatedList</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> updatedList</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">OrderBy</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">t</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> t</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                .</span><span style=\"color:#80A665\">ToList</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> updatedList</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceUpdateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> UpdateTodoFailureAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ErrorMessage</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too exciting with our <code>ReduceUpdateTodoAction</code> and <code>ReduceUpdateTodoFailureAction</code> state reducers, as they\nsimply compute a new <code>TodosState</code> based on the action payload. Upon a successful update action being dispatched,\nour <code>ReduceUpdateTodoSuccessAction</code> will create a new list based on the <code>CurrentTodos</code> values, excluding the value we've\nupdated, add the updated todo from the <code>UpdateTodoSuccessAction</code> payload, and create a new <code>TodosState</code> with this new\nlist. Again, we probably wouldn't do this in a real world production application, where we might opt instead to recall\nthe API to rehydrate the current list view.</p>\n<p>With our reducer in place, let's add a couple side effects for the <code>UpdateTodoAction</code> and <code>UpdateTodoSuccessAction</code>\nbeing dispatched. In our <code>Effects</code> folder, let's add an <code>UpdateTodo</code> subfolder with two effects, <code>UpdateTodoEffect.cs</code>\nand <code>UpdateTodoSuccessEffect.cs</code>:</p>\n<h3>UpdateTodoEffect.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Dtos</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodoEffect</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> _apiService</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateTodoEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> httpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> httpClient</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">UpdateTodoAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            try</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Updating todo </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> updateResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PutAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">todos/</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">updateResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsSuccessStatusCode</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> HttpRequestException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Error updating todo: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">updateResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">ReasonPhrase</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Todo updated successfully!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> updatedTodo</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> updateResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Content</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">ReadFromJsonAsync</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoDto</span><span style=\"color:#666666\">>();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> UpdateTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">updatedTodo</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            catch</span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">Exception</span><span style=\"color:#80A665\"> e</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogError</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Could not update todo, reason: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> UpdateTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Message</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>UpdateTodoSuccessEffect.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">AspNetCore</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Components</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodoEffect</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UpdateTodoSuccessEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoSuccessAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoSuccessEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> NavigationManager</span><span style=\"color:#80A665\"> _navigation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> UpdateTodoSuccessEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">UpdateTodoSuccessEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> NavigationManager</span><span style=\"color:#80A665\"> navigation</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _navigation</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> navigation</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">UpdateTodoSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Updated todo successfully, navigating back to todo listing...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _navigation</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">NavigateTo</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> Task</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CompletedTask</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our <code>UpdateTodoEffect.cs</code> utilizes our <code>JsonPlaceholderApiService</code> to make a PUT call to the API using the action's\npayload (our <code>CreateOrUpdateTodoDto</code> object), and issues an update success action upon a successful response from the\nAPI. In our <code>UpdateTodoSuccessEffect</code>, we navigate the user back to the todos page, where the list should now display\nthe updated values we've just entered and submitted on the todo details form. We choose to navigate users back to the\ntodos page only on a successful action dispatched, rather than navigating users back regardless, as we want to inform\nusers of unexpected errors while still on the details page before navigating back to the page. We're also controlling\nthe user's navigation, building in predictable UX for the user rather than having them navigate back manually, or\nnavigating else where in our application that we might not expect during this workflow.</p>\n<p>With our core flux workflow in place for the update actions, let's add a method to our <code>StateFacade</code> so that we can\nissue these actions from our <code>TodosDetail.razor</code> page. In our <code>StateFacade</code> service:</p>\n<h3>StateFacade.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// Previously existing imported namespaces...</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">UpdateTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> StateFacade</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Previous facade methods...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> UpdateTodo</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> title</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> userId</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Construct our validated todo</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> todoDto</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoDto</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> userId</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Issuing action to update todo </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> UpdateTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">id</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> todoDto</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our <code>UpdateTodo</code> facade method in place, let's finally add to the markup in <code>TodoDetail.razor</code> to dispatch the\nupdate action and allow users to modify the currently selected todo values:</p>\n<h3>TodoDetail.razor</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">@inherits</span><span style=\"color:#BD976A\"> Fluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Blazor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Web</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Components</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">FluxorComponent</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@page</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">/todos/{todoId}</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Models</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Validation</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">State</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@using</span><span style=\"color:#BD976A\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Services</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@inject</span><span style=\"color:#BD976A\"> IState</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\"> TodosState</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@inject</span><span style=\"color:#BD976A\"> StateFacade</span><span style=\"color:#BD976A\"> Facade</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">h3</span><span style=\"color:#80A665\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center mb-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Detail</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#BD976A\"> item</span><span style=\"color:#BD976A\"> @TodoId</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">h3</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">@if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsLoading</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">spinner-border</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> role</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">status</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sr-only</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Loading</span><span style=\"color:#CB7676\">..</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span><span style=\"color:#80A665\"> if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">HasCurrentErrors</span><span style=\"color:#CB7676\"> ||</span><span style=\"color:#BD976A\"> TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Whoops</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\"> Looks</span><span style=\"color:#BD976A\"> like</span><span style=\"color:#BD976A\"> an</span><span style=\"color:#BD976A\"> issue</span><span style=\"color:#BD976A\"> occurred</span><span style=\"color:#BD976A\"> loading</span><span style=\"color:#BD976A\"> todos</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#666666\">(&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">a</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-primary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Back</span><span style=\"color:#BD976A\"> to</span><span style=\"color:#BD976A\"> Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">else</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">EditForm</span><span style=\"color:#BD976A\"> Model</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> OnValidSubmit</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">HandleValidSubmit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">DataAnnotationsValidator</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">ValidationSummary</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center py-1</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> @TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">InputCheckbox</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-check</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">User</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">InputNumber</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.UserId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Title</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">InputText</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center pt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">submit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-secondary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Update</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-danger</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Delete</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">a</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-primary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Back</span><span style=\"color:#BD976A\"> to</span><span style=\"color:#BD976A\"> Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">EditForm</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@code</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    private</span><span style=\"color:#BD976A\"> CreateOrUpdateTodoValidationModel</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> CreateOrUpdateTodoValidationModel</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    [</span><span style=\"color:#BD976A\">Parameter</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#CB7676\">?</span><span style=\"color:#BD976A\"> TodoId</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> get</span><span style=\"color:#DBD7CAEE\">; </span><span style=\"color:#BD976A\">set</span><span style=\"color:#DBD7CAEE\">; </span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    protected</span><span style=\"color:#BD976A\"> override</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> OnInitialized</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Load the todo detail on initial page navigation</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">TryParse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">TodoId</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> out</span><span style=\"color:#CB7676\"> var</span><span style=\"color:#80A665\"> parsedId</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Facade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LoadTodoById</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">parsedId</span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Register a state change to assign the validation fields</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">StateChanged</span><span style=\"color:#CB7676\"> +=</span><span style=\"color:#666666\"> (</span><span style=\"color:#80A665\">sender</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">            StateHasChanged</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C99076\">        base</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">OnInitialized</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    protected</span><span style=\"color:#BD976A\"> override</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">bool</span><span style=\"color:#BD976A\"> disposing</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        base</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispose</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">disposing</span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    private</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> HandleValidSubmit</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // We use the bang operator (!) to tell the compiler we'll know this string field will not be null</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Facade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UpdateTodo</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Title</span><span style=\"color:#CB7676\">!</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> validationModel</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">UserId</span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Since we've changed quite a few things in this detail page, let's do a quick code breakdown:</p>\n<ul>\n<li>First, we've added an <code>EditForm</code> to handle validating the user's input when updating values similar to how we've setup\nour <code>CreateTodoForm.razor</code> component</li>\n<li>We've added a <code>CreateOrUpdateTodoValidationModel</code> validation model that will react to user input and display any\nvalidation errors with the help of the <code>&#x3C;DataAnnotationsValidator /></code> and <code>&#x3C;ValidationSummary /></code> built-in Blazor\ncomponents</li>\n<li>We've modified our <code>OnInitialized</code> lifecycle method to react to state changes so we can reassign the validation model\nfields from the current todo fields and trigger an additional <code>StateHasChanged()</code> event to tell Blazor to re-render\nthe markup to reflect these changes within the inputs of the form</li>\n<li>Since we're subscribing to additional state changes outside of the scope of Fluxor, we need make sure to manually\ndispose of our component to avoid memory leaks; again, if you're familiar with Angular, this is similar to destroying\nyour observable subscriptions when a component is disposed</li>\n<li>Upon a valid submit, we'll issue the <code>UpdateTodo</code> facade method that will dispatch the <code>UpdateTodoAction</code> and kickoff\nthe update workflow</li>\n</ul>\n<p>Awesome, now that our todo detail page has been updated, if we select a todo from the todos table, we should now be able\nto update that particular todo's values and see those changes reflected back in the table once we hit submit (and the\nAPI responds successfully). I'll leave it as an exercise for the reader to see what actions are dispatched in the Redux\nDev Tools console panel and inspect the actions, payloads, and diffs that are computed.</p>\n<h2>Deleting todos</h2>\n<p>With the light at the end of the tunnel now within sight, we just need to add one more workflow to delete todos.\nThankfully, most of the internal plumbing we've already done, so we'll only have to hookup the delete actions to the\ndelete button we've added to our detail page. Let's start by adding a <code>DeleteTodos</code> folder within our <code>Actions</code>\ndirectory, with three actions in <code>DeleteTodoAction.cs</code>, <code>DeleteTodoSuccessAction.cs</code>, <code>DeleteTodoFailureAction.cs</code>:</p>\n<h3>DeleteTodoAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>DeleteTodoSuccessAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoSuccessAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Id</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> int</span><span style=\"color:#80A665\"> Id</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>DeleteTodoFailureAction.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Shared</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoFailureAction</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> FailureAction</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            :</span><span style=\"color:#C99076\"> base</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">errorMessage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>From the above actions, we see that we're simply only transporting the todo ID in the kickoff and success action\npayloads, as we only need a reference to the ID to remove the todo from our list. While it <em>might</em> be tempting to reuse\nthe kickoff and success actions as they are effectively the same class, the overhead of adding actions is rather small\nand doesn't add much complexity. If our requirements change, maybe the business analysts want a message transmitted upon\na successful delete, we'll only be refactoring a single action sub-workflow (the success flow for the delete todo\nworkflow) with zero fear of unintentionally breaking the kickoff sub-workflow. With our actions in place, let's add our\nlast reducer in our <code>Reducers</code> folder with <code>DeleteTodoActionsReducer.cs</code>:</p>\n<h3>DeleteTodoActionsReducer.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">State</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Linq</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Reducers</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoActionsReducer</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceDeleteTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> DeleteTodoAction</span><span style=\"color:#80A665\"> _</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceDeleteTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> DeleteTodoSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Return the default state if no list of todos is found</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Create a new list with all todo items excluding the todo with the deleted ID</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            var</span><span style=\"color:#80A665\"> updatedTodos</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Where</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">t</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> t</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> updatedTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        [</span><span style=\"color:#5DA994\">ReducerMethod</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#80A665\"> ReduceDeleteTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TodosState</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> DeleteTodoFailureAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            new</span><span style=\"color:#5DA994\"> TodosState</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">ErrorMessage</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodos</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Again, nothing special with our <code>ReduceDeleteTodoAction</code> and <code>ReduceDeleteTodoFailureAction</code>, as they're simply just\ncomputing action-based stated. With our <code>ReduceDeleteTodoSuccessAction</code>, we grab a reference to a list with the help of\nLINQ containing all todos excluding the todo who's ID matches the ID from the issued action. Using this newly created\nlist, we'll create a new <code>TodosState</code> using this list and notify our components. With our reducer in place, let's add a\nfew side effects to help with calling the API with <code>DeleteTodoEffect.cs</code> and <code>DeleteTodoSuccessEffect.cs</code>. In\nour <code>Effects</code> folder, let's add a <code>DeleteTodos</code> subfolder with the following classes:</p>\n<h3>DeleteTodoEffect.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Net</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> _apiService</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteTodoEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> JsonPlaceholderApiService</span><span style=\"color:#80A665\"> apiService</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> apiService</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">DeleteTodoAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            try</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Deleting todo </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                var</span><span style=\"color:#80A665\"> deleteResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#BD976A\"> _apiService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">DeleteAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">todos/</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">deleteResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">IsSuccessStatusCode</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> HttpRequestException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Error deleting todo: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">deleteResponse</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">ReasonPhrase</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Todo deleted successfully!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> DeleteTodoSuccessAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">action</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            catch</span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">Exception</span><span style=\"color:#80A665\"> e</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogError</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Could not create todo, reason: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">Message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> DeleteTodoFailureAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">e</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Message</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>DeleteTodoSuccessEffect.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Fluxor</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">AspNetCore</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Components</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> Microsoft</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Extensions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Logging</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> System</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Threading</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Tasks</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Effects</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DeleteTodoSuccessEffect</span><span style=\"color:#666666\"> :</span><span style=\"color:#5DA994\"> Effect</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoSuccessAction</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoSuccessEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> _logger</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> NavigationManager</span><span style=\"color:#80A665\"> _navigation</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#80A665\"> DeleteTodoSuccessEffect</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">ILogger</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">DeleteTodoSuccessEffect</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> logger</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> NavigationManager</span><span style=\"color:#80A665\"> navigation</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            (</span><span style=\"color:#BD976A\">_logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> _navigation</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> navigation</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        protected</span><span style=\"color:#CB7676\"> override</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#80A665\"> HandleAsync</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">DeleteTodoSuccessAction</span><span style=\"color:#80A665\"> action</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IDispatcher</span><span style=\"color:#80A665\"> dispatcher</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Deleted todo successfully, navigating back to todo listing...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _navigation</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">NavigateTo</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> Task</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CompletedTask</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our <code>DeleteTodoEffect</code>, we setup an eerily similar workflow to our other issued actions, simply using our API\nservice to call the DELETE endpoint with the ID from the action's payload. On a successful response we'll issue the\nsuccess action that will trigger the <code>DeleteTodoSuccessEffect</code> to fire off, navigating the user back to the todos page\nwith a new version of the table without the todo we just deleted. Again, we use effects as a form of navigation control\nto selectively guide users around our application in a predicable manner. With our effects in place, let's add a facade\nmethod to help facilitate the dispatching of the delete actions from our components. Back in our <code>StateFacade</code> service:</p>\n<h3>StateFacade.cs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// Previously existing imported namespaces...</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Features</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Todos</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Actions</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">DeleteTodo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> StateManagementWithFluxor</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Services</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> StateFacade</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Previous facade methods...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> DeleteTodo</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">int</span><span style=\"color:#80A665\"> id</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _logger</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">LogInformation</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Issuing action to delete todo </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">id</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _dispatcher</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">new</span><span style=\"color:#5DA994\"> DeleteTodoAction</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">id</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With our facade method in place, let's finally add the interaction to the delete button on our todo detail page with\njust a simple <code>@onclick</code> event handler within our <code>EditForm</code> markup block:</p>\n<h3>TodoDetail.razor</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">EditForm</span><span style=\"color:#80A665\"> Model</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> OnValidSubmit</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">HandleValidSubmit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">DataAnnotationsValidator</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">ValidationSummary</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-column align-items-center py-1</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row py-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">ID</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> @TodosState</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">CurrentTodo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Id</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Completed</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputCheckbox</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-check</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Completed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">User</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputNumber</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.UserId</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-2 d-flex flex-row align-items-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Title</span><span style=\"color:#CB7676\">:</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">strong</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">InputText</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">form-control</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @bind</span><span style=\"color:#CB7676\">-</span><span style=\"color:#BD976A\">Value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">validationModel.Title</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">d-flex flex-row justify-content-center pt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">submit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-secondary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Update</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">button</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-danger</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> @onclick</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">() => Facade.DeleteTodo(TodosState.Value.CurrentTodo.Id)</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Delete</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">py-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">a</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">btn btn-primary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\">Back</span><span style=\"color:#BD976A\"> to</span><span style=\"color:#BD976A\"> Todos</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">EditForm</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>Notice we've only just added the <code>@onclick=\"() => Facade.DeleteTodo(TodosState.Value.CurrentTodo.Id)\"</code> event handler to\nthe delete button to fire off the initial delete action based on the ID of the currently displayed todo.</p>\n<p>Whew... that was quite a bit of code. Let's sit back and enjoy the fruits of our labor and test out the delete workflow.\nIf we navigate to the todos page to see the list of displayed todos, go ahead and select a todo. Once we're navigated to\nthe detail page, with the Redux Dev tools console open, go ahead and hit the delete button. What actions do we see\nissued in the console? Checkout the diffs and the action payloads for a little extra credit. Once we see\nthe <code>DeleteTodoSuccessAction</code> issued, we're navigated back to our todos page and see the table has been updated to\nreflect the removal of our todo! Pretty cool, huh?</p>\n<h3>Wrapping up</h3>\n<p>In the final stretch, we've seen one strategy for implementing CRUD workflows with the help of Fluxor in our Blazor\napplications. Bringing the redux experience to Blazor empowers us .NET developers to build bulletproof and predictable\nBlazor applications simplifying the complex problem of state management on the frontend, bringing a tried-and-true\ndesign patter in flux along with us. Feel free to play around with the code we've written so far, and maybe even improve\nthe workflows we already have set in place (see what happens when you reload the todo detail with a selected todo and\ntry to delete it). All the code we've written so far is available\non <a href=\"https://github.com/JoeyMckenzie/StateManagementWithFluxor\">GitHub</a> for those following along. Next up, we'll explore\nautomated integration testing on our todos application using Cypress to help further strengthen our codebase and provide\nyet another tool we can bring into the development process to assist with bulletproofing our workflows, along with a few\nconsiderations and potential refactors we could make with our current application architecture to make it a bit more\nrobust.</p>\n<p>Until next time, friends!</p>"
    },
    "_id": "2020/state-management-with-fluxor-blazor-part-2.md",
    "_raw": {
      "sourceFilePath": "2020/state-management-with-fluxor-blazor-part-2.md",
      "sourceFileName": "state-management-with-fluxor-blazor-part-2.md",
      "sourceFileDir": "2020",
      "contentType": "markdown",
      "flattenedPath": "2020/state-management-with-fluxor-blazor-part-2"
    },
    "type": "Post",
    "url": "/blog/2020/state-management-with-fluxor-blazor-part-2"
  },
  {
    "title": "Build a Tailwind modal with Angular and NgRx",
    "description": "Out-of-the-box modals are nice, but often times inflexible and can bring a lot of unnecessary code into a project for something as simple as displaying a message. Let's use Tailwind to build our very own state-based modal instead!",
    "pubDate": "2021-04-27T07:00:00.000Z",
    "category": "angular",
    "heroImage": "/images/tailwind-ngrx-modal/off_the_shelf_modal.jpg",
    "draft": false,
    "keywords": [
      "angular",
      "ngrx",
      "typescript"
    ],
    "body": {
      "raw": "\nComing off a blogging hiatus, I'm finally making my triumphant return. If you've been following my writing up until now,\nyou'll know that I'm primarily a .NET dude. Lately, I've been wanting to get back to my roots with Angular and see what\nI could build with everyone's new favorite CSS framework on the block, [Tailwind](https://tailwindcss.com/). I'm going\nto be dialing back the length in content in place of smaller, bit-sized chunks in an effort to get back to helping the\ngeneral developer population with the lessons I've learned and things that I think are fire (as the kids say) in the\ncommunity. With that out of the way, let's dive in!\n\n## What is Tailwind?\n\nIf you're not familiar with Tailwind CSS, it's a utility-based CSS framework that I like to think of as an API into your\nCSS. This isn't exactly an article about the intricacies and deep diving into the framework, as there are plenty of\ngreat developers out there writing about Tailwind and why we all think it's the future of stylized development (\nseriously, once you start using, you'll most likely never want to go back). Tailwind is awesome due to it's flexibility\nand thin footprint (given you process your build correctly) it provides to our applications. With Tailwind, you'll\n_rarely_ find yourself writing custom CSS and if you have a need for such, you can always include it as\na [separate utility](https://tailwindcss.com/docs/adding-new-utilities) for reusability purposes.\n\nBottom line, Tailwind is amazing and an excellent tool to add to any developer's tool belt.\n\n> Disclaimer: I pay for [Tailwind UI](https://tailwindui.com/) because I love the components that Adam Wathan and the\n> Tailwind team have put together. I would recommend anyone that loves Tailwind to check it out, but for the purposes of\n> our demo here, we'll only be using the publicly available free components.\n\n## Modal components\n\nOften times (read: every other sprint), it's helpful to add a bit of pizazz to our frontend application messaging in the\nform of modals that display handy bits of information for our users. While we _could_ use an out-of-the-box modal\ncomponent using a styling library like [Angular Material](https://material.angular.io/)\nor [Bootstrap](https://getbootstrap.com/), luckily for us, Tailwind UI offers a set\nof [awesomely styled modal components](https://tailwindui.com/components/application-ui/overlays/modals) ready for use.\nWe'll be using the free modal component here to quickly prototype our app modal that we could potentially use throughout\nour site.\n\n## What we'll build\n\nGetting started, let's run through the list of what we'll be building and the tools we'll utilize as we embark on our\nmodal-based journey:\n\n-   We'll utilize Tailwind as our style provider to give our modal a modern look and feel\n-   Instead of using an injectable service to dynamically render DOM that contains our modal markup and content using\n    something like Angular's [Renderer2](https://angular.io/api/core/Renderer2), we'll lean on a flux-based state approach\n    using [NgRx](https://ngrx.io) to help us manage the displaying of our modal with custom content (more on this in a\n    minute)\n-   Using a state-based approach, we'll expose actions that will allow any of our components to call into the modal and\n    display it based on any set of criteria\n\nWith our approach lined out, let's defer to the second bullet point of the aforementioned list.\n\n## Using state in place of rendering\n\nWhile it might be tempting to take on a dependency to render modal's within our application, that approach can bring\nalong quite a bit of unnecessary JavaScript and CSS that is most likely over engineered for our simple use cases.\nAnother popular approach is to write our own custom rendering services that inject DOM directly into the rendered\nmarkup; this is a popular homegrown solution with many articles and example repositories available to pull from. I find\noften times that these solutions can be a bit cumbersome with quite a few moving pieces to keep track and once again,\nquite frankly, feel a bit over engineered. While I'm quite positive someone much smarter than myself has an excellent\ncounterpoint to this, I fall in the camp of _shove all your application logic into flux actions_ and it only seemed\nnatural to have my components like modals, slide overs, dropdowns, menus, etc. fit into that bill as well.\n\nWith our sermon out of the way, let's get into some code. At any point, you can always refer to\nthe [source code](https://github.com/JoeyMckenzie/joey-mckenzie-io-blog-samples/tree/main/projects/ngrx-tailwind-modal)\non my GitHub for reference.\n\n## Getting started\n\nWhile I'm using an Angular workspace in the example project, this all applies to existing single project workspaces as\nwell. Let's spin up a new application using your terminal of choice:\n\n```shell\nng new ngrx-tailwind-modal\n```\n\n> I'm using Angular version 11.2.5, which fortunately for us, the Angular team has included PostCSS into the build\n> processor allowing us to natively install Tailwind without explicitly installing it's dependencies\n\nWith our project in place, let's go ahead and install Tailwind (assuming you're using Angular v11.2 or greater):\n\n```shell\nnpm install --save-dev tailwindcss\n```\n\nand if you're using yarn:\n\n```shell\nyarn add tailwindcss\n```\n\nI'm using CSS in the example below, so we need to add the Tailwind utilities to our global styles as well:\n\n#### styles.css\n\n```csharp\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nIf you're using another CSS library, checkout the [docs](https://tailwindcss.com/docs/installation) to get started. I've\nopted to use just good ole fashioned CSS here since I won't be writing any custom styles myself and have no need to\nprocess CSS files during build time.\n\nWith Tailwind in place, let's go ahead and add NgRx to our dependencies:\n\n```shell\nnpm install @ngrx/store --save\n```\n\nand for yarn\n\n```shell\nyarn add @ngrx/store\n```\n\nOptionally, you can install NgRx dev tools as well to assist with debugging, but for our simple use case, it's not\nnecessary. With our required dependencies in place, let's go ahead and generate a new modal component. Go ahead and `cd`\ninto your project directory and run the Angular schematic to spin up a new component:\n\n```shell\nng g c modal --skip-tests\n```\n\nWe'll add the `--skip-tests` flag for now as we won't be unit testing our modal. After our schematic has run, go ahead\nand open up `modal.component.html` and let's replace the markup with Tailwind's free modal component HTML:\n\n### modal.component.html\n\n```html\n<!-- This example requires Tailwind CSS v2.0+ -->\n<div\n    class=\"fixed inset-0 z-10 overflow-y-auto\"\n    aria-labelledby=\"modal-title\"\n    role=\"dialog\"\n    aria-modal=\"true\"\n>\n    <div\n        class=\"flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0\"\n    >\n        <!--\n      Background overlay, show/hide based on modal state.\n\n      Entering: \"ease-out duration-300\"\n        From: \"opacity-0\"\n        To: \"opacity-100\"\n      Leaving: \"ease-in duration-200\"\n        From: \"opacity-100\"\n        To: \"opacity-0\"\n    -->\n        <div\n            class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n            aria-hidden=\"true\"\n        ></div>\n\n        <!-- This element is to trick the browser into centering the modal contents. -->\n        <span\n            class=\"hidden sm:inline-block sm:h-screen sm:align-middle\"\n            aria-hidden=\"true\"\n            >&#8203;</span\n        >\n\n        <!--\n      Modal panel, show/hide based on modal state.\n\n      Entering: \"ease-out duration-300\"\n        From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        To: \"opacity-100 translate-y-0 sm:scale-100\"\n      Leaving: \"ease-in duration-200\"\n        From: \"opacity-100 translate-y-0 sm:scale-100\"\n        To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n    -->\n        <div\n            class=\"inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle\"\n        >\n            <div class=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4\">\n                <div class=\"sm:flex sm:items-start\">\n                    <div\n                        class=\"mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10\"\n                    >\n                        <!-- Heroicon name: outline/exclamation -->\n                        <svg\n                            class=\"h-6 w-6 text-red-600\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                            aria-hidden=\"true\"\n                        >\n                            <path\n                                stroke-linecap=\"round\"\n                                stroke-linejoin=\"round\"\n                                stroke-width=\"2\"\n                                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n                            />\n                        </svg>\n                    </div>\n                    <div class=\"mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left\">\n                        <h3\n                            class=\"text-lg font-medium leading-6 text-gray-900\"\n                            id=\"modal-title\"\n                        >\n                            Deactivate account\n                        </h3>\n                        <div class=\"mt-2\">\n                            <p class=\"text-sm text-gray-500\">\n                                Are you sure you want to deactivate your\n                                account? All of your data will be permanently\n                                removed. This action cannot be undone.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div\n                class=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\"\n            >\n                <button\n                    type=\"button\"\n                    class=\"inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm\"\n                >\n                    Deactivate\n                </button>\n                <button\n                    type=\"button\"\n                    class=\"mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:ml-3 sm:mt-0 sm:w-auto sm:text-sm\"\n                >\n                    Cancel\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\nWhile I've just copy pasta'd over the direct HTML component, using Tailwind it's straight forward to replace markup\nverbiage, button text, and custom brand styles easily into our components using a few simple `@Input()` props on\nour `modal.component.ts` class in combination with some `[ngClass]` directives sprinkled throughout our HTML. I'll leave\nthat extensibility feat as an exercise for the reader.\n\nWith our modal markup in place and our component brought in to our `app.module.ts`'s `declarations` array, let's go\nahead add write our NgRx actions, reducer, and a few helpers to help facilitate opening and closing the modal. First,\nlet's add a directory just beneath `/app` named `+state`. `+state` is a common directory name for a module's state\nactions, reducers, effects, selectors, and other NgRx semantics that helps provide a bit of convention when\nencapsulating modular state.\n\nWith our directory in place, let's get started by adding a `layout.actions.ts` file to house our dispatchable actions to\nthe store with the following code:\n\n#### layout.actions.ts\n\n```typescript\nimport { createAction } from '@ngrx/store';\n\nexport const openModal = createAction('[Layout] Open modal');\n\nexport const closeModal = createAction('[Layout] Close modal');\n```\n\nWe don't include any `props` in our actions, but we could easily define a single action with a flag signaling the\nmodal's state - I fall in the camp of \"it's not that hard to write actions, just boilerplate-y\" so I prefer more, atomic\nactions rather than generic, composable actions. With our actions in place, let's go ahead and define our layout state\ninside a new file named `layout.reducer.ts`:\n\n#### layout.reducer.ts\n\n```typescript\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as fromActions from './layout.actions';\n\nexport const layoutFeatureKey = 'layout';\n\nexport interface LayoutState {\n    modalIsOpen: boolean;\n}\n\nconst initialState: LayoutState = {\n    modalIsOpen: false,\n};\n\nconst appReducer = createReducer(\n    initialState,\n    on(fromActions.openModal, (state) => ({\n        ...state,\n        modalIsOpen: true,\n    })),\n    on(fromActions.closeModal, (state) => ({\n        ...state,\n        modalIsOpen: false,\n    })),\n);\n\nexport const reducer = (state: LayoutState | undefined, action: Action) =>\n    appReducer(state, action);\n```\n\nAgain, this post _is not_ meant to the de facto grimoire of implementing NgRx properly in your application. Given our\nscope, we'll use just a simple state implementation to facilitate our layout state that could easily be extended to\ninclude any number of layout specific concerns.\n\nBreaking down the code above, we:\n\n-   Define our layout feature slice with `LayoutState` that will serve as the source of truth for our current modal\n    displaying\n-   Create a reducer to facilitate _what_ our state should look like when the modal actions are dispatched\n-   Create an identifying `const` key to declare our layout feature slice with `layoutFeatureKey`\n\nWhile we could easily set singular state on each reducer type to simply set the modal state according, as our\napplication grows, so will our need to only change single, or a handful at most, pieces of state at time. For these\ncases, we'll go ahead and add in a `...state` to shallow copy our current state as to not mutate any state that is not\nconcerned with the modal state.\n\nWith our reducer in place, let's go ahead and add a selector to get the current modal state and provide multiple\ncomponents a single funnel into our state. Let's create a `layout.selectors.ts` file in our `+state` folder with the\nfollowing:\n\n#### layout.selectors.ts\n\n```typescript\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { LayoutState, layoutFeatureKey } from './layout.reducer';\n\nconst layoutFeatureSlice = createFeatureSelector<LayoutState>(layoutFeatureKey);\n\nexport const selectModalStatus = createSelector(\n    layoutFeatureSlice,\n    (state: LayoutState) => state.modalIsOpen,\n);\n```\n\nWithin our selector, we define a feature selector to reference the `layout` slice of our composite state, and then\ncreate a selector to grab the modal state node. With our selector in place let's go ahead and create a facilitator to\nhelp shroud our store inner workings from our components so that we can create a layer of abstraction between the\ntechnical details of our application and the view layer that users ultimate see.\n\n> This is known as the [_facade pattern_](https://en.wikipedia.org/wiki/Facade_pattern) in software development, and\n> while it is worth keeping in the back of your mind, it's a bit outside our scope for now. Checkout my (shameless plug)\n> post on [state management with Blazor](https://joeymckenzie.tech/blog/fluxor-blazor-part-1) for a more in-depth\n> discussion.\n\nAdding a state facade is entirely optional, and should not be taken as final truth - there are many reason to _not_\ninclude this service as it does trade some complexity and boilerplate-ness for a bit of dependency inversion. You're\nmore than welcome to facilitate your actions directly from your components as well.\n\nWith the disclaimer out of the way, let's add a `layout.facade.ts` with the following:\n\n#### layout.facade.ts\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { LayoutState } from './layout.reducer';\nimport * as fromActions from './layout.actions';\nimport * as fromSelectors from './layout.selectors';\n\n@Injectable()\nexport class LayoutFacade {\n    modalState$ = this.store.pipe(select(fromSelectors.selectModalStatus));\n\n    constructor(private store: Store<LayoutState>) {}\n\n    openModal() {\n        this.store.dispatch(fromActions.openModal());\n    }\n\n    closeModal() {\n        this.store.dispatch(fromActions.closeModal());\n        setTimeout(() => this.openModal(), 1000);\n    }\n}\n```\n\nOur `layout.facade.ts`, as we can see, is nothing more than a scoped service (we don't include the `providedIn`\nconfiguration to `@Injectable()`) that pulls through our selectors and defines some methods wrapping our dispatcher that\nfires off the modal actions. Our `closeModal()` method also includes the following:\n\n```typescript\nsetTimeout(() => this.openModal(), 1000);\n```\n\nThis is solely for example purposes as to mimic the behavior of the Tailwind UI modal examples (closing a modal on the\nexample reopens the modal shortly after). This will save us some interaction with a button when testing out our modal.\n\nWith our state ceremony out of the way, let's go ahead and wire up everything we need in our `app.module.ts`\n\n#### app.module.ts\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { LayoutFacade } from './+state';\nimport { layoutFeatureKey, reducer } from './+state/layout.reducer';\n\nimport { AppComponent } from './app.component';\nimport { ModalComponent } from './modal/modal.component';\n\n@NgModule({\n    declarations: [AppComponent, ModalComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        StoreModule.forRoot({ [layoutFeatureKey]: reducer }),\n        StoreDevtoolsModule.instrument({\n            maxAge: 25,\n        }),\n    ],\n    providers: [LayoutFacade],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n```\n\nWe include the required NgRx modules using our `layoutFeatureKey` defined in our reducer file, include our Redux\nDevTools plugins and `LayoutFacade` service, and also include the `BrowserAnimationsModule` we'll use to add some nice\ntransitions to our modal for flare.\n\nSpeaking of transitions, let's go ahead and add a few animations in our `modal.component.ts` to add the pleasing\nappearing/fading of the modal onto page. In our `modal.component.ts`, we'll add three simple animation attribute:\n\n-   `@modalContainer`\n-   `@modalOverlay`\n-   `@modalContent`\n\nLet's add each of the tags to our markup so that it resembles the following:\n\n```html\n<!-- This example requires Tailwind CSS v2.0+ -->\n<div\n    @modalContainer\n    *ngIf=\"(modalState$ | async) === true\"\n    class=\"fixed inset-0 z-10 overflow-y-auto\"\n    aria-labelledby=\"modal-title\"\n    role=\"dialog\"\n    aria-modal=\"true\"\n>\n    <div\n        class=\"flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0\"\n    >\n        <!--\n      Background overlay, show/hide based on modal state.\n\n      Entering: \"ease-out duration-300\"\n        From: \"opacity-0\"\n        To: \"opacity-100\"\n      Leaving: \"ease-in duration-200\"\n        From: \"opacity-100\"\n        To: \"opacity-0\"\n    -->\n        <div\n            @modalOverlay\n            (click)=\"onClose()\"\n            class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n            aria-hidden=\"true\"\n        ></div>\n\n        <!-- This element is to trick the browser into centering the modal contents. -->\n        <span\n            class=\"hidden sm:inline-block sm:h-screen sm:align-middle\"\n            aria-hidden=\"true\"\n            >&#8203;</span\n        >\n\n        <!--\n      Modal panel, show/hide based on modal state.\n\n      Entering: \"ease-out duration-300\"\n        From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        To: \"opacity-100 translate-y-0 sm:scale-100\"\n      Leaving: \"ease-in duration-200\"\n        From: \"opacity-100 translate-y-0 sm:scale-100\"\n        To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n    -->\n        <div\n            @modalContent\n            class=\"inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle\"\n        >\n            <div class=\"bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4\">\n                <div class=\"sm:flex sm:items-start\">\n                    <div\n                        class=\"mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10\"\n                    >\n                        <!-- Heroicon name: outline/exclamation -->\n                        <svg\n                            class=\"h-6 w-6 text-red-600\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                            aria-hidden=\"true\"\n                        >\n                            <path\n                                stroke-linecap=\"round\"\n                                stroke-linejoin=\"round\"\n                                stroke-width=\"2\"\n                                d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n                            />\n                        </svg>\n                    </div>\n                    <div class=\"mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left\">\n                        <h3\n                            class=\"text-lg font-medium leading-6 text-gray-900\"\n                            id=\"modal-title\"\n                        >\n                            Deactivate account\n                        </h3>\n                        <div class=\"mt-2\">\n                            <p class=\"text-sm text-gray-500\">\n                                Are you sure you want to deactivate your\n                                account? All of your data will be permanently\n                                removed. This action cannot be undone.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div\n                class=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\"\n            >\n                <button\n                    (click)=\"onClose()\"\n                    type=\"button\"\n                    class=\"inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm\"\n                >\n                    Deactivate\n                </button>\n                <button\n                    (click)=\"onClose()\"\n                    type=\"button\"\n                    class=\"mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:ml-3 sm:mt-0 sm:w-auto sm:text-sm\"\n                >\n                    Cancel\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\nWe'll use each of the animation attributes to drive the transition animations\nusing [parent-child animations](https://angular.io/guide/transition-and-triggers#parent-child-animations).\n\n> There's lots of great posts that are much more in-depth about Angular's transition library, and I'll once again defer\n> that as an exercise for the reader.\n\nWith our component markup in place, let's add the inner workings of our `modal.component.ts`:\n\n#### modal.component.ts\n\n```typescript\nimport {\n    trigger,\n    transition,\n    query,\n    animateChild,\n    state,\n    style,\n    animate,\n    group,\n} from '@angular/animations';\nimport { Component, OnInit } from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { LayoutFacade } from '../+state';\n\n@Component({\n    selector: 'femfit-modal',\n    templateUrl: './modal.component.html',\n    animations: [\n        trigger('modalContainer', [\n            transition(':enter', [\n                group([\n                    query('@modalOverlay', animateChild()),\n                    query('@modalContent', animateChild()),\n                ]),\n            ]),\n            transition(\n                ':leave',\n                group([\n                    query('@modalOverlay', animateChild()),\n                    query('@modalContent', animateChild()),\n                ]),\n            ),\n        ]),\n        // Background overlay, show/hide based on modal state.\n\n        // Entering: \"ease-out duration-300\"\n        //   From: \"opacity-0\"\n        //   To: \"opacity-100\"\n        // Leaving: \"ease-in duration-200\"\n        //   From: \"opacity-100\"\n        //   To: \"opacity-0\"\n        trigger('modalOverlay', [\n            state(\n                'void',\n                style({\n                    opacity: 0,\n                }),\n            ),\n            state(\n                '*',\n                style({\n                    opacity: 1,\n                }),\n            ),\n            transition(':enter', [animate('300ms ease-out')]),\n            transition(':leave', [animate('100ms ease-in')]),\n        ]),\n        // Modal panel, show/hide based on modal state.\n\n        // Entering: \"ease-out duration-300\"\n        //   From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        //   To: \"opacity-100 translate-y-0 sm:scale-100\"\n        // Leaving: \"ease-in duration-200\"\n        //   From: \"opacity-100 translate-y-0 sm:scale-100\"\n        //   To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n        trigger('modalContent', [\n            state(\n                'void',\n                style({\n                    opacity: 0,\n                    transform: 'scale(0.95)',\n                }),\n            ),\n            state(\n                '*',\n                style({\n                    opacity: 1,\n                    transform: 'scale(1)',\n                }),\n            ),\n            transition(':enter', [animate('300ms ease-out')]),\n            transition(':leave', [animate('200ms ease-in')]),\n        ]),\n    ],\n})\nexport class ModalComponent implements OnInit {\n    modalState$ = this.layoutFacade.modalState$;\n\n    constructor(private layoutFacade: LayoutFacade) {}\n\n    private readonly unsubscribe$ = new Subject();\n\n    ngOnInit(): void {\n        // When the component is mounted, fire up the modal if closed taking the first emission only\n        this.modalState$.pipe(take(1)).subscribe((isOpen) => {\n            if (!isOpen) {\n                this.layoutFacade.openModal();\n            }\n        });\n\n        // Register a stream to listen for escape keydown events to close the modal\n        fromEvent(document, 'keydown')\n            .pipe(\n                takeUntil(this.unsubscribe$),\n                filter(\n                    (event) =>\n                        event instanceof KeyboardEvent &&\n                        event.code === 'Escape',\n                ),\n                withLatestFrom(this.modalState$),\n            )\n            .subscribe(([_, modalIsOpen]) => {\n                if (modalIsOpen) {\n                    this.layoutFacade.closeModal();\n                }\n            });\n    }\n\n    onClose(): void {\n        this.layoutFacade.closeModal();\n    }\n}\n```\n\nLet's breakdown what our modal component is doing behind the scenes:\n\n-   First, we define three animation `trigger`s that will run when our component is rendered into and out of the DOM (I've\n    loosely translated the suggested Tailwind transition classes that should apply to the modal)\n    -   Our first `trigger` is applied to the wrapping `div` element that houses the entirety of our modal component, and\n        it's job is to coordinate running the nested child transitions when it is rendered into/out of the DOM (driven by\n        the `*ngIf=\"(modalState$ | async) === true\"` directive) with the assistance of the `group` and `query` Angular\n        animation helper methods to signify which child transitions to run\n    -   Our second `trigger` is the fading in and out of the background overlay using a simple opacity transition\n    -   Our third `trigger` is the displaying of the modal content using a combination of opacity and scaling transition\n        animations\n    -   You'll notice each `trigger` transitions using the `:enter`/`:leave` aliases which represent the transitioning\n        of `void` state (i.e. not in the rendered DOM), to `*` state (i.e. any state existing in the markup)\n-   Next, we pull through a reference from the state facade to the current modal status with `modalStatus$` observable\n    that listens for values based on our selector stream\n-   We define an emission `Subject` to help facilitate the closing of our streams when our component is destroyed, i.e.\n    removed from the DOM, in order to avoid memory leaks that can be pretty common in `rxjs` without proper `Observable`\n    management\n-   Finally, inside of our mounting lifecycle hook:\n    -   We listen on modal state changes and fire off the action to open the modal anytime on first render using `take(1)`\n    -   We hook into the hot document observable and listen for `esc` keydown strokes to provide a bit of nice UX to close\n        the modal anytime it's open and the key is pressed\n\nWith all of our modal details in place, let's finally add the component to our `app.component.html` by replacing all the\nplaceholder markup with the modal selector:\n\n```html\n<app-modal></app-modal>\n```\n\nWith everything wired up, let's go ahead and punch in a `ng serve` in the terminal of your choice and navigate\nto `localhost:4200`. Clicking on either of the buttons now closes the modal, and if we take a look at our Redux DevTools\nin the console, we can see the actions being dispatched:\n\n[Our full Ngrx-based Tailwind modal](/images/tailwind-ngrx-modal/screen_grab.webm)\n\nYou'll see in the above screencast I interact with the modal in a few ways:\n\n1. Closing the modal via clicking either button\n2. Closing the modal by clicking on the background overlay, thanks to the `(click)` handler we added to the\n   overlay `div` that dispatches the close action\n3. Closing the modal by hitting the `esc` key\n\nWhile I've begun to shift to state-based layout UI/UX, there _are_ some limitations (with workarounds, of course) to\nusing state for things like modals, sliding navs, toast notifications, etc. One of the major benefits, in the case of\nthe modal, to using a DOM injection service is the ability to render dynamic content in your modal. This allows for us\nto pass any rendering component to the modal service, often times, and have it display in the content area. While we\n_could_ achieve this with a state-based approach, it's a bit more work that I have yet to find a solution I'm satisfied\nwith.\n\nIn the end, I love Tailwind and the sanity (at the cost of complexity) that NgRx brings to my Angular applications and\nwill continue to move forward offloading common UI interactions into layout state slices.\n\nUntil next time, friends!\n",
      "html": "<p>Coming off a blogging hiatus, I'm finally making my triumphant return. If you've been following my writing up until now,\nyou'll know that I'm primarily a .NET dude. Lately, I've been wanting to get back to my roots with Angular and see what\nI could build with everyone's new favorite CSS framework on the block, <a href=\"https://tailwindcss.com/\">Tailwind</a>. I'm going\nto be dialing back the length in content in place of smaller, bit-sized chunks in an effort to get back to helping the\ngeneral developer population with the lessons I've learned and things that I think are fire (as the kids say) in the\ncommunity. With that out of the way, let's dive in!</p>\n<h2>What is Tailwind?</h2>\n<p>If you're not familiar with Tailwind CSS, it's a utility-based CSS framework that I like to think of as an API into your\nCSS. This isn't exactly an article about the intricacies and deep diving into the framework, as there are plenty of\ngreat developers out there writing about Tailwind and why we all think it's the future of stylized development (\nseriously, once you start using, you'll most likely never want to go back). Tailwind is awesome due to it's flexibility\nand thin footprint (given you process your build correctly) it provides to our applications. With Tailwind, you'll\n<em>rarely</em> find yourself writing custom CSS and if you have a need for such, you can always include it as\na <a href=\"https://tailwindcss.com/docs/adding-new-utilities\">separate utility</a> for reusability purposes.</p>\n<p>Bottom line, Tailwind is amazing and an excellent tool to add to any developer's tool belt.</p>\n<blockquote>\n<p>Disclaimer: I pay for <a href=\"https://tailwindui.com/\">Tailwind UI</a> because I love the components that Adam Wathan and the\nTailwind team have put together. I would recommend anyone that loves Tailwind to check it out, but for the purposes of\nour demo here, we'll only be using the publicly available free components.</p>\n</blockquote>\n<h2>Modal components</h2>\n<p>Often times (read: every other sprint), it's helpful to add a bit of pizazz to our frontend application messaging in the\nform of modals that display handy bits of information for our users. While we <em>could</em> use an out-of-the-box modal\ncomponent using a styling library like <a href=\"https://material.angular.io/\">Angular Material</a>\nor <a href=\"https://getbootstrap.com/\">Bootstrap</a>, luckily for us, Tailwind UI offers a set\nof <a href=\"https://tailwindui.com/components/application-ui/overlays/modals\">awesomely styled modal components</a> ready for use.\nWe'll be using the free modal component here to quickly prototype our app modal that we could potentially use throughout\nour site.</p>\n<h2>What we'll build</h2>\n<p>Getting started, let's run through the list of what we'll be building and the tools we'll utilize as we embark on our\nmodal-based journey:</p>\n<ul>\n<li>We'll utilize Tailwind as our style provider to give our modal a modern look and feel</li>\n<li>Instead of using an injectable service to dynamically render DOM that contains our modal markup and content using\nsomething like Angular's <a href=\"https://angular.io/api/core/Renderer2\">Renderer2</a>, we'll lean on a flux-based state approach\nusing <a href=\"https://ngrx.io\">NgRx</a> to help us manage the displaying of our modal with custom content (more on this in a\nminute)</li>\n<li>Using a state-based approach, we'll expose actions that will allow any of our components to call into the modal and\ndisplay it based on any set of criteria</li>\n</ul>\n<p>With our approach lined out, let's defer to the second bullet point of the aforementioned list.</p>\n<h2>Using state in place of rendering</h2>\n<p>While it might be tempting to take on a dependency to render modal's within our application, that approach can bring\nalong quite a bit of unnecessary JavaScript and CSS that is most likely over engineered for our simple use cases.\nAnother popular approach is to write our own custom rendering services that inject DOM directly into the rendered\nmarkup; this is a popular homegrown solution with many articles and example repositories available to pull from. I find\noften times that these solutions can be a bit cumbersome with quite a few moving pieces to keep track and once again,\nquite frankly, feel a bit over engineered. While I'm quite positive someone much smarter than myself has an excellent\ncounterpoint to this, I fall in the camp of <em>shove all your application logic into flux actions</em> and it only seemed\nnatural to have my components like modals, slide overs, dropdowns, menus, etc. fit into that bill as well.</p>\n<p>With our sermon out of the way, let's get into some code. At any point, you can always refer to\nthe <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-io-blog-samples/tree/main/projects/ngrx-tailwind-modal\">source code</a>\non my GitHub for reference.</p>\n<h2>Getting started</h2>\n<p>While I'm using an Angular workspace in the example project, this all applies to existing single project workspaces as\nwell. Let's spin up a new application using your terminal of choice:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> new</span><span style=\"color:#C98A7D\"> ngrx-tailwind-modal</span></span></code></pre></figure>\n<blockquote>\n<p>I'm using Angular version 11.2.5, which fortunately for us, the Angular team has included PostCSS into the build\nprocessor allowing us to natively install Tailwind without explicitly installing it's dependencies</p>\n</blockquote>\n<p>With our project in place, let's go ahead and install Tailwind (assuming you're using Angular v11.2 or greater):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C99076\"> --save-dev</span><span style=\"color:#C98A7D\"> tailwindcss</span></span></code></pre></figure>\n<p>and if you're using yarn:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">yarn</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tailwindcss</span></span></code></pre></figure>\n<p>I'm using CSS in the example below, so we need to add the Tailwind utilities to our global styles as well:</p>\n<h4>styles.css</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#5DA994\">@tailwind</span><span style=\"color:#80A665\"> base</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">@tailwind</span><span style=\"color:#80A665\"> components</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">@tailwind</span><span style=\"color:#80A665\"> utilities</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>If you're using another CSS library, checkout the <a href=\"https://tailwindcss.com/docs/installation\">docs</a> to get started. I've\nopted to use just good ole fashioned CSS here since I won't be writing any custom styles myself and have no need to\nprocess CSS files during build time.</p>\n<p>With Tailwind in place, let's go ahead and add NgRx to our dependencies:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C98A7D\"> @ngrx/store</span><span style=\"color:#C99076\"> --save</span></span></code></pre></figure>\n<p>and for yarn</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">yarn</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> @ngrx/store</span></span></code></pre></figure>\n<p>Optionally, you can install NgRx dev tools as well to assist with debugging, but for our simple use case, it's not\nnecessary. With our required dependencies in place, let's go ahead and generate a new modal component. Go ahead and <code>cd</code>\ninto your project directory and run the Angular schematic to spin up a new component:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> c</span><span style=\"color:#C98A7D\"> modal</span><span style=\"color:#C99076\"> --skip-tests</span></span></code></pre></figure>\n<p>We'll add the <code>--skip-tests</code> flag for now as we won't be unit testing our modal. After our schematic has run, go ahead\nand open up <code>modal.component.html</code> and let's replace the markup with Tailwind's free modal component HTML:</p>\n<h3>modal.component.html</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- This example requires Tailwind CSS v2.0+ --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">fixed inset-0 z-10 overflow-y-auto</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    aria-labelledby</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">modal-title</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    role</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">dialog</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    aria-modal</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!--</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Background overlay, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        >&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- This element is to trick the browser into centering the modal contents. --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">span</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">hidden sm:inline-block sm:h-screen sm:align-middle</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            >&#x26;</span><span style=\"color:#C99076\">#8203;</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">span</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!--</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Modal panel, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sm:flex sm:items-start</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    ></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                        &#x3C;!-- Heroicon name: outline/exclamation --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">svg</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">h-6 w-6 text-red-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            xmlns</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">http://www.w3.org/2000/svg</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            fill</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">none</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            viewBox</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">0 0 24 24</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            stroke</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">currentColor</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#4D9375\">path</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-linecap</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">round</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-linejoin</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">round</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-width</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">2</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                d</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">svg</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">h3</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-lg font-medium leading-6 text-gray-900</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">modal-title</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                            Deactivate account</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">h3</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-sm text-gray-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                Are you sure you want to deactivate your</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                account? All of your data will be permanently</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                removed. This action cannot be undone.</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                    Deactivate</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:ml-3 sm:mt-0 sm:w-auto sm:text-sm</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                    Cancel</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>While I've just copy pasta'd over the direct HTML component, using Tailwind it's straight forward to replace markup\nverbiage, button text, and custom brand styles easily into our components using a few simple <code>@Input()</code> props on\nour <code>modal.component.ts</code> class in combination with some <code>[ngClass]</code> directives sprinkled throughout our HTML. I'll leave\nthat extensibility feat as an exercise for the reader.</p>\n<p>With our modal markup in place and our component brought in to our <code>app.module.ts</code>'s <code>declarations</code> array, let's go\nahead add write our NgRx actions, reducer, and a few helpers to help facilitate opening and closing the modal. First,\nlet's add a directory just beneath <code>/app</code> named <code>+state</code>. <code>+state</code> is a common directory name for a module's state\nactions, reducers, effects, selectors, and other NgRx semantics that helps provide a bit of convention when\nencapsulating modular state.</p>\n<p>With our directory in place, let's get started by adding a <code>layout.actions.ts</code> file to house our dispatchable actions to\nthe store with the following code:</p>\n<h4>layout.actions.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> createAction</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">openModal</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createAction</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">[Layout] Open modal</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">closeModal</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createAction</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">[Layout] Close modal</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>We don't include any <code>props</code> in our actions, but we could easily define a single action with a flag signaling the\nmodal's state - I fall in the camp of \"it's not that hard to write actions, just boilerplate-y\" so I prefer more, atomic\nactions rather than generic, composable actions. With our actions in place, let's go ahead and define our layout state\ninside a new file named <code>layout.reducer.ts</code>:</p>\n<h4>layout.reducer.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Action</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> createReducer</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> on</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#4D9375\"> *</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#BD976A\"> fromActions</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./layout.actions</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">layoutFeatureKey</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">layout</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> interface</span><span style=\"color:#5DA994\"> LayoutState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    modalIsOpen</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">initialState</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">LayoutState</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    modalIsOpen</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">appReducer</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createReducer</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    initialState</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    on</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">fromActions</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">openModal</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ...</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        modalIsOpen</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    })),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    on</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">fromActions</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">closeModal</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ...</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        modalIsOpen</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    })),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#80A665\">reducer</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">LayoutState</span><span style=\"color:#666666\"> | </span><span style=\"color:#CB7676\">undefined</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Action</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    appReducer</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> action</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>Again, this post <em>is not</em> meant to the de facto grimoire of implementing NgRx properly in your application. Given our\nscope, we'll use just a simple state implementation to facilitate our layout state that could easily be extended to\ninclude any number of layout specific concerns.</p>\n<p>Breaking down the code above, we:</p>\n<ul>\n<li>Define our layout feature slice with <code>LayoutState</code> that will serve as the source of truth for our current modal\ndisplaying</li>\n<li>Create a reducer to facilitate <em>what</em> our state should look like when the modal actions are dispatched</li>\n<li>Create an identifying <code>const</code> key to declare our layout feature slice with <code>layoutFeatureKey</code></li>\n</ul>\n<p>While we could easily set singular state on each reducer type to simply set the modal state according, as our\napplication grows, so will our need to only change single, or a handful at most, pieces of state at time. For these\ncases, we'll go ahead and add in a <code>...state</code> to shallow copy our current state as to not mutate any state that is not\nconcerned with the modal state.</p>\n<p>With our reducer in place, let's go ahead and add a selector to get the current modal state and provide multiple\ncomponents a single funnel into our state. Let's create a <code>layout.selectors.ts</code> file in our <code>+state</code> folder with the\nfollowing:</p>\n<h4>layout.selectors.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> createFeatureSelector</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> createSelector</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> LayoutState</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> layoutFeatureKey</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./layout.reducer</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">layoutFeatureSlice</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createFeatureSelector</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LayoutState</span><span style=\"color:#666666\">>(</span><span style=\"color:#BD976A\">layoutFeatureKey</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">selectModalStatus</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> createSelector</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    layoutFeatureSlice</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    (</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">LayoutState</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">modalIsOpen</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>Within our selector, we define a feature selector to reference the <code>layout</code> slice of our composite state, and then\ncreate a selector to grab the modal state node. With our selector in place let's go ahead and create a facilitator to\nhelp shroud our store inner workings from our components so that we can create a layer of abstraction between the\ntechnical details of our application and the view layer that users ultimate see.</p>\n<blockquote>\n<p>This is known as the <a href=\"https://en.wikipedia.org/wiki/Facade_pattern\"><em>facade pattern</em></a> in software development, and\nwhile it is worth keeping in the back of your mind, it's a bit outside our scope for now. Checkout my (shameless plug)\npost on <a href=\"https://joeymckenzie.tech/blog/fluxor-blazor-part-1\">state management with Blazor</a> for a more in-depth\ndiscussion.</p>\n</blockquote>\n<p>Adding a state facade is entirely optional, and should not be taken as final truth - there are many reason to <em>not</em>\ninclude this service as it does trade some complexity and boilerplate-ness for a bit of dependency inversion. You're\nmore than welcome to facilitate your actions directly from your components as well.</p>\n<p>With the disclaimer out of the way, let's add a <code>layout.facade.ts</code> with the following:</p>\n<h4>layout.facade.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> select</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Store</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> LayoutState</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./layout.reducer</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#4D9375\"> *</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#BD976A\"> fromActions</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./layout.actions</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#4D9375\"> *</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#BD976A\"> fromSelectors</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./layout.selectors</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> LayoutFacade</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    modalState$</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">store</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">select</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">fromSelectors</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">selectModalStatus</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> store</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Store</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LayoutState</span><span style=\"color:#666666\">>)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    openModal</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">store</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">fromActions</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">openModal</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    closeModal</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">store</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">dispatch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">fromActions</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">closeModal</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        setTimeout</span><span style=\"color:#666666\">(()</span><span style=\"color:#666666\"> =></span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">openModal</span><span style=\"color:#666666\">(),</span><span style=\"color:#4C9A91\"> 1000</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our <code>layout.facade.ts</code>, as we can see, is nothing more than a scoped service (we don't include the <code>providedIn</code>\nconfiguration to <code>@Injectable()</code>) that pulls through our selectors and defines some methods wrapping our dispatcher that\nfires off the modal actions. Our <code>closeModal()</code> method also includes the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">setTimeout</span><span style=\"color:#666666\">(()</span><span style=\"color:#666666\"> =></span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">openModal</span><span style=\"color:#666666\">(),</span><span style=\"color:#4C9A91\"> 1000</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>This is solely for example purposes as to mimic the behavior of the Tailwind UI modal examples (closing a modal on the\nexample reopens the modal shortly after). This will save us some interaction with a button when testing out our modal.</p>\n<p>With our state ceremony out of the way, let's go ahead and wire up everything we need in our <code>app.module.ts</code></p>\n<h4>app.module.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NgModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> BrowserModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/platform-browser</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> BrowserAnimationsModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/platform-browser/animations</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> StoreModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> StoreDevtoolsModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store-devtools</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> LayoutFacade</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./+state</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> layoutFeatureKey</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> reducer</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./+state/layout.reducer</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> AppComponent</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./app.component</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ModalComponent</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./modal/modal.component</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">NgModule</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    declarations</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">AppComponent</span><span style=\"color:#666666\">, </span><span style=\"color:#BD976A\">ModalComponent</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    imports</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BrowserModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BrowserAnimationsModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        StoreModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forRoot</span><span style=\"color:#666666\">({ [</span><span style=\"color:#BD976A\">layoutFeatureKey</span><span style=\"color:#666666\">]: </span><span style=\"color:#BD976A\">reducer</span><span style=\"color:#666666\"> }),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        StoreDevtoolsModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">instrument</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            maxAge</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">25</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providers</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">LayoutFacade</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    bootstrap</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">AppComponent</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> AppModule</span><span style=\"color:#666666\"> {}</span></span></code></pre></figure>\n<p>We include the required NgRx modules using our <code>layoutFeatureKey</code> defined in our reducer file, include our Redux\nDevTools plugins and <code>LayoutFacade</code> service, and also include the <code>BrowserAnimationsModule</code> we'll use to add some nice\ntransitions to our modal for flare.</p>\n<p>Speaking of transitions, let's go ahead and add a few animations in our <code>modal.component.ts</code> to add the pleasing\nappearing/fading of the modal onto page. In our <code>modal.component.ts</code>, we'll add three simple animation attribute:</p>\n<ul>\n<li><code>@modalContainer</code></li>\n<li><code>@modalOverlay</code></li>\n<li><code>@modalContent</code></li>\n</ul>\n<p>Let's add each of the tags to our markup so that it resembles the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- This example requires Tailwind CSS v2.0+ --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    @modalContainer</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    *ngIf</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">(modalState$ | async) === true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">fixed inset-0 z-10 overflow-y-auto</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    aria-labelledby</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">modal-title</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    role</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">dialog</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    aria-modal</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!--</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Background overlay, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            @modalOverlay</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            (click)</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">onClose()</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        >&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- This element is to trick the browser into centering the modal contents. --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">span</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">hidden sm:inline-block sm:h-screen sm:align-middle</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            >&#x26;</span><span style=\"color:#C99076\">#8203;</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">span</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!--</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Modal panel, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        From: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            @modalContent</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sm:flex sm:items-start</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    ></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                        &#x3C;!-- Heroicon name: outline/exclamation --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">svg</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">h-6 w-6 text-red-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            xmlns</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">http://www.w3.org/2000/svg</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            fill</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">none</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            viewBox</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">0 0 24 24</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            stroke</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">currentColor</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            aria-hidden</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#4D9375\">path</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-linecap</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">round</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-linejoin</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">round</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                stroke-width</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">2</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                                d</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">svg</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">h3</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-lg font-medium leading-6 text-gray-900</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">modal-title</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                            Deactivate account</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">h3</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-sm text-gray-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                Are you sure you want to deactivate your</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                account? All of your data will be permanently</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                                removed. This action cannot be undone.</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    (click)</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">onClose()</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                    Deactivate</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    (click)</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">onClose()</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:ml-3 sm:mt-0 sm:w-auto sm:text-sm</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                    Cancel</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>We'll use each of the animation attributes to drive the transition animations\nusing <a href=\"https://angular.io/guide/transition-and-triggers#parent-child-animations\">parent-child animations</a>.</p>\n<blockquote>\n<p>There's lots of great posts that are much more in-depth about Angular's transition library, and I'll once again defer\nthat as an exercise for the reader.</p>\n</blockquote>\n<p>With our component markup in place, let's add the inner workings of our <code>modal.component.ts</code>:</p>\n<h4>modal.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    trigger</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    transition</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    query</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    animateChild</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    state</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    style</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    animate</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    group</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/animations</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> fromEvent</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Subject</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> filter</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> take</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> takeUntil</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> withLatestFrom</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> LayoutFacade</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../+state</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">femfit-modal</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./modal.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    animations</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        trigger</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">modalContainer</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">:enter</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                group</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    query</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@modalOverlay</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, </span><span style=\"color:#80A665\">animateChild</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    query</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@modalContent</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, </span><span style=\"color:#80A665\">animateChild</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ]),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">:leave</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                group</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    query</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@modalOverlay</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, </span><span style=\"color:#80A665\">animateChild</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    query</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@modalContent</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, </span><span style=\"color:#80A665\">animateChild</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]),</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Background overlay, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   From: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   To: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   From: \"opacity-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   To: \"opacity-0\"</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        trigger</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">modalOverlay</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            state</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">void</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                style</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    opacity</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            state</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">*</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                style</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    opacity</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">:enter</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span><span style=\"color:#80A665\">animate</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">300ms ease-out</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)]),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">:leave</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span><span style=\"color:#80A665\">animate</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">100ms ease-in</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]),</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Modal panel, show/hide based on modal state.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Entering: \"ease-out duration-300\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   From: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   To: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Leaving: \"ease-in duration-200\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   From: \"opacity-100 translate-y-0 sm:scale-100\"</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        //   To: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        trigger</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">modalContent</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            state</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">void</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                style</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    opacity</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    transform</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">scale(0.95)</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            state</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">*</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                style</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    opacity</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                    transform</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">scale(1)</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">:enter</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span><span style=\"color:#80A665\">animate</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">300ms ease-out</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)]),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            transition</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">:leave</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">, [</span><span style=\"color:#80A665\">animate</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">200ms ease-in</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> ModalComponent</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnInit</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    modalState$</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">layoutFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">modalState$</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> layoutFacade</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">LayoutFacade</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#BD976A\"> unsubscribe$</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#80A665\"> Subject</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnInit</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // When the component is mounted, fire up the modal if closed taking the first emission only</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">modalState$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">take</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">)).</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">isOpen</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">isOpen</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">                this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">layoutFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">openModal</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Register a stream to listen for escape keydown events to close the modal</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        fromEvent</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">document</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">keydown</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                takeUntil</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">unsubscribe$</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                filter</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    (</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                        event</span><span style=\"color:#CB7676\"> instanceof</span><span style=\"color:#5DA994\"> KeyboardEvent</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                        event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">code</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Escape</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                withLatestFrom</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">modalState$</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            )</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">(([</span><span style=\"color:#BD976A\">_</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> modalIsOpen</span><span style=\"color:#666666\">])</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">modalIsOpen</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">                    this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">layoutFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">closeModal</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    onClose</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">layoutFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">closeModal</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Let's breakdown what our modal component is doing behind the scenes:</p>\n<ul>\n<li>First, we define three animation <code>trigger</code>s that will run when our component is rendered into and out of the DOM (I've\nloosely translated the suggested Tailwind transition classes that should apply to the modal)\n<ul>\n<li>Our first <code>trigger</code> is applied to the wrapping <code>div</code> element that houses the entirety of our modal component, and\nit's job is to coordinate running the nested child transitions when it is rendered into/out of the DOM (driven by\nthe <code>*ngIf=\"(modalState$ | async) === true\"</code> directive) with the assistance of the <code>group</code> and <code>query</code> Angular\nanimation helper methods to signify which child transitions to run</li>\n<li>Our second <code>trigger</code> is the fading in and out of the background overlay using a simple opacity transition</li>\n<li>Our third <code>trigger</code> is the displaying of the modal content using a combination of opacity and scaling transition\nanimations</li>\n<li>You'll notice each <code>trigger</code> transitions using the <code>:enter</code>/<code>:leave</code> aliases which represent the transitioning\nof <code>void</code> state (i.e. not in the rendered DOM), to <code>*</code> state (i.e. any state existing in the markup)</li>\n</ul>\n</li>\n<li>Next, we pull through a reference from the state facade to the current modal status with <code>modalStatus$</code> observable\nthat listens for values based on our selector stream</li>\n<li>We define an emission <code>Subject</code> to help facilitate the closing of our streams when our component is destroyed, i.e.\nremoved from the DOM, in order to avoid memory leaks that can be pretty common in <code>rxjs</code> without proper <code>Observable</code>\nmanagement</li>\n<li>Finally, inside of our mounting lifecycle hook:\n<ul>\n<li>We listen on modal state changes and fire off the action to open the modal anytime on first render using <code>take(1)</code></li>\n<li>We hook into the hot document observable and listen for <code>esc</code> keydown strokes to provide a bit of nice UX to close\nthe modal anytime it's open and the key is pressed</li>\n</ul>\n</li>\n</ul>\n<p>With all of our modal details in place, let's finally add the component to our <code>app.component.html</code> by replacing all the\nplaceholder markup with the modal selector:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">app-modal</span><span style=\"color:#666666\">>&#x3C;/</span><span style=\"color:#4D9375\">app-modal</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>With everything wired up, let's go ahead and punch in a <code>ng serve</code> in the terminal of your choice and navigate\nto <code>localhost:4200</code>. Clicking on either of the buttons now closes the modal, and if we take a look at our Redux DevTools\nin the console, we can see the actions being dispatched:</p>\n<p><a href=\"/images/tailwind-ngrx-modal/screen_grab.webm\">Our full Ngrx-based Tailwind modal</a></p>\n<p>You'll see in the above screencast I interact with the modal in a few ways:</p>\n<ol>\n<li>Closing the modal via clicking either button</li>\n<li>Closing the modal by clicking on the background overlay, thanks to the <code>(click)</code> handler we added to the\noverlay <code>div</code> that dispatches the close action</li>\n<li>Closing the modal by hitting the <code>esc</code> key</li>\n</ol>\n<p>While I've begun to shift to state-based layout UI/UX, there <em>are</em> some limitations (with workarounds, of course) to\nusing state for things like modals, sliding navs, toast notifications, etc. One of the major benefits, in the case of\nthe modal, to using a DOM injection service is the ability to render dynamic content in your modal. This allows for us\nto pass any rendering component to the modal service, often times, and have it display in the content area. While we\n<em>could</em> achieve this with a state-based approach, it's a bit more work that I have yet to find a solution I'm satisfied\nwith.</p>\n<p>In the end, I love Tailwind and the sanity (at the cost of complexity) that NgRx brings to my Angular applications and\nwill continue to move forward offloading common UI interactions into layout state slices.</p>\n<p>Until next time, friends!</p>"
    },
    "_id": "2021/build-a-tailwind-modal-with-angular-and-ngrx.md",
    "_raw": {
      "sourceFilePath": "2021/build-a-tailwind-modal-with-angular-and-ngrx.md",
      "sourceFileName": "build-a-tailwind-modal-with-angular-and-ngrx.md",
      "sourceFileDir": "2021",
      "contentType": "markdown",
      "flattenedPath": "2021/build-a-tailwind-modal-with-angular-and-ngrx"
    },
    "type": "Post",
    "url": "/blog/2021/build-a-tailwind-modal-with-angular-and-ngrx"
  },
  {
    "title": "Hitchhiker's guide to Angular development with Nx",
    "description": "The answer is simple... 42 (projects in the same monorepo).",
    "pubDate": "2021-11-11T08:00:00.000Z",
    "category": "angular",
    "heroImage": "/images/hitchhikers-guide-to-nx/nx-meme.jpg",
    "draft": false,
    "keywords": [
      "angular",
      "nx",
      "typescript"
    ],
    "body": {
      "raw": "\nAs developers, we love reusability: components, modules, CSS, code snippets,\nlibraries, you name it... if it can be made generic, one can safely bet that\na friendly developer will at some point attempt a Herculean effort to do so. Enter\nthe monorepo - a development style aimed at encouraging reusability, common versioning, and\nimproved developer experience when working on large teams. While there are quite a few benefits\nof working within a single repository for multiple projects, those aforementioned are just a _few_ of the many perks.\nAs I continue to veer off the .NET blogging path for a bit, I thought it would\nfun to write a bit about my favorite development tool lately in the JS/TS realm, [Nx](https://nx.dev/).\n\n## What is Nx?\n\nNx is a tool developed by [Nrwl](https://nrwl.io/) to empower development promoting the reuse of code for applications\nall developed within the same repository or workspace.\nUsing Nx, we can create independent applications all with their own separate lines of business, project domains, CI/CD\nprocesses, etc. all while developing common\ndependencies for those applications to consume all within the same repository. I won't cover in-depth what\nexactly a monorepo is and why you should consider using the development paradigm on your team, as there\nare a plethora of articles explaining their existence by developers much, _much_ smarter than myself.\n\n## Monorepos at a glance\n\nWhen developing within a monorepo, we can independently write entirely separate applications that deal with separate\nconcerns while developing their common dependencies at the same time, with the payoff being reusability of shared\ncomponents and modules\nas far as the eye can see.\n\nTake, for example, a common business application for your organization's users that may have two sides of the same\nshared coin -\na user facing [insert your org's line of business] application, with an org internal admin-based application\nto help manage users with what the application may be dealing with.\n\nIn the case of the almighty todo-based app, a user facing todo application may be deployed out to the DMZ allowing users\nto add, update, and manage their todo items.\nThen the fateful day comes where upper management decides they would like an admin tool built for the company's\nbusiness analysts to assist with users' todos, allowing for reporting on certain types of todos, managing a user's todo\nshould it require a little assistance, etc.\n\nFrom an architectural standpoint, while it may be tempting to develop such functionality into the same user facing\napplication with some sort of heightened privilege given to certain users to access\nthe admin functionality, one might argue that such functionality is an entirely separate concern in comparison to what\nour existing users of our todo application expect.\nSo we make the decision to rip out common code, components, modules, etc. and put them in a separate shared repository\nthat both the todos app and admin todos app pull in\nas a dependency into their, again, separately maintained projects. Three projects, three separate repositories, three\nindividual build/deployment pipelines, and the list goes on.\n\nAs much fun as it sounds managing and maintaining what are essentially three separate projects, there's a lot of work\nbeing done in our previous scenario. Wouldn't it be great\nto simply development all of our code in the same place? Enter the monorepo.\n\n## Nx at a glance\n\nWhile Nx may seem to be well suited for the JS/TS world, it is a language agnostic toolkit with lots\nof [community plugins](https://nx.dev/community) for varying\nlanguages, frameworks, and ecosystems. I like to think of Nx as a metaframework, or a framework to help manage your\nframework specific libraries and applications with\nwell-defined conventions, all while bringing modern tools we developers love baked into your workspace (Jest, ESLint,\nStorybook, etc.). Again, while Nx is itself an entire\nrealm of knowledge one can easily spend an entire day reading about, for our purposes of this article, we'll only touch\non a few of the many\ntools Nx gives us while developing our applications all within the same repository.\n\nTo keep things simple, let's use our previous example of building out a todos application using Angular to see how we\nmight\ncleanly architect such an application. Our game plan will be something like:\n\n-   One todo application, serving as nothing more than a glorified dependency injection container/puppeteer for the\n    libraries it depends on\n-   Separate libraries that each have a single concern - state management, UI, and utilities\n\nWhile it might be tempting to throw everything into our single todo application in place of separate libraries,\nwe should make it a point to keep our applications as simple as possible, offloading most of our dependencies into\nscoped\nlibraries and modules each with a designated purpose. What does this mean in practice? Let's look at an example\narchitecture\nwe'll emulate while developing our applications within an Nx monorepo:\n\n```shell\n\\apps\n  \\todos\n\\libs\n  \\todos\n    \\ui\n    \\features\n    \\services\n```\n\nWe're effectively building a single entry point for our users into our codebase - our todos app. Our todos app, in terms\nof an Angular project, will exist as nothing more than the container for dependencies, assets, and environment specific\nsettings. By offloading UI components, services,\ncore business logic and the like, we build in contextual boundaries to our todos application in the form\nof dependent modules that each deal with their individual concerns, while exposing only the pieces that are\nrequired through their public API. In plain English, all this means is that the primary todo application\ndoes not concern itself with how its dependencies are implemented - only that they _are_ implemented\nin some form.\n\nFrom an Angular code perspective, this means our todos application will look, at its core, like this:\n\n```shell\n\\todos\n  \\src\n    \\app\n      app.component.html\n      app.component.ts\n      app.module.ts\n```\n\nAbout as bare bones as an Angular project can get, our todos app serves again as nothing more than a coordinator of\ninjected services, dependencies, and modules. This means no `\\components`, `\\services`, `\\state` folders, or any other\ncore logic that is required for our app to run.\n\nWith our precursor to monorepos with Nx out of the way, let's jump into some code!\n\n## Getting started\n\nto kick things off, let's create our Nx workspace, preset to Angular:\n\n```shell\nnpx create-nx-workspace@latest exploring-nx --preset=angular\n```\n\n> As of this writing, opting for the latest workspace generator will use Nx 13 alongside Angular 13\n\nNx will kick off, creating our workspace and prompting for a few inputs from us on the command line.\nOnce the process completes, let's go ahead and take a look at what Nx generates for us:\n\n-   An `apps` directory containing our applications that will ultimately be the interface for our users into our code\n-   A `libs` directory that will eventually contain all of our independent library code each dealing with a specific\n    concern\n-   A `tools` directory serving as the home base for custom in-house development scripts and custom workspace generators\n-   A bunch of config files that assist in wiring up apps, libs, devtools, and the like (don't worry too much about these\n    for now)\n\nFor our purpose, we'll only be concerned with our todos app and the libraries it depends on. Nx provides\nsome modern developer tooling in ESLint and Prettier to help keep our codebase properly linted and formatted, along with\nswapping out Karma for Jest and attaching an e2e integration project to our todos app using Cypress. All that out\nof the box... pretty cool, huh?\n\nOur current workspace structure should look something like the following:\n\n```shell\n\\apps\n  \\todos\n  \\todos-e2e\n\\libs\n\\tools\n```\n\nFor now, we'll only be working in the `apps` and `libs` directory to keep things simple.\nTo start scaffolding out our libraries that will ultimately power our todos app, let's create a directory\nin our `libs` folder called `shared`. I find it conventionally easiest to namespace\nlibraries similar to the apps they serve - in this case, we would have created a `todos` folder under our\n`libs` folder, but for reasons we'll see in the next post (_foreshadowing intensifies_), we'll put this\nunder our common namespace so we can access all of the todos code from other applications as well.\n\nWhile we _could_ just start dropping libraries directly into the `libs` directory, I've found that as the Nx apps I work\non begin to scale, it's often helpful to namespace your libraries in\naccordance to which applications they serve. In our case, we only have one `todos` app, but\nas we begin to add to our workspace, our namespaced `libs` will shine, neatly organizing our\ncode in a sane manner.\n\n## Generating libraries\n\nNow, to generate an Nx library specific to Angular, Nx provides an amazing CLI to assist\nin scaffolding our apps and libs. I often turn to the official Nx VS Code\nplugin, [Nx Console](https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console),\nto help facilitate scaffolding my projects as it provides an awesome interface to see all of the\navailable options to us while building out our code.\n\nLet's take a minute to discuss our `libs` strategy to help us keep things organized within our `shared` library:\n\n-   We'll create a `features` folder that will contain our state management code\n-   Next we'll add a `services` library that will _service_ as our primary data fetching module\n-   Finally, we'll create a `ui` folder that will container two sub-libraries in `pages` and `components` (more on this\n    separation later)\n\nI use the terms library and folder in the above list _not_ interchangeably - I like to further refine\nmy workspace namespaces by including nested folders inside my `libs` directories where it makes sense.\nFor our case, we'll have multiple features as we'll see later, so let's create a space for all individual\ndomains we'll be working with.\n\nTo kick things off, let's generate a couple of libraries to see what this looks like in action:\n\n```shell\n# To generate our shared todos state management library\nnx g @nrwl/angular:library todos --directory shared/features\n\n# To generate our shared services library\nnx g @nrwl/angular:library services --directory shared\n\n# To generate our shared ui libraries\nnx g @nrwl/angular:library components --directory shared/ui\nnx g @nrwl/angular:library pages --directory shared/ui\n```\n\nWith each containing the following, respectively:\n\n-   _features_: will house our state management code utilizing NgRx\n-   _services_: our HTTP layer, will be in charge of calling out to our API to fetch data\n-   _components_: our home for dumb components, or simple Angular components that solely take in `@Input()` to spit out on\n    the page\n-   _pages_: Angular components that compose our smaller, dumb components feeding them the data they'll need to generate\n    their markup\n\n## Architectural boundaries made easy\n\nWith our libraries in place, let's run through what our chain of dependencies will look like. Our main todos application\nwill, once again, act as the orchestrator binding our libraries together in order to access code throughout our\nworkspace. The added\nbenefit of offloading any and all complex logic out of our main apps and into libs is the ability to work independently\nin areas\nof code that do not need to be affected by changes from other areas. In plain English, we put all of our app code in\nlibs and make our\napps as thin as possible from a logic point of view.\n\nFor starters, our todos app will take a dependency on the `pages` library, as it contains the wrapper components that\naggregate\nour smaller, dumb components passing in the data required for those UI components to render things on the page. This\nmeans\nour `pages` library will take a dependency on our `components` lib and the todos state management library to facilitate\ndispatching\nactions to retrieve data that our UI components need. From a code perspective, let's import the required modules into\ntheir respective places.\n\nFirst, in `app.module.ts` in the todos app, let's import the `pages` module:\n\n#### app.module.ts\n\n```ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ENVIRONMENT } from '@exploring-nx/shared/features/settings';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        StoreModule.forRoot({}),\n        EffectsModule.forRoot([]),\n        StoreDevtoolsModule.instrument({\n            maxAge: 25,\n        }),\n    ],\n    bootstrap: [AppComponent],\n    providers: [\n        {\n            provide: ENVIRONMENT,\n            useValue: environment,\n        },\n    ],\n})\nexport class AppModule {}\n```\n\nI've added a the NgRx require modules and an `AppRoutingModule`, with contents being:\n\n#### app-routing.module.ts\n\n```ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        RouterModule.forRoot([\n            {\n                path: '',\n                loadChildren: () =>\n                    import('@exploring-nx/shared/ui/pages').then(\n                        (m) => m.SharedUiPagesModule,\n                    ),\n            },\n        ]),\n    ],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\nNothing too out of the ordinary here, just doing our normal lazy module loading utilizing the `pages` library. Things to\nnote in `app.module.ts` is the `environment` provider, as we look under the covers is nothing more than just a shared\nprovider\nused to import environment settings specific to our todos application and having them available to our downstream\nlibraries (think sharing whatever is in `environment.ts` to services, components, etc.).\n\nFor our `SharedUiPagesModule`, let's look at the module file to see what imports we'll use:\n\n#### shared-ui-pages.module.ts\n\n```ts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { SharedFeaturesTodosModule } from '@exploring-nx/shared/features/todos';\nimport { SharedUiComponentsModule } from '@exploring-nx/shared/ui/components';\n\nimport { TodosComponent } from './todos/todos.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        SharedFeaturesTodosModule,\n        SharedUiComponentsModule,\n        RouterModule.forChild([\n            {\n                path: '',\n                component: TodosComponent,\n            },\n        ]),\n    ],\n    declarations: [TodosComponent],\n})\nexport class SharedUiPagesModule {}\n```\n\nWe see that our `pages` library takes on two additional dependencies in `SharedFeaturesTodosModule`, our state\nmanagement library for todos, and\n`SharedUiComponentsModule`. Now for my favorite about Nx, and a little surprise for whiteboard meeting guys like myself,\ngo ahead and run the following:\n\n```shell\nnx dep-graph\n```\n\n...and in your browser window you should the following (after clicking a few checkboxes):\n\n![dep graph](/images/hitchhikers-guide-to-nx/todos_dep_graph.png)\n\nBehold, the almighty dependency graph in all of its glory! Using Nx, not only\ndo we get a conventionalized approach to mono-repository development,\nwe get dep graphs! Dependency graphs allow us to _visually_ see the linking between libraries\nand their consuming applications, helping us to make more informed decisions about\nwhere things should be, and which areas are responsible for their respective domain.\n\nFrom our dep graph above, we see that our todos app, the ultimate entry point into\nthe heart of our application, has a single dependency on our `pages` library, which itself\nwires together the lower level details that our higher level policies do not necessarily need\nto know the inner workings of. In essence, we've done nothing more than implement simple ports\nand adapters.\n\n## Implementing state\n\nOkay, I promise that _now_ we'll actually write some code. As I previously mentioned,\nI'll be using [NgRx](https://ngrx.io/) to facilitate my application state. Now we could also using nothing more than\nsimple services-over-`Observables`, and you're more than welcome to. I love NgRx and the, again, convention it brings to\nAngular state management, and simply just a preference.\n\nThere are great resources and plenty of articles on NgRx, and I'll defer to those interested in learning\nNgRx in depth to them. For those familiar with flux/redux-like development, let's create the following in a\n`+state` folder nesting in our `shared/features/todos` project underneath the `src/lib` subdirectory (\nsubdirectory-ception):\n\n-   `todos.reducer.ts`: your typical reducer function that defines our state and which mutations it can take on to form\n    new state\n-   `todos.actions.ts`: all of the dispatch-able operations that can affect which shape our state takes\n-   `todos.selectors.ts`: slices of (memoized) state to reference across components\n-   `todos.effects.ts`: tasks performed when certain actions are `dispatch()`ed, also known as side effects\n-   `todos.facade.ts`: an encapsulating service to be used from higher level modules, serving as the API into our state (\n    more or less)\n\nTo keep this post in a readable _state_ <sub>no pun intended</sub>, I'll leave the gorey details for the reader to\nexplore [here](https://github.com/JoeyMckenzie/exploring-nx/tree/main/libs/shared/features/todos/src/lib/%2Bstate).\nWe'll save a more in-depth post on NgRx for a rainy day.\n\n> Nx provides NgRx state generators that come with NgRx Entity bolted in, but for our simple use case, we'll manually\n> create our state files\n\n## Utilizing todos state\n\nWith our state in place, we're ready to wire everything up to our todos application and finally spit some todo items out\non the screen. In the name of keeping everything simple, we'll put our component logic in a single `todos` component\nthat we'll house within our shared `pages` library to open ourselves up for reusability later on. Using Nx, let's\ngenerate a component:\n\n```shell\nnx g @nrwl/angular:component todos --project shared-ui-pages\n```\n\nUsing Nx, we can generate Angular components in a manner similar to the Angular CLI, with the added benefit of targeting\ncomponent generation for specified apps and libraries. In our `todos.component.ts`, let's utilize our todos state logic\nto start loading in todos:\n\n#### todos.component.ts\n\n```ts\nimport { Component, OnInit } from '@angular/core';\nimport { SettingsFacade } from '@exploring-nx/shared/features/settings';\nimport { TodosFacade } from '@exploring-nx/shared/features/todos';\n\n@Component({\n    selector: 'exploring-nx-todos',\n    templateUrl: './todos.component.html',\n})\nexport class TodosComponent implements OnInit {\n    loading$ = this.todosFacade.loading$;\n    todos$ = this.todosFacade.availableTodos$;\n\n    constructor(\n        private todosFacade: TodosFacade,\n        private settingsFacade: SettingsFacade,\n    ) {}\n\n    ngOnInit() {\n        this.settingsFacade.loadSettings();\n    }\n\n    onLoadClicked() {\n        this.todosFacade.loadTodos();\n    }\n}\n```\n\nSince we've already wired up our state module as a dependency to the `pages` library (see `shared-ui-pages.module.ts`),\nwe shouldn't have any errors during runtime. With our code behind done, let's add some markup:\n\n#### todos.component.html\n\n```html\n<div class=\"flex min-h-screen flex-col items-center justify-center\">\n    <p class=\"pb-4\">Loading: {{ loading$ | async }}</p>\n    <button\n        type=\"button\"\n        (click)=\"onLoadClicked()\"\n        class=\"inline-flex items-center rounded-md bg-indigo-600 px-6 py-3 text-white hover:bg-indigo-700\"\n    >\n        Load todos\n    </button>\n\n    <div class=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div class=\"inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8\">\n            <div\n                class=\"overflow-hidden border-b border-gray-200 shadow sm:rounded-lg\"\n            >\n                <exploring-nx-todos-list\n                    [todos]=\"(todos$ | async) ?? []\"\n                ></exploring-nx-todos-list>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\nOur `todos` page component takes on the responsibility of loading in todos once a user has clicked the Tailwind-styled\nbutton. We also have another feature responsible for dealing with application-wide settings (think environment names,\nbase URLs, dark mode enabled, etc.). I'll again spare the reader and leave a link to the\nimplementation [here](https://github.com/JoeyMckenzie/exploring-nx/tree/main/libs/shared/features/settings/src/lib/%2Bstate).\nThe settings library is yet another NgRx-based state lib that serves as nothing more than an additional state slice as\nwe'll see in our Redux Devtools when the application is running.\n\nWe'll add a few more components to keep things bite size and avoid component bloat:\n\n```shell\n# Generates a wrapper component that will consume todos into a table\nnx g @nrwl/angular:component todos-list --project shared-ui-pages\n\n# Generates a component that will take in todo items output on the wrapping table component\nnx g @nrwl/angular:component todos-list-item --project shared-ui-pages\n```\n\nIn our `todos-list` component, let's add the following:\n\n#### todos.component.ts\n\n```ts\nimport { Component, HostBinding, Input } from '@angular/core';\nimport { Todo } from '@exploring-nx/shared/models';\n\n@Component({\n    selector: 'exploring-nx-todos-list',\n    templateUrl: './todos-list.component.html',\n})\nexport class TodosListComponent {\n    @HostBinding('class') class = 'pt-6 flex flex-col';\n    @Input() todos: Todo[] = [];\n}\n```\n\nNext, the markup:\n\n#### todos-list.component-html\n\n```html\n<table class=\"min-w-full divide-y divide-gray-200\">\n    <thead class=\"bg-gray-50\">\n        <tr>\n            <th\n                scope=\"col\"\n                class=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\n            >\n                ID\n            </th>\n            <th\n                scope=\"col\"\n                class=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\n            >\n                Title\n            </th>\n            <th\n                scope=\"col\"\n                class=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\n            >\n                User ID\n            </th>\n            <th\n                scope=\"col\"\n                class=\"px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500\"\n            >\n                Completed\n            </th>\n            <th scope=\"col\" class=\"relative px-6 py-3\">\n                <span class=\"sr-only\">Edit</span>\n            </th>\n        </tr>\n    </thead>\n    <tbody class=\"divide-y divide-gray-200 bg-white\">\n        <tr\n            *ngFor=\"let todo of todos\"\n            exploring-nx-todos-list-item\n            [todo]=\"todo\"\n        ></tr>\n    </tbody>\n</table>\n```\n\nAs we mentioned earlier, `pages` wire together `components` which we treat as simple consumers of data - nothing more,\nnothing less. With our todos page component responsible for initiating the loading of todos in state, our consuming\ncomponents take the todos as `Input()`s and render markup to display the data on the page. Keeping this separation\nallows us to more easily test our components in isolation from page components, as they are solely pure components in\nthe sense of taking in information, and spitting out HTML on the other side. Our unit tests can be as simple as testing\nwith different inputs to see how our output is effected, with no service dependency mocking overhead!\n\nNow for our `todo-list-item` component:\n\n#### todos-list-item.component.ts\n\n```ts\nimport { Component, Input } from '@angular/core';\nimport { Todo } from '@exploring-nx/shared/models';\n\n@Component({\n    // eslint-disable-next-line @angular-eslint/component-selector\n    selector: '[exploring-nx-todos-list-item]',\n    templateUrl: './todos-list-item.component.html',\n})\nexport class TodosListItemComponent {\n    @Input() todo?: Todo;\n}\n```\n\nAnd the markup:\n\n#### todos-list-item.component.html\n\n```html\n<td class=\"whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900\">\n    {{ todo?.id }}\n</td>\n<td class=\"whitespace-nowrap px-6 py-4 text-sm text-gray-500\">\n    {{ todo?.title }}\n</td>\n<td class=\"whitespace-nowrap px-6 py-4 text-sm text-gray-500\">\n    {{ todo?.userId }}\n</td>\n<td class=\"whitespace-nowrap px-6 py-4 text-sm text-gray-500\">\n    <input\n        type=\"checkbox\"\n        [defaultChecked]=\"todo?.completed\"\n        class=\"h-4 w-4 rounded text-indigo-600\"\n    />\n</td>\n```\n\nOne thing to note with our component structure here is that we're using a `@HostBinding()` in the wrapper component to\ntell Angular what class the parent container element should have, and our `todos-list-item` similarly uses a component\nselector to allow us to generate `<tr>` tags without containing elements generated by Angular. This is all done in the\nname of HTML styling semantics for Tailwind to style our components correctly and is entirely optional, as certain\nbrowser specs designate `<table>`s to have an expected structure (`<tr>`s expect `<td>`s as the only child element, for\ninstance).\n\n## Running apps locally\n\nNow that we've cranked out all the necessary code to run our application, let's go ahead and spin it up so we can see\nwhat loading todos in action looks like. From your favorite command line, go ahead and run the following to boot up the\nAngular server for our todos app:\n\n```shell\nnx serve todos\n```\n\nand we should see the typical output that is displayed when running a similar `ng serve` command in a single project\nAngular workspace. Once our application is finished building and served for the browser, go ahead and navigate\nto `localhost:4200` with your Redux Devtools open in the dev console. Live action demo:\n\n[Exploring Nx with todos](/images/hitchhikers-guide-to-nx/exploring_nx_todos.webm)\n\nWe've got ourselves a working todo application built with Nx and composable shared libraries! Since we've built out our\ntodos libraries in common form, _any_ application we wish to write in the future has access to all of the code that\npowers our todos app - no code duplication required, and two entirely separate/independent applications coexisting in\nthe same workspace. Pretty cool, huh?\n\nIn a later post, we'll explore adding multiple types of applications to an Nx repository reusing our todos code that we'\nve written so far. Until next time, friends!\n",
      "html": "<p>As developers, we love reusability: components, modules, CSS, code snippets,\nlibraries, you name it... if it can be made generic, one can safely bet that\na friendly developer will at some point attempt a Herculean effort to do so. Enter\nthe monorepo - a development style aimed at encouraging reusability, common versioning, and\nimproved developer experience when working on large teams. While there are quite a few benefits\nof working within a single repository for multiple projects, those aforementioned are just a <em>few</em> of the many perks.\nAs I continue to veer off the .NET blogging path for a bit, I thought it would\nfun to write a bit about my favorite development tool lately in the JS/TS realm, <a href=\"https://nx.dev/\">Nx</a>.</p>\n<h2>What is Nx?</h2>\n<p>Nx is a tool developed by <a href=\"https://nrwl.io/\">Nrwl</a> to empower development promoting the reuse of code for applications\nall developed within the same repository or workspace.\nUsing Nx, we can create independent applications all with their own separate lines of business, project domains, CI/CD\nprocesses, etc. all while developing common\ndependencies for those applications to consume all within the same repository. I won't cover in-depth what\nexactly a monorepo is and why you should consider using the development paradigm on your team, as there\nare a plethora of articles explaining their existence by developers much, <em>much</em> smarter than myself.</p>\n<h2>Monorepos at a glance</h2>\n<p>When developing within a monorepo, we can independently write entirely separate applications that deal with separate\nconcerns while developing their common dependencies at the same time, with the payoff being reusability of shared\ncomponents and modules\nas far as the eye can see.</p>\n<p>Take, for example, a common business application for your organization's users that may have two sides of the same\nshared coin -\na user facing [insert your org's line of business] application, with an org internal admin-based application\nto help manage users with what the application may be dealing with.</p>\n<p>In the case of the almighty todo-based app, a user facing todo application may be deployed out to the DMZ allowing users\nto add, update, and manage their todo items.\nThen the fateful day comes where upper management decides they would like an admin tool built for the company's\nbusiness analysts to assist with users' todos, allowing for reporting on certain types of todos, managing a user's todo\nshould it require a little assistance, etc.</p>\n<p>From an architectural standpoint, while it may be tempting to develop such functionality into the same user facing\napplication with some sort of heightened privilege given to certain users to access\nthe admin functionality, one might argue that such functionality is an entirely separate concern in comparison to what\nour existing users of our todo application expect.\nSo we make the decision to rip out common code, components, modules, etc. and put them in a separate shared repository\nthat both the todos app and admin todos app pull in\nas a dependency into their, again, separately maintained projects. Three projects, three separate repositories, three\nindividual build/deployment pipelines, and the list goes on.</p>\n<p>As much fun as it sounds managing and maintaining what are essentially three separate projects, there's a lot of work\nbeing done in our previous scenario. Wouldn't it be great\nto simply development all of our code in the same place? Enter the monorepo.</p>\n<h2>Nx at a glance</h2>\n<p>While Nx may seem to be well suited for the JS/TS world, it is a language agnostic toolkit with lots\nof <a href=\"https://nx.dev/community\">community plugins</a> for varying\nlanguages, frameworks, and ecosystems. I like to think of Nx as a metaframework, or a framework to help manage your\nframework specific libraries and applications with\nwell-defined conventions, all while bringing modern tools we developers love baked into your workspace (Jest, ESLint,\nStorybook, etc.). Again, while Nx is itself an entire\nrealm of knowledge one can easily spend an entire day reading about, for our purposes of this article, we'll only touch\non a few of the many\ntools Nx gives us while developing our applications all within the same repository.</p>\n<p>To keep things simple, let's use our previous example of building out a todos application using Angular to see how we\nmight\ncleanly architect such an application. Our game plan will be something like:</p>\n<ul>\n<li>One todo application, serving as nothing more than a glorified dependency injection container/puppeteer for the\nlibraries it depends on</li>\n<li>Separate libraries that each have a single concern - state management, UI, and utilities</li>\n</ul>\n<p>While it might be tempting to throw everything into our single todo application in place of separate libraries,\nwe should make it a point to keep our applications as simple as possible, offloading most of our dependencies into\nscoped\nlibraries and modules each with a designated purpose. What does this mean in practice? Let's look at an example\narchitecture\nwe'll emulate while developing our applications within an Nx monorepo:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">\\apps</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \\todos</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">\\libs</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \\todos</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \\ui</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \\features</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \\services</span></span></code></pre></figure>\n<p>We're effectively building a single entry point for our users into our codebase - our todos app. Our todos app, in terms\nof an Angular project, will exist as nothing more than the container for dependencies, assets, and environment specific\nsettings. By offloading UI components, services,\ncore business logic and the like, we build in contextual boundaries to our todos application in the form\nof dependent modules that each deal with their individual concerns, while exposing only the pieces that are\nrequired through their public API. In plain English, all this means is that the primary todo application\ndoes not concern itself with how its dependencies are implemented - only that they <em>are</em> implemented\nin some form.</p>\n<p>From an Angular code perspective, this means our todos application will look, at its core, like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">\\todos</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \\src</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \\app</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">      app.component.html</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">      app.component.ts</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">      app.module.ts</span></span></code></pre></figure>\n<p>About as bare bones as an Angular project can get, our todos app serves again as nothing more than a coordinator of\ninjected services, dependencies, and modules. This means no <code>\\components</code>, <code>\\services</code>, <code>\\state</code> folders, or any other\ncore logic that is required for our app to run.</p>\n<p>With our precursor to monorepos with Nx out of the way, let's jump into some code!</p>\n<h2>Getting started</h2>\n<p>to kick things off, let's create our Nx workspace, preset to Angular:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npx</span><span style=\"color:#C98A7D\"> create-nx-workspace@latest</span><span style=\"color:#C98A7D\"> exploring-nx</span><span style=\"color:#C99076\"> --preset=angular</span></span></code></pre></figure>\n<blockquote>\n<p>As of this writing, opting for the latest workspace generator will use Nx 13 alongside Angular 13</p>\n</blockquote>\n<p>Nx will kick off, creating our workspace and prompting for a few inputs from us on the command line.\nOnce the process completes, let's go ahead and take a look at what Nx generates for us:</p>\n<ul>\n<li>An <code>apps</code> directory containing our applications that will ultimately be the interface for our users into our code</li>\n<li>A <code>libs</code> directory that will eventually contain all of our independent library code each dealing with a specific\nconcern</li>\n<li>A <code>tools</code> directory serving as the home base for custom in-house development scripts and custom workspace generators</li>\n<li>A bunch of config files that assist in wiring up apps, libs, devtools, and the like (don't worry too much about these\nfor now)</li>\n</ul>\n<p>For our purpose, we'll only be concerned with our todos app and the libraries it depends on. Nx provides\nsome modern developer tooling in ESLint and Prettier to help keep our codebase properly linted and formatted, along with\nswapping out Karma for Jest and attaching an e2e integration project to our todos app using Cypress. All that out\nof the box... pretty cool, huh?</p>\n<p>Our current workspace structure should look something like the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">\\apps</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \\todos</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \\todos-e2e</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">\\libs</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">\\tools</span></span></code></pre></figure>\n<p>For now, we'll only be working in the <code>apps</code> and <code>libs</code> directory to keep things simple.\nTo start scaffolding out our libraries that will ultimately power our todos app, let's create a directory\nin our <code>libs</code> folder called <code>shared</code>. I find it conventionally easiest to namespace\nlibraries similar to the apps they serve - in this case, we would have created a <code>todos</code> folder under our\n<code>libs</code> folder, but for reasons we'll see in the next post (<em>foreshadowing intensifies</em>), we'll put this\nunder our common namespace so we can access all of the todos code from other applications as well.</p>\n<p>While we <em>could</em> just start dropping libraries directly into the <code>libs</code> directory, I've found that as the Nx apps I work\non begin to scale, it's often helpful to namespace your libraries in\naccordance to which applications they serve. In our case, we only have one <code>todos</code> app, but\nas we begin to add to our workspace, our namespaced <code>libs</code> will shine, neatly organizing our\ncode in a sane manner.</p>\n<h2>Generating libraries</h2>\n<p>Now, to generate an Nx library specific to Angular, Nx provides an amazing CLI to assist\nin scaffolding our apps and libs. I often turn to the official Nx VS Code\nplugin, <a href=\"https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console\">Nx Console</a>,\nto help facilitate scaffolding my projects as it provides an awesome interface to see all of the\navailable options to us while building out our code.</p>\n<p>Let's take a minute to discuss our <code>libs</code> strategy to help us keep things organized within our <code>shared</code> library:</p>\n<ul>\n<li>We'll create a <code>features</code> folder that will contain our state management code</li>\n<li>Next we'll add a <code>services</code> library that will <em>service</em> as our primary data fetching module</li>\n<li>Finally, we'll create a <code>ui</code> folder that will container two sub-libraries in <code>pages</code> and <code>components</code> (more on this\nseparation later)</li>\n</ul>\n<p>I use the terms library and folder in the above list <em>not</em> interchangeably - I like to further refine\nmy workspace namespaces by including nested folders inside my <code>libs</code> directories where it makes sense.\nFor our case, we'll have multiple features as we'll see later, so let's create a space for all individual\ndomains we'll be working with.</p>\n<p>To kick things off, let's generate a couple of libraries to see what this looks like in action:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># To generate our shared todos state management library</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:library</span><span style=\"color:#C98A7D\"> todos</span><span style=\"color:#C99076\"> --directory</span><span style=\"color:#C98A7D\"> shared/features</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># To generate our shared services library</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:library</span><span style=\"color:#C98A7D\"> services</span><span style=\"color:#C99076\"> --directory</span><span style=\"color:#C98A7D\"> shared</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># To generate our shared ui libraries</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:library</span><span style=\"color:#C98A7D\"> components</span><span style=\"color:#C99076\"> --directory</span><span style=\"color:#C98A7D\"> shared/ui</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:library</span><span style=\"color:#C98A7D\"> pages</span><span style=\"color:#C99076\"> --directory</span><span style=\"color:#C98A7D\"> shared/ui</span></span></code></pre></figure>\n<p>With each containing the following, respectively:</p>\n<ul>\n<li><em>features</em>: will house our state management code utilizing NgRx</li>\n<li><em>services</em>: our HTTP layer, will be in charge of calling out to our API to fetch data</li>\n<li><em>components</em>: our home for dumb components, or simple Angular components that solely take in <code>@Input()</code> to spit out on\nthe page</li>\n<li><em>pages</em>: Angular components that compose our smaller, dumb components feeding them the data they'll need to generate\ntheir markup</li>\n</ul>\n<h2>Architectural boundaries made easy</h2>\n<p>With our libraries in place, let's run through what our chain of dependencies will look like. Our main todos application\nwill, once again, act as the orchestrator binding our libraries together in order to access code throughout our\nworkspace. The added\nbenefit of offloading any and all complex logic out of our main apps and into libs is the ability to work independently\nin areas\nof code that do not need to be affected by changes from other areas. In plain English, we put all of our app code in\nlibs and make our\napps as thin as possible from a logic point of view.</p>\n<p>For starters, our todos app will take a dependency on the <code>pages</code> library, as it contains the wrapper components that\naggregate\nour smaller, dumb components passing in the data required for those UI components to render things on the page. This\nmeans\nour <code>pages</code> library will take a dependency on our <code>components</code> lib and the todos state management library to facilitate\ndispatching\nactions to retrieve data that our UI components need. From a code perspective, let's import the required modules into\ntheir respective places.</p>\n<p>First, in <code>app.module.ts</code> in the todos app, let's import the <code>pages</code> module:</p>\n<h4>app.module.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NgModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> BrowserModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/platform-browser</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ENVIRONMENT</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/features/settings</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> EffectsModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/effects</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> StoreModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> StoreDevtoolsModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@ngrx/store-devtools</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> environment</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../environments/environment</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> AppRoutingModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./app-routing.module</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> AppComponent</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./app.component</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">NgModule</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    declarations</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">AppComponent</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    imports</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        BrowserModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        AppRoutingModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        StoreModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forRoot</span><span style=\"color:#666666\">({}),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        EffectsModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forRoot</span><span style=\"color:#666666\">([]),</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        StoreDevtoolsModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">instrument</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            maxAge</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">25</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    bootstrap</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">AppComponent</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providers</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            provide</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">ENVIRONMENT</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            useValue</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">environment</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> AppModule</span><span style=\"color:#666666\"> {}</span></span></code></pre></figure>\n<p>I've added a the NgRx require modules and an <code>AppRoutingModule</code>, with contents being:</p>\n<h4>app-routing.module.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NgModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> RouterModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/router</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">NgModule</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    imports</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        RouterModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forRoot</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                path</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                loadChildren</span><span style=\"color:#666666\">: () =></span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                    import</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@exploring-nx/shared/ui/pages</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">then</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        (</span><span style=\"color:#BD976A\">m</span><span style=\"color:#666666\">) => </span><span style=\"color:#BD976A\">m</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">SharedUiPagesModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    ),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    exports</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">RouterModule</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> AppRoutingModule</span><span style=\"color:#666666\"> {}</span></span></code></pre></figure>\n<p>Nothing too out of the ordinary here, just doing our normal lazy module loading utilizing the <code>pages</code> library. Things to\nnote in <code>app.module.ts</code> is the <code>environment</code> provider, as we look under the covers is nothing more than just a shared\nprovider\nused to import environment settings specific to our todos application and having them available to our downstream\nlibraries (think sharing whatever is in <code>environment.ts</code> to services, components, etc.).</p>\n<p>For our <code>SharedUiPagesModule</code>, let's look at the module file to see what imports we'll use:</p>\n<h4>shared-ui-pages.module.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NgModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> CommonModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/common</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> RouterModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/router</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> SharedFeaturesTodosModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/features/todos</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> SharedUiComponentsModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/ui/components</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> TodosComponent</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./todos/todos.component</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">NgModule</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    imports</span><span style=\"color:#666666\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        CommonModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        SharedFeaturesTodosModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        SharedUiComponentsModule</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        RouterModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forChild</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                path</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                component</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">TodosComponent</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    declarations</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">TodosComponent</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> SharedUiPagesModule</span><span style=\"color:#666666\"> {}</span></span></code></pre></figure>\n<p>We see that our <code>pages</code> library takes on two additional dependencies in <code>SharedFeaturesTodosModule</code>, our state\nmanagement library for todos, and\n<code>SharedUiComponentsModule</code>. Now for my favorite about Nx, and a little surprise for whiteboard meeting guys like myself,\ngo ahead and run the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> dep-graph</span></span></code></pre></figure>\n<p>...and in your browser window you should the following (after clicking a few checkboxes):</p>\n<p><img src=\"/images/hitchhikers-guide-to-nx/todos_dep_graph.png\" alt=\"dep graph\"></p>\n<p>Behold, the almighty dependency graph in all of its glory! Using Nx, not only\ndo we get a conventionalized approach to mono-repository development,\nwe get dep graphs! Dependency graphs allow us to <em>visually</em> see the linking between libraries\nand their consuming applications, helping us to make more informed decisions about\nwhere things should be, and which areas are responsible for their respective domain.</p>\n<p>From our dep graph above, we see that our todos app, the ultimate entry point into\nthe heart of our application, has a single dependency on our <code>pages</code> library, which itself\nwires together the lower level details that our higher level policies do not necessarily need\nto know the inner workings of. In essence, we've done nothing more than implement simple ports\nand adapters.</p>\n<h2>Implementing state</h2>\n<p>Okay, I promise that <em>now</em> we'll actually write some code. As I previously mentioned,\nI'll be using <a href=\"https://ngrx.io/\">NgRx</a> to facilitate my application state. Now we could also using nothing more than\nsimple services-over-<code>Observables</code>, and you're more than welcome to. I love NgRx and the, again, convention it brings to\nAngular state management, and simply just a preference.</p>\n<p>There are great resources and plenty of articles on NgRx, and I'll defer to those interested in learning\nNgRx in depth to them. For those familiar with flux/redux-like development, let's create the following in a\n<code>+state</code> folder nesting in our <code>shared/features/todos</code> project underneath the <code>src/lib</code> subdirectory (\nsubdirectory-ception):</p>\n<ul>\n<li><code>todos.reducer.ts</code>: your typical reducer function that defines our state and which mutations it can take on to form\nnew state</li>\n<li><code>todos.actions.ts</code>: all of the dispatch-able operations that can affect which shape our state takes</li>\n<li><code>todos.selectors.ts</code>: slices of (memoized) state to reference across components</li>\n<li><code>todos.effects.ts</code>: tasks performed when certain actions are <code>dispatch()</code>ed, also known as side effects</li>\n<li><code>todos.facade.ts</code>: an encapsulating service to be used from higher level modules, serving as the API into our state (\nmore or less)</li>\n</ul>\n<p>To keep this post in a readable <em>state</em> no pun intended, I'll leave the gorey details for the reader to\nexplore <a href=\"https://github.com/JoeyMckenzie/exploring-nx/tree/main/libs/shared/features/todos/src/lib/%2Bstate\">here</a>.\nWe'll save a more in-depth post on NgRx for a rainy day.</p>\n<blockquote>\n<p>Nx provides NgRx state generators that come with NgRx Entity bolted in, but for our simple use case, we'll manually\ncreate our state files</p>\n</blockquote>\n<h2>Utilizing todos state</h2>\n<p>With our state in place, we're ready to wire everything up to our todos application and finally spit some todo items out\non the screen. In the name of keeping everything simple, we'll put our component logic in a single <code>todos</code> component\nthat we'll house within our shared <code>pages</code> library to open ourselves up for reusability later on. Using Nx, let's\ngenerate a component:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:component</span><span style=\"color:#C98A7D\"> todos</span><span style=\"color:#C99076\"> --project</span><span style=\"color:#C98A7D\"> shared-ui-pages</span></span></code></pre></figure>\n<p>Using Nx, we can generate Angular components in a manner similar to the Angular CLI, with the added benefit of targeting\ncomponent generation for specified apps and libraries. In our <code>todos.component.ts</code>, let's utilize our todos state logic\nto start loading in todos:</p>\n<h4>todos.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> SettingsFacade</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/features/settings</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> TodosFacade</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/features/todos</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">exploring-nx-todos</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./todos.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TodosComponent</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnInit</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    loading$</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">todosFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">loading$</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    todos$</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">todosFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">availableTodos$</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> todosFacade</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">TodosFacade</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> settingsFacade</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">SettingsFacade</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnInit</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">settingsFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">loadSettings</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    onLoadClicked</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">todosFacade</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">loadTodos</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Since we've already wired up our state module as a dependency to the <code>pages</code> library (see <code>shared-ui-pages.module.ts</code>),\nwe shouldn't have any errors during runtime. With our code behind done, let's add some markup:</p>\n<h4>todos.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex min-h-screen flex-col items-center justify-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">pb-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Loading: {{ loading$ | async }}</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        (click)</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">onLoadClicked()</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex items-center rounded-md bg-indigo-600 px-6 py-3 text-white hover:bg-indigo-700</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        Load todos</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">div</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">overflow-hidden border-b border-gray-200 shadow sm:rounded-lg</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">exploring-nx-todos-list</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    [todos]</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">(todos$ | async) ?? []</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                >&#x3C;/</span><span style=\"color:#4D9375\">exploring-nx-todos-list</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>Our <code>todos</code> page component takes on the responsibility of loading in todos once a user has clicked the Tailwind-styled\nbutton. We also have another feature responsible for dealing with application-wide settings (think environment names,\nbase URLs, dark mode enabled, etc.). I'll again spare the reader and leave a link to the\nimplementation <a href=\"https://github.com/JoeyMckenzie/exploring-nx/tree/main/libs/shared/features/settings/src/lib/%2Bstate\">here</a>.\nThe settings library is yet another NgRx-based state lib that serves as nothing more than an additional state slice as\nwe'll see in our Redux Devtools when the application is running.</p>\n<p>We'll add a few more components to keep things bite size and avoid component bloat:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># Generates a wrapper component that will consume todos into a table</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:component</span><span style=\"color:#C98A7D\"> todos-list</span><span style=\"color:#C99076\"> --project</span><span style=\"color:#C98A7D\"> shared-ui-pages</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Generates a component that will take in todo items output on the wrapping table component</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> @nrwl/angular:component</span><span style=\"color:#C98A7D\"> todos-list-item</span><span style=\"color:#C99076\"> --project</span><span style=\"color:#C98A7D\"> shared-ui-pages</span></span></code></pre></figure>\n<p>In our <code>todos-list</code> component, let's add the following:</p>\n<h4>todos.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HostBinding</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Input</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Todo</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/models</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">exploring-nx-todos-list</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./todos-list.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TodosListComponent</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    @</span><span style=\"color:#80A665\">HostBinding</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">class</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">pt-6 flex flex-col</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    @</span><span style=\"color:#80A665\">Input</span><span style=\"color:#666666\">()</span><span style=\"color:#BD976A\"> todos</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Todo</span><span style=\"color:#666666\">[] =</span><span style=\"color:#666666\"> [];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Next, the markup:</p>\n<h4>todos-list.component-html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">table</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">min-w-full divide-y divide-gray-200</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">thead</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-gray-50</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">th</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                ID</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">th</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                Title</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">th</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                User ID</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">th</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">                Completed</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#4D9375\">th</span><span style=\"color:#BD976A\"> scope</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">col</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">relative px-6 py-3</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#4D9375\">span</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">sr-only</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Edit</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">span</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;/</span><span style=\"color:#4D9375\">th</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">thead</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">tbody</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">divide-y divide-gray-200 bg-white</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">tr</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            *ngFor</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">let todo of todos</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            exploring-nx-todos-list-item</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            [todo]</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        >&#x3C;/</span><span style=\"color:#4D9375\">tr</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">tbody</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">table</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>As we mentioned earlier, <code>pages</code> wire together <code>components</code> which we treat as simple consumers of data - nothing more,\nnothing less. With our todos page component responsible for initiating the loading of todos in state, our consuming\ncomponents take the todos as <code>Input()</code>s and render markup to display the data on the page. Keeping this separation\nallows us to more easily test our components in isolation from page components, as they are solely pure components in\nthe sense of taking in information, and spitting out HTML on the other side. Our unit tests can be as simple as testing\nwith different inputs to see how our output is effected, with no service dependency mocking overhead!</p>\n<p>Now for our <code>todo-list-item</code> component:</p>\n<h4>todos-list-item.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Input</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Todo</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@exploring-nx/shared/models</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // eslint-disable-next-line @angular-eslint/component-selector</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">[exploring-nx-todos-list-item]</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./todos-list-item.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> TodosListItemComponent</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    @</span><span style=\"color:#80A665\">Input</span><span style=\"color:#666666\">()</span><span style=\"color:#BD976A\"> todo</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Todo</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>And the markup:</p>\n<h4>todos-list-item.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">td</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    {{ todo?.id }}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">td</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">whitespace-nowrap px-6 py-4 text-sm text-gray-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    {{ todo?.title }}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">td</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">whitespace-nowrap px-6 py-4 text-sm text-gray-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    {{ todo?.userId }}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">td</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">td</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">whitespace-nowrap px-6 py-4 text-sm text-gray-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">input</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">checkbox</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        [defaultChecked]</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo?.completed</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">h-4 w-4 rounded text-indigo-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">td</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>One thing to note with our component structure here is that we're using a <code>@HostBinding()</code> in the wrapper component to\ntell Angular what class the parent container element should have, and our <code>todos-list-item</code> similarly uses a component\nselector to allow us to generate <code>&#x3C;tr></code> tags without containing elements generated by Angular. This is all done in the\nname of HTML styling semantics for Tailwind to style our components correctly and is entirely optional, as certain\nbrowser specs designate <code>&#x3C;table></code>s to have an expected structure (<code>&#x3C;tr></code>s expect <code>&#x3C;td></code>s as the only child element, for\ninstance).</p>\n<h2>Running apps locally</h2>\n<p>Now that we've cranked out all the necessary code to run our application, let's go ahead and spin it up so we can see\nwhat loading todos in action looks like. From your favorite command line, go ahead and run the following to boot up the\nAngular server for our todos app:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">nx</span><span style=\"color:#C98A7D\"> serve</span><span style=\"color:#C98A7D\"> todos</span></span></code></pre></figure>\n<p>and we should see the typical output that is displayed when running a similar <code>ng serve</code> command in a single project\nAngular workspace. Once our application is finished building and served for the browser, go ahead and navigate\nto <code>localhost:4200</code> with your Redux Devtools open in the dev console. Live action demo:</p>\n<p><a href=\"/images/hitchhikers-guide-to-nx/exploring_nx_todos.webm\">Exploring Nx with todos</a></p>\n<p>We've got ourselves a working todo application built with Nx and composable shared libraries! Since we've built out our\ntodos libraries in common form, <em>any</em> application we wish to write in the future has access to all of the code that\npowers our todos app - no code duplication required, and two entirely separate/independent applications coexisting in\nthe same workspace. Pretty cool, huh?</p>\n<p>In a later post, we'll explore adding multiple types of applications to an Nx repository reusing our todos code that we'\nve written so far. Until next time, friends!</p>"
    },
    "_id": "2021/hitchhikers-guide-to-angular-nx-development.md",
    "_raw": {
      "sourceFilePath": "2021/hitchhikers-guide-to-angular-nx-development.md",
      "sourceFileName": "hitchhikers-guide-to-angular-nx-development.md",
      "sourceFileDir": "2021",
      "contentType": "markdown",
      "flattenedPath": "2021/hitchhikers-guide-to-angular-nx-development"
    },
    "type": "Post",
    "url": "/blog/2021/hitchhikers-guide-to-angular-nx-development"
  },
  {
    "title": "Implementing dark mode in Angular with Tailwind",
    "description": "Because light mode is so 2018.",
    "pubDate": "2021-09-23T07:00:00.000Z",
    "category": "angular",
    "heroImage": "/images/tailwind-dark-mode/tailwind-dark-mode-meme.jpg",
    "draft": false,
    "keywords": [
      "angular",
      "dark mode"
    ],
    "body": {
      "raw": "\nAdmittedly, I'm a dark mode junkie - any app or website I stumble upon, the first thing I look for is the dark mode\nswitch. Wanting to bring that experience to my own applications, I've recently began dark mode-ing all the things\nusing [Tailwind](https://tailwindcss.com/docs/dark-mode) to dark mode-ify my Angular and React apps. In an effort to\nblog a bit more on my behalf in more bite size chunks, let's take a stab at setting up dark mode in an Angular\napplication using Tailwind!\n\n## Setting up Tailwind\n\nIf you're unfamiliar with Tailwind,\nI've [recently written](/<https://joeymckenzie.tech/blog/build-a-tailwind-modal-with-ngrx/)> a bit about what it is and\nwhy I love utilizing it any chance I get in a new project. To get started, let's bootstrap an Angular application and\nget into some code. In the [example app](https://github.com/JoeyMckenzie/joey-mckenzie-io-blog-samples) I'll use as a\nreference, I'm bootstrapping my project using [Nx](https://nx.dev/) (a blog topic for another day). With our project\nscaffolded out, let's go ahead and add Tailwind. Assuming you're using at least Angular v11.2, adding Tailwind to an\nexisting Angular project is easy as pie:\n\n1. Add Tailwind as a dev package dependency with:\n\n```shell\nnpm install --save-dev tailwindcss\n```\n\n2. With Tailwind installed, let's add the Tailwind styles to our project by referencing Tailwind's custom CSS directives\n   that will be swapped out at build time (thanks to native PostCSS support in Angular v11.2+). In our `styles.css`\n   file, let's add the following:\n\n#### styles.css\n\n```csharp\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nAnd if you're using SCSS:\n\n#### styles.scss\n\n```csharp\n@import 'tailwind/base';\n@import 'tailwind/components';\n@import 'tailwind/utilities';\n```\n\n3. With our styles added, let's add a bare bones `tailwind.config.js` file at the root of our project that will serve to\n   help us configure Tailwind in our project:\n\n#### tailwind.config.js\n\n```js\nmodule.exports = {\n    darkMode: 'class', // or 'media' or 'class'\n};\n```\n\nThere are a plethora of configuration options that Tailwind offers to further customize how you're using it within a\nproject (production build optimization, extending themes, adding custom fonts and colors, etc.), but for our purpose, we\nonly care about telling Tailwind that we'll be using dark mode in our application.\n\nIn the above configuration, by telling Tailwind to use the option `darkMode: 'class'`, we're telling the library to\napply dark mode variants when it detects the `dark` class utility in the class list at some node near the root of the\nDOM tree (in our case, either the `body` or `html` tag). Our approach to adding a dark mode toggle will then involve\nwriting the code to dynamically update/remove this `dark` class utility from the class list on the `html` tag as we\nclick the toggle switch that initiates flipping between dark/light mode.\n\nYou can see this in action here on the blog by opening up your browser's developer tools and inspecting the DOM. Looking\nat the `html` tag, you'll notice the `dark` class being added, then removed, when you toggle the dark mode switch in the\nnavbar.\n\nWith our Tailwind setup ceremony out of the way, let's start dark mode-ifying our application.\n\n## Adding a dark mode service\n\nTo help us facilitate toggling dark mode in our application, let's add an injectable singleton service that will be\nresponsible for enabling/disabling dark mode styles in our markup. Let's run the service schematic to generate said\nservice:\n\n```shell\nng g service services/dark-mode\n```\n\nWith our `dark-mode.service.ts` scaffolded out for us, let's go ahead and add some code to allow us to perform the\nnecessary DOM updates that Tailwind looks for when determining which style variants to apply:\n\n#### dark-mode.service.ts\n\n```ts\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nconst DARK_MODE_ENABLED_KEY = 'darkModeEnabled';\nconst ENABLED_VALUE = 'true';\nconst NOT_ENABLED_VALUE = 'false';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DarkModeService implements OnDestroy {\n    darkModeEnabled$ = new BehaviorSubject(false);\n\n    constructor() {\n        this.setCurrentState();\n        this.updateLocalStorageOnStateChange();\n    }\n\n    ngOnDestroy(): void {\n        this.darkModeEnabled$.complete();\n    }\n\n    toggleDarkMode(): void {\n        const currentValue = this.darkModeEnabled$.value;\n        this.darkModeEnabled$.next(!currentValue);\n    }\n\n    private setCurrentState(): void {\n        const currentValue = localStorage.getItem(DARK_MODE_ENABLED_KEY);\n        const htmlTag = document.getElementsByTagName('html').item(0);\n        const classList = htmlTag?.classList;\n\n        if (currentValue === ENABLED_VALUE) {\n            this.darkModeEnabled$.next(true);\n            classList?.add('dark');\n        } else if (currentValue === NOT_ENABLED_VALUE) {\n            this.darkModeEnabled$.next(false);\n            classList?.remove('dark');\n        }\n    }\n\n    private updateLocalStorageOnStateChange(): void {\n        this.darkModeEnabled$.subscribe((enabled) => {\n            const htmlTag = document.getElementsByTagName('html').item(0);\n            const classList = htmlTag?.classList;\n\n            if (enabled) {\n                localStorage.setItem(DARK_MODE_ENABLED_KEY, 'true');\n                classList?.add('dark');\n            } else {\n                localStorage.setItem(DARK_MODE_ENABLED_KEY, 'false');\n                classList?.remove('dark');\n            }\n        });\n    }\n}\n```\n\nLet's break down the code above so we can get a better understanding of what this service is doing:\n\n1. We expose a `BehaviorSubject` that serves as the source of truth holding the current state value determining if our\n   application is in dark mode. We could also hold this information in a more formalized stateful manner using a library\n   like [NgRx](https://ngrx.io/), but a simple `BehaviorSubject` does the job for us here. For the purpose of this post,\n   we won't be doing anything with this information, but it might be useful if we need to do some dark mode specific\n   logic later on.\n\n2. Next, we construct our service by having it call two methods: `setCurrentState`\n   and `updateLocalStorageOnStateChange`. Looking at the first method:\n\n#### setCurrentState()\n\n```ts\nprivate setCurrentState(): void {\n  const currentValue = localStorage.getItem(DARK_MODE_ENABLED_KEY);\n  const htmlTag = document.getElementsByTagName('html').item(0);\n  const classList = htmlTag?.classList;\n\n  if (currentValue === ENABLED_VALUE) {\n    this.darkModeEnabled$.next(true);\n    classList?.add('dark');\n  } else if (currentValue === NOT_ENABLED_VALUE) {\n    this.darkModeEnabled$.next(false);\n    classList?.remove('dark');\n  }\n}\n```\n\n`setCurrentState` is responsible for reading the current dark mode value stored in local storage, either `true`\nor `false` identified by the `darkModeEnabled` key. Once it's value is read, we apply the correct class to the `html`\ntag depending on what the value is, either adding `dark` to the class list or removing it. We store the dark mode value\nin local storage to provide a bit of nice UX for our users so that when they refresh the page, or come back to site\nlater, their dark mode option they previously selected is persisted.\n\nAgain, if you take a look at your browser's current local storage here on the blog, you'll see the `darkModeEnabled`\noption with your current selection. Refreshing the page will reapply which option you currently have selected. Neat!\n\nLooking at our second method, `updateLocalStorageOnStateChange`, let's break it down:\n\n#### updateLocalStorageOnStateChange()\n\n```ts\nprivate updateLocalStorageOnStateChange(): void {\n  this.darkModeEnabled$.subscribe((enabled) => {\n    const htmlTag = document.getElementsByTagName('html').item(0);\n    const classList = htmlTag?.classList;\n\n    if (enabled) {\n      localStorage.setItem(DARK_MODE_ENABLED_KEY, 'true');\n      classList?.add('dark');\n    } else {\n      localStorage.setItem(DARK_MODE_ENABLED_KEY, 'false');\n      classList?.remove('dark');\n    }\n  });\n}\n```\n\n`updateLocalStorageOnStateChange()`'s job is to observe and react to changes from our `darkModeEnabled$` subject and\ncorrectly apply the proper class - either adding `dark` or removing it from the class list of the `html` tag.\n\n3. We've registered a listener on our `darkModeEnabled$` subject, so we best do our developer duty by disposing of the\n   listener once this service is destroyed in the `ngOnDestroy()` lifecycle hook (it's a singleton, so it'll only be\n   called on application destruction):\n\n#### ngOnDestroy()\n\n```ts\nngOnDestroy(): void {\n  this.darkModeEnabled$.complete();\n}\n```\n\n4. Lastly, we add an expose a `toggleDarkMode()` method that, when called, simply flips the dark mode enabled value.\n\n## Using our dark mode service in a component\n\nWith the heavy lifting of applying/removing dark mode in our application out of the way, let's go ahead and create a\nsimple component with just a single Tailwind-styled button. Let's run the following schematic:\n\n```shell\nng g component components/theme-toggle\n```\n\nOnce our component has been created, let's remove the `theme-toggle.component.css` file as we won't be needing any\ncustom CSS as Tailwind provides just about everything we need in terms of CSS utilities.\n\nIn our `theme-toggle.component.ts`, let's update the component with a bit of code to bring in our dark mode service and\nsetup a click handler to toggle setting dark mode on our markup:\n\n#### theme-toggle.component.ts\n\n```ts\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DarkModeService } from '../../services/dark-mode/dark-mode.service';\n\n@Component({\n    selector: 'joey-mckenzie-io-images-samples-theme-toggle',\n    templateUrl: './theme-toggle.component.html',\n})\nexport class ThemeToggleComponent {\n    darkModeEnabled$ = this.darkModeService.darkModeEnabled$;\n\n    constructor(private darkModeService: DarkModeService) {}\n\n    toggleDarkMode(): void {\n        this.darkModeService.toggleDarkMode();\n    }\n}\n```\n\nOur component code exposes a single method to interact with our dark mode service from the template. With our component\ncode in place, let's add some simple markup with just a single button that will handle toggling modes:\n\n#### theme-toggle.component.html\n\n```html\n<div class=\"flex min-h-screen flex-col items-center justify-center gap-y-4\">\n    <button\n        (click)=\"toggleDarkMode()\"\n        id=\"dark-mode-toggle\"\n        class=\"rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700 dark:bg-blue-800 dark:text-blue-400 dark:hover:bg-blue-900\"\n    >\n        Toggle\n    </button>\n    <p class=\"text-black dark:text-white\">\n        Dark mode enabled: {{ (darkModeEnabled$ | async) === true }}\n    </p>\n</div>\n```\n\nWith the markup above, all we should see now when we run our application is a single button in the middle of the page (\nmake sure you add our component selector to `app.component.html`).\n\nIn our class list, you'll notice a few classes prefixed with `dark:`. This is how we tell Tailwind to apply the dark\nmode class variant when it detects `dark` in the class list higher up the DOM chain. We can also apply dark mode\nvariants to pseudo-selectors as well as we see with the dark mode variant on our `hover:` selector. Pretty cool!\n\nOne last change we'll make is in our `index.html` root markup file to apply background colors as we toggle modes:\n\n#### index.html\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>TailwindDarkMode</title>\n        <base href=\"/\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n    </head>\n\n    <body class=\"bg-white dark:bg-black\">\n        <joey-mckenzie-io-blog-samples-root></joey-mckenzie-io-blog-samples-root>\n    </body>\n</html>\n```\n\nIn our `body` tag, we add some background colors corresponding to which mode we're currently in. With everything\nstrapped together, if we fire up our application and navigate to `localhost:4200`, we'll be able to see our masterpiece\nin action:\n\n[Tailwind dark mode toggle example](/images/tailwind-dark-mode/dark-mode-toggle.webm)\n\nWith dev tools open, you'll see the class list on the `html` tag update each time we click the button, as well as seeing\nthe value updated in local storage. If we refresh the page as well, we'll keep our dark mode in tact if we have that\noption selected before reloading!\n\nAs always, take a look at\nthe [example code](https://github.com/JoeyMckenzie/joey-mckenzie-io-blog-samples/tree/main/apps/tailwind-dark-mode) for\nreference and let me know if you have any suggestions for a different implementation.\n\nHappy dark mode-ing, friends!\n",
      "html": "<p>Admittedly, I'm a dark mode junkie - any app or website I stumble upon, the first thing I look for is the dark mode\nswitch. Wanting to bring that experience to my own applications, I've recently began dark mode-ing all the things\nusing <a href=\"https://tailwindcss.com/docs/dark-mode\">Tailwind</a> to dark mode-ify my Angular and React apps. In an effort to\nblog a bit more on my behalf in more bite size chunks, let's take a stab at setting up dark mode in an Angular\napplication using Tailwind!</p>\n<h2>Setting up Tailwind</h2>\n<p>If you're unfamiliar with Tailwind,\nI've <a href=\"/%3Chttps://joeymckenzie.tech/blog/build-a-tailwind-modal-with-ngrx/\">recently written</a>> a bit about what it is and\nwhy I love utilizing it any chance I get in a new project. To get started, let's bootstrap an Angular application and\nget into some code. In the <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-io-blog-samples\">example app</a> I'll use as a\nreference, I'm bootstrapping my project using <a href=\"https://nx.dev/\">Nx</a> (a blog topic for another day). With our project\nscaffolded out, let's go ahead and add Tailwind. Assuming you're using at least Angular v11.2, adding Tailwind to an\nexisting Angular project is easy as pie:</p>\n<ol>\n<li>Add Tailwind as a dev package dependency with:</li>\n</ol>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C99076\"> --save-dev</span><span style=\"color:#C98A7D\"> tailwindcss</span></span></code></pre></figure>\n<ol start=\"2\">\n<li>With Tailwind installed, let's add the Tailwind styles to our project by referencing Tailwind's custom CSS directives\nthat will be swapped out at build time (thanks to native PostCSS support in Angular v11.2+). In our <code>styles.css</code>\nfile, let's add the following:</li>\n</ol>\n<h4>styles.css</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#5DA994\">@tailwind</span><span style=\"color:#80A665\"> base</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">@tailwind</span><span style=\"color:#80A665\"> components</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">@tailwind</span><span style=\"color:#80A665\"> utilities</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>And if you're using SCSS:</p>\n<h4>styles.scss</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">@import</span><span style=\"color:#666666\"> '</span><span style=\"color:#C98A7D\">tailwind/base</span><span style=\"color:#666666\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@import</span><span style=\"color:#666666\"> '</span><span style=\"color:#C98A7D\">tailwind/components</span><span style=\"color:#666666\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">@import</span><span style=\"color:#666666\"> '</span><span style=\"color:#C98A7D\">tailwind/utilities</span><span style=\"color:#666666\">'</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<ol start=\"3\">\n<li>With our styles added, let's add a bare bones <code>tailwind.config.js</code> file at the root of our project that will serve to\nhelp us configure Tailwind in our project:</li>\n</ol>\n<h4>tailwind.config.js</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"js\" data-theme=\"vitesse-dark\"><code data-language=\"js\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B8A965\">module</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">exports</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    darkMode</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">class</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#758575DD\"> // or 'media' or 'class'</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>There are a plethora of configuration options that Tailwind offers to further customize how you're using it within a\nproject (production build optimization, extending themes, adding custom fonts and colors, etc.), but for our purpose, we\nonly care about telling Tailwind that we'll be using dark mode in our application.</p>\n<p>In the above configuration, by telling Tailwind to use the option <code>darkMode: 'class'</code>, we're telling the library to\napply dark mode variants when it detects the <code>dark</code> class utility in the class list at some node near the root of the\nDOM tree (in our case, either the <code>body</code> or <code>html</code> tag). Our approach to adding a dark mode toggle will then involve\nwriting the code to dynamically update/remove this <code>dark</code> class utility from the class list on the <code>html</code> tag as we\nclick the toggle switch that initiates flipping between dark/light mode.</p>\n<p>You can see this in action here on the blog by opening up your browser's developer tools and inspecting the DOM. Looking\nat the <code>html</code> tag, you'll notice the <code>dark</code> class being added, then removed, when you toggle the dark mode switch in the\nnavbar.</p>\n<p>With our Tailwind setup ceremony out of the way, let's start dark mode-ifying our application.</p>\n<h2>Adding a dark mode service</h2>\n<p>To help us facilitate toggling dark mode in our application, let's add an injectable singleton service that will be\nresponsible for enabling/disabling dark mode styles in our markup. Let's run the service schematic to generate said\nservice:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> service</span><span style=\"color:#C98A7D\"> services/dark-mode</span></span></code></pre></figure>\n<p>With our <code>dark-mode.service.ts</code> scaffolded out for us, let's go ahead and add some code to allow us to perform the\nnecessary DOM updates that Tailwind looks for when determining which style variants to apply:</p>\n<h4>dark-mode.service.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnDestroy</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> BehaviorSubject</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">DARK_MODE_ENABLED_KEY</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">darkModeEnabled</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">ENABLED_VALUE</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">NOT_ENABLED_VALUE</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">false</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providedIn</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">root</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DarkModeService</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnDestroy</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    darkModeEnabled$</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#80A665\"> BehaviorSubject</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">setCurrentState</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">updateLocalStorageOnStateChange</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnDestroy</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">complete</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    toggleDarkMode</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">currentValue</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">next</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">currentValue</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#80A665\"> setCurrentState</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">currentValue</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> localStorage</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getItem</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">DARK_MODE_ENABLED_KEY</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">htmlTag</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> document</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getElementsByTagName</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">item</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">classList</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> htmlTag</span><span style=\"color:#666666\">?.</span><span style=\"color:#BD976A\">classList</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">currentValue</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#BD976A\"> ENABLED_VALUE</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">            this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">next</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            classList</span><span style=\"color:#666666\">?.</span><span style=\"color:#80A665\">add</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">dark</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span><span style=\"color:#4D9375\"> else</span><span style=\"color:#4D9375\"> if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">currentValue</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#BD976A\"> NOT_ENABLED_VALUE</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">            this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">next</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            classList</span><span style=\"color:#666666\">?.</span><span style=\"color:#80A665\">remove</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">dark</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#80A665\"> updateLocalStorageOnStateChange</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">enabled</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            const </span><span style=\"color:#BD976A\">htmlTag</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> document</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getElementsByTagName</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">item</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            const </span><span style=\"color:#BD976A\">classList</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> htmlTag</span><span style=\"color:#666666\">?.</span><span style=\"color:#BD976A\">classList</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">enabled</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                localStorage</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">setItem</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">DARK_MODE_ENABLED_KEY</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                classList</span><span style=\"color:#666666\">?.</span><span style=\"color:#80A665\">add</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">dark</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span><span style=\"color:#4D9375\"> else</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                localStorage</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">setItem</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">DARK_MODE_ENABLED_KEY</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">false</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                classList</span><span style=\"color:#666666\">?.</span><span style=\"color:#80A665\">remove</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">dark</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Let's break down the code above so we can get a better understanding of what this service is doing:</p>\n<ol>\n<li>\n<p>We expose a <code>BehaviorSubject</code> that serves as the source of truth holding the current state value determining if our\napplication is in dark mode. We could also hold this information in a more formalized stateful manner using a library\nlike <a href=\"https://ngrx.io/\">NgRx</a>, but a simple <code>BehaviorSubject</code> does the job for us here. For the purpose of this post,\nwe won't be doing anything with this information, but it might be useful if we need to do some dark mode specific\nlogic later on.</p>\n</li>\n<li>\n<p>Next, we construct our service by having it call two methods: <code>setCurrentState</code>\nand <code>updateLocalStorageOnStateChange</code>. Looking at the first method:</p>\n</li>\n</ol>\n<h4>setCurrentState()</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">private</span><span style=\"color:#80A665\"> setCurrentState</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">  const </span><span style=\"color:#BD976A\">currentValue</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> localStorage</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getItem</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">DARK_MODE_ENABLED_KEY</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">  const </span><span style=\"color:#BD976A\">htmlTag</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> document</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getElementsByTagName</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">item</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">  const </span><span style=\"color:#BD976A\">classList</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> htmlTag</span><span style=\"color:#666666\">?.</span><span style=\"color:#BD976A\">classList</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">  if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">currentValue</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#BD976A\"> ENABLED_VALUE</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">    this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">next</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    classList</span><span style=\"color:#666666\">?.</span><span style=\"color:#80A665\">add</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">dark</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">  }</span><span style=\"color:#4D9375\"> else</span><span style=\"color:#4D9375\"> if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">currentValue</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#BD976A\"> NOT_ENABLED_VALUE</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">    this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">next</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    classList</span><span style=\"color:#666666\">?.</span><span style=\"color:#80A665\">remove</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">dark</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p><code>setCurrentState</code> is responsible for reading the current dark mode value stored in local storage, either <code>true</code>\nor <code>false</code> identified by the <code>darkModeEnabled</code> key. Once it's value is read, we apply the correct class to the <code>html</code>\ntag depending on what the value is, either adding <code>dark</code> to the class list or removing it. We store the dark mode value\nin local storage to provide a bit of nice UX for our users so that when they refresh the page, or come back to site\nlater, their dark mode option they previously selected is persisted.</p>\n<p>Again, if you take a look at your browser's current local storage here on the blog, you'll see the <code>darkModeEnabled</code>\noption with your current selection. Refreshing the page will reapply which option you currently have selected. Neat!</p>\n<p>Looking at our second method, <code>updateLocalStorageOnStateChange</code>, let's break it down:</p>\n<h4>updateLocalStorageOnStateChange()</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">private</span><span style=\"color:#80A665\"> updateLocalStorageOnStateChange</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">  this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">enabled</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">htmlTag</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> document</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getElementsByTagName</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">item</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">classList</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> htmlTag</span><span style=\"color:#666666\">?.</span><span style=\"color:#BD976A\">classList</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">enabled</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">      localStorage</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">setItem</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">DARK_MODE_ENABLED_KEY</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">true</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">      classList</span><span style=\"color:#666666\">?.</span><span style=\"color:#80A665\">add</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">dark</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span><span style=\"color:#4D9375\"> else</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">      localStorage</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">setItem</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">DARK_MODE_ENABLED_KEY</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">false</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">      classList</span><span style=\"color:#666666\">?.</span><span style=\"color:#80A665\">remove</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">dark</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">  });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p><code>updateLocalStorageOnStateChange()</code>'s job is to observe and react to changes from our <code>darkModeEnabled$</code> subject and\ncorrectly apply the proper class - either adding <code>dark</code> or removing it from the class list of the <code>html</code> tag.</p>\n<ol start=\"3\">\n<li>We've registered a listener on our <code>darkModeEnabled$</code> subject, so we best do our developer duty by disposing of the\nlistener once this service is destroyed in the <code>ngOnDestroy()</code> lifecycle hook (it's a singleton, so it'll only be\ncalled on application destruction):</li>\n</ol>\n<h4>ngOnDestroy()</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ngOnDestroy</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">  this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">complete</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<ol start=\"4\">\n<li>Lastly, we add an expose a <code>toggleDarkMode()</code> method that, when called, simply flips the dark mode enabled value.</li>\n</ol>\n<h2>Using our dark mode service in a component</h2>\n<p>With the heavy lifting of applying/removing dark mode in our application out of the way, let's go ahead and create a\nsimple component with just a single Tailwind-styled button. Let's run the following schematic:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> component</span><span style=\"color:#C98A7D\"> components/theme-toggle</span></span></code></pre></figure>\n<p>Once our component has been created, let's remove the <code>theme-toggle.component.css</code> file as we won't be needing any\ncustom CSS as Tailwind provides just about everything we need in terms of CSS utilities.</p>\n<p>In our <code>theme-toggle.component.ts</code>, let's update the component with a bit of code to bring in our dark mode service and\nsetup a click handler to toggle setting dark mode on our markup:</p>\n<h4>theme-toggle.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnDestroy</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Subject</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> takeUntil</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DarkModeService</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../../services/dark-mode/dark-mode.service</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">joey-mckenzie-io-images-samples-theme-toggle</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./theme-toggle.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> ThemeToggleComponent</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    darkModeEnabled$</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeService</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeEnabled$</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> darkModeService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">DarkModeService</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    toggleDarkMode</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">darkModeService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">toggleDarkMode</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our component code exposes a single method to interact with our dark mode service from the template. With our component\ncode in place, let's add some simple markup with just a single button that will handle toggling modes:</p>\n<h4>theme-toggle.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex min-h-screen flex-col items-center justify-center gap-y-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        (click)</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">toggleDarkMode()</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">dark-mode-toggle</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700 dark:bg-blue-800 dark:text-blue-400 dark:hover:bg-blue-900</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        Toggle</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-black dark:text-white</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        Dark mode enabled: {{ (darkModeEnabled$ | async) === true }}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>With the markup above, all we should see now when we run our application is a single button in the middle of the page (\nmake sure you add our component selector to <code>app.component.html</code>).</p>\n<p>In our class list, you'll notice a few classes prefixed with <code>dark:</code>. This is how we tell Tailwind to apply the dark\nmode class variant when it detects <code>dark</code> in the class list higher up the DOM chain. We can also apply dark mode\nvariants to pseudo-selectors as well as we see with the dark mode variant on our <code>hover:</code> selector. Pretty cool!</p>\n<p>One last change we'll make is in our <code>index.html</code> root markup file to apply background colors as we toggle modes:</p>\n<h4>index.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;!</span><span style=\"color:#4D9375\">doctype</span><span style=\"color:#BD976A\"> html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">html</span><span style=\"color:#BD976A\"> lang</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">meta</span><span style=\"color:#BD976A\"> charset</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">utf-8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">title</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">TailwindDarkMode</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">title</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">base</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">meta</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">viewport</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> content</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">width=device-width, initial-scale=1</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">icon</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">image/x-icon</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">favicon.ico</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">body</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bg-white dark:bg-black</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">joey-mckenzie-io-blog-samples-root</span><span style=\"color:#666666\">>&#x3C;/</span><span style=\"color:#4D9375\">joey-mckenzie-io-blog-samples-root</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>In our <code>body</code> tag, we add some background colors corresponding to which mode we're currently in. With everything\nstrapped together, if we fire up our application and navigate to <code>localhost:4200</code>, we'll be able to see our masterpiece\nin action:</p>\n<p><a href=\"/images/tailwind-dark-mode/dark-mode-toggle.webm\">Tailwind dark mode toggle example</a></p>\n<p>With dev tools open, you'll see the class list on the <code>html</code> tag update each time we click the button, as well as seeing\nthe value updated in local storage. If we refresh the page as well, we'll keep our dark mode in tact if we have that\noption selected before reloading!</p>\n<p>As always, take a look at\nthe <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-io-blog-samples/tree/main/apps/tailwind-dark-mode\">example code</a> for\nreference and let me know if you have any suggestions for a different implementation.</p>\n<p>Happy dark mode-ing, friends!</p>"
    },
    "_id": "2021/implementing-tailwind-dark-mode-in-angular.md",
    "_raw": {
      "sourceFilePath": "2021/implementing-tailwind-dark-mode-in-angular.md",
      "sourceFileName": "implementing-tailwind-dark-mode-in-angular.md",
      "sourceFileDir": "2021",
      "contentType": "markdown",
      "flattenedPath": "2021/implementing-tailwind-dark-mode-in-angular"
    },
    "type": "Post",
    "url": "/blog/2021/implementing-tailwind-dark-mode-in-angular"
  },
  {
    "title": "Constructing objects with intent",
    "description": "Build better object APIs with named constructors and fluent builders!",
    "pubDate": "2022-11-03T07:00:00.000Z",
    "category": "design",
    "heroImage": "/images/objects-with-intent/constructors_meme.jpg",
    "draft": false,
    "keywords": [
      "design",
      "software patterns",
      ".net",
      "rust"
    ],
    "body": {
      "raw": "\nI've been becoming increasingly annoyed, both by legacy code and modern frameworks, with the amount of non-constrained\nobject construction that occurs within a codebase. That's a bunch of developer jargon, so what does all that mean\nexactly? If a developer is working on a feature within a codebase they might be unfamiliar with, it's far too easy to\ninstantiate objects at will with zero constraints with some process downstream in an area of code tucked away in a dark\ncorner expecting the developer to have _correctly_ constructed said object. To me, this feels a lot like the \"read my\nmind\" mentality that occurs between employers and disgruntled employees in the workplace: the employer expects something\nto happen without communicating to the employee that intent (I think we've all experienced this regardless of industry).\nHow does this translate to code? Let's take a simple example from C#.\n\nLet's say I'm working in a codebase that validates addresses. The address structure may look something like:\n\n```csharp\npublic sealed record Address\n{\n    public string Street { get; init; }\n\n    public string City { get; init; }\n\n    public string State { get; init; }\n}\n```\n\nIf a friendly developer wanted to create a new `Address`, it's up to them to understand how the `Address` record is to\nbe instantiated _and_ understand any downstream business logic validation, processes, etc. that involve the `Address`\nobject. As it stands, a developer could _in theory_ instantiate an `Address` while forgetting to set the street, city,\nand state. Not very helpful, as we'll have no way of identifying a user's location if no information is provided. To get\naround this, we use constructors with the help of C#'s record type:\n\n```csharp\npublic sealed record Address(string Street, string City, string State);\n```\n\nNow, any developer looking to work with an `Address` object should reasonably expect all the fields to be populated.\nInevitably, a requirement comes along from the product team requesting only the address street to be required, not city\nand state (don't ask me, I don't make the rules around here). So naturally, we might add another constructor:\n\n```csharp\npublic sealed record Address\n{\n    public Address(string street, string city, string state)\n    {\n        Street = street;\n        City = city;\n        State = state;\n    }\n\n    public Address(string street)\n    {\n        Street = street;\n        City = string.Empty;\n        State = string.Empty;\n    }\n\n    public string Street { get; }\n\n    public string City { get; init; }\n\n    public string State { get; init; }\n\n    public void PrintAddress()\n    {\n        var addressParts = new List<string>\n        {\n            Street\n        };\n\n        if (!string.IsNullOrWhiteSpace(City))\n        {\n            addressParts.Add(City);\n        }\n\n        if (!string.IsNullOrWhiteSpace(State))\n        {\n            addressParts.Add(State);\n        }\n\n        Console.WriteLine(string.Join(\", \", addressParts));\n    }\n}\n```\n\nWe added a constructor that requires the street while defaulting the city and state to empty strings rather than `null`\nfor sanity. While it's easy enough to use object initializers instead, i.e.\n\n```csharp\nvar someAddress = new Address\n{\n    Street = \"123 Code Street\"\n};\n```\n\nWe add constructors to classes and structures to enforce object creation is _correct-by-construction_: the internals of\nconstructing an object, especially those more complex, are better off encapsulated from consumers so we don't have to\nworry about leaking business logic/rules out from their intended domain. Inevitably, more requirements come along so we\nadd _more_ constructors\n\n```csharp\npublic sealed record Address\n{\n    public Address(string street, string city, string state)\n    {\n        Street = street;\n        City = city;\n        State = state;\n    }\n\n    public Address(string street, string city)\n    {\n        Street = street;\n        City = city;\n        State = string.Empty;\n    }\n\n    public Address(string street)\n    {\n        Street = street;\n        City = string.Empty;\n        State = string.Empty;\n    }\n\n    public string Street { get; }\n\n    public string City { get; init; }\n\n    public string State { get; init; }\n\n    public void PrintAddress()\n    {\n        var addressParts = new List<string>\n        {\n            Street\n        };\n\n        if (!string.IsNullOrWhiteSpace(City))\n        {\n            addressParts.Add(City);\n        }\n\n        if (!string.IsNullOrWhiteSpace(State))\n        {\n            addressParts.Add(State);\n        }\n\n        Console.WriteLine(string.Join(\", \", addressParts));\n    }\n}\n```\n\nSo now, our consumers have to choose between three different ways to properly construct the address information. While\nthis is \"fine\" for the most part, I find it often more helpful to add contextual object constructors, a.k.a methods to\nan object that _clearly conveys_ what context the object is to be constructed with:\n\n```csharp\npublic sealed record Address\n{\n    private Address(string street)\n    {\n        Street = street;\n        City = string.Empty;\n        State = string.Empty;\n    }\n\n    private Address(string street, string city)\n    {\n        Street = street;\n        City = city;\n        State = string.Empty;\n    }\n\n    private Address(string street, string city, string state)\n    {\n        Street = street;\n        City = city;\n        State = state;\n    }\n\n    public static Address FromStreet(string street) => new(street);\n\n    public static Address FromStreetAndCity(string street, string city) => new(street, city);\n\n    public static Address FromFullAddress(string street, string city, string state) => new(street, city, state);\n\n    public string Street { get; }\n\n    public string City { get; }\n\n    public string State { get; }\n\n    public void PrintAddress()\n    {\n        var addressParts = new List<string>\n        {\n            Street\n        };\n\n        if (!string.IsNullOrWhiteSpace(City))\n        {\n            addressParts.Add(City);\n        }\n\n        if (!string.IsNullOrWhiteSpace(State))\n        {\n            addressParts.Add(State);\n        }\n\n        Console.WriteLine(string.Join(\", \", addressParts));\n    }\n}\n```\n\nNow, when consumers want to interact with an `Address` object, we provide context as to the address they're\nconstructing:\n\n```csharp\n// We don't allow consumers to construct an address however they'd like, they MUST construct it in ways we offer\nvar addressWithStreetOnly = Address.FromStreet(\"123 Code Street\");\naddressWithStreetOnly.PrintAddress();\n\nvar addressWithStreetAndState = Address.FromStreetAndCity(\"123 Code Street\",  \".NETville\");\naddressWithStreetAndState.PrintAddress();\n\nvar fullAddress = Address.FromFullAddress(\"123 Code Street\", \".NETville\", \"CA\");\nfullAddress.PrintAddress();\n```\n\nAlthough we still provide constructors, they're now `private` so we can further constrain how consumers instantiate\nan `Address` to help avoid pesky \"missing data/property\" bugs. We can think of these `static` builders on our `Address`\nrecord as _named constructors_, which come in handy when we need multiple variations of object construction.\n\n## Fluent builders for complex objects\n\nOftentimes, our constructed objects might contain a hodge-podge of properties that may or may not necessarily support\none another. I find implementing fluent builders, in this case, to help allow consumers to instantiate their objects in\na manner they see fit. Using builders, we offer a _fluent_ like API to callers allowing them to customize exactly what\nthe object they're looking to build should look like. In terms of C#, we're looking for something along the lines of:\n\n```csharp\nvar someFluentlyBuiltObject = new AwesomeFluentBuilder()\n    .WithFoo(\"Bar\")\n    .WithAnswerToLife(42)\n    .WithOpinion(\"Lord of the Rings is better than Star Wars\")\n    .Build();\n\nDebug.Assert(string.Equals(someFluentlyBuiltObject.Foo, \"Bar\"));\nDebug.Assert(someFluentlyBuiltObject.AnswerToLift, 42);\nDebug.Assert(string.Equals(someFluentlyBuiltObject.Opinion, \"Lord of the Rings is better than Star Wars\"));\n```\n\nI opt to use the `WithProperty()` convention to make it clear to consumers of my code that the object they're\nconstructing will contain whatever data they will correspond to that property's value - somewhat subject, but I feel the\nintention is clear. Let's take a look at a more fleshed out, yet contrived, example in Rust as I've been having somewhat\nof an obsession lately with the language and ecosystem. Seriously, the joy of using cargo alone makes me instantly\nannoyed whenever I'm _not_ working in a Rust context. Let's fluently build some pizzas with Rust.\n\nThis isn't a post about Rust necessarily, so I'll defer to the rustaceans much smarter and more well-versed in the\nlanguage than myself to deep dive into idiomatic Rust. The concept remains, however - our public API should offer a\npizza `struct` that can be consumed by callers. While a caller _could_ in theory, construct they're own pizza, we should\noffer them a convenient way to make pizzas without worrying about the internal details of constructing said pizza.\n\nWe can think of it as the exchange of transactions that occurs when one walks into their favorite pizza joint:\n\n-   We order at the register providing the establishment with a list of requirements we'd like our pizza to meet\n-   We make an exchange of currency after detailing what our pizza should look/taste like\n-   After some time, we receive a pizza at our table - hopefully accompanied by a nice cold adult beverage\n\nLet's see if we can model this scenario in code:\n\n```rust\n#[derive(Debug, Default)]\npub struct Pizza {\n    pub crust: Crust,\n    pub toppings: Toppings,\n    pub sauce: Sauce,\n}\n\n#[derive(Debug)]\npub enum Crust {\n    Regular,\n    Thin,\n    DeepDish,\n}\n\nimpl Default for Crust {\n    fn default() -> Self {\n        Crust::Regular\n    }\n}\n\ntype Toppings = Vec<Topping>;\n\n#[derive(Debug)]\npub enum Topping {\n    Cheese,\n    Pepperoni,\n    Onions,\n    BellPeppers,\n    Mushrooms,\n    Sausage,\n    Custom(String),\n}\n\n#[derive(Debug)]\npub enum Sauce {\n    Red,\n    White,\n}\n\nimpl Default for Sauce {\n    fn default() -> Self {\n        Sauce::Red\n    }\n}\n```\n\nA `Pizza` should contain a `Crust`, `Sauce`, and a plethora of `Topping`s. While callers of our public API could build a\npizza themselves, we want to make it as easy as possible to build such a pizza without worrying about how to ladle the\nsauce, toss the dough, shred the mozzarella, etc. Let's add a fluent builder our users can interact to build their\nperfect `Pizza`:\n\n```rust\nuse crate::pizza::Crust;\nuse crate::pizza::Pizza;\nuse crate::pizza::Sauce;\nuse crate::pizza::Topping;\n\npub struct PizzaBuilder {\n    pizza: Pizza,\n}\n\nimpl PizzaBuilder {\n    pub fn new() -> Self {\n        Self {\n            pizza: Pizza::default(),\n        }\n    }\n\n    pub fn with_crust(self, crust: Crust) -> Self {\n        Self {\n            pizza: Pizza {\n                crust,\n                ..self.pizza\n            },\n        }\n    }\n\n    pub fn with_sauce(self, sauce: Sauce) -> Self {\n        Self {\n            pizza: Pizza {\n                sauce,\n                ..self.pizza\n            },\n        }\n    }\n\n    pub fn with_topping(self, topping: Topping) -> Self {\n        let mut toppings_mut = self.pizza.toppings;\n\n        toppings_mut.push(topping);\n\n        Self {\n            pizza: Pizza {\n                toppings: toppings_mut,\n                ..self.pizza\n            },\n        }\n    }\n\n    pub fn build(self) -> Pizza {\n        self.pizza\n    }\n}\n```\n\nFor those unfamiliar with Rust, we won't hang up on the details here. Our builder simply offers methods on\nthe `PizzaBuilder` struct, consuming whatever the previous version of its internal `Pizza` state through `self`, and\ncreates a new internal state containing the previous pizza state with slight modifications depending on what property we\nmight be updating on the `Pizza` we'll hand back to consumers. When we finally `build()` this `Pizza`, we simply hand\nback the internally managed pizza state.\n\nConsuming our `PizzaBuilder` might look something like:\n\n```rust\nuse crate::{\n    pizza::{Crust, Sauce, Topping},\n    pizza_builder::PizzaBuilder,\n};\n\nmod pizza;\nmod pizza_builder;\n\nfn main() {\n    let double_pepperoni = PizzaBuilder::new()\n        .with_crust(Crust::Regular)\n        .with_sauce(Sauce::Red)\n        .with_topping(Topping::Cheese)\n        .with_topping(Topping::Pepperoni)\n        .with_topping(Topping::Pepperoni)\n        .build();\n\n    println!(\"{:?}\", double_pepperoni);\n\n    let deep_dish = PizzaBuilder::new()\n        .with_crust(Crust::DeepDish)\n        .with_sauce(Sauce::Red)\n        .with_topping(Topping::Cheese)\n        .with_topping(Topping::Sausage)\n        .with_topping(Topping::Mushrooms)\n        .build();\n\n    println!(\"{:?}\", deep_dish);\n\n    let white_pie = PizzaBuilder::new()\n        .with_crust(Crust::Thin)\n        .with_sauce(Sauce::White)\n        .with_topping(Topping::BellPeppers)\n        .with_topping(Topping::Onions)\n        .with_topping(Topping::Custom(\"Anchovies\".to_owned()))\n        .build();\n\n    println!(\"{:?}... ugh, anchovies...\", white_pie);\n}\n```\n\nRunning our code gives us an output along the lines of\"\n\n```shell\nPizza { crust: Regular, toppings: [Cheese, Pepperoni, Pepperoni], sauce: Red }\nPizza { crust: DeepDish, toppings: [Cheese, Sausage, Mushrooms], sauce: Red }\nPizza { crust: Thin, toppings: [BellPeppers, Onions, Custom(\"Anchovies\")], sauce: White }... ugh, anchovies...\n```\n\nSweet! We're building fluent pizzas on the fly without having to leak details on pizza internals to consumers.\n\nIn short, it's often better to constrain object construction for consumers _if your intent_ as the code owner is to have\nsuch consumers utilize your objects in a predefined manner. In essence, we should aim to help consumers build objects\n_with intent_ rather than letting them run wild with unconstrained creation.\n\nUntil next time, friends!\n",
      "html": "<p>I've been becoming increasingly annoyed, both by legacy code and modern frameworks, with the amount of non-constrained\nobject construction that occurs within a codebase. That's a bunch of developer jargon, so what does all that mean\nexactly? If a developer is working on a feature within a codebase they might be unfamiliar with, it's far too easy to\ninstantiate objects at will with zero constraints with some process downstream in an area of code tucked away in a dark\ncorner expecting the developer to have <em>correctly</em> constructed said object. To me, this feels a lot like the \"read my\nmind\" mentality that occurs between employers and disgruntled employees in the workplace: the employer expects something\nto happen without communicating to the employee that intent (I think we've all experienced this regardless of industry).\nHow does this translate to code? Let's take a simple example from C#.</p>\n<p>Let's say I'm working in a codebase that validates addresses. The address structure may look something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> sealed</span><span style=\"color:#CB7676\"> record</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Street</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> init</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> City</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> init</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> State</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> init</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>If a friendly developer wanted to create a new <code>Address</code>, it's up to them to understand how the <code>Address</code> record is to\nbe instantiated <em>and</em> understand any downstream business logic validation, processes, etc. that involve the <code>Address</code>\nobject. As it stands, a developer could <em>in theory</em> instantiate an <code>Address</code> while forgetting to set the street, city,\nand state. Not very helpful, as we'll have no way of identifying a user's location if no information is provided. To get\naround this, we use constructors with the help of C#'s record type:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> sealed</span><span style=\"color:#CB7676\"> record</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> Street</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> City</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> State</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>Now, any developer looking to work with an <code>Address</code> object should reasonably expect all the fields to be populated.\nInevitably, a requirement comes along from the product team requesting only the address street to be required, not city\nand state (don't ask me, I don't make the rules around here). So naturally, we might add another constructor:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> sealed</span><span style=\"color:#CB7676\"> record</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> city</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Street</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> street</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> city</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        State</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Street</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> street</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        City</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Empty</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        State</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Empty</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Street</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> City</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> init</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> State</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> init</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> PrintAddress</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        var</span><span style=\"color:#80A665\"> addressParts</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Street</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            addressParts</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            addressParts</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Join</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">, </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> addressParts</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We added a constructor that requires the street while defaulting the city and state to empty strings rather than <code>null</code>\nfor sanity. While it's easy enough to use object initializers instead, i.e.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> someAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    Street</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">123 Code Street</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>We add constructors to classes and structures to enforce object creation is <em>correct-by-construction</em>: the internals of\nconstructing an object, especially those more complex, are better off encapsulated from consumers so we don't have to\nworry about leaking business logic/rules out from their intended domain. Inevitably, more requirements come along so we\nadd <em>more</em> constructors</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> sealed</span><span style=\"color:#CB7676\"> record</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> city</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Street</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> street</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> city</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        State</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> city</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Street</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> street</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> city</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        State</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Empty</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Street</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> street</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        City</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Empty</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        State</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Empty</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Street</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> City</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> init</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> State</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#CB7676\"> init</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> PrintAddress</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        var</span><span style=\"color:#80A665\"> addressParts</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Street</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            addressParts</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            addressParts</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Join</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">, </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> addressParts</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>So now, our consumers have to choose between three different ways to properly construct the address information. While\nthis is \"fine\" for the most part, I find it often more helpful to add contextual object constructors, a.k.a methods to\nan object that <em>clearly conveys</em> what context the object is to be constructed with:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">public</span><span style=\"color:#CB7676\"> sealed</span><span style=\"color:#CB7676\"> record</span><span style=\"color:#5DA994\"> Address</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Street</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> street</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        City</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Empty</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        State</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Empty</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> city</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Street</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> street</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> city</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        State</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Empty</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#80A665\"> Address</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> city</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Street</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> street</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        City</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> city</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        State</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#80A665\"> FromStreet</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> new</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">street</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#80A665\"> FromStreetAndCity</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> city</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> new</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">street</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> city</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> Address</span><span style=\"color:#80A665\"> FromFullAddress</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#80A665\"> street</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> city</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> new</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">street</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> city</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> Street</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> City</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#80A665\"> State</span><span style=\"color:#666666\"> {</span><span style=\"color:#CB7676\"> get</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> void</span><span style=\"color:#80A665\"> PrintAddress</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        var</span><span style=\"color:#80A665\"> addressParts</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> List</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            Street</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            addressParts</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">City</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">IsNullOrWhiteSpace</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            addressParts</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Add</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">State</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Join</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">, </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> addressParts</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now, when consumers want to interact with an <code>Address</code> object, we provide context as to the address they're\nconstructing:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// We don't allow consumers to construct an address however they'd like, they MUST construct it in ways we offer</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> addressWithStreetOnly</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FromStreet</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">123 Code Street</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">addressWithStreetOnly</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PrintAddress</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> addressWithStreetAndState</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FromStreetAndCity</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">123 Code Street</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\">  \"</span><span style=\"color:#C98A7D\">.NETville</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">addressWithStreetAndState</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PrintAddress</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> fullAddress</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> Address</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FromFullAddress</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">123 Code Street</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">.NETville</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">CA</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">fullAddress</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">PrintAddress</span><span style=\"color:#666666\">();</span></span></code></pre></figure>\n<p>Although we still provide constructors, they're now <code>private</code> so we can further constrain how consumers instantiate\nan <code>Address</code> to help avoid pesky \"missing data/property\" bugs. We can think of these <code>static</code> builders on our <code>Address</code>\nrecord as <em>named constructors</em>, which come in handy when we need multiple variations of object construction.</p>\n<h2>Fluent builders for complex objects</h2>\n<p>Oftentimes, our constructed objects might contain a hodge-podge of properties that may or may not necessarily support\none another. I find implementing fluent builders, in this case, to help allow consumers to instantiate their objects in\na manner they see fit. Using builders, we offer a <em>fluent</em> like API to callers allowing them to customize exactly what\nthe object they're looking to build should look like. In terms of C#, we're looking for something along the lines of:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> someFluentlyBuiltObject</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> AwesomeFluentBuilder</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    .</span><span style=\"color:#80A665\">WithFoo</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Bar</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    .</span><span style=\"color:#80A665\">WithAnswerToLife</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">42</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    .</span><span style=\"color:#80A665\">WithOpinion</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Lord of the Rings is better than Star Wars</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    .</span><span style=\"color:#80A665\">Build</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Debug</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Assert</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Equals</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">someFluentlyBuiltObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Foo</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Bar</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Debug</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Assert</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">someFluentlyBuiltObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">AnswerToLift</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 42</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Debug</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Assert</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Equals</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">someFluentlyBuiltObject</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Opinion</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Lord of the Rings is better than Star Wars</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">));</span></span></code></pre></figure>\n<p>I opt to use the <code>WithProperty()</code> convention to make it clear to consumers of my code that the object they're\nconstructing will contain whatever data they will correspond to that property's value - somewhat subject, but I feel the\nintention is clear. Let's take a look at a more fleshed out, yet contrived, example in Rust as I've been having somewhat\nof an obsession lately with the language and ecosystem. Seriously, the joy of using cargo alone makes me instantly\nannoyed whenever I'm <em>not</em> working in a Rust context. Let's fluently build some pizzas with Rust.</p>\n<p>This isn't a post about Rust necessarily, so I'll defer to the rustaceans much smarter and more well-versed in the\nlanguage than myself to deep dive into idiomatic Rust. The concept remains, however - our public API should offer a\npizza <code>struct</code> that can be consumed by callers. While a caller <em>could</em> in theory, construct they're own pizza, we should\noffer them a convenient way to make pizzas without worrying about the internal details of constructing said pizza.</p>\n<p>We can think of it as the exchange of transactions that occurs when one walks into their favorite pizza joint:</p>\n<ul>\n<li>We order at the register providing the establishment with a list of requirements we'd like our pizza to meet</li>\n<li>We make an exchange of currency after detailing what our pizza should look/taste like</li>\n<li>After some time, we receive a pizza at our table - hopefully accompanied by a nice cold adult beverage</li>\n</ul>\n<p>Let's see if we can model this scenario in code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Debug</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Default</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> struct</span><span style=\"color:#5DA994\"> Pizza</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> crust</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Crust</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> toppings</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Toppings</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> sauce</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Sauce</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> enum</span><span style=\"color:#5DA994\"> Crust</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Regular</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Thin</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    DeepDish</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#5DA994\"> Default</span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> Crust</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> default</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#C99076\"> Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Crust</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Regular</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">type</span><span style=\"color:#5DA994\"> Toppings</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Vec</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Topping</span><span style=\"color:#666666\">>;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> enum</span><span style=\"color:#5DA994\"> Topping</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Cheese</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Pepperoni</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Onions</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    BellPeppers</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Mushrooms</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Sausage</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Custom</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">String</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> enum</span><span style=\"color:#5DA994\"> Sauce</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Red</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    White</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#5DA994\"> Default</span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> Sauce</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> default</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#C99076\"> Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Sauce</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Red</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>A <code>Pizza</code> should contain a <code>Crust</code>, <code>Sauce</code>, and a plethora of <code>Topping</code>s. While callers of our public API could build a\npizza themselves, we want to make it as easy as possible to build such a pizza without worrying about how to ladle the\nsauce, toss the dough, shred the mozzarella, etc. Let's add a fluent builder our users can interact to build their\nperfect <code>Pizza</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#4D9375\"> crate</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">pizza</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Crust</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#4D9375\"> crate</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">pizza</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Pizza</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#4D9375\"> crate</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">pizza</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Sauce</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#4D9375\"> crate</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">pizza</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Topping</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> struct</span><span style=\"color:#5DA994\"> PizzaBuilder</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    pizza</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Pizza</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#5DA994\"> PizzaBuilder</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#C99076\"> Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            pizza</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Pizza</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">default</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> with_crust</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> crust</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Crust</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#C99076\"> Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            pizza</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Pizza</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                crust</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                ..</span><span style=\"color:#C99076\">self</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">pizza</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> with_sauce</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> sauce</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Sauce</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#C99076\"> Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            pizza</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Pizza</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                sauce</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                ..</span><span style=\"color:#C99076\">self</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">pizza</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> with_topping</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> topping</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Topping</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#C99076\"> Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        let</span><span style=\"color:#CB7676\"> mut</span><span style=\"color:#BD976A\"> toppings_mut</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> self</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">pizza</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">toppings</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        toppings_mut</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">push</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">topping</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C99076\">        Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            pizza</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Pizza</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                toppings</span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> toppings_mut</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                ..</span><span style=\"color:#C99076\">self</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">pizza</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> build</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Pizza</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        self</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">pizza</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>For those unfamiliar with Rust, we won't hang up on the details here. Our builder simply offers methods on\nthe <code>PizzaBuilder</code> struct, consuming whatever the previous version of its internal <code>Pizza</code> state through <code>self</code>, and\ncreates a new internal state containing the previous pizza state with slight modifications depending on what property we\nmight be updating on the <code>Pizza</code> we'll hand back to consumers. When we finally <code>build()</code> this <code>Pizza</code>, we simply hand\nback the internally managed pizza state.</p>\n<p>Consuming our <code>PizzaBuilder</code> might look something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#4D9375\"> crate</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    pizza</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#5DA994\">Crust</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Sauce</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Topping</span><span style=\"color:#666666\">},</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    pizza_builder</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">PizzaBuilder</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">mod</span><span style=\"color:#80A665\"> pizza</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">mod</span><span style=\"color:#80A665\"> pizza_builder</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> double_pepperoni</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> PizzaBuilder</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_crust</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Crust</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Regular</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_sauce</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Sauce</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Red</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_topping</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Topping</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Cheese</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_topping</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Topping</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Pepperoni</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_topping</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Topping</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Pepperoni</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">build</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">:?</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> double_pepperoni</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> deep_dish</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> PizzaBuilder</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_crust</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Crust</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">DeepDish</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_sauce</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Sauce</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Red</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_topping</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Topping</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Cheese</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_topping</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Topping</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Sausage</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_topping</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Topping</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Mushrooms</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">build</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">:?</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> deep_dish</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> white_pie</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> PizzaBuilder</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_crust</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Crust</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Thin</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_sauce</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Sauce</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">White</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_topping</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Topping</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">BellPeppers</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_topping</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Topping</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Onions</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_topping</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Topping</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">Custom</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Anchovies</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_owned</span><span style=\"color:#666666\">()))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">build</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">:?</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">... ugh, anchovies...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> white_pie</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Running our code gives us an output along the lines of\"</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">Pizza</span><span style=\"color:#C98A7D\"> {</span><span style=\"color:#C98A7D\"> crust:</span><span style=\"color:#C98A7D\"> Regular,</span><span style=\"color:#C98A7D\"> toppings:</span><span style=\"color:#DBD7CAEE\"> [Cheese, </span><span style=\"color:#C98A7D\">Pepperoni,</span><span style=\"color:#C98A7D\"> Pepperoni],</span><span style=\"color:#C98A7D\"> sauce:</span><span style=\"color:#C98A7D\"> Red</span><span style=\"color:#C98A7D\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Pizza</span><span style=\"color:#C98A7D\"> {</span><span style=\"color:#C98A7D\"> crust:</span><span style=\"color:#C98A7D\"> DeepDish,</span><span style=\"color:#C98A7D\"> toppings:</span><span style=\"color:#DBD7CAEE\"> [Cheese, </span><span style=\"color:#C98A7D\">Sausage,</span><span style=\"color:#C98A7D\"> Mushrooms],</span><span style=\"color:#C98A7D\"> sauce:</span><span style=\"color:#C98A7D\"> Red</span><span style=\"color:#C98A7D\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Pizza</span><span style=\"color:#C98A7D\"> {</span><span style=\"color:#C98A7D\"> crust:</span><span style=\"color:#C98A7D\"> Thin,</span><span style=\"color:#C98A7D\"> toppings:</span><span style=\"color:#DBD7CAEE\"> [BellPeppers, </span><span style=\"color:#C98A7D\">Onions,</span><span style=\"color:#C98A7D\"> Custom</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">\"Anchovies\"</span><span style=\"color:#666666\">)</span><span style=\"color:#C98A7D\">],</span><span style=\"color:#C98A7D\"> sauce:</span><span style=\"color:#C98A7D\"> White</span><span style=\"color:#C98A7D\"> }...</span><span style=\"color:#C98A7D\"> ugh,</span><span style=\"color:#C98A7D\"> anchovies...</span></span></code></pre></figure>\n<p>Sweet! We're building fluent pizzas on the fly without having to leak details on pizza internals to consumers.</p>\n<p>In short, it's often better to constrain object construction for consumers <em>if your intent</em> as the code owner is to have\nsuch consumers utilize your objects in a predefined manner. In essence, we should aim to help consumers build objects\n<em>with intent</em> rather than letting them run wild with unconstrained creation.</p>\n<p>Until next time, friends!</p>"
    },
    "_id": "2022/constructing-objects-with-intent.md",
    "_raw": {
      "sourceFilePath": "2022/constructing-objects-with-intent.md",
      "sourceFileName": "constructing-objects-with-intent.md",
      "sourceFileDir": "2022",
      "contentType": "markdown",
      "flattenedPath": "2022/constructing-objects-with-intent"
    },
    "type": "Post",
    "url": "/blog/2022/constructing-objects-with-intent"
  },
  {
    "title": "JAMstack Angular apps with Scully and Netlify",
    "description": "Write, build, and deploy Angular applications as fully SEO-optimized static sites with Netlify and Netlify Functions!",
    "pubDate": "2022-02-22T08:00:00.000Z",
    "category": "angular",
    "heroImage": "/images/jamstack-angular-apps-with-scully/angular-scully-netlify-meme.jpg",
    "draft": false,
    "keywords": [
      "angular",
      "jamstack",
      "scully",
      "netlify"
    ],
    "body": {
      "raw": "\nThere's no denying that the [JAMstack](https://jamstack.org/) has taken the traditional web development world by\nstorm and turned our previous tried and true development models on their heads. The JAMstack is not _new_, per se,\nbut has become an increasingly popular approach to how we write and deploy web applications in the modern developer\nlandscape. With frameworks like Next.js, Nuxt, Gatsby, Hugo, and many others, we as developers have been given the\ntools to develop entirely serverless applications that run as static web apps in the browser.\n\n> Embrace \"serverless\" here with big air quotes - you're still running on someone's server, and your choice of hosting\n> provider will more than likely dictate just how \"serverless\" you can be\n\nAs Angular developers, we love our framework and everything it provides. Unfortunately, turning your Angular\napplication into a static web app is not as simple as one may like.\nWhile [Angular Universal](https://angular.io/guide/universal) does give us an officially supported devtool to turn our\nAngular apps into statically rendered pages, I've found it a bit on the configure-y side and not as simple to use as I'd\nlike compared to other frameworks like Next.js.\n\nWhat I'd wished I found earlier before going down my Angular JAMstack journey is [Scully](https://scully.io/), the\nAngular static site generator I never knew I needed and JAMstack tool that, quite frankly, is just plain fun to use.\n\n## JAMstack?\n\nYep, the JAMstack: **J**avaScript, **A**PIs, and **M**arkup. There's a thriving [community](https://jamstack.org/) of\ndevelopers embracing the JAMstack, so defer to them for the nitty gritty details. The JAMstack follows a general\nartchitecture:\n\n-   **M**arkup is pre-rendered at build time and served as static HTML and CSS\n-   **J**avaScript still provides all its native interactivity with the browser, while not bogging down the initial\n    rendering of our apps with retrieving JS bundles\n-   **A**PIs that provide data, processing, and whatever else we need from a backend server\n\nIn essence, JAMstack principles align to provide fast, reliable, scalable, and performant web applications for the\nmodern browser.\n\nWhat this means in practice when you write framework code for say, Next.js, we write our normal React code we'd normally\nwrite, with pages being rending in a static context - every element on the page is inspect-able in the browser, which\nmeans much more easily indexable by search engines.\n\n## What is Scully?\n\nScully is a tool/framework developed by community members for Angular that turns your Angular application into a\nstatically rendered website, with fully indexable HTML allowing for all the SEO optimization your heart desires while\nstill delivering on the development workflow we Angular developers love about the framework. While I claim to be no\nScully expert, I've built a few side project client sites using Scully, while having re-written this exact blog you're\nreading from Next to Scully.\n\nScully works on the premise of analyzing your application's routing and compiling a separate build artifact containing\nall scanned routes as individual `index.html` pages. While there's a lot more that goes on under the hood and a bit out\nof my knowledge realm, Scully effectively allows us to turn our Angular SPAs into fully static sites that load quickly\nto the browser, vastly improve SEO, allows improved search engine indexing, and the list goes on.\n\nThe Scully team has great documentation on using the tool, alongside a plethora of build plugins, both from Scully\nand the community, allowing you to tap into the Scully lifecycle at different points in the build process to\ncustomize\nthe generated static files to your need.\n\n## Hosting with Netlify\n\nWith Scully generating an entirely static version of our application, it becomes trivial to host such files on any\nstatic site hosting service. While there's a lot of great services out there, I prefer Netlify as it allows us to tap\ninto [Netlify Functions](https://functions.netlify.com/), serving as the `A` in JAMstack and giving us the ability to\nbuild serverless functions that our static Angular applications can call into, performing any work you'd normally do on\nthe server. Using Netlify, not _only_ are we able to host our Angular apps as fully static sites, but we can also build\nout a mesh of serverless functions that act as a backend-lite for any of our API-like needs! Who said you can't have\nyour cake and eat it too?\n\n## Getting started with Scully\n\nThis all sounds great, but let's jump into some code to see how we can make our Angular JAMstack dream a reality.\nLet's kick things off by creating a new Angular application with routing:\n\n```shell\nng new scully-netlify-angular-example --routing\n```\n\nScully utilizes the Angular router to crawl all of our application routes, allowing it to create individual servable\nHTML files by reading our router configuration. With our code scaffolding in place, let's add some simple components and\na few pages:\n\n```shell\ncd scully-netlify-angular-example\nng g c components/home --skip-tests\nng g c components/ping --skip-tests\nng g c components/data --skip-tests\n```\n\nWe're skipping testing for the purposes of this post. With our components in place, let's add them to\nour `app-routing.module.ts`:\n\n#### app-routing.module.ts\n\n```ts\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DataComponent, HomeComponent, PingComponent } from '@components';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HomeComponent,\n    },\n    {\n        path: 'ping',\n        component: PingComponent,\n    },\n    {\n        path: 'data',\n        component: DataComponent,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\nWith routes in place, let's implement a few services that will help facilitate talking to our Netlify functions\n(more on those in a bit). Let's implement two services: one for the `PingComponent` that will consume a `PingService` to\n_ping_ the server, and one for `DataComponent` to offload the responsibility of sending and receiving data from the\nserver.\n\n```shell\nng g s services/ping --skip-tests\nng g s services/data --skip-tests\n```\n\nSince we'll be utilizing a bit with `Observable`s, let's implement a service to clean up our streams once a component is\ndestroyed:\n\n```shell\nng g s services/unsubscribe --skip-tess\n```\n\nWhile we're at it, let's make a quick service to help us with our SEO to set page titles, update `<meta>`s, etc.\n\n```shell\nng g s services/document --skip-tests\n```\n\nWith our services in place and having no further dependencies (outside the standard Angular library), let's implement\ntheir code. First, our `UnsubscribeService`:\n\n#### unsubscribe.service.ts\n\n```ts\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class UnsubscribeService extends Subject<void> implements OnDestroy {\n    ngOnDestroy(): void {\n        this.next();\n        this.complete();\n    }\n}\n```\n\nAs we can see, our `UnsubscribeService` is no more than a glorified injectable `Subject` that emits nothing and simply\ncloses itself on service destruction. This will be helpful to close connections to `Observable`s we're `.subscribe()`ing\nto within our components. Next, let's put our `PingService` code in place:\n\n#### ping.service.ts\n\n```ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ServerResponse } from 'types';\nimport { catchError, delay, map } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { environment } from '@environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PingService {\n    constructor(private http: HttpClient) {}\n\n    pingServer() {\n        const baseUrl = `${environment.functionsBaseDomain}${environment.functionsBasePath}`;\n\n        return this.http.get<ServerResponse>(`${baseUrl}/ping`).pipe(\n            map((response) => response.message),\n            delay(1000),\n            catchError((error) => {\n                console.log(error);\n                return of('Whoops... an error occurred :(');\n            }),\n        );\n    }\n}\n```\n\nNext, our `DataService`:\n\n#### data.service.ts\n\n```ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '@environment';\nimport { EMPTY } from 'rxjs';\nimport { catchError, delay, map } from 'rxjs/operators';\nimport { ServerResponse } from 'types';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DataService {\n    constructor(private http: HttpClient) {}\n\n    sendDataToServer(name: string) {\n        const baseUrl = `${environment.functionsBaseDomain}${environment.functionsBasePath}`;\n\n        return this.http\n            .post<ServerResponse>(`${baseUrl}/data`, {\n                name,\n            })\n            .pipe(\n                delay(1000),\n                map((response) => response.message),\n                catchError((error) => {\n                    console.log(error);\n                    return EMPTY;\n                }),\n            );\n    }\n}\n```\n\nand finally,\n\n#### document.service.ts\n\n```ts\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Meta, MetaDefinition } from '@angular/platform-browser';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DocumentService {\n    private readonly rootTitle = 'Scully, Angular, and Netlify';\n\n    constructor(\n        @Inject(DOCUMENT) private readonly document: Document,\n        private meta: Meta,\n    ) {}\n\n    resetTitle(): void {\n        this.document.title = this.rootTitle;\n        this.meta.updateTag({\n            name: 'title',\n            content: this.rootTitle,\n        });\n    }\n\n    updateTitle(pageTitle: string): void {\n        this.document.title = `${this.rootTitle} - ${pageTitle}`;\n        this.meta.updateTag({\n            name: 'title',\n            content: pageTitle,\n        });\n    }\n\n    setMetaTags(tags: MetaDefinition[]) {\n        tags.map((t) => {\n            const existingTag = this.meta.getTag(t.id ?? '');\n            if (!existingTag) {\n                this.meta.addTag(t);\n            }\n        });\n    }\n}\n```\n\nThese services will be responsible for sending HTTP requests to our serverless functions.\nLet's add some code to our `ping` component:\n\n#### ping.component.ts\n\n```ts\nimport { Component, OnInit } from '@angular/core';\nimport { DocumentService, PingService, UnsubscribeService } from '@services';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-ping',\n    templateUrl: './ping.component.html',\n})\nexport class PingComponent implements OnInit {\n    message = 'pinging the server...';\n\n    constructor(\n        private documentService: DocumentService,\n        private pingService: PingService,\n        private unsubscribe$: UnsubscribeService,\n    ) {}\n\n    ngOnInit(): void {\n        this.documentService.updateTitle('ping');\n        this.documentService.setMetaTags([\n            {\n                name: 'author',\n                content: 'Joey McKenzie',\n            },\n        ]);\n\n        this.pingService\n            .pingServer()\n            .pipe(takeUntil(this.unsubscribe$))\n            .subscribe(\n                (message) =>\n                    (this.message = `response from server: ${message}`),\n            );\n    }\n}\n```\n\nand the markup:\n\n#### ping.component.html\n\n```html\n<p>{{ message }}</p>\n```\n\n`PingComponent` uses `PingService` to _ping_ the server for a response, then display said response in our browser.\nNext, `data.component.ts`:\n\n#### data.component.ts\n\n```ts\nimport { Component, OnInit } from '@angular/core';\nimport { DocumentService, DataService, UnsubscribeService } from '@services';\nimport { finalize, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-data',\n    templateUrl: './data.component.html',\n})\nexport class DataComponent implements OnInit {\n    loading = false;\n    response?: string;\n\n    constructor(\n        private documentService: DocumentService,\n        private dataService: DataService,\n        private unsubscribe$: UnsubscribeService,\n    ) {}\n\n    ngOnInit(): void {\n        this.documentService.updateTitle('data');\n    }\n\n    loadData() {\n        this.loading = true;\n\n        this.dataService\n            .sendDataToServer('Joey')\n            .pipe(\n                takeUntil(this.unsubscribe$),\n                finalize(() => (this.loading = false)),\n            )\n            .subscribe((response) => (this.response = response));\n    }\n}\n```\n\nI'm using alias imports in `@environment`, `@services`, and `@components` to make my import paths look tolerable. We do\nso by adding a `paths` node to `compilerOptions`:\n\n#### tsconfig.json\n\n```ts\n/* To learn more about this file see: https://angular.io/config/tsconfig. */\n{\n    // ...other options,\n    \"compilerOptions\"\n:\n    {\n        // ...some more options,\n        \"paths\"\n    :\n        {\n            \"@components\"\n        :\n            [\"src/app/components/index.ts\"],\n                \"@services\"\n        :\n            [\"src/app/services/index.ts\"],\n                \"@environment\"\n        :\n            [\"src/environments/environment.ts\"]\n        }\n    }\n,\n}\n```\n\nWhere each `index.ts` file `exports` out either services or components in their relative directories and exports our\napplication environment configuration.\n\nWith that out of the way, let's wire up our components in the `HomeComponent` and add some links to navigate between\npages:\n\n#### home.component.ts\n\n```ts\nimport { Component, OnInit } from '@angular/core';\nimport { DocumentService } from '../../services/document.service';\n\n@Component({\n    selector: 'app-home',\n    templateUrl: './home.component.html',\n})\nexport class HomeComponent implements OnInit {\n    constructor(private documentService: DocumentService) {}\n\n    ngOnInit(): void {\n        this.documentService.resetTitle();\n    }\n}\n```\n\nand with markup,\n\n#### home.component.html\n\n```html\n<div class=\"flex flex-row space-x-4\">\n    <a routerLink=\"/ping\">\n        <button\n            type=\"button\"\n            class=\"inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700\"\n        >\n            Ping\n        </button>\n    </a>\n    <a routerLink=\"/data\">\n        <button\n            type=\"button\"\n            class=\"inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700\"\n        >\n            Data\n        </button>\n    </a>\n</div>\n```\n\nWhile we're at it, let's go ahead and update `app.component.html` with some routing:\n\n#### app.component.html\n\n```html\n<router-outlet></router-outlet>\n<div class=\"flex flex-row justify-center pt-12\">\n    <a routerLink=\"/\">\n        <button\n            type=\"button\"\n            class=\"inline-flex items-center rounded-md border border-transparent bg-red-500 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700\"\n        >\n            Home\n        </button>\n    </a>\n</div>\n```\n\nI'm using Tailwind out of habit, and not required for the purposes of this example by any means. Let's kick off our dev\nserver and we should see after navigating to `localhost:4200` a page in our browser with three buttons: ping, data, and\nhome.\n\n![Home page](/images/jamstack-angular-apps-with-scully/home_page.png)\n\nWith devtools open, if we click the ping button that routes us to the page with our `PingComponent`, we get an error due\nto a failed HTTP request to `http://localhost:9999/.netlify/functions/ping`, and the same happens when we click the data\nbutton to navigate to the page with our `DataComponent` and click the `Load data` button. Our services are correctly\ncalling out to our serverless functions, but there's one problem: we don't have any functions!\n\n## Going serverless with Netlify Functions\n\nIf you're familiar with static site hosting services, [Netlify](https://www.netlify.com/) is another one of those\nwith much, much more to offer than simple site hosting. One of my favorite features of Netlify\nis [Netlify Functions](https://functions.netlify.com/) - Netlify's version of serverless functions that utilize AWS\nlambda functions behind the scenes to provide an easy way to integrate backend functionality with our statically served\nweb apps. I've found serverless functions helpful in quite a few different ways:\n\n-   Sending out emails using email API services\n-   Integrating with third-party APIs to do some processing for frontend requests\n-   Serving simple data to be consumed from the frontend\n-   Heck, even persisting to database based on requests from our frontend applications\n\nOur serverless functions will _serve_, more or less, as an API-lite for our static served Angular Scully application\nthat will be hosted in Netlify, allowing us to connect our outgoing HTTP calls from the frontend to the backend\nfunctions listening for requests. Functions work on the premise of running code at a specified endpoint that receive\nHTTP events (methods, headers, request body, etc.) and the context of the HTTP request (metadata about the function\nitself). There's a lot we can customize around the way our functions are detected, served, and ran, but we'll utilize\nall the defaults for now.\n\nTo get started writing functions, let's go ahead and install the Netlify Functions package and the Netlify CLI to help\nus write and serve our functions:\n\n```shell\nnpm install @netlify/functions\nnpm install --save-dev netlify-cli # -g if you'd like to install globally\n```\n\nUsing the CLI, let's add an npm script in our `package.json` we can run to start our function server that will detect\nany code changes we apply while writing our functions, recompile them, and serve them up for our frontend to call into:\n\n```json\n{\n    // ...other stuff\n    \"scripts\": {\n        // ...other scripts\n        \"functions:serve\": \"netlify functions:serve\"\n    }\n}\n```\n\nIf we run:\n\n```shell\nnpm run functions:serve\n```\n\nwe should see a message in our console along the lines of ready to serve, but no functions available. Since we've haven'\nt provided any customized configuration for our functions, the CLI assumes your functions exist under\na `/netlify/functions` folder at the root of your project. Let's implement a `/ping` GET endpoint using TypeScript that\nwill tap into the functionality provided by the `@netlify/functions` package to start listening for requests:\n\n#### netlify/functions/ping.ts\n\n```ts\nimport { Handler } from '@netlify/functions';\nimport {\n    getErrorResponse,\n    getHeaders,\n    HttpStatus,\n    isWhitelistedDomain,\n} from '../lib';\nimport { ServerResponse } from 'types';\n\nconst handler: Handler = async (event) => {\n    const origin = event.headers.origin ?? '';\n\n    if (!isWhitelistedDomain(origin)) {\n        return getErrorResponse(HttpStatus.Forbidden);\n    }\n\n    if (event.httpMethod.toLowerCase() !== 'get') {\n        return getErrorResponse(HttpStatus.MethodNotAllowed);\n    }\n\n    const response: ServerResponse = {\n        success: true,\n        message: 'pong',\n    };\n\n    return {\n        statusCode: 200,\n        body: JSON.stringify(response),\n        headers: getHeaders(origin),\n    };\n};\n\nexport { handler };\n```\n\nI've added some common code that I'll be sharing between functions and have moved that to a `lib` folder with a\nsingle `index.ts` file:\n\n#### netlify/lib/index.ts\n\n```ts\nimport { Response } from '@netlify/functions/dist/function/response';\nimport { ServerResponse } from 'types';\n\nenum HttpStatus {\n    Forbidden = '403',\n    MethodNotAllowed = '405',\n    InternalServerError = '500',\n}\n\nconst WHITELIST_DOMAINS = [\n    '', // Postman doesn't send request from an origin, allow it through (DON'T DO THIS IN PRODUCTION)\n    'http://localhost:4200', // Whitelist our Angular dev serve for local development\n    'http://localhost:1668', // Whitelist our Scully server for local Scully development\n    'https://asdfasdf.netlify.app', // Whitelist our production server deployed to Netlify\n];\n\nfunction getHeaders(origin: string): { [key: string]: string } {\n    return {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': origin,\n        'Access-Control-Allow-Headers': '*',\n    };\n}\n\nfunction isNullOrUndefined(\n    objectToValidate?: unknown | null | undefined,\n): boolean {\n    return objectToValidate === null || objectToValidate === undefined;\n}\n\nfunction isWhitelistedDomain(origin: string): boolean {\n    const existingDomain = WHITELIST_DOMAINS.find((d) => d === origin);\n    return !isNullOrUndefined(existingDomain);\n}\n\nfunction getErrorResponse(statusCode: HttpStatus): Response {\n    let message: string;\n\n    switch (statusCode) {\n        case HttpStatus.Forbidden:\n            message = 'That method is not allowed for this endpoint.';\n            break;\n        case HttpStatus.MethodNotAllowed:\n            message = 'Domain is forbidden from accessing.';\n            break;\n        default:\n            message = 'An invalid request was made, please try again.';\n    }\n\n    return {\n        statusCode: +statusCode,\n        body: JSON.stringify({\n            success: false,\n            message,\n        } as ServerResponse),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n}\n\nexport { getErrorResponse, getHeaders, isWhitelistedDomain, HttpStatus };\n```\n\nNothing too complicated, just a few simple helpers to facilitate validating allowed origins for CORS, some common\nresponse generators, and a method to grab some default headers for each response. I've also reused the `ServerResponse`\ntype under the `types.ts` file at the root of our project:\n\n```ts\nexport type ServerResponse = {\n    message: string;\n    success: boolean;\n};\n```\n\nSince our project is effectively just a big TypeScript solution (Angular frontend, TS-based serverless functions),\nwe can import any `.ts` files into our serverless functions, given it runs in the correct context. I wouldn't want\nto reference any `@angular/*` imports, for obvious reasons. With our `ServerResponse` in place, we've created a\ncommon statically typed-model between the front and backend of our project!\n\nAs you might have guessed, the names and pathing of our function `.ts` files _does_ matter in our case. There's a few\nsimple rules to adhere to when creating function endpoints\n\n-   `netlify/functions/ping.ts` would receive HTTP request matching the route `/.netlify/functions/ping`\n-   `netlify/functions/ping/index.ts` would _also_ receive HTTP request matching the route `/.netlify/functions/ping`\n-   `netlify/functions/ping/ping.ts` would, again, _also_ receive HTTP request matching the\n    route `/.netlify/functions/ping`\n\nNow that we have our first function in place, let's go ahead and start our function server:\n\n```shell\nnpm run functions:serve\n```\n\nand in the terminal, we should see a message like the following:\n\n```shell\n> scully-netlify-angular-example@0.0.0 netlify:serve\n> netlify functions:serve\n\n◈ Ignored general context env var: LANG (defined in process)\n◈ Loaded function ping.\n◈ Functions server is listening on 9999\n```\n\nTo test out that our functions are working correctly, let's startup Postman and send a request to\n`http://localhost:9999/.netlify/functions/ping` and see what we get:\n\n![Postman ping response](/images/jamstack-angular-apps-with-scully/postman_ping.png)\n\nWe've got a response! Now that our GET endpoint is working, let's add a POST endpoint that will receive requests with\ndata in the body and return data based on it:\n\n#### netlify/functions/data/index.ts\n\n```ts\nimport { Handler } from '@netlify/functions';\nimport {\n    getErrorResponse,\n    getHeaders,\n    HttpStatus,\n    isWhitelistedDomain,\n} from '../../lib';\nimport { ServerResponse } from 'types';\n\nconst handler: Handler = async (event) => {\n    const origin = event.headers.origin ?? '';\n\n    if (!isWhitelistedDomain(origin)) {\n        return getErrorResponse(HttpStatus.Forbidden);\n    }\n\n    const method = event.httpMethod.toLowerCase();\n\n    if (method !== 'options' && method !== 'post') {\n        return getErrorResponse(HttpStatus.MethodNotAllowed);\n    }\n\n    /**\n     * Because we have a more complex request (JSON being sent over the wire),\n     * an options call is made by the Angular HTTP client service to check with our function\n     * that it's okay to receive requests in the current context.\n     */\n    if (method === 'options') {\n        return {\n            statusCode: 200,\n            headers: getHeaders(origin),\n        };\n    }\n\n    if (event.body) {\n        const requestBody: { name: string } = JSON.parse(event.body);\n\n        const response: ServerResponse = {\n            success: true,\n            message: `Hello ${requestBody.name}!`,\n        };\n\n        return {\n            statusCode: 200,\n            body: JSON.stringify(response),\n            headers: getHeaders(origin),\n        };\n    }\n\n    return getErrorResponse(HttpStatus.InternalServerError);\n};\n\nexport { handler };\n```\n\nUtilizing our helper methods again, since this is a POST request with more complex request headers (as we can\ninspect in the network tab attached for us using `HttpClient`), the client will make a pre-flight OPTIONS call to our\nfunction endpoint to essentially ask the question, \"hey, this client application wants to make a request to you, is that\ncool?\". We kick out any requests that are not POSTs or OPTIONs (again, normal HTTP framework code would take care of\nthis for you, but we're running a bare bones server here) and accept the POST request body, returning the value of\nthe `name` attribute given to us in a simple greeting. By adding this function with our server still running, Netlify\nrecognizes a new function was added, and then compiles the output and serves it up under the `/.netlify/functions/data`\nendpoint. Let's give it a try with Postman:\n\n![Postman data response](/images/jamstack-angular-apps-with-scully/postman_data.png)\n\nNice! Now with our functions fully operational and our server running, let's start our Angular server (if it wasn't\nalready running), and watch the magic happen:\n\n[Angular Netlify functions](/images/jamstack-angular-apps-with-scully/scully-jamstack-running.webm)\n\nWe've got ourselves a working solution! So far we've spun up our Angular application that calls into our serverless\nfunctions, but we're missing one final piece to _truly_ be considered JAMstack: Scully.\n\n## Adding Scully to the project\n\nTo get started, the Scully team has made it dead simple to add static site generation to our\nAngular apps with a simple schematic. With the terminal open, let's run said schematic:\n\n```shell\nng add @scullyio/init\n```\n\nThe schematic will add a few Scully dependencies to our project, as well as generate\na `scully.{{projectName}}. config.ts` file with the following:\n\n```ts\nimport { ScullyConfig } from '@scullyio/scully';\n\n/** this loads the default render plugin, remove when switching to something else. */\nimport '@scullyio/scully-plugin-puppeteer';\n\nexport const config: ScullyConfig = {\n    projectRoot: './src',\n    projectName: 'scully-netlify-angular-example',\n    outDir: './dist/static',\n    routes: {},\n};\n```\n\nTo make things easy on us, let's add a few build scripts to our `scripts` section in our `package.json`:\n\n```json\n{\n    \"scripts\": {\n        // ...other scripts\n        \"build:scully\": \"cross-env NODE_ENV=scully ng build -c scully && npx scully --scanRoutes\",\n        \"build:production\": \"cross-env NODE_ENV=production ng build -c production && npx scully --scanRoutes\",\n        \"scully\": \"npx scully --\",\n        \"scully:serve\": \"npx scully serve --\"\n    }\n}\n```\n\nI'm using `cross-env` to assist with Tailwind purging, but as of this writing seems to no longer be needed for\nTailwind projects targeting version 3 and up. With our scripts in place, let's go ahead and run the Scully command to\ngenerate\na static version of our Angular app:\n\n```shell\nnpm run scully\n```\n\nOnce the Scully build completes, take a look at your `/dist` output folder. We should see a\n`dist/static` folder with `ping` and `data` subdirectories that contain single `index.html` files.\nThe Scully dev server will _serve_ these static HTML files with all of our Angular code functionality\nfully intact. Pretty neat, huh? Let's run the dev server:\n\n```shell\nnpm run scully:serve\n```\n\nand once the server is spun up, if we navigate to `localhost:1668` in our browser, we should see the same\npage that is being served by our usual `ng serve` command! Inspecting the page, we see a fully generated static HTML\npage, markup and all.\n\n## Putting it all together\n\nWith our Scully server running, we should still be able to hit our Netlify functions server (assuming it's still\nrunning), receiving the same responses we saw from serving the de-Scully'd version of our application. While it may\nnot _seem_ like much, let's take a second to realize what's going on:\n\n-   We have a serverless backend stood up ready to receive HTTP requests and do any server related processing with\n    _zero_ backend frameworks in place\n-   We have a fully static version of our Angular application running in the browser optimized for SEO and indexing by\n    search engines\n-   To top it off, we're doing all of this within the same repository code!\n\nWhile we're only scratching the surface of what's possible with Angular, Scully, and Netlify Functions, the DX\noffered by these tools allows us to quickly develop and ship static websites with rich functionality and data fetching\ncapability, all without implementing an entirely separate API layer in another framework. Our solution is _also_\nfully ready to deploy to Netlify, where our serverless functions will kick in, handling requests from our static Angular\napp deployed to the DSN of our choice. If you're looking to\nembrace the JAMstack with Angular, take Scully and Netlify Functions for a spin!\n",
      "html": "<p>There's no denying that the <a href=\"https://jamstack.org/\">JAMstack</a> has taken the traditional web development world by\nstorm and turned our previous tried and true development models on their heads. The JAMstack is not <em>new</em>, per se,\nbut has become an increasingly popular approach to how we write and deploy web applications in the modern developer\nlandscape. With frameworks like Next.js, Nuxt, Gatsby, Hugo, and many others, we as developers have been given the\ntools to develop entirely serverless applications that run as static web apps in the browser.</p>\n<blockquote>\n<p>Embrace \"serverless\" here with big air quotes - you're still running on someone's server, and your choice of hosting\nprovider will more than likely dictate just how \"serverless\" you can be</p>\n</blockquote>\n<p>As Angular developers, we love our framework and everything it provides. Unfortunately, turning your Angular\napplication into a static web app is not as simple as one may like.\nWhile <a href=\"https://angular.io/guide/universal\">Angular Universal</a> does give us an officially supported devtool to turn our\nAngular apps into statically rendered pages, I've found it a bit on the configure-y side and not as simple to use as I'd\nlike compared to other frameworks like Next.js.</p>\n<p>What I'd wished I found earlier before going down my Angular JAMstack journey is <a href=\"https://scully.io/\">Scully</a>, the\nAngular static site generator I never knew I needed and JAMstack tool that, quite frankly, is just plain fun to use.</p>\n<h2>JAMstack?</h2>\n<p>Yep, the JAMstack: <strong>J</strong>avaScript, <strong>A</strong>PIs, and <strong>M</strong>arkup. There's a thriving <a href=\"https://jamstack.org/\">community</a> of\ndevelopers embracing the JAMstack, so defer to them for the nitty gritty details. The JAMstack follows a general\nartchitecture:</p>\n<ul>\n<li><strong>M</strong>arkup is pre-rendered at build time and served as static HTML and CSS</li>\n<li><strong>J</strong>avaScript still provides all its native interactivity with the browser, while not bogging down the initial\nrendering of our apps with retrieving JS bundles</li>\n<li><strong>A</strong>PIs that provide data, processing, and whatever else we need from a backend server</li>\n</ul>\n<p>In essence, JAMstack principles align to provide fast, reliable, scalable, and performant web applications for the\nmodern browser.</p>\n<p>What this means in practice when you write framework code for say, Next.js, we write our normal React code we'd normally\nwrite, with pages being rending in a static context - every element on the page is inspect-able in the browser, which\nmeans much more easily indexable by search engines.</p>\n<h2>What is Scully?</h2>\n<p>Scully is a tool/framework developed by community members for Angular that turns your Angular application into a\nstatically rendered website, with fully indexable HTML allowing for all the SEO optimization your heart desires while\nstill delivering on the development workflow we Angular developers love about the framework. While I claim to be no\nScully expert, I've built a few side project client sites using Scully, while having re-written this exact blog you're\nreading from Next to Scully.</p>\n<p>Scully works on the premise of analyzing your application's routing and compiling a separate build artifact containing\nall scanned routes as individual <code>index.html</code> pages. While there's a lot more that goes on under the hood and a bit out\nof my knowledge realm, Scully effectively allows us to turn our Angular SPAs into fully static sites that load quickly\nto the browser, vastly improve SEO, allows improved search engine indexing, and the list goes on.</p>\n<p>The Scully team has great documentation on using the tool, alongside a plethora of build plugins, both from Scully\nand the community, allowing you to tap into the Scully lifecycle at different points in the build process to\ncustomize\nthe generated static files to your need.</p>\n<h2>Hosting with Netlify</h2>\n<p>With Scully generating an entirely static version of our application, it becomes trivial to host such files on any\nstatic site hosting service. While there's a lot of great services out there, I prefer Netlify as it allows us to tap\ninto <a href=\"https://functions.netlify.com/\">Netlify Functions</a>, serving as the <code>A</code> in JAMstack and giving us the ability to\nbuild serverless functions that our static Angular applications can call into, performing any work you'd normally do on\nthe server. Using Netlify, not <em>only</em> are we able to host our Angular apps as fully static sites, but we can also build\nout a mesh of serverless functions that act as a backend-lite for any of our API-like needs! Who said you can't have\nyour cake and eat it too?</p>\n<h2>Getting started with Scully</h2>\n<p>This all sounds great, but let's jump into some code to see how we can make our Angular JAMstack dream a reality.\nLet's kick things off by creating a new Angular application with routing:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> new</span><span style=\"color:#C98A7D\"> scully-netlify-angular-example</span><span style=\"color:#C99076\"> --routing</span></span></code></pre></figure>\n<p>Scully utilizes the Angular router to crawl all of our application routes, allowing it to create individual servable\nHTML files by reading our router configuration. With our code scaffolding in place, let's add some simple components and\na few pages:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B8A965\">cd</span><span style=\"color:#C98A7D\"> scully-netlify-angular-example</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> c</span><span style=\"color:#C98A7D\"> components/home</span><span style=\"color:#C99076\"> --skip-tests</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> c</span><span style=\"color:#C98A7D\"> components/ping</span><span style=\"color:#C99076\"> --skip-tests</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> c</span><span style=\"color:#C98A7D\"> components/data</span><span style=\"color:#C99076\"> --skip-tests</span></span></code></pre></figure>\n<p>We're skipping testing for the purposes of this post. With our components in place, let's add them to\nour <code>app-routing.module.ts</code>:</p>\n<h4>app-routing.module.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NgModule</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> RouterModule</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Routes</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/router</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DataComponent</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HomeComponent</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> PingComponent</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@components</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">routes</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Routes</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        path</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        component</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">HomeComponent</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        path</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">ping</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        component</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">PingComponent</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        path</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">data</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        component</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">DataComponent</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">];</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">NgModule</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    imports</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">RouterModule</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">forRoot</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">routes</span><span style=\"color:#666666\">)],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    exports</span><span style=\"color:#666666\">: [</span><span style=\"color:#BD976A\">RouterModule</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> AppRoutingModule</span><span style=\"color:#666666\"> {}</span></span></code></pre></figure>\n<p>With routes in place, let's implement a few services that will help facilitate talking to our Netlify functions\n(more on those in a bit). Let's implement two services: one for the <code>PingComponent</code> that will consume a <code>PingService</code> to\n<em>ping</em> the server, and one for <code>DataComponent</code> to offload the responsibility of sending and receiving data from the\nserver.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> s</span><span style=\"color:#C98A7D\"> services/ping</span><span style=\"color:#C99076\"> --skip-tests</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> s</span><span style=\"color:#C98A7D\"> services/data</span><span style=\"color:#C99076\"> --skip-tests</span></span></code></pre></figure>\n<p>Since we'll be utilizing a bit with <code>Observable</code>s, let's implement a service to clean up our streams once a component is\ndestroyed:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> s</span><span style=\"color:#C98A7D\"> services/unsubscribe</span><span style=\"color:#C99076\"> --skip-tess</span></span></code></pre></figure>\n<p>While we're at it, let's make a quick service to help us with our SEO to set page titles, update <code>&#x3C;meta></code>s, etc.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> g</span><span style=\"color:#C98A7D\"> s</span><span style=\"color:#C98A7D\"> services/document</span><span style=\"color:#C99076\"> --skip-tests</span></span></code></pre></figure>\n<p>With our services in place and having no further dependencies (outside the standard Angular library), let's implement\ntheir code. First, our <code>UnsubscribeService</code>:</p>\n<h4>unsubscribe.service.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnDestroy</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Subject</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> UnsubscribeService</span><span style=\"color:#CB7676\"> extends</span><span style=\"color:#80A665\"> Subject</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">void</span><span style=\"color:#666666\">></span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnDestroy</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnDestroy</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">next</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">complete</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>As we can see, our <code>UnsubscribeService</code> is no more than a glorified injectable <code>Subject</code> that emits nothing and simply\ncloses itself on service destruction. This will be helpful to close connections to <code>Observable</code>s we're <code>.subscribe()</code>ing\nto within our components. Next, let's put our <code>PingService</code> code in place:</p>\n<h4>ping.service.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> HttpClient</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/common/http</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ServerResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> catchError</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> delay</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> map</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> of</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> environment</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@environment</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providedIn</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">root</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> PingService</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> http</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">HttpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    pingServer</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">baseUrl</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> `</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">environment</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">functionsBaseDomain</span><span style=\"color:#666666\">}${</span><span style=\"color:#C98A7D\">environment</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">functionsBasePath</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">http</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">ServerResponse</span><span style=\"color:#666666\">>(</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">baseUrl</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">/ping</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">).</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            map</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            delay</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1000</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            catchError</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">log</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#80A665\"> of</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Whoops... an error occurred :(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Next, our <code>DataService</code>:</p>\n<h4>data.service.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> HttpClient</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/common/http</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> environment</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@environment</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> EMPTY</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> catchError</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> delay</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> map</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ServerResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providedIn</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">root</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DataService</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> http</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">HttpClient</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    sendDataToServer</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">name</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">baseUrl</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> `</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">environment</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">functionsBaseDomain</span><span style=\"color:#666666\">}${</span><span style=\"color:#C98A7D\">environment</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">functionsBasePath</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">http</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">post</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">ServerResponse</span><span style=\"color:#666666\">>(</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">baseUrl</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">/data</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            })</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                delay</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1000</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                map</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                catchError</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">log</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                    return</span><span style=\"color:#BD976A\"> EMPTY</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and finally,</p>\n<h4>document.service.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DOCUMENT</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/common</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Inject</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Injectable</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Meta</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> MetaDefinition</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/platform-browser</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Injectable</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    providedIn</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">root</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DocumentService</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#BD976A\"> rootTitle</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Scully, Angular, and Netlify</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        @</span><span style=\"color:#80A665\">Inject</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">DOCUMENT</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#BD976A\"> document</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Document</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> meta</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Meta</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    resetTitle</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">document</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">rootTitle</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">meta</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">updateTag</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            name</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            content</span><span style=\"color:#666666\">: </span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">rootTitle</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    updateTitle</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">pageTitle</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">):</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">document</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> `</span><span style=\"color:#666666\">${</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">rootTitle</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> - </span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">pageTitle</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">meta</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">updateTag</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            name</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            content</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">pageTitle</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    setMetaTags</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">tags</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">MetaDefinition</span><span style=\"color:#666666\">[])</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        tags</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">map</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">t</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            const </span><span style=\"color:#BD976A\">existingTag</span><span style=\"color:#666666\"> =</span><span style=\"color:#C99076\"> this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">meta</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">getTag</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">t</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">id</span><span style=\"color:#CB7676\"> ?? </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">existingTag</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">                this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">meta</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">addTag</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">t</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>These services will be responsible for sending HTTP requests to our serverless functions.\nLet's add some code to our <code>ping</code> component:</p>\n<h4>ping.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DocumentService</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> PingService</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> UnsubscribeService</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@services</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> takeUntil</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">app-ping</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./ping.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> PingComponent</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnInit</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    message</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">pinging the server...</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> documentService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">DocumentService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> pingService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">PingService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> unsubscribe$</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">UnsubscribeService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnInit</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">documentService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">updateTitle</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">ping</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">documentService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">setMetaTags</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                name</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">author</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                content</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Joey McKenzie</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">pingService</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">pingServer</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">takeUntil</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">unsubscribe$</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                (</span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    (</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> `</span><span style=\"color:#C98A7D\">response from server: </span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">message</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and the markup:</p>\n<h4>ping.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">{{ message }}</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p><code>PingComponent</code> uses <code>PingService</code> to <em>ping</em> the server for a response, then display said response in our browser.\nNext, <code>data.component.ts</code>:</p>\n<h4>data.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DocumentService</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> DataService</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> UnsubscribeService</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@services</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> finalize</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> takeUntil</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">app-data</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./data.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> DataComponent</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnInit</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    loading</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    response</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> documentService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">DocumentService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> dataService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">DataService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        private</span><span style=\"color:#BD976A\"> unsubscribe$</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">UnsubscribeService</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnInit</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">documentService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">updateTitle</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">data</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    loadData</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">loading</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> true</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">dataService</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">sendDataToServer</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Joey</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                takeUntil</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">unsubscribe$</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                finalize</span><span style=\"color:#666666\">(()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> (</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">loading</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">)),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            )</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            .</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> (</span><span style=\"color:#C99076\">this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I'm using alias imports in <code>@environment</code>, <code>@services</code>, and <code>@components</code> to make my import paths look tolerable. We do\nso by adding a <code>paths</code> node to <code>compilerOptions</code>:</p>\n<h4>tsconfig.json</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">/* To learn more about this file see: https://angular.io/config/tsconfig. */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // ...other options,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#C98A7D\">compilerOptions</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">:</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // ...some more options,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">paths</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    :</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#C98A7D\">@components</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        :</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            [</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">src/app/components/index.ts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                \"</span><span style=\"color:#C98A7D\">@services</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        :</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            [</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">src/app/services/index.ts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                \"</span><span style=\"color:#C98A7D\">@environment</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        :</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            [</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">src/environments/environment.ts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Where each <code>index.ts</code> file <code>exports</code> out either services or components in their relative directories and exports our\napplication environment configuration.</p>\n<p>With that out of the way, let's wire up our components in the <code>HomeComponent</code> and add some links to navigate between\npages:</p>\n<h4>home.component.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Component</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> OnInit</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@angular/core</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> DocumentService</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../../services/document.service</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#80A665\">Component</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    selector</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">app-home</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    templateUrl</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./home.component.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">})</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> HomeComponent</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> OnInit</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    constructor</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#BD976A\"> documentService</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">DocumentService</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ngOnInit</span><span style=\"color:#666666\">():</span><span style=\"color:#5DA994\"> void</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        this</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">documentService</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">resetTitle</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and with markup,</p>\n<h4>home.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex flex-row space-x-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span><span style=\"color:#BD976A\"> routerLink</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/ping</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Ping</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span><span style=\"color:#BD976A\"> routerLink</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/data</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Data</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>While we're at it, let's go ahead and update <code>app.component.html</code> with some routing:</p>\n<h4>app.component.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">router-outlet</span><span style=\"color:#666666\">>&#x3C;/</span><span style=\"color:#4D9375\">router-outlet</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex flex-row justify-center pt-12</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span><span style=\"color:#BD976A\"> routerLink</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex items-center rounded-md border border-transparent bg-red-500 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Home</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">a</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>I'm using Tailwind out of habit, and not required for the purposes of this example by any means. Let's kick off our dev\nserver and we should see after navigating to <code>localhost:4200</code> a page in our browser with three buttons: ping, data, and\nhome.</p>\n<p><img src=\"/images/jamstack-angular-apps-with-scully/home_page.png\" alt=\"Home page\"></p>\n<p>With devtools open, if we click the ping button that routes us to the page with our <code>PingComponent</code>, we get an error due\nto a failed HTTP request to <code>http://localhost:9999/.netlify/functions/ping</code>, and the same happens when we click the data\nbutton to navigate to the page with our <code>DataComponent</code> and click the <code>Load data</code> button. Our services are correctly\ncalling out to our serverless functions, but there's one problem: we don't have any functions!</p>\n<h2>Going serverless with Netlify Functions</h2>\n<p>If you're familiar with static site hosting services, <a href=\"https://www.netlify.com/\">Netlify</a> is another one of those\nwith much, much more to offer than simple site hosting. One of my favorite features of Netlify\nis <a href=\"https://functions.netlify.com/\">Netlify Functions</a> - Netlify's version of serverless functions that utilize AWS\nlambda functions behind the scenes to provide an easy way to integrate backend functionality with our statically served\nweb apps. I've found serverless functions helpful in quite a few different ways:</p>\n<ul>\n<li>Sending out emails using email API services</li>\n<li>Integrating with third-party APIs to do some processing for frontend requests</li>\n<li>Serving simple data to be consumed from the frontend</li>\n<li>Heck, even persisting to database based on requests from our frontend applications</li>\n</ul>\n<p>Our serverless functions will <em>serve</em>, more or less, as an API-lite for our static served Angular Scully application\nthat will be hosted in Netlify, allowing us to connect our outgoing HTTP calls from the frontend to the backend\nfunctions listening for requests. Functions work on the premise of running code at a specified endpoint that receive\nHTTP events (methods, headers, request body, etc.) and the context of the HTTP request (metadata about the function\nitself). There's a lot we can customize around the way our functions are detected, served, and ran, but we'll utilize\nall the defaults for now.</p>\n<p>To get started writing functions, let's go ahead and install the Netlify Functions package and the Netlify CLI to help\nus write and serve our functions:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C98A7D\"> @netlify/functions</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C99076\"> --save-dev</span><span style=\"color:#C98A7D\"> netlify-cli</span><span style=\"color:#758575DD\"> # -g if you'd like to install globally</span></span></code></pre></figure>\n<p>Using the CLI, let's add an npm script in our <code>package.json</code> we can run to start our function server that will detect\nany code changes we apply while writing our functions, recompile them, and serve them up for our frontend to call into:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // ...other stuff</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">scripts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // ...other scripts</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">functions:serve</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">netlify functions:serve</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>If we run:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> run</span><span style=\"color:#C98A7D\"> functions:serve</span></span></code></pre></figure>\n<p>we should see a message in our console along the lines of ready to serve, but no functions available. Since we've haven'\nt provided any customized configuration for our functions, the CLI assumes your functions exist under\na <code>/netlify/functions</code> folder at the root of your project. Let's implement a <code>/ping</code> GET endpoint using TypeScript that\nwill tap into the functionality provided by the <code>@netlify/functions</code> package to start listening for requests:</p>\n<h4>netlify/functions/ping.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Handler</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@netlify/functions</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    getErrorResponse</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    getHeaders</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    HttpStatus</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    isWhitelistedDomain</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ServerResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#80A665\">handler</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Handler</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> async </span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">headers</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#CB7676\"> ?? </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#80A665\">isWhitelistedDomain</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">))</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Forbidden</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">httpMethod</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">toLowerCase</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> !== </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">get</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">MethodNotAllowed</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">ServerResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        success</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        message</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">pong</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        statusCode</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">200</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        body</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">JSON</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">stringify</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        headers</span><span style=\"color:#666666\">: </span><span style=\"color:#80A665\">getHeaders</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> handler</span><span style=\"color:#666666\"> };</span></span></code></pre></figure>\n<p>I've added some common code that I'll be sharing between functions and have moved that to a <code>lib</code> folder with a\nsingle <code>index.ts</code> file:</p>\n<h4>netlify/lib/index.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Response</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@netlify/functions/dist/function/response</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ServerResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">enum</span><span style=\"color:#5DA994\"> HttpStatus</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    Forbidden</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">403</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    MethodNotAllowed</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">405</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    InternalServerError</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">500</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#BD976A\">WHITELIST_DOMAINS</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    ''</span><span style=\"color:#666666\">,</span><span style=\"color:#758575DD\"> // Postman doesn't send request from an origin, allow it through (DON'T DO THIS IN PRODUCTION)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    '</span><span style=\"color:#C98A7D\">http://localhost:4200</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#758575DD\"> // Whitelist our Angular dev serve for local development</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    '</span><span style=\"color:#C98A7D\">http://localhost:1668</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#758575DD\"> // Whitelist our Scully server for local Scully development</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    '</span><span style=\"color:#C98A7D\">https://asdfasdf.netlify.app</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#758575DD\"> // Whitelist our production server deployed to Netlify</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">];</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">function</span><span style=\"color:#80A665\"> getHeaders</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">):</span><span style=\"color:#666666\"> {</span><span style=\"color:#666666\"> [</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">]: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\"> }</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        '</span><span style=\"color:#C98A7D\">Content-Type</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">application/json</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        '</span><span style=\"color:#C98A7D\">Access-Control-Allow-Origin</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        '</span><span style=\"color:#C98A7D\">Access-Control-Allow-Headers</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">*</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">function</span><span style=\"color:#80A665\"> isNullOrUndefined</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    objectToValidate</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">unknown</span><span style=\"color:#666666\"> | </span><span style=\"color:#CB7676\">null</span><span style=\"color:#666666\"> | </span><span style=\"color:#CB7676\">undefined</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">):</span><span style=\"color:#5DA994\"> boolean</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> objectToValidate</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#CB7676\"> ||</span><span style=\"color:#BD976A\"> objectToValidate</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#CB7676\"> undefined</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">function</span><span style=\"color:#80A665\"> isWhitelistedDomain</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">):</span><span style=\"color:#5DA994\"> boolean</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">existingDomain</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> WHITELIST_DOMAINS</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">find</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">d</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> d</span><span style=\"color:#CB7676\"> === </span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#CB7676\"> !</span><span style=\"color:#80A665\">isNullOrUndefined</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">existingDomain</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">function</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">statusCode</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">HttpStatus</span><span style=\"color:#666666\">):</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let </span><span style=\"color:#BD976A\">message</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    switch</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">statusCode</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        case</span><span style=\"color:#BD976A\"> HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Forbidden</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">That method is not allowed for this endpoint.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            break</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        case</span><span style=\"color:#BD976A\"> HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">MethodNotAllowed</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Domain is forbidden from accessing.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            break</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        default</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">An invalid request was made, please try again.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        statusCode</span><span style=\"color:#666666\">: </span><span style=\"color:#CB7676\">+</span><span style=\"color:#BD976A\">statusCode</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        body</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">JSON</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">stringify</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            success</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        } </span><span style=\"color:#4D9375\">as</span><span style=\"color:#5DA994\"> ServerResponse</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        headers</span><span style=\"color:#666666\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">Content-Type</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">application/json</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> getErrorResponse</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> getHeaders</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> isWhitelistedDomain</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> HttpStatus</span><span style=\"color:#666666\"> };</span></span></code></pre></figure>\n<p>Nothing too complicated, just a few simple helpers to facilitate validating allowed origins for CORS, some common\nresponse generators, and a method to grab some default headers for each response. I've also reused the <code>ServerResponse</code>\ntype under the <code>types.ts</code> file at the root of our project:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> type</span><span style=\"color:#5DA994\"> ServerResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    message</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    success</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>Since our project is effectively just a big TypeScript solution (Angular frontend, TS-based serverless functions),\nwe can import any <code>.ts</code> files into our serverless functions, given it runs in the correct context. I wouldn't want\nto reference any <code>@angular/*</code> imports, for obvious reasons. With our <code>ServerResponse</code> in place, we've created a\ncommon statically typed-model between the front and backend of our project!</p>\n<p>As you might have guessed, the names and pathing of our function <code>.ts</code> files <em>does</em> matter in our case. There's a few\nsimple rules to adhere to when creating function endpoints</p>\n<ul>\n<li><code>netlify/functions/ping.ts</code> would receive HTTP request matching the route <code>/.netlify/functions/ping</code></li>\n<li><code>netlify/functions/ping/index.ts</code> would <em>also</em> receive HTTP request matching the route <code>/.netlify/functions/ping</code></li>\n<li><code>netlify/functions/ping/ping.ts</code> would, again, <em>also</em> receive HTTP request matching the\nroute <code>/.netlify/functions/ping</code></li>\n</ul>\n<p>Now that we have our first function in place, let's go ahead and start our function server:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> run</span><span style=\"color:#C98A7D\"> functions:serve</span></span></code></pre></figure>\n<p>and in the terminal, we should see a message like the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> scully-netlify-angular-example@0.0.0 netlify:serve</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> netlify functions:serve</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">◈</span><span style=\"color:#C98A7D\"> Ignored</span><span style=\"color:#C98A7D\"> general</span><span style=\"color:#C98A7D\"> context</span><span style=\"color:#C98A7D\"> env</span><span style=\"color:#C98A7D\"> var:</span><span style=\"color:#C98A7D\"> LANG</span><span style=\"color:#DBD7CAEE\"> (defined </span><span style=\"color:#C98A7D\">in</span><span style=\"color:#C98A7D\"> process</span><span style=\"color:#DBD7CAEE\">)</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">◈</span><span style=\"color:#C98A7D\"> Loaded</span><span style=\"color:#C98A7D\"> function</span><span style=\"color:#C98A7D\"> ping.</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">◈</span><span style=\"color:#C98A7D\"> Functions</span><span style=\"color:#C98A7D\"> server</span><span style=\"color:#C98A7D\"> is</span><span style=\"color:#C98A7D\"> listening</span><span style=\"color:#C98A7D\"> on</span><span style=\"color:#4C9A91\"> 9999</span></span></code></pre></figure>\n<p>To test out that our functions are working correctly, let's startup Postman and send a request to\n<code>http://localhost:9999/.netlify/functions/ping</code> and see what we get:</p>\n<p><img src=\"/images/jamstack-angular-apps-with-scully/postman_ping.png\" alt=\"Postman ping response\"></p>\n<p>We've got a response! Now that our GET endpoint is working, let's add a POST endpoint that will receive requests with\ndata in the body and return data based on it:</p>\n<h4>netlify/functions/data/index.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> Handler</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@netlify/functions</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    getErrorResponse</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    getHeaders</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    HttpStatus</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    isWhitelistedDomain</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../../lib</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ServerResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const </span><span style=\"color:#80A665\">handler</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Handler</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> async </span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">headers</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#CB7676\"> ?? </span><span style=\"color:#C98A7D99\">''</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#80A665\">isWhitelistedDomain</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">))</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">Forbidden</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">method</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">httpMethod</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">toLowerCase</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">method</span><span style=\"color:#CB7676\"> !== </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">options</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> &#x26;&#x26; </span><span style=\"color:#BD976A\">method</span><span style=\"color:#CB7676\"> !== </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">post</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">MethodNotAllowed</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * Because we have a more complex request (JSON being sent over the wire),</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * an options call is made by the Angular HTTP client service to check with our function</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * that it's okay to receive requests in the current context.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">method</span><span style=\"color:#CB7676\"> === </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">options</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            statusCode</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">200</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            headers</span><span style=\"color:#666666\">: </span><span style=\"color:#80A665\">getHeaders</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">body</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">requestBody</span><span style=\"color:#666666\">: { </span><span style=\"color:#BD976A\">name</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\"> } =</span><span style=\"color:#BD976A\"> JSON</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">parse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">event</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">body</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const </span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">ServerResponse</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            success</span><span style=\"color:#666666\">: </span><span style=\"color:#4D9375\">true</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            message</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#C98A7D\">Hello </span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">requestBody</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">name</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">!</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            statusCode</span><span style=\"color:#666666\">: </span><span style=\"color:#4C9A91\">200</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            body</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">JSON</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">stringify</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            headers</span><span style=\"color:#666666\">: </span><span style=\"color:#80A665\">getHeaders</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">origin</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#80A665\"> getErrorResponse</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">HttpStatus</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">InternalServerError</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> handler</span><span style=\"color:#666666\"> };</span></span></code></pre></figure>\n<p>Utilizing our helper methods again, since this is a POST request with more complex request headers (as we can\ninspect in the network tab attached for us using <code>HttpClient</code>), the client will make a pre-flight OPTIONS call to our\nfunction endpoint to essentially ask the question, \"hey, this client application wants to make a request to you, is that\ncool?\". We kick out any requests that are not POSTs or OPTIONs (again, normal HTTP framework code would take care of\nthis for you, but we're running a bare bones server here) and accept the POST request body, returning the value of\nthe <code>name</code> attribute given to us in a simple greeting. By adding this function with our server still running, Netlify\nrecognizes a new function was added, and then compiles the output and serves it up under the <code>/.netlify/functions/data</code>\nendpoint. Let's give it a try with Postman:</p>\n<p><img src=\"/images/jamstack-angular-apps-with-scully/postman_data.png\" alt=\"Postman data response\"></p>\n<p>Nice! Now with our functions fully operational and our server running, let's start our Angular server (if it wasn't\nalready running), and watch the magic happen:</p>\n<p><a href=\"/images/jamstack-angular-apps-with-scully/scully-jamstack-running.webm\">Angular Netlify functions</a></p>\n<p>We've got ourselves a working solution! So far we've spun up our Angular application that calls into our serverless\nfunctions, but we're missing one final piece to <em>truly</em> be considered JAMstack: Scully.</p>\n<h2>Adding Scully to the project</h2>\n<p>To get started, the Scully team has made it dead simple to add static site generation to our\nAngular apps with a simple schematic. With the terminal open, let's run said schematic:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">ng</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> @scullyio/init</span></span></code></pre></figure>\n<p>The schematic will add a few Scully dependencies to our project, as well as generate\na <code>scully.{{projectName}}. config.ts</code> file with the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> ScullyConfig</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@scullyio/scully</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/** this loads the default render plugin, remove when switching to something else. */</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">@scullyio/scully-plugin-puppeteer</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">config</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">ScullyConfig</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    projectRoot</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./src</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    projectName</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">scully-netlify-angular-example</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    outDir</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./dist/static</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    routes</span><span style=\"color:#666666\">: {},</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>To make things easy on us, let's add a few build scripts to our <code>scripts</code> section in our <code>package.json</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">scripts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // ...other scripts</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">build:scully</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">cross-env NODE_ENV=scully ng build -c scully &#x26;&#x26; npx scully --scanRoutes</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">build:production</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">cross-env NODE_ENV=production ng build -c production &#x26;&#x26; npx scully --scanRoutes</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">scully</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">npx scully --</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">scully:serve</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">npx scully serve --</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I'm using <code>cross-env</code> to assist with Tailwind purging, but as of this writing seems to no longer be needed for\nTailwind projects targeting version 3 and up. With our scripts in place, let's go ahead and run the Scully command to\ngenerate\na static version of our Angular app:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> run</span><span style=\"color:#C98A7D\"> scully</span></span></code></pre></figure>\n<p>Once the Scully build completes, take a look at your <code>/dist</code> output folder. We should see a\n<code>dist/static</code> folder with <code>ping</code> and <code>data</code> subdirectories that contain single <code>index.html</code> files.\nThe Scully dev server will <em>serve</em> these static HTML files with all of our Angular code functionality\nfully intact. Pretty neat, huh? Let's run the dev server:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> run</span><span style=\"color:#C98A7D\"> scully:serve</span></span></code></pre></figure>\n<p>and once the server is spun up, if we navigate to <code>localhost:1668</code> in our browser, we should see the same\npage that is being served by our usual <code>ng serve</code> command! Inspecting the page, we see a fully generated static HTML\npage, markup and all.</p>\n<h2>Putting it all together</h2>\n<p>With our Scully server running, we should still be able to hit our Netlify functions server (assuming it's still\nrunning), receiving the same responses we saw from serving the de-Scully'd version of our application. While it may\nnot <em>seem</em> like much, let's take a second to realize what's going on:</p>\n<ul>\n<li>We have a serverless backend stood up ready to receive HTTP requests and do any server related processing with\n<em>zero</em> backend frameworks in place</li>\n<li>We have a fully static version of our Angular application running in the browser optimized for SEO and indexing by\nsearch engines</li>\n<li>To top it off, we're doing all of this within the same repository code!</li>\n</ul>\n<p>While we're only scratching the surface of what's possible with Angular, Scully, and Netlify Functions, the DX\noffered by these tools allows us to quickly develop and ship static websites with rich functionality and data fetching\ncapability, all without implementing an entirely separate API layer in another framework. Our solution is <em>also</em>\nfully ready to deploy to Netlify, where our serverless functions will kick in, handling requests from our static Angular\napp deployed to the DSN of our choice. If you're looking to\nembrace the JAMstack with Angular, take Scully and Netlify Functions for a spin!</p>"
    },
    "_id": "2022/jamstack-angular-apps-with-scully-and-netlify.md",
    "_raw": {
      "sourceFilePath": "2022/jamstack-angular-apps-with-scully-and-netlify.md",
      "sourceFileName": "jamstack-angular-apps-with-scully-and-netlify.md",
      "sourceFileDir": "2022",
      "contentType": "markdown",
      "flattenedPath": "2022/jamstack-angular-apps-with-scully-and-netlify"
    },
    "type": "Post",
    "url": "/blog/2022/jamstack-angular-apps-with-scully-and-netlify"
  },
  {
    "title": "React data fetching with RxJS",
    "description": "Use RxJS to implement simple data fetching, making ALL THE THINGS reactive!",
    "pubDate": "2022-03-03T08:00:00.000Z",
    "category": "react",
    "heroImage": "/images/react-data-fetching/react-data-fetching-meme.jpg",
    "draft": false,
    "keywords": [
      "react",
      "nextjs",
      "rxjs"
    ],
    "body": {
      "raw": "\nData fetching with React offers a wide selection of tools to do the job, from simple promises, to more sophisticated\ncaching libraries like [react-query](https://react-query.tanstack.com/) and [swr](https://swr.vercel.app/). With a\nplethora of options, developers have their choice of favorite fetching tools to get the job done and make our\napplications performant on all fronts. As an Angular developer, I make heavy usage of [RxJS](https://rxjs.dev/)\nwhere I can, and luckily Angular treats the library as a first class citizen with many Angular internals (router\nevents, the `HttpClient`, etc.), making use of `Observables` to stream data in a reactive way.\n\nLately, however, I've taken the React-fork-in-the-road and have been experimenting with data fetching tools and\nhooks for the React/next.js applications I've been working on. While, again, there are many tools that solve the\nproblem of data fetching and mutation made by people much, _much_ smarter than myself, I was looking to integrate\nRxJS into the tools I use for such a task. What I found, coincidentally, was the perfect marriage between my data\nfetching library of choice, Vercel's [swr](https://swr.vercel.app/) (a gift from the folks behind next.js), and\n`fetch`-based `Observables`.\n\nWhile [we can likely expect subscriptions to data sources from swr](https://github.com/vercel/swr/pull/1263)\nsometime soon, I've found the utility offered by RxJS allows for incredible control over emissions of stream data to\nsubscribers that I would prefer _not_ to give up, if given the chance. While I'll definitely experiment with\nsubscriptions coming to swr, I decided to sandbox around with RxJS, next.js, and swr to see what was currently\npossible with data fetching using `Observables` - what I found was _quite_ interesting.\n\n## Starting with tradition\n\nTo keep things simple, I'll run through four scenarios using a sample next.js application:\n\n1. SSR with traditional promises\n2. SSR with `async`/`await`\n3. SSR with RxJS\n4. CSR with RxJS\n\nOkay, timeout. SSR? CSR?\n\n-   SSR - **S**erver-**s**ide **r**ending (or prerendering), the act of rendering the template data into said\n    template _on_ the server before handing it back to the client. In essence, retrieving all the necessary data for an\n    HTML page then rendering said data in the markup and handing it back to the browser.\n-   CSR - **C**lient-**s**ide **r**endering, the act of rending template data _after_ the route has been served\n    to/rendered by the client, or simply making our calls to fetch data after the markup is rendered, which we'll update\n    once the data has been fetched.\n\nWithin the context of next.js, what this means is that we'll have three separate page routes that will invoke\n`getServerSideProps` to fetch data for our page before serving it up to the client. This content is rendered on the\nserver, meaning the client receives a ready-to-go HTML document with all the appropriate data already in markup.\n\nIn our CSR scenario, we'll utilize `swr` as a data fetching hook to retrieve data for us once the page has been served,\nwhere our fetching will happen once the page loads, meaning there will be two renders: one on page load, and again\nonce the data is available and the render hook forces a re-render of the page.\n\nThere's one glaring question we should probably take a crack at answering before going further: **why use RxJS in the\nfirst place?**\n\n## RxJS in a nutshell\n\nComing from the Angular world, devs have more than likely been heavily exposed to RxJS due to the\nframework's tight integration with the library. RxJS implements, more or less, the publisher/subscriber pattern (or\npub/sub for short) to allow _subscribers_ of _publishers_ to tune into essential streams of data they may be\ninterested in. In plain english, instead of asking for some work to be done with the `Promise` of it completing sometime\nin the near future and `await`ing the data's arrival, we listen in on select streams of data that emit things we're\ninterested in as\nthey happen -\nwe're simply _reacting_ to data as it's published through the stream. In code:\n\n```js\nimport { interval, take } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nconst dataSource$ = interval(1000);\n\ndataSource$\n    .pipe(\n        take(5),\n        finalize(() => console.log('data captured!')),\n    )\n    .subscribe(console.log);\n\n/**\n * Output:\n *\n * 0\n * 1\n * 2\n * 3\n * 4\n * data captured!\n */\n```\n\nWithout going too deep into RxJS operators (the official documentation does a better job than I could ever do at\nexplaining operator functions), we have a source of data, `dataSource$`, that emits numbers every frame for 1000\nframe, with a frame in this context being one second. We're `.subscribe`ing to those emissions, `take`ing only the\nfirst five, then closing our stream to listen as\nwe're only interested in the five emissions. Our `dataSource$` in this case is an `Observerable`, a foundational\nconstruct in pub/sub that is the publishing source for subscribers. With RxJS, `Observable`s are just streams, and\nwon't begin _emitting_ data until a subscriber, well, `.subscribe()`s to the stream.\n\nWithin the scope of this article, we're _barely_ scraping the surface of what RxJS is capable of and what benefits\nit may offer over more traditional data flow models in our code. I'll leave it to the RxJS experts to speak on the\nintricacies of the library as we'll mainly be focusing on fetching data within the context of RxJS.\n\n## Getting started\n\nOkay, enough talk. Let's code! For our demo, we'll tap into the amazing [GitHub API](https://docs.github.com/en/rest)\nto explore repositories. I've spun up a simple next.js app:\n\n```shell\nnpx create-next-app@latest --ts react-rxjs-data-fetching-demo\n```\n\nI'm using next.js in this case as we want to showcase data fetching in both the CSR and SSR contexts. Everything\nwe'll do within the scope of this blog post is similarly applicable to your average react project. With our project\nscaffolded, let's add a few dependencies:\n\n```shell\nnpm install swr rxjs\n```\n\nI'm partial to swr for data fetching, and you're more than welcome to use your own hook fetching library. I've also\nadded [Tailwind](https://tailwindcss.com/) out of habit in order to make things not look like a webpage from 1995.\nWith our dependencies installed, let's add a page for our first scenario: SSR with the tried-and-true\n`Promise`-based data fetching:\n\n#### pages/with-promises.tsx\n\n```tsx\nimport { GetServerSideProps, NextPage } from 'next';\nimport { useEffect } from 'react';\nimport { githubBaseUrl } from '../lib/constants';\nimport { GitHubRepoMeta, WithFetcherProps } from '../lib/types';\nimport { mapRepos } from '../lib/utilities';\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n    const mappedGitHubRepos = await fetch(githubBaseUrl, {\n        headers: {\n            Authorization: `token ${process.env.GITHUB_ACCESS_TOKEN}`,\n        },\n    })\n        .then((response) => response.json())\n        .then(mapRepos)\n        .catch((error) => {\n            console.error(error);\n            return [] as GitHubRepoMeta[];\n        });\n\n    return {\n        props: {\n            mappedGitHubRepos,\n        },\n    };\n};\n\nconst WithPromises: NextPage<WithFetcherProps> = ({ mappedGitHubRepos }) => {\n    useEffect(() => console.log(mappedGitHubRepos), [mappedGitHubRepos]);\n\n    return (\n        <h2 className=\"text-2xl\">\n            Number of repos: {mappedGitHubRepos.length}\n        </h2>\n    );\n};\n\nexport default WithPromises;\n```\n\nI've added a few things to help us along the way underneath the `lib` directory:\n\n#### lib/constants.ts\n\n```ts\nexport const githubBaseUrl =\n    'https://api.github.com/users/{{yourUsername}}/repos';\n```\n\n#### lib/utilities.ts\n\n```ts\nimport { GitHubReposApiResponse } from './types';\n\nexport function mapRepos(repos: GitHubReposApiResponse[]) {\n    return repos.map((repo) => ({\n        name: repo.name,\n        forks: repo.forks_count,\n        stars: repo.stargazers_count,\n    }));\n}\n```\n\n#### lib/types.ts\n\n```ts\ninterface Owner {\n    login: string;\n    id: number;\n    node_id: string;\n    avatar_url: string;\n    gravatar_id: string;\n    url: string;\n    html_url: string;\n    followers_url: string;\n    following_url: string;\n    gists_url: string;\n    starred_url: string;\n    subscriptions_url: string;\n    organizations_url: string;\n    repos_url: string;\n    events_url: string;\n    received_events_url: string;\n    type: string;\n    site_admin: boolean;\n}\n\ninterface Permissions {\n    admin: boolean;\n    maintain: boolean;\n    push: boolean;\n    triage: boolean;\n    pull: boolean;\n}\n\nexport interface GitHubReposApiResponse {\n    id: number;\n    node_id: string;\n    name: string;\n    full_name: string;\n    private: boolean;\n    owner: Owner;\n    html_url: string;\n    description: string;\n    fork: boolean;\n    url: string;\n    forks_url: string;\n    keys_url: string;\n    collaborators_url: string;\n    teams_url: string;\n    hooks_url: string;\n    issue_events_url: string;\n    events_url: string;\n    assignees_url: string;\n    branches_url: string;\n    tags_url: string;\n    blobs_url: string;\n    git_tags_url: string;\n    git_refs_url: string;\n    trees_url: string;\n    statuses_url: string;\n    languages_url: string;\n    stargazers_url: string;\n    contributors_url: string;\n    subscribers_url: string;\n    subscription_url: string;\n    commits_url: string;\n    git_commits_url: string;\n    comments_url: string;\n    issue_comment_url: string;\n    contents_url: string;\n    compare_url: string;\n    merges_url: string;\n    archive_url: string;\n    downloads_url: string;\n    issues_url: string;\n    pulls_url: string;\n    milestones_url: string;\n    notifications_url: string;\n    labels_url: string;\n    releases_url: string;\n    deployments_url: string;\n    created_at: Date;\n    updated_at: Date;\n    pushed_at: Date;\n    git_url: string;\n    ssh_url: string;\n    clone_url: string;\n    svn_url: string;\n    homepage: string;\n    size: number;\n    stargazers_count: number;\n    watchers_count: number;\n    language: string;\n    has_issues: boolean;\n    has_projects: boolean;\n    has_downloads: boolean;\n    has_wiki: boolean;\n    has_pages: boolean;\n    forks_count: number;\n    mirror_url?: any;\n    archived: boolean;\n    disabled: boolean;\n    open_issues_count: number;\n    license?: any;\n    allow_forking: boolean;\n    is_template: boolean;\n    topics: string[];\n    visibility: string;\n    forks: number;\n    open_issues: number;\n    watchers: number;\n    default_branch: string;\n    permissions: Permissions;\n    temp_clone_token: string;\n    allow_squash_merge: boolean;\n    allow_merge_commit: boolean;\n    allow_rebase_merge: boolean;\n    allow_auto_merge: boolean;\n    delete_branch_on_merge: boolean;\n    allow_update_branch: boolean;\n    network_count: number;\n    subscribers_count: number;\n}\n\nexport interface GitHubRepoMeta {\n    name: string;\n    stars: number;\n    forks: number;\n}\n\nexport interface WithFetcherProps {\n    mappedGitHubRepos: GitHubRepoMeta[];\n}\n```\n\nBreaking it down:\n\n-   `constants.ts` is just a constant string, update it with your GitHub username\n-   `utilties.ts` will house some common mapping/retrieving functions to be reused amongst components and pages\n-   `types.ts` houses all the type information we expect back from the API and the prop shapes our pages will expect\n\nBefore you ask, no, I didn't manually write out the interface for the GitHub API response, I\nused [json2ts](http://www.json2ts.com/) to quickly model out the response object to TypeScript based on the JSON data\nreturned\nfrom calling my username repo endpoint. We also explicitly type our page props using `WithFetchProps` for sanity.\nYou can use `InferGetServerSidePropsType` from next.js, but I find intellisense from VS Code lacking so I swapped\nout my own type.\n\nJumping back to `with-promises.tsx`, let's take a look at our fetcher function responsible for getting the data our\ntemplate will rely on:\n\n#### with-promises.tsx\n\n```ts\nexport const getServerSideProps: GetServerSideProps = async () => {\n    const mappedGitHubRepos = await fetch(githubBaseUrl, {\n        headers: {\n            Authorization: `token ${process.env.GITHUB_ACCESS_TOKEN}`,\n        },\n    })\n        .then((response) => response.json())\n        .then(mapRepos)\n        .catch((error) => {\n            console.error(error);\n            return [] as GitHubRepoMeta[];\n        });\n\n    return {\n        props: {\n            mappedGitHubRepos,\n        },\n    };\n};\n```\n\nWe're utilizing next.js's mechanism\nfor [server-side data fetching](https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props)\nwith `getServerSideProps`, simply calling out to the GH\nAPI endpoint for our repositories, streaming the JSON response, and mapping the response to a simple object for our\npage to display while appropriately handling any errors that may occur. While this suffices for our need to retrieve\ndata, we're using promise resolution in its most primitive form. I'm still `await` the promise to resolve itself\nbefore returning the props data back to the page, as promises are asynchronous and will jump to the next resolution\nscope whenever they can, so we need to block the next lines of code execution until our promise has fully been\nresolved.\n\nI'm sure we've all\nseen a `Promise`\nhandled the\ntraditional way before, and after having used RxJS for a number of years now, I'm going to say something rather\ncontroversial: I prefer `.then()/.catch()` over `try`/`catch` \\*_pauses for gasps_\\*.\n\nOkay, this is fine, but what about using `try`/`catch` with a few more `async`/`await`s sprinkled in?\n\n#### pages/with-try-catch.tsx\n\n```tsx\nimport {\n    GetServerSideProps,\n    InferGetServerSidePropsType,\n    NextPage,\n} from 'next';\nimport { useEffect } from 'react';\nimport { githubBaseUrl } from '../lib/constants';\nimport {\n    GitHubRepoMeta,\n    GitHubReposApiResponse,\n    WithFetcherProps,\n} from '../lib/types';\nimport { mapRepos } from '../lib/utilities';\n\nexport const getServerSideProps: GetServerSideProps = async () => {\n    let mappedGitHubRepos: GitHubRepoMeta[] = [];\n\n    try {\n        const response = await fetch(githubBaseUrl, {\n            headers: {\n                Authorization: `token ${process.env.GITHUB_ACCESS_TOKEN}`,\n            },\n        });\n\n        const githubRepos: GitHubReposApiResponse[] = await response.json();\n\n        mappedGitHubRepos = mapRepos(githubRepos);\n    } catch (error: any) {\n        console.error(error);\n    }\n\n    return {\n        props: {\n            mappedGitHubRepos,\n        },\n    };\n};\n\nconst WithTryCatch: NextPage<WithFetcherProps> = ({ mappedGitHubRepos }) => {\n    useEffect(() => console.log(mappedGitHubRepos), [mappedGitHubRepos]);\n\n    return (\n        <h2 className=\"text-2xl\">\n            Number of repos: {mappedGitHubRepos.length}\n        </h2>\n    );\n};\n\nexport default WithTryCatch;\n```\n\nAgain, not much change from using promises, as all we've done is throw in a `try`/`catch` block and an extra `await`\nto read the JSON stream from the API response before mapping to the expected type our page expects. Nothing out of\nthe ordinary, and in fact, we _may_ be able to argue this is the most common convention amongst data fetching\nfunctions in react projects, though I'll leave that for a debate topic on a rainy day.\n\nOkay, great... we're not breaking new ground here, just fetching data for a page to render like we've been doing for\nyears. Let's finally break the mold.\n\n## Reactive react\n\nAlright, let's finally integrate a little RxJS into one of our pages. Let's add a new page and render, again, the\nsame data from the same GH API endpoint:\n\n#### pages/with-rxjs.tsx\n\n```tsx\nimport { GetServerSideProps, NextPage } from 'next';\nimport { useEffect } from 'react';\nimport { githubBaseUrl } from '../lib/constants';\nimport { WithFetcherProps } from '../lib/types';\nimport { fetchFirstReposValue } from '../lib/utilities';\n\nexport const getServerSideProps: GetServerSideProps = async () => ({\n    props: {\n        mappedGitHubRepos: await fetchFirstReposValue(githubBaseUrl),\n    } as WithFetcherProps,\n});\n\nconst WithRxJS: NextPage<WithFetcherProps> = ({ mappedGitHubRepos }) => {\n    useEffect(() => console.log(mappedGitHubRepos), [mappedGitHubRepos]);\n\n    return (\n        <h2 className=\"text-2xl\">\n            Number of repos: {mappedGitHubRepos.length}\n        </h2>\n    );\n};\n\nexport default WithRxJS;\n```\n\nWith `fetchFirstReposValue` coming from our `utilities`:\n\n#### lib/utilities.ts\n\n```ts\n// ...other stuff\n\nexport function fetchRepos(key: string): Observable<GitHubRepoMeta[]> {\n    return fromFetch<GitHubReposApiResponse[]>(key, {\n        headers: {\n            Authorization: `token ${\n                process.env.GITHUB_ACCESS_TOKEN ??\n                process.env.NEXT_PUBLIC_GITHUB_ACCESS_TOKEN\n            }`,\n        },\n        selector: (response) => response.json(),\n    }).pipe(\n        map(mapRepos),\n        catchError((error) => {\n            console.error(error);\n            return EMPTY;\n        }),\n    );\n}\n\nexport function fetchFirstReposValue(key: string) {\n    return firstValueFrom(fetchRepos(key));\n}\n```\n\nOkay, hold on - why are we still `await`ing something after we just went through a primer about how awesome RxJS is?\nWell, we're still _technically_ utilizing RxJS, however, our purpose is one time data fetching: we need data for the\npage to be rendered, that's it. No subscribers, open observable streams, or anything else reactive about\n_reactive_ JS (hence the _Rx_ in _RxJS_). So why the heck don't we just stick to our good ole fashioned `Promises`?\n\n## fromFetch&lt;T&gt; to the rescue\n\nThe beauty of RxJS data fetching comes from the relatively new API `fromFetch<T>`, which in facts takes the\n`Promise` returned `from` the native `fetch` API, and turns it into an `Observable` for us to use all of the awesome\nstuff RxJS offers up for us.\n\nBack in our SSR fetcher `getServerSideProps` in `with-rxjs.tsx`, we utilize our wrapper function\n`fetchFirstReposValue`, passing in the base URL for the endpoint we need repo data from. This wrapper is itself a\nwrapper around `firstValueFrom`, which comes from the RxJS library turning an `Observable` back into a `Promise` by\ninternally `subscribe()`ing to the stream and emitting the first captured value back to the `await`ing caller.\n\nOkay... so let's get this straight - we're wrapping an `Observable` into a `Promise` so we can return data to a\nfunction that expects a `Promise` in the first place, so why the heck are we even using `Observable`s in the first\nplace? _My_ answer to this question would be \"because I like RxJS,\" but a much smarter person than myself well versed in\nRxJS may retort with something along the lines of being able to tap into the incredible power of RxJS operator\nfunctions, in flight HTTP request cancellation, and response manipulation to our heart's desire that plain old\n`Promise`s simply cannot do as tersely as RxJS.\n\nBecause `getServerSideProps` expects data as props either in its raw form as a `Promise`, we need to use\n`firstValueFrom` to extract the HTTP response value that `fromFetch` streams to its subscribers. Recall that with\n`Observable`s, values do not technically _exist_ in place - values are _emitted_ as they become available by the\n`Observable` with `.subscribe()`ers listening for said values. Simply put, `Observable`s do not _store_ data, they\npass data onto listeners. Luckily for us, `firstValueFrom` allows us to treat our `Observable`s as _if_ were storing\ndata, allowing us to extract it and do with it what we please.\n\nWhile there is another class of special observables,\nreferred to as [subjects](https://rxjs.dev/guide/subject) in RxJS that allow us to retrieve current stream values, data\nfetching in react couples pretty tightly to the `await`ing of promises to resolve, so to make our lives easy, we can use\nour friendly RxJS utilities to convert\nbetween promises and observables, with `firstValueFrom`/`lastValueFrom` converting observables to promises, and\n`from`/`delay` converting promises to observables. We get to have our observable cake, with the promise of eating it\ntoo!\n\nLet's dig into our functions utilizing `fromFetch`:\n\n```ts\nexport function fetchRepos(key: string): Observable<GitHubRepoMeta[]> {\n    return fromFetch<GitHubReposApiResponse[]>(key, {\n        headers: {\n            Authorization: `token ${\n                process.env.GITHUB_ACCESS_TOKEN ??\n                process.env.NEXT_PUBLIC_GITHUB_ACCESS_TOKEN\n            }`,\n        },\n        selector: (response) => response.json(),\n    }).pipe(\n        map(mapRepos),\n        catchError((error) => {\n            console.error(error);\n            return EMPTY;\n        }),\n    );\n}\n```\n\nBreaking this function down, we utilize the generic type version of `fromFetch` so we can benefit from typing our\nHTTP responses _explicitly_ without having to manually type cast after a `response.json()` call. `fromFetch` does\nexactly what you think it does - wraps `fetch` (a promise) in the promise converting RxJS operator `from` so we can\ntreat `fetch` as if it were an `Observable`. `fromFetch` expects the same optional configuration object as `fetch`\ndoes, meaning we can attach headers, specify HTTP methods, etc. while _additionally_ allowing us to project the\nresponse into anything available from the `Response` object `fetch` returns.\n\nIn our case, we project `response.json()`,\nwhich internally is more or less the same as calling a `switchMap()/exhaustMap()` after `fromFetch` emits a value,\nsaving us a line of inner observable mapping operator functions so that we can jump right into `map()`ing the\ndeserialized response into the prop types our pages expect. If any error occurs, we log out to console and do\nnothing (probably want to perform _some_ sort of recovery in a real world scenario).\n\nThis gives us a few benefits over using just a normal old `fetch`:\n\n1. We can _explicitly_ statically type the HTTP response\n2. We can project response data in an efficient manner, blocking further inner mappings from happening until the\n   body response stream has been read entirely\n3. We can easily cancel long running requests with a `timeout()` operator function, if we wanted to\n\nAmong with a few others, we quickly see how data fetching with `fromFetch` provides a powerful reactive wrapper\naround the native `fetch`, boosting its ability to be efficiently used for simple data retrieval.\n\nBut about within the context of CSR? Let's build out one more page to explore integrating RxJS with swr as a fetcher\nfunction:\n\n#### pages/with-csr.tsx\n\n```tsx\nimport { NextPage } from 'next';\nimport useSWR from 'swr';\nimport { githubBaseUrl } from '../lib/constants';\nimport { fetchFirstReposValue } from '../lib/utilities';\n\nconst WithCSR: NextPage = () => {\n    const { data: mappedGitHubRepos } = useSWR(\n        githubBaseUrl,\n        fetchFirstReposValue,\n    );\n\n    return mappedGitHubRepos ? (\n        <h2 className=\"text-2xl\">\n            Number of repos: {mappedGitHubRepos.length}\n        </h2>\n    ) : (\n        <h2 className=\"text-2xl\">Loading...</h2>\n    );\n};\n\nexport default WithCSR;\n```\n\nWe tap into the `useSWR` hook, supplying the base URL for the endpoint as the key, and reuse our `fromFetch` as the\nfetcher function `useSWR` expects. `swr` caches the returned data using the `stale-while-revalidating` HTTP strategy,\nbut instead, we tap into RxJS to fetch the data for us for all the aforementioned reasons and benefits in the SSR\ncontext, but this time on the client.\n\n## Wrapping up\n\nI like RxJS, and love more so RxJS-ifying anything and everything I can. While there are existing RxJS/react\nintegration libraries, I prefer simply using RxJS in its natural form, allowing me to fully customize how I `.pipe()`\nstreams of data however I like. RxJS, again, is a _huge_ library of utilities for pub/sub and reactive programming\nwith JS, and is not meant to _replace_ promises, but rather offer an alternative, or in our case, complimentary\nfunctionality that promises provide in the first place. I love RxJS, and will definitely be using it wherever I can\nin my\nreact projects.\n\nUntil next time, friends!\n",
      "html": "<p>Data fetching with React offers a wide selection of tools to do the job, from simple promises, to more sophisticated\ncaching libraries like <a href=\"https://react-query.tanstack.com/\">react-query</a> and <a href=\"https://swr.vercel.app/\">swr</a>. With a\nplethora of options, developers have their choice of favorite fetching tools to get the job done and make our\napplications performant on all fronts. As an Angular developer, I make heavy usage of <a href=\"https://rxjs.dev/\">RxJS</a>\nwhere I can, and luckily Angular treats the library as a first class citizen with many Angular internals (router\nevents, the <code>HttpClient</code>, etc.), making use of <code>Observables</code> to stream data in a reactive way.</p>\n<p>Lately, however, I've taken the React-fork-in-the-road and have been experimenting with data fetching tools and\nhooks for the React/next.js applications I've been working on. While, again, there are many tools that solve the\nproblem of data fetching and mutation made by people much, <em>much</em> smarter than myself, I was looking to integrate\nRxJS into the tools I use for such a task. What I found, coincidentally, was the perfect marriage between my data\nfetching library of choice, Vercel's <a href=\"https://swr.vercel.app/\">swr</a> (a gift from the folks behind next.js), and\n<code>fetch</code>-based <code>Observables</code>.</p>\n<p>While <a href=\"https://github.com/vercel/swr/pull/1263\">we can likely expect subscriptions to data sources from swr</a>\nsometime soon, I've found the utility offered by RxJS allows for incredible control over emissions of stream data to\nsubscribers that I would prefer <em>not</em> to give up, if given the chance. While I'll definitely experiment with\nsubscriptions coming to swr, I decided to sandbox around with RxJS, next.js, and swr to see what was currently\npossible with data fetching using <code>Observables</code> - what I found was <em>quite</em> interesting.</p>\n<h2>Starting with tradition</h2>\n<p>To keep things simple, I'll run through four scenarios using a sample next.js application:</p>\n<ol>\n<li>SSR with traditional promises</li>\n<li>SSR with <code>async</code>/<code>await</code></li>\n<li>SSR with RxJS</li>\n<li>CSR with RxJS</li>\n</ol>\n<p>Okay, timeout. SSR? CSR?</p>\n<ul>\n<li>SSR - <strong>S</strong>erver-<strong>s</strong>ide <strong>r</strong>ending (or prerendering), the act of rendering the template data into said\ntemplate <em>on</em> the server before handing it back to the client. In essence, retrieving all the necessary data for an\nHTML page then rendering said data in the markup and handing it back to the browser.</li>\n<li>CSR - <strong>C</strong>lient-<strong>s</strong>ide <strong>r</strong>endering, the act of rending template data <em>after</em> the route has been served\nto/rendered by the client, or simply making our calls to fetch data after the markup is rendered, which we'll update\nonce the data has been fetched.</li>\n</ul>\n<p>Within the context of next.js, what this means is that we'll have three separate page routes that will invoke\n<code>getServerSideProps</code> to fetch data for our page before serving it up to the client. This content is rendered on the\nserver, meaning the client receives a ready-to-go HTML document with all the appropriate data already in markup.</p>\n<p>In our CSR scenario, we'll utilize <code>swr</code> as a data fetching hook to retrieve data for us once the page has been served,\nwhere our fetching will happen once the page loads, meaning there will be two renders: one on page load, and again\nonce the data is available and the render hook forces a re-render of the page.</p>\n<p>There's one glaring question we should probably take a crack at answering before going further: <strong>why use RxJS in the\nfirst place?</strong></p>\n<h2>RxJS in a nutshell</h2>\n<p>Coming from the Angular world, devs have more than likely been heavily exposed to RxJS due to the\nframework's tight integration with the library. RxJS implements, more or less, the publisher/subscriber pattern (or\npub/sub for short) to allow <em>subscribers</em> of <em>publishers</em> to tune into essential streams of data they may be\ninterested in. In plain english, instead of asking for some work to be done with the <code>Promise</code> of it completing sometime\nin the near future and <code>await</code>ing the data's arrival, we listen in on select streams of data that emit things we're\ninterested in as\nthey happen -\nwe're simply <em>reacting</em> to data as it's published through the stream. In code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"js\" data-theme=\"vitesse-dark\"><code data-language=\"js\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> interval</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> take</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> finalize</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">rxjs/operators</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const</span><span style=\"color:#BD976A\"> dataSource$</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> interval</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1000</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">dataSource$</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    .</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        take</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        finalize</span><span style=\"color:#666666\">(()</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">log</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">data captured!</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    .</span><span style=\"color:#80A665\">subscribe</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">console</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">log</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"> * Output:</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"> *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"> * 0</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"> * 1</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"> * 2</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"> * 3</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"> * 4</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"> * data captured!</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"> */</span></span></code></pre></figure>\n<p>Without going too deep into RxJS operators (the official documentation does a better job than I could ever do at\nexplaining operator functions), we have a source of data, <code>dataSource$</code>, that emits numbers every frame for 1000\nframe, with a frame in this context being one second. We're <code>.subscribe</code>ing to those emissions, <code>take</code>ing only the\nfirst five, then closing our stream to listen as\nwe're only interested in the five emissions. Our <code>dataSource$</code> in this case is an <code>Observerable</code>, a foundational\nconstruct in pub/sub that is the publishing source for subscribers. With RxJS, <code>Observable</code>s are just streams, and\nwon't begin <em>emitting</em> data until a subscriber, well, <code>.subscribe()</code>s to the stream.</p>\n<p>Within the scope of this article, we're <em>barely</em> scraping the surface of what RxJS is capable of and what benefits\nit may offer over more traditional data flow models in our code. I'll leave it to the RxJS experts to speak on the\nintricacies of the library as we'll mainly be focusing on fetching data within the context of RxJS.</p>\n<h2>Getting started</h2>\n<p>Okay, enough talk. Let's code! For our demo, we'll tap into the amazing <a href=\"https://docs.github.com/en/rest\">GitHub API</a>\nto explore repositories. I've spun up a simple next.js app:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npx</span><span style=\"color:#C98A7D\"> create-next-app@latest</span><span style=\"color:#C99076\"> --ts</span><span style=\"color:#C98A7D\"> react-rxjs-data-fetching-demo</span></span></code></pre></figure>\n<p>I'm using next.js in this case as we want to showcase data fetching in both the CSR and SSR contexts. Everything\nwe'll do within the scope of this blog post is similarly applicable to your average react project. With our project\nscaffolded, let's add a few dependencies:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">npm</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C98A7D\"> swr</span><span style=\"color:#C98A7D\"> rxjs</span></span></code></pre></figure>\n<p>I'm partial to swr for data fetching, and you're more than welcome to use your own hook fetching library. I've also\nadded <a href=\"https://tailwindcss.com/\">Tailwind</a> out of habit in order to make things not look like a webpage from 1995.\nWith our dependencies installed, let's add a page for our first scenario: SSR with the tried-and-true\n<code>Promise</code>-based data fetching:</p>\n<h4>pages/with-promises.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"vitesse-dark\"><code data-language=\"tsx\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> GetServerSideProps</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> NextPage</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">next</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> useEffect</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">react</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> githubBaseUrl</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/constants</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> GitHubRepoMeta</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> WithFetcherProps</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> mapRepos</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/utilities</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const</span><span style=\"color:#80A665\"> getServerSideProps</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">GetServerSideProps</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#666666\"> ()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const</span><span style=\"color:#BD976A\"> mappedGitHubRepos</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> await</span><span style=\"color:#80A665\"> fetch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">githubBaseUrl</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        headers</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            Authorization</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> `</span><span style=\"color:#C98A7D\">token </span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">process</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">env</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    })</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        .</span><span style=\"color:#80A665\">then</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">json</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        .</span><span style=\"color:#80A665\">then</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mapRepos</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        .</span><span style=\"color:#80A665\">catch</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">error</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#666666\"> []</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#5DA994\"> GitHubRepoMeta</span><span style=\"color:#666666\">[];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        props</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            mappedGitHubRepos</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const</span><span style=\"color:#80A665\"> WithPromises</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">NextPage</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">WithFetcherProps</span><span style=\"color:#666666\">> =</span><span style=\"color:#666666\"> ({</span><span style=\"color:#BD976A\"> mappedGitHubRepos</span><span style=\"color:#666666\"> })</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    useEffect</span><span style=\"color:#666666\">(()</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">log</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\">),</span><span style=\"color:#666666\"> [</span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\">]);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">h2</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-2xl</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Number of repos: </span><span style=\"color:#666666\">{</span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">length</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">h2</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#4D9375\"> default</span><span style=\"color:#BD976A\"> WithPromises</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>I've added a few things to help us along the way underneath the <code>lib</code> directory:</p>\n<h4>lib/constants.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#BD976A\">githubBaseUrl</span><span style=\"color:#666666\"> =</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    '</span><span style=\"color:#C98A7D\">https://api.github.com/users/{{yourUsername}}/repos</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<h4>lib/utilities.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> GitHubReposApiResponse</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">./types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> mapRepos</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">repos</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">GitHubReposApiResponse</span><span style=\"color:#666666\">[])</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> repos</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">map</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">repo</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        name</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">repo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        forks</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">repo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">forks_count</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        stars</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">repo</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">stargazers_count</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h4>lib/types.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">interface</span><span style=\"color:#5DA994\"> Owner</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    login</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    id</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    node_id</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    avatar_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    gravatar_id</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    html_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    followers_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    following_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    gists_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    starred_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    subscriptions_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    organizations_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    repos_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    events_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    received_events_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    type</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    site_admin</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">interface</span><span style=\"color:#5DA994\"> Permissions</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    admin</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    maintain</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    push</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    triage</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    pull</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> interface</span><span style=\"color:#5DA994\"> GitHubReposApiResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    id</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    node_id</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    name</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    full_name</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    private</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    owner</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Owner</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    html_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    description</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    fork</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    forks_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    keys_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    collaborators_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    teams_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    hooks_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    issue_events_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    events_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    assignees_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    branches_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    tags_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    blobs_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    git_tags_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    git_refs_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    trees_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    statuses_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    languages_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    stargazers_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    contributors_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    subscribers_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    subscription_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    commits_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    git_commits_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    comments_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    issue_comment_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    contents_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    compare_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    merges_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    archive_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    downloads_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    issues_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    pulls_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    milestones_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    notifications_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    labels_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    releases_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    deployments_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    created_at</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Date</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    updated_at</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Date</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    pushed_at</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Date</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    git_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    ssh_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    clone_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    svn_url</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    homepage</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    size</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    stargazers_count</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    watchers_count</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    language</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    has_issues</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    has_projects</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    has_downloads</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    has_wiki</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    has_pages</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    forks_count</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    mirror_url</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">any</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    archived</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    disabled</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    open_issues_count</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    license</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">any</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    allow_forking</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    is_template</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    topics</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">[];</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    visibility</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    forks</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    open_issues</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    watchers</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    default_branch</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    permissions</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Permissions</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    temp_clone_token</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    allow_squash_merge</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    allow_merge_commit</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    allow_rebase_merge</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    allow_auto_merge</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    delete_branch_on_merge</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    allow_update_branch</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    network_count</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    subscribers_count</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> interface</span><span style=\"color:#5DA994\"> GitHubRepoMeta</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    name</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    stars</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    forks</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">number</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> interface</span><span style=\"color:#5DA994\"> WithFetcherProps</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    mappedGitHubRepos</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">GitHubRepoMeta</span><span style=\"color:#666666\">[];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Breaking it down:</p>\n<ul>\n<li><code>constants.ts</code> is just a constant string, update it with your GitHub username</li>\n<li><code>utilties.ts</code> will house some common mapping/retrieving functions to be reused amongst components and pages</li>\n<li><code>types.ts</code> houses all the type information we expect back from the API and the prop shapes our pages will expect</li>\n</ul>\n<p>Before you ask, no, I didn't manually write out the interface for the GitHub API response, I\nused <a href=\"http://www.json2ts.com/\">json2ts</a> to quickly model out the response object to TypeScript based on the JSON data\nreturned\nfrom calling my username repo endpoint. We also explicitly type our page props using <code>WithFetchProps</code> for sanity.\nYou can use <code>InferGetServerSidePropsType</code> from next.js, but I find intellisense from VS Code lacking so I swapped\nout my own type.</p>\n<p>Jumping back to <code>with-promises.tsx</code>, let's take a look at our fetcher function responsible for getting the data our\ntemplate will rely on:</p>\n<h4>with-promises.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const </span><span style=\"color:#80A665\">getServerSideProps</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">GetServerSideProps</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> async </span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> await</span><span style=\"color:#80A665\"> fetch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">githubBaseUrl</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        headers</span><span style=\"color:#666666\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            Authorization</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#C98A7D\">token </span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">process</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">env</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    })</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        .</span><span style=\"color:#80A665\">then</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">json</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        .</span><span style=\"color:#80A665\">then</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mapRepos</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        .</span><span style=\"color:#80A665\">catch</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">error</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#666666\"> []</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#5DA994\"> GitHubRepoMeta</span><span style=\"color:#666666\">[];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        props</span><span style=\"color:#666666\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            mappedGitHubRepos</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>We're utilizing next.js's mechanism\nfor <a href=\"https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props\">server-side data fetching</a>\nwith <code>getServerSideProps</code>, simply calling out to the GH\nAPI endpoint for our repositories, streaming the JSON response, and mapping the response to a simple object for our\npage to display while appropriately handling any errors that may occur. While this suffices for our need to retrieve\ndata, we're using promise resolution in its most primitive form. I'm still <code>await</code> the promise to resolve itself\nbefore returning the props data back to the page, as promises are asynchronous and will jump to the next resolution\nscope whenever they can, so we need to block the next lines of code execution until our promise has fully been\nresolved.</p>\n<p>I'm sure we've all\nseen a <code>Promise</code>\nhandled the\ntraditional way before, and after having used RxJS for a number of years now, I'm going to say something rather\ncontroversial: I prefer <code>.then()/.catch()</code> over <code>try</code>/<code>catch</code> *<em>pauses for gasps</em>*.</p>\n<p>Okay, this is fine, but what about using <code>try</code>/<code>catch</code> with a few more <code>async</code>/<code>await</code>s sprinkled in?</p>\n<h4>pages/with-try-catch.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"vitesse-dark\"><code data-language=\"tsx\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    GetServerSideProps</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    InferGetServerSidePropsType</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    NextPage</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">next</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> useEffect</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">react</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> githubBaseUrl</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/constants</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    GitHubRepoMeta</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    GitHubReposApiResponse</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    WithFetcherProps</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> mapRepos</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/utilities</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const</span><span style=\"color:#80A665\"> getServerSideProps</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">GetServerSideProps</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#666666\"> ()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> mappedGitHubRepos</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">GitHubRepoMeta</span><span style=\"color:#666666\">[] =</span><span style=\"color:#666666\"> [];</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> await</span><span style=\"color:#80A665\"> fetch</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">githubBaseUrl</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            headers</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                Authorization</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> `</span><span style=\"color:#C98A7D\">token </span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">process</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">env</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        const</span><span style=\"color:#BD976A\"> githubRepos</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">GitHubReposApiResponse</span><span style=\"color:#666666\">[] =</span><span style=\"color:#4D9375\"> await</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">json</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        mappedGitHubRepos</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> mapRepos</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">githubRepos</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span><span style=\"color:#4D9375\"> catch</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">any</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">error</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        props</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            mappedGitHubRepos</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const</span><span style=\"color:#80A665\"> WithTryCatch</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">NextPage</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">WithFetcherProps</span><span style=\"color:#666666\">> =</span><span style=\"color:#666666\"> ({</span><span style=\"color:#BD976A\"> mappedGitHubRepos</span><span style=\"color:#666666\"> })</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    useEffect</span><span style=\"color:#666666\">(()</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">log</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\">),</span><span style=\"color:#666666\"> [</span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\">]);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">h2</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-2xl</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Number of repos: </span><span style=\"color:#666666\">{</span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">length</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">h2</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#4D9375\"> default</span><span style=\"color:#BD976A\"> WithTryCatch</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>Again, not much change from using promises, as all we've done is throw in a <code>try</code>/<code>catch</code> block and an extra <code>await</code>\nto read the JSON stream from the API response before mapping to the expected type our page expects. Nothing out of\nthe ordinary, and in fact, we <em>may</em> be able to argue this is the most common convention amongst data fetching\nfunctions in react projects, though I'll leave that for a debate topic on a rainy day.</p>\n<p>Okay, great... we're not breaking new ground here, just fetching data for a page to render like we've been doing for\nyears. Let's finally break the mold.</p>\n<h2>Reactive react</h2>\n<p>Alright, let's finally integrate a little RxJS into one of our pages. Let's add a new page and render, again, the\nsame data from the same GH API endpoint:</p>\n<h4>pages/with-rxjs.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"vitesse-dark\"><code data-language=\"tsx\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> GetServerSideProps</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> NextPage</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">next</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> useEffect</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">react</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> githubBaseUrl</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/constants</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> WithFetcherProps</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/types</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> fetchFirstReposValue</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/utilities</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> const</span><span style=\"color:#80A665\"> getServerSideProps</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">GetServerSideProps</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> async</span><span style=\"color:#666666\"> ()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    props</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        mappedGitHubRepos</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> await</span><span style=\"color:#80A665\"> fetchFirstReposValue</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">githubBaseUrl</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#5DA994\"> WithFetcherProps</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">});</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const</span><span style=\"color:#80A665\"> WithRxJS</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">NextPage</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">WithFetcherProps</span><span style=\"color:#666666\">> =</span><span style=\"color:#666666\"> ({</span><span style=\"color:#BD976A\"> mappedGitHubRepos</span><span style=\"color:#666666\"> })</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    useEffect</span><span style=\"color:#666666\">(()</span><span style=\"color:#666666\"> =></span><span style=\"color:#BD976A\"> console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">log</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\">),</span><span style=\"color:#666666\"> [</span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\">]);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">h2</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-2xl</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Number of repos: </span><span style=\"color:#666666\">{</span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">length</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">h2</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#4D9375\"> default</span><span style=\"color:#BD976A\"> WithRxJS</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>With <code>fetchFirstReposValue</code> coming from our <code>utilities</code>:</p>\n<h4>lib/utilities.ts</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// ...other stuff</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> fetchRepos</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">):</span><span style=\"color:#5DA994\"> Observable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">GitHubRepoMeta</span><span style=\"color:#666666\">[]></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#80A665\"> fromFetch</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">GitHubReposApiResponse</span><span style=\"color:#666666\">[]>(</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        headers</span><span style=\"color:#666666\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            Authorization</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#C98A7D\">token </span><span style=\"color:#666666\">${</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                process</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">env</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">GITHUB_ACCESS_TOKEN </span><span style=\"color:#CB7676\">??</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                process</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">env</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">NEXT_PUBLIC_GITHUB_ACCESS_TOKEN</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        selector</span><span style=\"color:#666666\">: (</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">) => </span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">json</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }).</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        map</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mapRepos</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        catchError</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">error</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> EMPTY</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> fetchFirstReposValue</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#80A665\"> firstValueFrom</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">fetchRepos</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Okay, hold on - why are we still <code>await</code>ing something after we just went through a primer about how awesome RxJS is?\nWell, we're still <em>technically</em> utilizing RxJS, however, our purpose is one time data fetching: we need data for the\npage to be rendered, that's it. No subscribers, open observable streams, or anything else reactive about\n<em>reactive</em> JS (hence the <em>Rx</em> in <em>RxJS</em>). So why the heck don't we just stick to our good ole fashioned <code>Promises</code>?</p>\n<h2>fromFetch&#x3C;T> to the rescue</h2>\n<p>The beauty of RxJS data fetching comes from the relatively new API <code>fromFetch&#x3C;T></code>, which in facts takes the\n<code>Promise</code> returned <code>from</code> the native <code>fetch</code> API, and turns it into an <code>Observable</code> for us to use all of the awesome\nstuff RxJS offers up for us.</p>\n<p>Back in our SSR fetcher <code>getServerSideProps</code> in <code>with-rxjs.tsx</code>, we utilize our wrapper function\n<code>fetchFirstReposValue</code>, passing in the base URL for the endpoint we need repo data from. This wrapper is itself a\nwrapper around <code>firstValueFrom</code>, which comes from the RxJS library turning an <code>Observable</code> back into a <code>Promise</code> by\ninternally <code>subscribe()</code>ing to the stream and emitting the first captured value back to the <code>await</code>ing caller.</p>\n<p>Okay... so let's get this straight - we're wrapping an <code>Observable</code> into a <code>Promise</code> so we can return data to a\nfunction that expects a <code>Promise</code> in the first place, so why the heck are we even using <code>Observable</code>s in the first\nplace? <em>My</em> answer to this question would be \"because I like RxJS,\" but a much smarter person than myself well versed in\nRxJS may retort with something along the lines of being able to tap into the incredible power of RxJS operator\nfunctions, in flight HTTP request cancellation, and response manipulation to our heart's desire that plain old\n<code>Promise</code>s simply cannot do as tersely as RxJS.</p>\n<p>Because <code>getServerSideProps</code> expects data as props either in its raw form as a <code>Promise</code>, we need to use\n<code>firstValueFrom</code> to extract the HTTP response value that <code>fromFetch</code> streams to its subscribers. Recall that with\n<code>Observable</code>s, values do not technically <em>exist</em> in place - values are <em>emitted</em> as they become available by the\n<code>Observable</code> with <code>.subscribe()</code>ers listening for said values. Simply put, <code>Observable</code>s do not <em>store</em> data, they\npass data onto listeners. Luckily for us, <code>firstValueFrom</code> allows us to treat our <code>Observable</code>s as <em>if</em> were storing\ndata, allowing us to extract it and do with it what we please.</p>\n<p>While there is another class of special observables,\nreferred to as <a href=\"https://rxjs.dev/guide/subject\">subjects</a> in RxJS that allow us to retrieve current stream values, data\nfetching in react couples pretty tightly to the <code>await</code>ing of promises to resolve, so to make our lives easy, we can use\nour friendly RxJS utilities to convert\nbetween promises and observables, with <code>firstValueFrom</code>/<code>lastValueFrom</code> converting observables to promises, and\n<code>from</code>/<code>delay</code> converting promises to observables. We get to have our observable cake, with the promise of eating it\ntoo!</p>\n<p>Let's dig into our functions utilizing <code>fromFetch</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"ts\" data-theme=\"vitesse-dark\"><code data-language=\"ts\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> fetchRepos</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">):</span><span style=\"color:#5DA994\"> Observable</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">GitHubRepoMeta</span><span style=\"color:#666666\">[]></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#80A665\"> fromFetch</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">GitHubReposApiResponse</span><span style=\"color:#666666\">[]>(</span><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        headers</span><span style=\"color:#666666\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            Authorization</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#C98A7D\">token </span><span style=\"color:#666666\">${</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                process</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">env</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">GITHUB_ACCESS_TOKEN </span><span style=\"color:#CB7676\">??</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                process</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">env</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">NEXT_PUBLIC_GITHUB_ACCESS_TOKEN</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        selector</span><span style=\"color:#666666\">: (</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">) => </span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">json</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }).</span><span style=\"color:#80A665\">pipe</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        map</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">mapRepos</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        catchError</span><span style=\"color:#666666\">((</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">error</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> EMPTY</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Breaking this function down, we utilize the generic type version of <code>fromFetch</code> so we can benefit from typing our\nHTTP responses <em>explicitly</em> without having to manually type cast after a <code>response.json()</code> call. <code>fromFetch</code> does\nexactly what you think it does - wraps <code>fetch</code> (a promise) in the promise converting RxJS operator <code>from</code> so we can\ntreat <code>fetch</code> as if it were an <code>Observable</code>. <code>fromFetch</code> expects the same optional configuration object as <code>fetch</code>\ndoes, meaning we can attach headers, specify HTTP methods, etc. while <em>additionally</em> allowing us to project the\nresponse into anything available from the <code>Response</code> object <code>fetch</code> returns.</p>\n<p>In our case, we project <code>response.json()</code>,\nwhich internally is more or less the same as calling a <code>switchMap()/exhaustMap()</code> after <code>fromFetch</code> emits a value,\nsaving us a line of inner observable mapping operator functions so that we can jump right into <code>map()</code>ing the\ndeserialized response into the prop types our pages expect. If any error occurs, we log out to console and do\nnothing (probably want to perform <em>some</em> sort of recovery in a real world scenario).</p>\n<p>This gives us a few benefits over using just a normal old <code>fetch</code>:</p>\n<ol>\n<li>We can <em>explicitly</em> statically type the HTTP response</li>\n<li>We can project response data in an efficient manner, blocking further inner mappings from happening until the\nbody response stream has been read entirely</li>\n<li>We can easily cancel long running requests with a <code>timeout()</code> operator function, if we wanted to</li>\n</ol>\n<p>Among with a few others, we quickly see how data fetching with <code>fromFetch</code> provides a powerful reactive wrapper\naround the native <code>fetch</code>, boosting its ability to be efficiently used for simple data retrieval.</p>\n<p>But about within the context of CSR? Let's build out one more page to explore integrating RxJS with swr as a fetcher\nfunction:</p>\n<h4>pages/with-csr.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"vitesse-dark\"><code data-language=\"tsx\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> NextPage</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">next</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#BD976A\"> useSWR</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">swr</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> githubBaseUrl</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/constants</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> fetchFirstReposValue</span><span style=\"color:#666666\"> }</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">../lib/utilities</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">const</span><span style=\"color:#80A665\"> WithCSR</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">NextPage</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> ()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> data</span><span style=\"color:#666666\">:</span><span style=\"color:#BD976A\"> mappedGitHubRepos</span><span style=\"color:#666666\"> }</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> useSWR</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        githubBaseUrl</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        fetchFirstReposValue</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> mappedGitHubRepos</span><span style=\"color:#CB7676\"> ?</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">h2</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-2xl</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Number of repos: </span><span style=\"color:#666666\">{</span><span style=\"color:#BD976A\">mappedGitHubRepos</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">length</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">h2</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span><span style=\"color:#CB7676\"> :</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">h2</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-2xl</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Loading...</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h2</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#4D9375\"> default</span><span style=\"color:#BD976A\"> WithCSR</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>We tap into the <code>useSWR</code> hook, supplying the base URL for the endpoint as the key, and reuse our <code>fromFetch</code> as the\nfetcher function <code>useSWR</code> expects. <code>swr</code> caches the returned data using the <code>stale-while-revalidating</code> HTTP strategy,\nbut instead, we tap into RxJS to fetch the data for us for all the aforementioned reasons and benefits in the SSR\ncontext, but this time on the client.</p>\n<h2>Wrapping up</h2>\n<p>I like RxJS, and love more so RxJS-ifying anything and everything I can. While there are existing RxJS/react\nintegration libraries, I prefer simply using RxJS in its natural form, allowing me to fully customize how I <code>.pipe()</code>\nstreams of data however I like. RxJS, again, is a <em>huge</em> library of utilities for pub/sub and reactive programming\nwith JS, and is not meant to <em>replace</em> promises, but rather offer an alternative, or in our case, complimentary\nfunctionality that promises provide in the first place. I love RxJS, and will definitely be using it wherever I can\nin my\nreact projects.</p>\n<p>Until next time, friends!</p>"
    },
    "_id": "2022/react-data-fetching-with-rxjs.md",
    "_raw": {
      "sourceFilePath": "2022/react-data-fetching-with-rxjs.md",
      "sourceFileName": "react-data-fetching-with-rxjs.md",
      "sourceFileDir": "2022",
      "contentType": "markdown",
      "flattenedPath": "2022/react-data-fetching-with-rxjs"
    },
    "type": "Post",
    "url": "/blog/2022/react-data-fetching-with-rxjs"
  },
  {
    "title": "Rethinking exceptions in .NET",
    "description": "Exceptions... exceptions everywhere!",
    "pubDate": "2022-09-21T07:00:00.000Z",
    "category": ".NET",
    "heroImage": "/images/rethinking-dotnet-exceptions/exceptions_meme.jpg",
    "draft": false,
    "keywords": [
      ".net",
      "exceptions",
      "result"
    ],
    "body": {
      "raw": "\nI've recently undergone a courtship with Go and Rust, diving into each ecosystem in my spare time and even contributing\nto a few open source projects here and there in each language.\nBeing a .NET developer by day, I interact primarily with code and services written by other developers that may include\nquite a bit of control flow via throwing exceptions when any\nerroneous scenario or non-desirable application state arises. While this may be the norm in .NET and quite frankly what\n.NET/Java developers hardened by the enterprise have been trained for years\nto do as a first action during a fallible process, I've been conscientiously forcing myself to properly handle said\nfallible situations in a manner similar to what both Go and Rust offer\nin regards to the error handling developer experience.\n\nFor those not familiar with Go or Rust, a fallible method (simply a function that could return an error) might look\nsomething like:\n\n```go\nfunc SomeFallibleFunction(name string) (string, error) {\n    if name != \"Joey\" {\n        return \"\", errors.New(\"That's not the name I was expecting!\")\n    }\n\n    return \"Hello, Joey!\", nil\n}\n```\n\nin Go, or similarly in Rust:\n\n```rust\nfn some_fallible_function(name: &str) -> Result<&str, &str> {\n    if name != \"Joey\" {\n        return Err(\"That's a terrible name!\");\n    }\n\n    Ok(\"Nice to meet you, Joey!\")\n}\n```\n\nRunning each of these examples in an executable context, it may look something like the following:\n\n```go\npackage main\n\nimport (\n  \"errors\"\n  \"log\"\n)\n\nfunc main() {\n    if result, err := SomeFallibleFunction(\"Joey\"); err != nil {\n        log.Printf(\"An error occurred: %v\", err)\n    } else {\n        log.Printf(result)\n    }\n}\n\nfunc SomeFallibleFunction(name string) (string, error) {\n    if name != \"Joey\" {\n        return \"\", errors.New(\"That's not the name I was expecting!\")\n    }\n\n    return \"Hello, Joey!\", nil\n}\n```\n\nwith output along the lines of:\n\n```shell\nHello, Joey!\n```\n\nNow, the Rust equivalent in its full glory:\n\n```rust\nfn main() {\n    let result = some_fallible_function(\"Joey\");\n\n    if let Ok(response) = result {\n        println!(\"{}\", response);\n    } else {\n        println!(\"An error occurred: {}\", result.unwrap_err());\n    }\n}\n\nfn some_fallible_function(name: &str) -> Result<&str, &str> {\n    if name != \"Joey\" {\n        return Err(\"That's a terrible name!\");\n    }\n\n    Ok(\"Nice to meet you, Joey!\")\n}\n```\n\nand running a simple `cargo run` in the command line of your choice produces the following:\n\n```shell\nNice to meet you, Joey!\n```\n\nWhile each of these examples may seem a bit contrived, each conveys an idea that is core to either language in proper\nerror handling: _explicitly_ signifying to callers that the method is _fallible_! Fallible methods\ncan be thought of as a contract between caller and callee - the caller understands that the callee may produce an\nundesirable result or state that _should_ be handled responsibly by the caller. Unfortunately, .NET does\nnot have a similarly equivalent error handling experience akin to Go or Rust in the base class library, and while not a\nfault of the language itself, it can be rather annoying to deal with codebases where the default\nerror handling precedent set by previous developers might be `throw`ing exceptions at every corner and littering said\ncodebase with `try`/`catch` blocks often accompanied by some form of global\nexception handler to swallow any unexpected exceptions that arise outside of our error handling blocks.\n\nWhat this leads to, more often than not, is a breakdown in an application or service's architecture as we're allowing\n_control flow via exceptions_ (pause for audible gasps). If you've ever been exposed to languages\nwith GOTO statements (I cut my teeth with Fortran as my first real language during my undergrad), one can make the\nargument that exceptions as a form of control flow is nothing more than a sophisticated GOTO statement\nin an application or service. There's a plethora of reasons you won't see named or GOTO statements in many modern\nlanguages, applications, and codebases but I'll primarily make the argument that it makes code difficult\nto read, maintain, and extend as sensible control flow is essentially thrown out the window as we're allowing the flow\nof execution to sporadically jump lines anytime we see fit.\n\n## Rusti-fying our .NET code\n\nI'm not a fan of throwing exceptions, and I've been making the conscious effort to force myself to handle errors in a\nsane fashion as they arise rather than propagating them up the stack by `throw`ing them anytime an undesirable state in\nmy application code is reached. As an experiment, let's take a look at Rust'\ns [`std::result::Result`](https://doc.rust-lang.org/std/result/) type in an effort to take a monadic approach to wrap a\nmethod's outcome with a bit of metadata about the response. In a simple .NET 7 console app, let's define a result type\nthat captures information about the desired resulting data should the method succeed, i.e. no exceptions occur, and also\ncarries a bit of information about what types of errors we should expect in the case our processing fails:\n\n```csharp\nnamespace ExceptionAlternatives;\n\ninternal class Result<TData, TError>\n{\n    private readonly TData? _data;\n\n    private readonly TError? _error;\n\n    public static Result<TData, TError> Ok(TData data) => new(data);\n\n    public static Result<TData, TError> Err(TError error) => new(error);\n\n    private Result(TData data) => _data = data;\n\n    private Result(TError error) => _error = error;\n\n    public bool IsOk => _data is not null && _error is null;\n\n    public bool IsErr => !IsOk;\n\n    public TData Unwrap()\n    {\n        if (_data is null)\n        {\n            throw new InvalidOperationException(\"Result data is null and cannot be accessed.\");\n        }\n\n        return _data;\n    }\n\n    public TError UnwrapErr()\n    {\n        if (_error is null)\n        {\n            throw new InvalidOperationException(\"Result error is null and cannot be accessed.\");\n        }\n\n        return _error;\n    }\n}\n```\n\nLet's breakdown what our `Result` type is encapsulating for us:\n\n1. We provide two generic arguments in the form of `TData` and `TError` so that callers are aware of the type context a\n   fallible function may return\n2. We _internally_ track the state of the resulting data and any error that may occur as a result (no pun intended) of\n   the processing that goes on in our method\n3. We'll provide some simple `Result` type constructing methods to assist our methods in building our `Result` correctly\n   without said methods having to worry about how to instantiate our `Result` type correctly, i.e.\n   _correct-by-construction_\n4. We provide some simple utilities to peek at the result data without having to directly deref any of our internally\n   tracked `Result` state with the `IsOk` and `IsErr` auto-props\n5. Finally, should our callers do their due diligence and confirm their `Result` either succeeded or failed, we provide\n   a couple of methods to expose the data or error encapsulated by our `Result` object with the `Unwrap()`\n   and `UnwrapErr()` methods\n\nUsing our `Result` in a contrived example, it may look something like the following out in the wild:\n\n```csharp\nusing ExceptionAlternatives;\n\nvar successfulProcessing = await DoSomeFallibleProcessingThatSucceeds();\nvar failedProcessing = await DoSomeFallibleProcessingThatFails();\n\nConsole.WriteLine($\"Result of {nameof(successfulProcessing)}\");\nConsole.WriteLine($\"Successful? - {successfulProcessing.IsOk}\");\nConsole.WriteLine($\"Errors? - {successfulProcessing.IsErr}\");\nConsole.WriteLine($\"Successful result: {successfulProcessing.Unwrap()}\");\n\nConsole.WriteLine($\"\\nResult of {nameof(failedProcessing)}\");\nConsole.WriteLine($\"Successful? - {failedProcessing.IsOk}\");\nConsole.WriteLine($\"Errors? - {failedProcessing.IsErr}\");\nConsole.WriteLine($\"Error result: {failedProcessing.UnwrapErr()}\");\n\nasync Task<Result<int, string>> DoSomeFallibleProcessingThatSucceeds()\n{\n    // Act like we're doing something...\n    await Task.Delay(TimeSpan.FromMilliseconds(500));\n\n    return Result<int, string>.Ok(42);\n}\n\nasync Task<Result<int, string>> DoSomeFallibleProcessingThatFails()\n{\n    // Act like we're doing something again, but takes a bit longer...\n    await Task.Delay(TimeSpan.FromMilliseconds(1000));\n\n    return Result<int, string>.Err(\"Oh no! Processing failed :(\");\n}\n```\n\nRunning our code, we see the following printed out in the console:\n\n```shell\nResult of successfulProcessing\nSuccessful? - True\nErrors? - False\nSuccessful result: 42\n\nResult of failedProcessing\nSuccessful? - False\nErrors? - True\nError result: Oh no! Processing failed :(\n```\n\nSweet! While the first set of processing results may not be all that interesting, our second attempt at processing\nfailed and provided our context of the failure _without_ `throw`ing an exception and muddying up our code with\nunnecessary `try`/`catch` blocks! While this feels a lot better (personally) to code against in a real-world scenario,\nwe still need to address one bit of code in our `Result` type.\n\nWe still `throw` an exception when a user attempts to `Unwrap()` the `Result`'s internal data in the case that data does\nnot exist. Similar to Rust's `std::result::Result` type which `panic`'s (Rust's version of crashing an application) in\nthe case a caller attempts to access said data, we `throw` in an attempt to protect the `Result` object from handling up\ninvalid or `null` data. In our case, our `Result` type _expects_ a non-`null` data type to be the underlying data\ncontext in our `Result` object. We could extend this to allow for handling `null`able values, but I'll leave that as an\nexercise for the reader.\n\nSecondly, in our `DoSomeFallibleProcessingThatFails()` method, we're not guaranteed the ongoing processing will not\npanic inside that method - we expect that all the stuff that goes on in that method is itself infallible which may not\nbe the case. If we we're talking to a database, for example, an exception outside of our code (maybe internal to the\nBCL) may be thrown in the case the connection string is malformed or our result set can't be mapped. We'd most likely be\nbetter off wrapping the execution context of `DoSomeFallibleProcessingThatFails()` in a `try`/`catch` block, returning\nan `Ok` result if all goes well while passing back an `Err` in the case our `catch` block needs to execute logic.\n\n## Throwing exceptions _when it matters_\n\nWhile I've been touting that we should refrain from `throw`ing exceptions in our .NET code, that does **not** mean that\nwe should _never_ `throw` exceptions; simply put, **throw exceptions when it matters**.\n\nHow should we determine when and where to `throw` exceptions and use `try`/`catch` blocks? For me, the age-old question\nis accompanied by the age-old answer - _it depends_.\n\nDoes our application require loading in some critical configuration to properly run without error? Probably good\nto `throw` on startup if our configuration can't be found, read properly, or loaded into application memory/cached for\nwhatever reason.\n\nDo we rely on calls to third-party libraries or APIs that don't necessarily share our same radical `Result`-based\nideology? That's a great use case for surrounding that bit of connecting code with a `try`/`catch` while internally\npropagating those outbound results as a `Result` type in our application code.\n\n## Wrapping up\n\nExceptions have their time and place - as I've grown in my software career, I find that my personal developer growth\ncomes in the form of identifying _when_ and _where_ it may be appropriate to `throw` and surround bits of code\nin `try`/`catch` blocks rather than relying on them as a crutch for ease of control flow. What this translates to, more\nor less, is forcing callers and callees to properly handle error cases _as they arise_ rather than making it the next\nstack frame's problem. Unfortunately, humans are not perfect. Code is written by humans (most of the time), and\ntherefore _can_ be imperfect itself, not accounting for erroneous scenarios that might be outside our peripheral.\n\nUntil next time, friends!\n",
      "html": "<p>I've recently undergone a courtship with Go and Rust, diving into each ecosystem in my spare time and even contributing\nto a few open source projects here and there in each language.\nBeing a .NET developer by day, I interact primarily with code and services written by other developers that may include\nquite a bit of control flow via throwing exceptions when any\nerroneous scenario or non-desirable application state arises. While this may be the norm in .NET and quite frankly what\n.NET/Java developers hardened by the enterprise have been trained for years\nto do as a first action during a fallible process, I've been conscientiously forcing myself to properly handle said\nfallible situations in a manner similar to what both Go and Rust offer\nin regards to the error handling developer experience.</p>\n<p>For those not familiar with Go or Rust, a fallible method (simply a function that could return an error) might look\nsomething like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"go\" data-theme=\"vitesse-dark\"><code data-language=\"go\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">func</span><span style=\"color:#80A665\"> SomeFallibleFunction</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">name </span><span style=\"color:#CB7676\">string</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">string</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> error</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#DBD7CAEE\"> name </span><span style=\"color:#CB7676\">!=</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Joey</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#C98A7D99\"> \"\"</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> errors</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">New</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">That's not the name I was expecting!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hello, Joey!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> nil</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>in Go, or similarly in Rust:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">fn</span><span style=\"color:#80A665\"> some_fallible_function</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">name</span><span style=\"color:#CB7676\">:</span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#5DA994\">str</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#5DA994\">str</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#5DA994\">str</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Joey</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#5DA994\"> Err</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">That's a terrible name!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Nice to meet you, Joey!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Running each of these examples in an executable context, it may look something like the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"go\" data-theme=\"vitesse-dark\"><code data-language=\"go\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">package</span><span style=\"color:#80A665\"> main</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">  \"</span><span style=\"color:#80A665\">errors</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">  \"</span><span style=\"color:#80A665\">log</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">func</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#BD976A\"> result</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> err</span><span style=\"color:#666666\"> :=</span><span style=\"color:#B8A965\"> SomeFallibleFunction</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Joey</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span><span style=\"color:#DBD7CAEE\"> err </span><span style=\"color:#CB7676\">!=</span><span style=\"color:#4D9375\"> nil</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        log</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">Printf</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">An error occurred: </span><span style=\"color:#C99076\">%v</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> err</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span><span style=\"color:#4D9375\"> else</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        log</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">Printf</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">result</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">func</span><span style=\"color:#80A665\"> SomeFallibleFunction</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">name </span><span style=\"color:#CB7676\">string</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">string</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> error</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#DBD7CAEE\"> name </span><span style=\"color:#CB7676\">!=</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Joey</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#C98A7D99\"> \"\"</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> errors</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">New</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">That's not the name I was expecting!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hello, Joey!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> nil</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>with output along the lines of:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">Hello,</span><span style=\"color:#C98A7D\"> Joey!</span></span></code></pre></figure>\n<p>Now, the Rust equivalent in its full glory:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> some_fallible_function</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Joey</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#CB7676\"> let</span><span style=\"color:#5DA994\"> Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> result</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span><span style=\"color:#4D9375\"> else</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">An error occurred: </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> result</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap_err</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">fn</span><span style=\"color:#80A665\"> some_fallible_function</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">name</span><span style=\"color:#CB7676\">:</span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#5DA994\">str</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#5DA994\">str</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#5DA994\">str</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Joey</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#5DA994\"> Err</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">That's a terrible name!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Nice to meet you, Joey!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and running a simple <code>cargo run</code> in the command line of your choice produces the following:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">Nice</span><span style=\"color:#C98A7D\"> to</span><span style=\"color:#C98A7D\"> meet</span><span style=\"color:#C98A7D\"> you,</span><span style=\"color:#C98A7D\"> Joey!</span></span></code></pre></figure>\n<p>While each of these examples may seem a bit contrived, each conveys an idea that is core to either language in proper\nerror handling: <em>explicitly</em> signifying to callers that the method is <em>fallible</em>! Fallible methods\ncan be thought of as a contract between caller and callee - the caller understands that the callee may produce an\nundesirable result or state that <em>should</em> be handled responsibly by the caller. Unfortunately, .NET does\nnot have a similarly equivalent error handling experience akin to Go or Rust in the base class library, and while not a\nfault of the language itself, it can be rather annoying to deal with codebases where the default\nerror handling precedent set by previous developers might be <code>throw</code>ing exceptions at every corner and littering said\ncodebase with <code>try</code>/<code>catch</code> blocks often accompanied by some form of global\nexception handler to swallow any unexpected exceptions that arise outside of our error handling blocks.</p>\n<p>What this leads to, more often than not, is a breakdown in an application or service's architecture as we're allowing\n<em>control flow via exceptions</em> (pause for audible gasps). If you've ever been exposed to languages\nwith GOTO statements (I cut my teeth with Fortran as my first real language during my undergrad), one can make the\nargument that exceptions as a form of control flow is nothing more than a sophisticated GOTO statement\nin an application or service. There's a plethora of reasons you won't see named or GOTO statements in many modern\nlanguages, applications, and codebases but I'll primarily make the argument that it makes code difficult\nto read, maintain, and extend as sensible control flow is essentially thrown out the window as we're allowing the flow\nof execution to sporadically jump lines anytime we see fit.</p>\n<h2>Rusti-fying our .NET code</h2>\n<p>I'm not a fan of throwing exceptions, and I've been making the conscious effort to force myself to handle errors in a\nsane fashion as they arise rather than propagating them up the stack by <code>throw</code>ing them anytime an undesirable state in\nmy application code is reached. As an experiment, let's take a look at Rust'\ns <a href=\"https://doc.rust-lang.org/std/result/\"><code>std::result::Result</code></a> type in an effort to take a monadic approach to wrap a\nmethod's outcome with a bit of metadata about the response. In a simple .NET 7 console app, let's define a result type\nthat captures information about the desired resulting data should the method succeed, i.e. no exceptions occur, and also\ncarries a bit of information about what types of errors we should expect in the case our processing fails:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">namespace</span><span style=\"color:#5DA994\"> ExceptionAlternatives</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">internal</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TData</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TError</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> TData</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> _data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#5DA994\"> TError</span><span style=\"color:#666666\">?</span><span style=\"color:#80A665\"> _error</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TData</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TError</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TData</span><span style=\"color:#80A665\"> data</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> new</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">data</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> static</span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TData</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> TError</span><span style=\"color:#666666\">></span><span style=\"color:#80A665\"> Err</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TError</span><span style=\"color:#80A665\"> error</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> new</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">error</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#80A665\"> Result</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TData</span><span style=\"color:#80A665\"> data</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> _data</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#80A665\"> Result</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">TError</span><span style=\"color:#80A665\"> error</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> _error</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> error</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> IsOk</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#BD976A\"> _data</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> not</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#BD976A\"> _error</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#4D9375\"> bool</span><span style=\"color:#80A665\"> IsErr</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> !</span><span style=\"color:#BD976A\">IsOk</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#5DA994\"> TData</span><span style=\"color:#80A665\"> Unwrap</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">_data</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> InvalidOperationException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Result data is null and cannot be accessed.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#BD976A\"> _data</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#5DA994\"> TError</span><span style=\"color:#80A665\"> UnwrapErr</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">_error</span><span style=\"color:#CB7676\"> is</span><span style=\"color:#CB7676\"> null</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            throw</span><span style=\"color:#CB7676\"> new</span><span style=\"color:#5DA994\"> InvalidOperationException</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Result error is null and cannot be accessed.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#BD976A\"> _error</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Let's breakdown what our <code>Result</code> type is encapsulating for us:</p>\n<ol>\n<li>We provide two generic arguments in the form of <code>TData</code> and <code>TError</code> so that callers are aware of the type context a\nfallible function may return</li>\n<li>We <em>internally</em> track the state of the resulting data and any error that may occur as a result (no pun intended) of\nthe processing that goes on in our method</li>\n<li>We'll provide some simple <code>Result</code> type constructing methods to assist our methods in building our <code>Result</code> correctly\nwithout said methods having to worry about how to instantiate our <code>Result</code> type correctly, i.e.\n<em>correct-by-construction</em></li>\n<li>We provide some simple utilities to peek at the result data without having to directly deref any of our internally\ntracked <code>Result</code> state with the <code>IsOk</code> and <code>IsErr</code> auto-props</li>\n<li>Finally, should our callers do their due diligence and confirm their <code>Result</code> either succeeded or failed, we provide\na couple of methods to expose the data or error encapsulated by our <code>Result</code> object with the <code>Unwrap()</code>\nand <code>UnwrapErr()</code> methods</li>\n</ol>\n<p>Using our <code>Result</code> in a contrived example, it may look something like the following out in the wild:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"csharp\" data-theme=\"vitesse-dark\"><code data-language=\"csharp\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">using</span><span style=\"color:#5DA994\"> ExceptionAlternatives</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> successfulProcessing</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#80A665\"> DoSomeFallibleProcessingThatSucceeds</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">var</span><span style=\"color:#80A665\"> failedProcessing</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> await</span><span style=\"color:#80A665\"> DoSomeFallibleProcessingThatFails</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Result of </span><span style=\"color:#666666\">{</span><span style=\"color:#CB7676\">nameof</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D\">successfulProcessing</span><span style=\"color:#666666\">)}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Successful? - </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">successfulProcessing</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">IsOk</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Errors? - </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">successfulProcessing</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">IsErr</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Successful result: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">successfulProcessing</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Unwrap</span><span style=\"color:#666666\">()}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C99076\">\\n</span><span style=\"color:#C98A7D\">Result of </span><span style=\"color:#666666\">{</span><span style=\"color:#CB7676\">nameof</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D\">failedProcessing</span><span style=\"color:#666666\">)}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Successful? - </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">failedProcessing</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">IsOk</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Errors? - </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">failedProcessing</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">IsErr</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">Console</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">WriteLine</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">$\"</span><span style=\"color:#C98A7D\">Error result: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">failedProcessing</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">UnwrapErr</span><span style=\"color:#666666\">()}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> DoSomeFallibleProcessingThatSucceeds</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act like we're doing something...</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> Task</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Delay</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">TimeSpan</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FromMilliseconds</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">500</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">>.</span><span style=\"color:#80A665\">Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">42</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">async</span><span style=\"color:#5DA994\"> Task</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">>></span><span style=\"color:#80A665\"> DoSomeFallibleProcessingThatFails</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Act like we're doing something again, but takes a bit longer...</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    await</span><span style=\"color:#BD976A\"> Task</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">Delay</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">TimeSpan</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">FromMilliseconds</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">1000</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#666666\">>.</span><span style=\"color:#80A665\">Err</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Oh no! Processing failed :(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Running our code, we see the following printed out in the console:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">Result</span><span style=\"color:#C98A7D\"> of</span><span style=\"color:#C98A7D\"> successfulProcessing</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Successful?</span><span style=\"color:#C98A7D\"> -</span><span style=\"color:#C98A7D\"> True</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Errors?</span><span style=\"color:#C98A7D\"> -</span><span style=\"color:#C98A7D\"> False</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Successful</span><span style=\"color:#C98A7D\"> result:</span><span style=\"color:#4C9A91\"> 42</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Result</span><span style=\"color:#C98A7D\"> of</span><span style=\"color:#C98A7D\"> failedProcessing</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Successful?</span><span style=\"color:#C98A7D\"> -</span><span style=\"color:#C98A7D\"> False</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Errors?</span><span style=\"color:#C98A7D\"> -</span><span style=\"color:#C98A7D\"> True</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Error</span><span style=\"color:#C98A7D\"> result:</span><span style=\"color:#C98A7D\"> Oh</span><span style=\"color:#C98A7D\"> no!</span><span style=\"color:#C98A7D\"> Processing</span><span style=\"color:#C98A7D\"> failed</span><span style=\"color:#C98A7D\"> :</span><span style=\"color:#666666\">(</span></span></code></pre></figure>\n<p>Sweet! While the first set of processing results may not be all that interesting, our second attempt at processing\nfailed and provided our context of the failure <em>without</em> <code>throw</code>ing an exception and muddying up our code with\nunnecessary <code>try</code>/<code>catch</code> blocks! While this feels a lot better (personally) to code against in a real-world scenario,\nwe still need to address one bit of code in our <code>Result</code> type.</p>\n<p>We still <code>throw</code> an exception when a user attempts to <code>Unwrap()</code> the <code>Result</code>'s internal data in the case that data does\nnot exist. Similar to Rust's <code>std::result::Result</code> type which <code>panic</code>'s (Rust's version of crashing an application) in\nthe case a caller attempts to access said data, we <code>throw</code> in an attempt to protect the <code>Result</code> object from handling up\ninvalid or <code>null</code> data. In our case, our <code>Result</code> type <em>expects</em> a non-<code>null</code> data type to be the underlying data\ncontext in our <code>Result</code> object. We could extend this to allow for handling <code>null</code>able values, but I'll leave that as an\nexercise for the reader.</p>\n<p>Secondly, in our <code>DoSomeFallibleProcessingThatFails()</code> method, we're not guaranteed the ongoing processing will not\npanic inside that method - we expect that all the stuff that goes on in that method is itself infallible which may not\nbe the case. If we we're talking to a database, for example, an exception outside of our code (maybe internal to the\nBCL) may be thrown in the case the connection string is malformed or our result set can't be mapped. We'd most likely be\nbetter off wrapping the execution context of <code>DoSomeFallibleProcessingThatFails()</code> in a <code>try</code>/<code>catch</code> block, returning\nan <code>Ok</code> result if all goes well while passing back an <code>Err</code> in the case our <code>catch</code> block needs to execute logic.</p>\n<h2>Throwing exceptions <em>when it matters</em></h2>\n<p>While I've been touting that we should refrain from <code>throw</code>ing exceptions in our .NET code, that does <strong>not</strong> mean that\nwe should <em>never</em> <code>throw</code> exceptions; simply put, <strong>throw exceptions when it matters</strong>.</p>\n<p>How should we determine when and where to <code>throw</code> exceptions and use <code>try</code>/<code>catch</code> blocks? For me, the age-old question\nis accompanied by the age-old answer - <em>it depends</em>.</p>\n<p>Does our application require loading in some critical configuration to properly run without error? Probably good\nto <code>throw</code> on startup if our configuration can't be found, read properly, or loaded into application memory/cached for\nwhatever reason.</p>\n<p>Do we rely on calls to third-party libraries or APIs that don't necessarily share our same radical <code>Result</code>-based\nideology? That's a great use case for surrounding that bit of connecting code with a <code>try</code>/<code>catch</code> while internally\npropagating those outbound results as a <code>Result</code> type in our application code.</p>\n<h2>Wrapping up</h2>\n<p>Exceptions have their time and place - as I've grown in my software career, I find that my personal developer growth\ncomes in the form of identifying <em>when</em> and <em>where</em> it may be appropriate to <code>throw</code> and surround bits of code\nin <code>try</code>/<code>catch</code> blocks rather than relying on them as a crutch for ease of control flow. What this translates to, more\nor less, is forcing callers and callees to properly handle error cases <em>as they arise</em> rather than making it the next\nstack frame's problem. Unfortunately, humans are not perfect. Code is written by humans (most of the time), and\ntherefore <em>can</em> be imperfect itself, not accounting for erroneous scenarios that might be outside our peripheral.</p>\n<p>Until next time, friends!</p>"
    },
    "_id": "2022/rethinking-exceptions-in-dotnet.md",
    "_raw": {
      "sourceFilePath": "2022/rethinking-exceptions-in-dotnet.md",
      "sourceFileName": "rethinking-exceptions-in-dotnet.md",
      "sourceFileDir": "2022",
      "contentType": "markdown",
      "flattenedPath": "2022/rethinking-exceptions-in-dotnet"
    },
    "type": "Post",
    "url": "/blog/2022/rethinking-exceptions-in-dotnet"
  },
  {
    "title": "Content-driven websites with PHP and Laravel",
    "description": "It's PHPin' time!",
    "pubDate": "2023-12-13T08:00:00.000Z",
    "category": "laravel",
    "heroImage": "/images/migrating-to-laravel/meme.jpg",
    "draft": false,
    "keywords": [
      "php",
      "laravel"
    ],
    "body": {
      "raw": "\nAlright, I'm making this one short (sort of). My pre-New Year's Resolution is to write on my blog here more\nthan bi-annually. Since becoming a dad and taking up my jorts-laden mantle and becoming alarmingly interested in grass\nmowing techniques and New Balance footwear this past year, finding the time to write has come too far and between\n(betwixt?).\n\nI was recently on the hunt for something new to learn and after laughing at memes\non [r/webdev](https://reddit.com/r/webdev/) about PHP for far too long, I figured I had better at least learn a little\nPHP\nto understand the source of the meme'ery in the first place. Learning PHP ultimately brought me\nto [Laravel](https://laravel.com/),\nand oh... my... god... do I feel betrayed by my fellow developers for dunking on PHP without telling me about the\nabundant Lambos running rampant in the Laravel ecosystem. I've been writing a bunch of Rust to keep my brain occupied\noutside my normal 8-to-5 and PHP was a breath of fresh air.\n\nIf you're a full-time TypeScript/.NET'er working with a sprinkle of other languages like Go and Rust here and there like\nme, PHP might seem like an afterthought. I can confidently say that after embarking down the Laravel/PHP road, I'm more\nthan happy I did.\n\nI thought it would be fun to write a bit about the process of learning Laravel through re-writing my website from a few\ndifferent iterations of JS frameworks and give some insight from a newcomers perspective about Laravel and PHP.\n\n## Framework exhaustion\n\nI'm a creature of habit, and one thing I've formed somewhat of a ritual around is re-writing my website, the very one\nyou happen to be reading, at least once a year. I've gone through a few iterations:\n\n- Static site generators with Hugo and Jekyll\n- SSR frameworks\n  with [Next.js](https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/blog-v1), [Nuxt.js](https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/nuxt-v2),\n  and [SvelteKit](https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/svelte)\n- At one point, a combo of [Astro and Rust](https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/astro-rust)\n  that formed an interesting mix of SSG and [island architectures](https://docs.astro.build/en/concepts/islands/) for\n  fetching dynamic data\n\nQuite frankly, I'm burnt out on JS framework madness, though to no fault of their own. There's many that are innovating\nand pushing the ecosystem forward with cool new technology that I'll get to use in production five years from now if I'm\nlucky. Each iteration I re-wrote wrangled a hodge podge of JS libraries for certain things I wanted to do, including but\nnot limited to:\n\n- Parsing markdown\n  content ([contentlayer](https://contentlayer.dev), [gray-matter](https://www.npmjs.com/package/gray-matter)) and\n  highlighting code snippets ([highlight.js](https://highlightjs.org/), [shiki](https://shiki.matsu.io/))\n- Storing things in a database with a bit of magic\n  abstraction ([prisma](https://prisma.io), [drizzle](https://orm.drizzle.team/))\n- Calling external APIs through framework semantics, which differ from framework to framework\n- Caching content pages as I don't update them often\n\nAnd a plethora of other things. The nice thing about Laravel is that a lot of this is out-of-the-box functionality so\nI can indulge in my slice-of-the-internet playground that is my website.\n\n## Making code great again\n\nI found that while re-building my site with Laravel, I was having fun writing code in a new way that I was missing when\nusing the JS flavor of the month framework. My .NET brain felt right at home with Laravel, all the while being able to\nmix and match frontends thanks to [Inertia.js](https://inertiajs.com) (I'm not quite ready to\nembrace [Livewire](https://livewire.laravel.com/) just yet). Anything I wanted to do, Laravel had an answer:\n\n- Syncing content to the database on\n  deployment? [Console commands](https://laravel.com/docs/10.x/artisan#generating-commands).\n- Querying content? [Eloquent](https://laravel.com/docs/10.x/eloquent).\n- Built-in caching, an HTTP client, and just about anything you'll need for the general web\n\nThe goal of this post will be to outline what I think makes Laravel great from the context of a PHP/Laravel outsider\neven for a small, mostly static website like mine.\n\n## DI from the start\n\nComing from .NET, I clutch onto my DI framework pearls tightly, rarely loosening my grip. I'll even die on the hill that\n.NET's first-party dependency injection framework (when used within it's expected confines) is one of the better DI\nframeworks out there (I've enjoyed it _much_ more than Spring's DI with magical `@autowire`s on every bean).\n\nI like to _think_ I'm not that much of a DI container shill after writing a few things in Rust and Go, and while they\nhave there place and time when serving a viable purpose, are nice to work with _when used correctly_. I see a lot of\n.NET in the wild attempting to bend `ServiceProvider`s to their application's will, creating a poor man's service\nlocator within a service locator (I'm guilty as charged).\n\nWith Laravel, binding contracts to concretes is simple and straight forward. Coupled with route-provider binding\nbuilt-in DI, it quite literally felt like I was back at home writing a modern .NET application.\n\n## Strict linting opt-in\n\nI'm glutton for punishment and Rust-level strict typing, so [phpstan](https://phpstan.org/) with the\nhelp [larastan](https://github.com/larastan/larastan) cranked up to the max scratched that itch. I'm currently\nin the process of trimming down the things I don't need with Laravel, which ultimately entails things\nlike removing auth-based middleware, migrations, and models since I have no intention of managing users. While max level\nphpstan requires a few tweaks to a freshly scaffolded [Laravel Breeze](https://github.com/laravel/breeze) app, once\nthose tweaks were made that mainly consisted of a few typing hints here and there, everything worked as expected.\nCoupled with [fswatch](https://github.com/emcrisostomo/fswatch), I got the same DX as I'm used to with Rust akin to\nrunning something like `cargo watch -x clippy` with the help of [cargo-watch](https://crates.io/crates/cargo-watch).\nBetter yet, hiding said `fswatch` command behind a [justfile](https://github.com/casey/just) made it seamless to\nintegrate phpstan continuously while I was writing code:\n\n```shell\ndefault: pail\n\n# runs tail logging\npail:\n    php artisan pail\n\n# syncs content to the database\nsync:\n    php artisan app:sync-content\n\n# continuously runs lint on file change\nlint:\n    fswatch -o app/ | xargs -n1 -I{} sh -c \"composer run lint\"\n```\n\nand in my terminal:\n\n```shell\n$ just lint # which runs `fswatch -o app/ | xargs -n1 -I{} sh -c \"composer run lint\"` by proxy\n\n> vendor/bin/phpstan analyse app\n\n\nNote: Using configuration file /Users/jmckenzie/projects/php/joeymckenzie.tech/phpstan.neon.\n 40/40 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%\n\n\n [OK] No errors\n```\n\nBeautiful! Any source code change within my `app/` directory triggered a full linting run to make sure I was holding\nmyself accountable for not letting my code go to shit (pardon my French).\n\nSide note, composer is easily up there with cargo competing for best language toolchain on the market. I mean come on\nJavaScript... why do we need four different package managers?\n\n## Content syncing\n\nOne of the things I need is the ability to continuously sync markdown content with the database I store it in, which in\nmy case is just a MySQL instance running on my droplet provisioned with the help of Laravel Forge (more on that later).\nRather than writing some one off shell script to do that, I found Laravel commands mighty useful to simply just define a\ncustom artisan command that would:\n\n- Read my content files\n- Parse the frontmatter on each markdown file\n- Parse the markdown and convert it to HTML\n- Save everything to the data to the database\n\nThat ended up looking something like:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Console\\Commands;\n\nuse App\\Contracts\\ContentUtilityContract;\nuse App\\Models\\ContentMeta;\nuse Illuminate\\Console\\Command;\nuse Throwable;\n\nfinal class SyncContent extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'app:sync-content';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Syncs content from markdown files into the database.';\n\n    /**\n     * Execute the console command.\n     *\n     * @throws Throwable\n     */\n    public function handle(ContentUtilityContract $contentUtility): void\n    {\n        $files = $contentUtility->getMarkdownFilePaths();\n        collect($files)\n            ->map(fn (string $filePath) => $contentUtility->getParsedContent($filePath))\n            ->each(fn (ContentMeta $contentMeta) => $contentUtility->upsertBlogPost($contentMeta));\n    }\n}\n```\n\nComing from .NET, I'm a self diagnosed [LINQ](https://learn.microsoft.com/en-us/dotnet/csharp/linq/) addict. Collections\nmade me feel right at home. From the above, I'm configuring a short pipeline of sorts that will do all the things I\noutlined with a little help from the DI container and the `ContentUtilityContract`:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Contracts;\n\nuse App\\Models\\BlogPost;\nuse App\\Models\\ContentMeta;\nuse League\\CommonMark\\Exception\\CommonMarkException;\nuse League\\Config\\Exception\\ConfigurationExceptionInterface;\n\ninterface ContentUtilityContract\n{\n    /**\n     * @return string[]\n     */\n    public function getMarkdownFilePaths(): array;\n\n    /**\n     * @throws ConfigurationExceptionInterface\n     * @throws CommonMarkException\n     */\n    public function getParsedContent(string $filePath): ContentMeta;\n\n    public function upsertBlogPost(ContentMeta $contentMeta): BlogPost;\n}\n```\n\nand whose implementation looks something like:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Services;\n\nuse App\\Contracts\\ContentUtilityContract;\nuse App\\Models\\BlogPost;\nuse App\\Models\\ContentMeta;\nuse Illuminate\\Support\\Facades\\Log;\nuse League\\CommonMark\\ConverterInterface;\nuse League\\CommonMark\\Extension\\FrontMatter\\Data\\SymfonyYamlFrontMatterParser;\nuse League\\CommonMark\\Extension\\FrontMatter\\FrontMatterParser;\nuse Override;\n\nfinal readonly class MarkdownUtility implements ContentUtilityContract\n{\n    private ConverterInterface $converter;\n\n    public function __construct(ConverterInterface $converter)\n    {\n        $this->converter = $converter;\n    }\n\n    #[Override]\n    public function getMarkdownFilePaths(): array\n    {\n        $basePath = base_path();\n        $contentPath = \"$basePath\".'/content';\n\n        Log::info(\"identified content path as $contentPath, globbing content files\");\n\n        /** @var string[] $files */\n        $files = app()->environment() === 'local'\n            ? glob(\"$contentPath/**/*.md\", GLOB_BRACE)\n            : glob(\"$contentPath/*[!draft]/*.md\", GLOB_BRACE);\n\n        $fileCount = count($files);\n\n        Log::info(\"$fileCount globbed files found\");\n\n        return $files;\n    }\n\n    #[Override]\n    public function getParsedContent(string $filePath): ContentMeta\n    {\n        Log::info(\"parsing content for file $filePath\");\n\n        /** @var string $contents */\n        $contents = file_get_contents($filePath);\n        $fileInfo = pathinfo($filePath);\n        $extension = empty($fileInfo['extension'])\n            ? ''\n            : '.'.$fileInfo['extension'];\n        $fileSlug = basename($filePath, $extension);\n\n        Log::info(\"file parsed, determined slug as $fileSlug\");\n\n        $frontMatterParser = new FrontMatterParser(new SymfonyYamlFrontMatterParser());\n        $parsedContent = $frontMatterParser->parse($contents);\n        $frontMatter = $parsedContent->getFrontMatter();\n        $markdown = $parsedContent->getContent();\n        $html = $this->converter->convert($markdown)->getContent();\n\n        Log::info('frontmatter and content parsed');\n\n        return new ContentMeta($fileSlug, $markdown, $html, $frontMatter);\n    }\n\n    #[Override]\n    public function upsertBlogPost(ContentMeta $contentMeta): BlogPost\n    {\n        $contentSlug = $contentMeta->slug;\n\n        Log::info(\"upserting blog post $contentSlug\");\n\n        $upsertedBlog = BlogPost::updateOrCreate([\n            'slug' => $contentSlug,\n        ], [\n            'slug' => $contentSlug,\n            'title' => $contentMeta->frontMatter->title,\n            'description' => $contentMeta->frontMatter->description,\n            'category' => $contentMeta->frontMatter->category,\n            'published_date' => $contentMeta->frontMatter->pubDate,\n            'hero_image' => $contentMeta->frontMatter->heroImage,\n            'keywords' => implode(',', $contentMeta->frontMatter->keywords),\n            'raw_content' => $contentMeta->markdown,\n            'parsed_content' => $contentMeta->html,\n        ]);\n\n        Log::info('blog content updated!');\n\n        return $upsertedBlog;\n    }\n}\n```\n\nNow from what I've gathered... folks in the PHP community don't exactly _love_ `final` classes - I have no intention on\ninheriting from these classes and like to follow a composition approach as often as possible (though not always).\n\nNow anytime I want to sync my content, a simple\n\n```shell\n$ artisan app:sync-content\n```\n\ndoes the trick! Note: I'm a lazy developer, so my `~/.zshrc` configuration has an alias:\n\n```shell\nalias artisan=\"php artisan\"\n```\n\nI could probably be even lazier and shorten it, but that'll do for now.\n\n## Servers\n\nUsing [Laravel Forge](https://forge.laravel.com/) and a DigitalOcean droplet, I'm able to turn the server provisioning\npart of my brain completely off and simply write code, commit, and push. Forge does just about everything for you when\ndeploying application servers, including setting up MySQL, PHP versions, server tooling, SSL, etc. I was even able to\ntweak the deployment script, so I could refresh/sync my markdown content with the database anytime a new deployment was\ntriggered. You're probably thinking \"wait... why do you have a database in the first place?\" There's a few reasons for\nthat.\n\nI use [torchlight](https://torchlight.dev/) for syntax highlighting in content, and storing the parsed content in the\ndatabase means I only need to pay the price of content highlighting once at deployment time. I also like to keep track\nof views on each blog, so I need some form of persistent storage. I _also_ like to keep my notes in there (one of my few\npieces of website flair) where I can simply SSH to my droplet and _drop_ (no pun intended) into\na [tinker](https://laravel.com/docs/10.x/artisan#tinker) session to create more notes, so something like this just works\nwhen I\nwant to add a new note without a GUI component:\n\n```shell\n# On the droplet...\n\nroot@website /home/forge/joeymckenzie.tech $ php artisan tinker\n\nPsy Shell v0.11.22 (PHP 8.3.0 — cli) by Justin Hileman\n\n> \\App\\Models\\Note::create(['title' => 'Networking', 'description' => 'I have no clue how SSL truly works.']);\n= App\\Models\\Note {#7285\n    title: \"Networking\",\n    description: \"I have no clue how SSL truly works.\",\n    +updated_at: \"2023-12-11 23:04:02\",\n    +created_at: \"2023-12-11 23:04:02\",\n    +id: 5,\n  }\n```\n\nI can also generate sitemaps on startup too which is \"dumb easy\" (as the kids say) with the help of\nSpatie's [Laravel sitemap library](https://github.com/spatie/laravel-sitemap) paired with another console command:\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Console\\Commands;\n\nuse App\\Models\\BlogPost;\nuse Illuminate\\Console\\Command;\nuse Spatie\\Sitemap\\SitemapGenerator;\nuse Spatie\\Sitemap\\Tags\\Url;\n\nclass GenerateSitemap extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'app:generate-sitemap';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Generates the sitemap.';\n\n    /**\n     * Generates a sitemap for all the SEO goodness\n     */\n    public function handle(): void\n    {\n        /** @var string $url */\n        $url = config('app.url');\n\n        // Build the sitemap key that will ultimately live in the public directory\n        $publicPath = public_path();\n        $outputFile = \"$publicPath/sitemap-index.xml\";\n\n        // Grab a list of the slugs from the database so we can\n        // dynamically generate the different entries of the map\n        $slugs = BlogPost::select(['slug', 'updated_at'])->get();\n        $siteMap = SitemapGenerator::create($url)->getSitemap();\n\n        // Roll through each entry, mapping each to a sitemap entry with a low priority change value\n        collect($slugs)\n            ->each(function (BlogPost $blogPost) use ($siteMap) {\n                $slug = $blogPost->slug;\n                $siteMap\n                    ->add(Url::create(\"/blog/$slug\")\n                        ->setPriority(0.5)\n                        ->setChangeFrequency(Url::CHANGE_FREQUENCY_YEARLY)\n                        ->setLastModificationDate($blogPost->updated_at?->toDate() ?? now()));\n            });\n\n        // Finally, add the static pages as well\n        $siteMap\n            ->add(Url::create('/about')\n                ->setPriority(0.5)\n                ->setChangeFrequency(Url::CHANGE_FREQUENCY_YEARLY))\n            ->add(Url::create('/now')\n                ->setPriority(0.5)\n                ->setChangeFrequency(Url::CHANGE_FREQUENCY_YEARLY))\n            ->writeToFile($outputFile);\n    }\n}\n```\n\nAnd in my Forge deployment script, I can simply add the custom artisan command to generate a new sitemap everytime I\ndeploy:\n\n```shell\n# Other stuff...\n\nif [ -f artisan ]; then\n    $FORGE_PHP artisan migrate --force\n    $FORGE_PHP artisan app:sync-content\n    $FORGE_PHP artisan app:generate-sitemap\nfi\n```\n\nSimple!\n\n# Inertia\n\nOkay, so I know I'm somewhat dunking on JavaScript in this post, but truth be told... I still love JS. I've had jobs\nworking with each of the Big Three<sup>tm</sup> frameworks in Angular, Vue, and React. I've begrudgingly been using\nReact because I'm lazy and (what seems like) one of the few that enjoy JSX. With Inertia and React, that means I can use\nthings like [shad](https://ui.shadcn.com/) for getting that clean Tailwind look (there's also\na [Vue](https://www.shadcn-vue.com/) and [Svelte](https://www.shadcn-svelte.com/) versions I used in the previous\niterations), and\nall the neat React things that are out in the wild. If it's on the web, there's probably a React library for it.\n\nI'm a fan of [pnpm](https://pnpm.io/) as a drop in replacement for npm, and I've also decided to\nditch [eslint](https://eslint.org/) and [prettier](https://prettier.io/) for [biome](https://biomejs.dev/), another drop\nin replacement for both tools, written in Rust (like all good tooling nowadays). I've had my fair share of battles over\nthe years with both eslint and prettier, and also getting them to play nice together (shout out\nto [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier)). While they're fundamentally different\nthings, i.e. formatting vs. linting, I think the argument could be made they're in the same family of code quality\ntools. Biome neatly wraps them up into a single tool that _just works_. So now when I want to lint or format my React\ncomponents, no more `.eslintrc.*` and `.prettierrc.*` files to deal with, just a single `biome.json` file:\n\n```json\n{\n    \"$schema\": \"https://biomejs.dev/schemas/1.4.1/schema.json\",\n    \"organizeImports\": {\n        \"enabled\": true\n    },\n    \"formatter\": {\n        \"indentStyle\": \"space\",\n        \"indentWidth\": 4\n    },\n    \"linter\": {\n        \"enabled\": true,\n        \"rules\": {\n            \"recommended\": true\n        }\n    }\n}\n```\n\nCoupled with a neat biome command:\n\n```shell\n# When I want to format things\n$ pnpm dlx @biomejs/biome format --write ./resources/js\n\n# or, if I want to lint\n$ pnpm dlx @biomejs/biome lint ./resources/js\n```\n\nWrapping those up in my `package.json` `scripts` looks something like:\n\n```json\n{\n    // Other stuff...\n    \"scripts\": {\n        \"dev\": \"vite\",\n        \"build\": \"tsc && vite build && vite build --ssr\",\n        \"tailwind\": \"prettier --plugin prettier-plugin-tailwindcss --write ./resources/js\",\n        \"check\": \"pnpm dlx @biomejs/biome check --apply ./resources/js\",\n        \"fmt\": \"pnpm dlx @biomejs/biome format --write ./resources/js\",\n        \"fix\": \"pnpm dlx @biomejs/biome lint --apply ./resources/js\",\n        \"lint\": \"pnpm dlx @biomejs/biome lint ./resources/js\",\n        \"ci\": \"pnpm dlx @biomejs/biome ci ./resources/js\",\n        \"prepare\": \"git config core.hookspath .githooks\",\n        \"pre-commit\": \"pnpm run tailwind && pnpm run check && pnpm run fmt\"\n    }\n}\n```\n\nNow unfortunately, I'm not _entirely_ free of prettier just yet, as there's still no support for [Tailwind class sorting\nin biome](https://github.com/biomejs/biome/discussions/164). I only use prettier to simply wrangle Tailwind classes,\nthen let biome do the rest.\n\nInertia has SSR too, which boils down to simply having to run an `artisan` command on deployment to spin up your Node.js\nserver where ever it may be and point Laravel to it. With Forge, it's _literally_ the flip of a switch.\n\nOne of the things I also needed was to display some common data on each page of my website, including on all the posts\nthemselves. In the footer, you'll see a Spotify widget that displays what I'm currently listening to and the current\nbuild commit SHA the site was deployed with. With Inertia middleware, this was a simple addon to the existing configured\nmiddleware:\n\n#### app/Http/Middleware/HandleInertiaRequests.php\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Http\\Middleware;\n\nuse App\\Contracts\\MusicTrackerContract;\nuse Illuminate\\Foundation\\Application;\nuse Illuminate\\Http\\Request;\nuse Inertia\\Middleware;\nuse Tightenco\\Ziggy\\Ziggy;\n\nfinal class HandleInertiaRequests extends Middleware\n{\n    /**\n     * The root template that is loaded on the first page visit.\n     *\n     * @var string\n     */\n    protected $rootView = 'app';\n\n    public function __construct(private readonly MusicTrackerContract $spotifyTracker)\n    {\n    }\n\n    /**\n     * Determine the current asset version.\n     */\n    public function version(Request $request): ?string\n    {\n        return parent::version($request);\n    }\n\n    /**\n     * Define the props that are shared by default.\n     *\n     * @return array<string, mixed>\n     */\n    public function share(Request $request): array\n    {\n        return [\n            ...parent::share($request),\n            'ziggy' => fn () => [\n                ...(new Ziggy)->toArray(),\n                'location' => $request->url(),\n            ],\n            // Propagate the commit information on every request\n            'commit' => config('app.commit'),\n            // Also propagate the current listening data from Spotify\n            'spotify' => $this->spotifyTracker->getNowPlaying(),\n            'laravelVersion' => Application::VERSION,\n            'phpVersion' => PHP_VERSION,\n        ];\n    }\n}\n```\n\nand in my component footer:\n\n#### resources/js/Components/SpotifyTracker.tsx\n\n```tsx\nexport default function SpotifyTracker({children}: { children: React.JSX.Element }): React.JSX.Element {\n    // Inertia has a pretty sweet hook allowing us to tap into common page properties\n    const page = usePage();\n\n    const nowPlaying = page.props.spotify as NowPlaying | undefined;\n    const currentlyPlaying = nowPlaying?.nowPlaying ?? false;\n\n    return (\n        <>\n            {currentlyPlaying && nowPlaying !== undefined && (\n                <CurrentlyPlaying nowPlaying={nowPlaying}>\n                    {children}\n                </CurrentlyPlaying>\n            )}\n            {!currentlyPlaying && (\n                <NotCurrentlyPlaying>{children}</NotCurrentlyPlaying>\n            )}\n        </>\n    );\n}\n```\n\nwith the corresponding `PageProps` in `index.d.ts` changes:\n\n```typescript\nexport type NowPlaying = {\n    nowPlaying: boolean;\n    albumImageSrc?: string;\n    artist?: string;\n    href?: string;\n    trackTitle?: string;\n};\n\nexport type Note = {\n    title: string;\n    description: string;\n};\n\nexport type PageProps<\n    T extends Record<string, unknown> = Record<string, unknown>,\n> = T & {\n    commit: string;\n    laravelVersion: string;\n    phpVersion: string;\n    spotify?: NowPlaying;\n    notes: Note[];\n};\n```\n\nNow any page returned from an Inertia rendered route has all the common data available as React props. Pretty sweet,\nhuh?\n\n## Rendering content\n\nFor displaying the content of a blog post route, Laravel's route-model binding offered everything I needed to get up and\nrunning. Simply defining a route in my `web.php` like so:\n\n```php\nRoute::get('blog/{slug}', fn (string $slug, ContentRepositoryContract $contentRepository) => Inertia::render('Blog/Post/Index', [\n    'post' => $contentRepository->getBlogPostBySlug($slug),\n]))\n    ->name('post');\n```\n\npasses everything the page needs to render to the component responsible for rending content:\n\n```typescript jsx\nimport {Badge} from \"@/Components/ui/badge\";\nimport {Button} from \"@/Components/ui/button\";\nimport MainLayout from \"@/Layouts/MainLayout\";\nimport {type Post} from \"@/models\";\nimport {Head, Link} from \"@inertiajs/react\";\nimport * as React from \"react\";\n\nexport default function BlogPost({post}: { post: Post }): React.JSX.Element {\n    const formattedDate = new Date(\n        post.published_date ?? \"\",\n    ).toLocaleDateString(\"en-us\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n    });\n\n    return (\n        <>\n            <Head title={`${post.title} | joeymckenzie.tech`}>\n                <meta name=\"keywords\" content={post.keywords}/>\n            </Head>\n\n            <MainLayout>\n                <div className=\"flex flex-col justify-center\">\n                    <article\n                        className=\"prose mx-auto w-full overflow-hidden pb-6 dark:prose-invert prose-pre:text-sm prose-img:mx-auto prose-img:rounded-md\">\n                        <h1 className=\"text-center text-2xl\">{post.title}</h1>\n                        <div className=\"flex flex-row items-center justify-center gap-x-2 text-sm tracking-tight\">\n                            <time dateTime={post.published_date}>\n                                {formattedDate}\n                            </time>\n                            <Badge>{post.category}</Badge>\n                            <p>{post.views} views</p>\n                        </div>\n                        <img\n                            alt={`${post.title} blog meme`}\n                            src={post.hero_image}\n                            height=\"400\"\n                            width=\"500\"\n                        />\n                        <div\n                            // biome-ignore lint/security/noDangerouslySetInnerHtml: controlled input\n                            dangerouslySetInnerHTML={{\n                                __html: post.parsed_content,\n                            }}\n                        />\n                    </article>\n                    <Link href={route(\"blogs\")} className=\"mx-auto max-w-md\">\n                        <Button variant=\"secondary\"> Back to blogs</Button>\n                    </Link>\n                </div>\n            </MainLayout>\n        </>\n    );\n}\n```\n\nA fairly simple component that ultimately takes the converted HTML content I've run through the nifty PHP League's\n[CommonMark](https://commonmark.thephpleague.com/) library and spit out on the other side to `dangerouslySetInnerHTML`\nwithin my React code.\n\nGathering the content is simple enough with the help of Eloquent too:\n\n#### app/Services/BlogPostRepository.php\n\n```php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Services;\n\nuse App\\Contracts\\ContentRepositoryContract;\nuse App\\Models\\BlogPost;\nuse DateInterval;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Support\\Facades\\Cache;\nuse Override;\n\nfinal readonly class BlogPostRepository implements ContentRepositoryContract\n{\n    #[Override]\n    public function getBlogPostBySlug(string $slug): BlogPost\n    {\n        // We won't cache the blogs, easier to let the view counts ride\n        $post = BlogPost::select([\n            'id',\n            'slug',\n            'keywords',\n            'hero_image',\n            'published_date',\n            'category',\n            'title',\n            'views',\n            'parsed_content',\n        ])->firstWhere('slug', $slug);\n\n        if (is_null($post)) {\n            abort(404);\n        }\n\n        // While we're at it, add a view count\n        // AddView::dispatch($post);\n\n        $post->views += 1;\n        $post->save();\n\n        return $post;\n    }\n\n    #[Override]\n    public function getLatestBlogPostMetadata(): Collection\n    {\n        /** @var Collection<int, BlogPost> $posts */\n        $posts = self::getBlogPostMetadata()\n            ->sortByDesc('published_date')\n            ->take(3);\n\n        return $posts;\n    }\n\n    #[Override]\n    public function getBlogPostMetadata(): Collection\n    {\n        if (Cache::has('allPosts')) {\n            /** @var Collection<int, BlogPost> $allPosts */\n            $allPosts = Cache::get('allPosts');\n\n            return $allPosts;\n        }\n\n        /** @var Collection<int, BlogPost> $posts */\n        $posts = BlogPost::select([\n            'slug',\n            'published_date',\n            'category',\n            'description',\n            'title',\n            'views',\n        ])\n            ->orderByDesc('published_date')\n            ->get();\n\n        Cache::set('allPosts', $posts, new DateInterval('PT5M'));\n\n        return $posts;\n    }\n}\n```\n\nI'm not exactly a fan of the repository pattern on top of existing repository implementations - Eloquent is _already_ a\ngreat implementation of the repository pattern. But... I like to keep my controllers/routes thin and also wanted to add\na bit a caching here and there as the content itself won't change much from deployment to deployment.\n\nWhich brings me to my next talking point...\n\n# Deployments\n\nI'm a big fan of GitHub Actions, and while I _could_ just trigger Forge deploys based on the latest push, it's easy\nenough to set up a simple action to ping the deployment URL to tell Forge to pull in my code and deploy the latest\nversion of it to the droplet. I like to display the latest commit in the footer, so I also needed a way to propagate the\ngit commit SHA as an environment variable. Unfortunately, Forge only has the SHA available at deployment time.\n_Fortunately_, it's easy enough to work around by pulling in the latest configuration for production via the Forge CLI,\nappending the SHA as an environment variable, and simply pushing it back up to Forge before the deployment script runs.\n\nOne caveat to this process is that we want the append process to only append _if_ there's currently not a commit in the `.env` file, while replacing the existing commit key-value pair if it already exists. A quick script like the follow should get the job done:\n\n```shell\n#!/bin/bash\n\n# Check if the correct number of arguments is provided\nif [ \"$#\" -ne 2 ]; then\n  echo \"Usage: $0 <arg1> <arg2>\"\n  exit 1\nfi\n\n# Assign arguments to variables\nkey=\"$1\"\nvalue=\"$2\"\n\n# Check if the key already exists in the file\nif grep -q \"^$key=\" .env; then\n  # Replace the existing key-value pair\n  sed -i \"s/^$key=.*/$key=$value/\" .env\nelse\n  # Append the new key-value pair to the end of the file\n  echo \"$key=$value\" >> .env\nfi\n```\n\n\nWe can then update our deploy workflow action to call this script, pass the key and SHA to it, and execute directly before updating the production configuration. All-in-all, this is what my deploy action looks like:\n\n```yaml\nname: Deploy to Forge\n\non:\n    workflow_run:\n        workflows: [ 'Inertia CI' ]\n        types:\n            - completed\n\njobs:\n    build:\n        runs-on: ubuntu-latest\n        timeout-minutes: 10\n\n        name: Deploy application\n        steps:\n            - uses: actions/checkout@v3\n\n            - name: Setup PHP\n              id: setup-php\n              uses: shivammathur/setup-php@v2\n              with:\n                  php-version: '8.3'\n\n            - name: Install Forge CLI\n              run: composer global require laravel/forge-cli\n\n            - name: Authenticate with Forge\n              run: forge login --token=${{ secrets.FORGE_API_TOKEN }}\n\n            # Forge environment variables, including the current git commit hash,\n            # aren't included as runtime environment variables and only in the build script.\n            # To get the current commit propagated, pull the current production configuration,\n            # and append the current commit to the file and push it back up to Forge.\n            - name: Download current configuration\n              run: forge env:pull joeymckenzie.tech ${{ github.workspace }}/.env\n\n            - name: Add current commit and push back to forge\n              run: |\n                ./scripts/update-commit.sh FORGE_DEPLOY_COMMIT ${{ github.sha }}\n              working-directory: ${{ github.workspace }}\n\n            - name: Push environment to Forge\n              run: forge env:push joeymckenzie.tech ${{ github.workspace }}/.env\n\n            - name: Ping deploy URL\n              run: curl -l ${{ secrets.FORGE_DEPLOY_URL }}\n```\n\nSetting a few environment variables, badda bing, badda boom, and everything works.\n\n## Wrapping up\n\nAlright, I promised to keep it short.\n\nIn the end, is Laravel probably overkill for my simple little website? Absolutely.\n\nIs it fun to over-engineer such things, though? Ab-so-lutely.\n\nI'm looking forward to seeing what else I can conjure up with Laravel to give myself a reason to explore all the various\nnooks and crannies of the framework as I'm not a full-time Laravel developer (yet...). All the code that powers my blog\nis available on GitHub [here](https://github.com/JoeyMckenzie/joeymckenzie.tech). I'm just beginning my Laravel journey\nand I'm well aware there's a _ton_ more to learn, but nonetheless, I'm quite excited to keep at it.\n\nTL;DR - Laravel is friggin' sweet.\n\nUntil next time, friends!\n",
      "html": "<p>Alright, I'm making this one short (sort of). My pre-New Year's Resolution is to write on my blog here more\nthan bi-annually. Since becoming a dad and taking up my jorts-laden mantle and becoming alarmingly interested in grass\nmowing techniques and New Balance footwear this past year, finding the time to write has come too far and between\n(betwixt?).</p>\n<p>I was recently on the hunt for something new to learn and after laughing at memes\non <a href=\"https://reddit.com/r/webdev/\">r/webdev</a> about PHP for far too long, I figured I had better at least learn a little\nPHP\nto understand the source of the meme'ery in the first place. Learning PHP ultimately brought me\nto <a href=\"https://laravel.com/\">Laravel</a>,\nand oh... my... god... do I feel betrayed by my fellow developers for dunking on PHP without telling me about the\nabundant Lambos running rampant in the Laravel ecosystem. I've been writing a bunch of Rust to keep my brain occupied\noutside my normal 8-to-5 and PHP was a breath of fresh air.</p>\n<p>If you're a full-time TypeScript/.NET'er working with a sprinkle of other languages like Go and Rust here and there like\nme, PHP might seem like an afterthought. I can confidently say that after embarking down the Laravel/PHP road, I'm more\nthan happy I did.</p>\n<p>I thought it would be fun to write a bit about the process of learning Laravel through re-writing my website from a few\ndifferent iterations of JS frameworks and give some insight from a newcomers perspective about Laravel and PHP.</p>\n<h2>Framework exhaustion</h2>\n<p>I'm a creature of habit, and one thing I've formed somewhat of a ritual around is re-writing my website, the very one\nyou happen to be reading, at least once a year. I've gone through a few iterations:</p>\n<ul>\n<li>Static site generators with Hugo and Jekyll</li>\n<li>SSR frameworks\nwith <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/blog-v1\">Next.js</a>, <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/nuxt-v2\">Nuxt.js</a>,\nand <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/svelte\">SvelteKit</a></li>\n<li>At one point, a combo of <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/archive/astro-rust\">Astro and Rust</a>\nthat formed an interesting mix of SSG and <a href=\"https://docs.astro.build/en/concepts/islands/\">island architectures</a> for\nfetching dynamic data</li>\n</ul>\n<p>Quite frankly, I'm burnt out on JS framework madness, though to no fault of their own. There's many that are innovating\nand pushing the ecosystem forward with cool new technology that I'll get to use in production five years from now if I'm\nlucky. Each iteration I re-wrote wrangled a hodge podge of JS libraries for certain things I wanted to do, including but\nnot limited to:</p>\n<ul>\n<li>Parsing markdown\ncontent (<a href=\"https://contentlayer.dev\">contentlayer</a>, <a href=\"https://www.npmjs.com/package/gray-matter\">gray-matter</a>) and\nhighlighting code snippets (<a href=\"https://highlightjs.org/\">highlight.js</a>, <a href=\"https://shiki.matsu.io/\">shiki</a>)</li>\n<li>Storing things in a database with a bit of magic\nabstraction (<a href=\"https://prisma.io\">prisma</a>, <a href=\"https://orm.drizzle.team/\">drizzle</a>)</li>\n<li>Calling external APIs through framework semantics, which differ from framework to framework</li>\n<li>Caching content pages as I don't update them often</li>\n</ul>\n<p>And a plethora of other things. The nice thing about Laravel is that a lot of this is out-of-the-box functionality so\nI can indulge in my slice-of-the-internet playground that is my website.</p>\n<h2>Making code great again</h2>\n<p>I found that while re-building my site with Laravel, I was having fun writing code in a new way that I was missing when\nusing the JS flavor of the month framework. My .NET brain felt right at home with Laravel, all the while being able to\nmix and match frontends thanks to <a href=\"https://inertiajs.com\">Inertia.js</a> (I'm not quite ready to\nembrace <a href=\"https://livewire.laravel.com/\">Livewire</a> just yet). Anything I wanted to do, Laravel had an answer:</p>\n<ul>\n<li>Syncing content to the database on\ndeployment? <a href=\"https://laravel.com/docs/10.x/artisan#generating-commands\">Console commands</a>.</li>\n<li>Querying content? <a href=\"https://laravel.com/docs/10.x/eloquent\">Eloquent</a>.</li>\n<li>Built-in caching, an HTTP client, and just about anything you'll need for the general web</li>\n</ul>\n<p>The goal of this post will be to outline what I think makes Laravel great from the context of a PHP/Laravel outsider\neven for a small, mostly static website like mine.</p>\n<h2>DI from the start</h2>\n<p>Coming from .NET, I clutch onto my DI framework pearls tightly, rarely loosening my grip. I'll even die on the hill that\n.NET's first-party dependency injection framework (when used within it's expected confines) is one of the better DI\nframeworks out there (I've enjoyed it <em>much</em> more than Spring's DI with magical <code>@autowire</code>s on every bean).</p>\n<p>I like to <em>think</em> I'm not that much of a DI container shill after writing a few things in Rust and Go, and while they\nhave there place and time when serving a viable purpose, are nice to work with <em>when used correctly</em>. I see a lot of\n.NET in the wild attempting to bend <code>ServiceProvider</code>s to their application's will, creating a poor man's service\nlocator within a service locator (I'm guilty as charged).</p>\n<p>With Laravel, binding contracts to concretes is simple and straight forward. Coupled with route-provider binding\nbuilt-in DI, it quite literally felt like I was back at home writing a modern .NET application.</p>\n<h2>Strict linting opt-in</h2>\n<p>I'm glutton for punishment and Rust-level strict typing, so <a href=\"https://phpstan.org/\">phpstan</a> with the\nhelp <a href=\"https://github.com/larastan/larastan\">larastan</a> cranked up to the max scratched that itch. I'm currently\nin the process of trimming down the things I don't need with Laravel, which ultimately entails things\nlike removing auth-based middleware, migrations, and models since I have no intention of managing users. While max level\nphpstan requires a few tweaks to a freshly scaffolded <a href=\"https://github.com/laravel/breeze\">Laravel Breeze</a> app, once\nthose tweaks were made that mainly consisted of a few typing hints here and there, everything worked as expected.\nCoupled with <a href=\"https://github.com/emcrisostomo/fswatch\">fswatch</a>, I got the same DX as I'm used to with Rust akin to\nrunning something like <code>cargo watch -x clippy</code> with the help of <a href=\"https://crates.io/crates/cargo-watch\">cargo-watch</a>.\nBetter yet, hiding said <code>fswatch</code> command behind a <a href=\"https://github.com/casey/just\">justfile</a> made it seamless to\nintegrate phpstan continuously while I was writing code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">default:</span><span style=\"color:#C98A7D\"> pail</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># runs tail logging</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">pail:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    php</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> pail</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># syncs content to the database</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">sync:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    php</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> app:sync-content</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># continuously runs lint on file change</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">lint:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    fswatch</span><span style=\"color:#C99076\"> -o</span><span style=\"color:#C98A7D\"> app/</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> xargs</span><span style=\"color:#C99076\"> -n1</span><span style=\"color:#C99076\"> -I</span><span style=\"color:#DBD7CAEE\">{} sh -c \"composer run lint\"</span></span></code></pre></figure>\n<p>and in my terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> just</span><span style=\"color:#C98A7D\"> lint</span><span style=\"color:#758575DD\"> # which runs `fswatch -o app/ | xargs -n1 -I{} sh -c \"composer run lint\"` by proxy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> vendor/bin/phpstan analyse app</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Note:</span><span style=\"color:#C98A7D\"> Using</span><span style=\"color:#C98A7D\"> configuration</span><span style=\"color:#C98A7D\"> file</span><span style=\"color:#C98A7D\"> /Users/jmckenzie/projects/php/joeymckenzie.tech/phpstan.neon.</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> 40/40</span><span style=\"color:#DBD7CAEE\"> [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\"> [</span><span style=\"color:#DBD7CAEE\">OK</span><span style=\"color:#666666\">]</span><span style=\"color:#80A665\"> No</span><span style=\"color:#C98A7D\"> errors</span></span></code></pre></figure>\n<p>Beautiful! Any source code change within my <code>app/</code> directory triggered a full linting run to make sure I was holding\nmyself accountable for not letting my code go to shit (pardon my French).</p>\n<p>Side note, composer is easily up there with cargo competing for best language toolchain on the market. I mean come on\nJavaScript... why do we need four different package managers?</p>\n<h2>Content syncing</h2>\n<p>One of the things I need is the ability to continuously sync markdown content with the database I store it in, which in\nmy case is just a MySQL instance running on my droplet provisioned with the help of Laravel Forge (more on that later).\nRather than writing some one off shell script to do that, I found Laravel commands mighty useful to simply just define a\ncustom artisan command that would:</p>\n<ul>\n<li>Read my content files</li>\n<li>Parse the frontmatter on each markdown file</li>\n<li>Parse the markdown and convert it to HTML</li>\n<li>Save everything to the data to the database</li>\n</ul>\n<p>That ended up looking something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Console</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Contracts</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentUtilityContract</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Console</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Command</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Throwable</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">final</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> SyncContent</span><span style=\"color:#CB7676\"> extends</span><span style=\"color:#80A665\"> Command</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * The name and signature of the console command.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    protected</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">signature</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">app:sync-content</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * The console command description.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    protected</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">description</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Syncs content from markdown files into the database.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * Execute the console command.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@throws</span><span style=\"color:#B8A965\"> Throwable</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> handle</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">ContentUtilityContract</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentUtility</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4D9375\"> void</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">files</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentUtility</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getMarkdownFilePaths</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        collect</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">files</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">map</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">fn</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentUtility</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getParsedContent</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">each</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">fn</span><span style=\"color:#666666\"> (</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentUtility</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">upsertBlogPost</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Coming from .NET, I'm a self diagnosed <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/\">LINQ</a> addict. Collections\nmade me feel right at home. From the above, I'm configuring a short pipeline of sorts that will do all the things I\noutlined with a little help from the DI container and the <code>ContentUtilityContract</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Contracts</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">BlogPost</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> League</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">CommonMark</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Exception</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">CommonMarkException</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> League</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Config</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Exception</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ConfigurationExceptionInterface</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">interface</span><span style=\"color:#5DA994\"> ContentUtilityContract</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@return</span><span style=\"color:#4D9375\"> string[]</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getMarkdownFilePaths</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4D9375\"> array</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@throws</span><span style=\"color:#B8A965\"> ConfigurationExceptionInterface</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@throws</span><span style=\"color:#B8A965\"> CommonMarkException</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getParsedContent</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> ContentMeta</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> upsertBlogPost</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> BlogPost</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and whose implementation looks something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Contracts</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentUtilityContract</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">BlogPost</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Support</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Facades</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Log</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> League</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">CommonMark</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ConverterInterface</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> League</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">CommonMark</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Extension</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">FrontMatter</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Data</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">SymfonyYamlFrontMatterParser</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> League</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">CommonMark</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Extension</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">FrontMatter</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">FrontMatterParser</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Override</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">final</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> MarkdownUtility</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> ContentUtilityContract</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    private</span><span style=\"color:#B8A965\"> ConverterInterface</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">converter</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#B8A965\"> __construct</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">ConverterInterface</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">converter</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#C99076\">this</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">converter</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">converter</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getMarkdownFilePaths</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4D9375\"> array</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">basePath</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> base_path</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">contentPath</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">basePath</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">/content</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">identified content path as </span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">contentPath, globbing content files</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string[]</span><span style=\"color:#758575DD\"> $files */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">files</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> app</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">environment</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> ===</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">local</span><span style=\"color:#C98A7D99\">'</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            ?</span><span style=\"color:#B8A965\"> glob</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">contentPath/**/*.md</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C99076\"> GLOB_BRACE</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            :</span><span style=\"color:#B8A965\"> glob</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">contentPath/*[!draft]/*.md</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C99076\"> GLOB_BRACE</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">fileCount</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> count</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">files</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">fileCount globbed files found</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">files</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getParsedContent</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> ContentMeta</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">parsing content for file </span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">filePath</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#758575DD\"> $contents */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">contents</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> file_get_contents</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">fileInfo</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> pathinfo</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">extension</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> empty</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">fileInfo</span><span style=\"color:#666666\">[</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">extension</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">])</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            ?</span><span style=\"color:#C98A7D99\"> ''</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            :</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\">.</span><span style=\"color:#666666\">$</span><span style=\"color:#BD976A\">fileInfo</span><span style=\"color:#666666\">[</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">extension</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">fileSlug</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> basename</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">filePath</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">extension</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">file parsed, determined slug as </span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">fileSlug</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">frontMatterParser</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> new</span><span style=\"color:#B8A965\"> FrontMatterParser</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">new</span><span style=\"color:#B8A965\"> SymfonyYamlFrontMatterParser</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">parsedContent</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">frontMatterParser</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">parse</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">contents</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">parsedContent</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getFrontMatter</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">markdown</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">parsedContent</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getContent</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">html</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#C99076\">this</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">converter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">convert</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">markdown</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getContent</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">frontmatter and content parsed</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#4D9375\"> new</span><span style=\"color:#B8A965\"> ContentMeta</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">fileSlug</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">markdown</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">html</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> upsertBlogPost</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">ContentMeta</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> BlogPost</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">contentSlug</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">upserting blog post </span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">contentSlug</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">upsertedBlog</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> BlogPost</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">updateOrCreate</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentSlug</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ],</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentSlug</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">description</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">description</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">category</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">category</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">published_date</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">pubDate</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">hero_image</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">heroImage</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">keywords</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#B8A965\"> implode</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">,</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">frontMatter</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">keywords</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">raw_content</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">markdown</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">parsed_content</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentMeta</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">html</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ]);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Log</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">blog content updated!</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">upsertedBlog</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now from what I've gathered... folks in the PHP community don't exactly <em>love</em> <code>final</code> classes - I have no intention on\ninheriting from these classes and like to follow a composition approach as often as possible (though not always).</p>\n<p>Now anytime I want to sync my content, a simple</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> app:sync-content</span></span></code></pre></figure>\n<p>does the trick! Note: I'm a lazy developer, so my <code>~/.zshrc</code> configuration has an alias:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">alias</span><span style=\"color:#BD976A\"> artisan</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">php artisan</span><span style=\"color:#C98A7D99\">\"</span></span></code></pre></figure>\n<p>I could probably be even lazier and shorten it, but that'll do for now.</p>\n<h2>Servers</h2>\n<p>Using <a href=\"https://forge.laravel.com/\">Laravel Forge</a> and a DigitalOcean droplet, I'm able to turn the server provisioning\npart of my brain completely off and simply write code, commit, and push. Forge does just about everything for you when\ndeploying application servers, including setting up MySQL, PHP versions, server tooling, SSL, etc. I was even able to\ntweak the deployment script, so I could refresh/sync my markdown content with the database anytime a new deployment was\ntriggered. You're probably thinking \"wait... why do you have a database in the first place?\" There's a few reasons for\nthat.</p>\n<p>I use <a href=\"https://torchlight.dev/\">torchlight</a> for syntax highlighting in content, and storing the parsed content in the\ndatabase means I only need to pay the price of content highlighting once at deployment time. I also like to keep track\nof views on each blog, so I need some form of persistent storage. I <em>also</em> like to keep my notes in there (one of my few\npieces of website flair) where I can simply SSH to my droplet and <em>drop</em> (no pun intended) into\na <a href=\"https://laravel.com/docs/10.x/artisan#tinker\">tinker</a> session to create more notes, so something like this just works\nwhen I\nwant to add a new note without a GUI component:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># On the droplet...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">root@website</span><span style=\"color:#C98A7D\"> /home/forge/joeymckenzie.tech</span><span style=\"color:#DBD7CAEE\"> $ </span><span style=\"color:#C98A7D\">php</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> tinker</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Psy</span><span style=\"color:#C98A7D\"> Shell</span><span style=\"color:#C98A7D\"> v0.11.22</span><span style=\"color:#DBD7CAEE\"> (PHP </span><span style=\"color:#4C9A91\">8.3</span><span style=\"color:#C98A7D\">.0</span><span style=\"color:#C98A7D\"> —</span><span style=\"color:#C98A7D\"> cli</span><span style=\"color:#DBD7CAEE\">) by Justin Hileman</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#C99076\"> \\A</span><span style=\"color:#DBD7CAEE\">pp</span><span style=\"color:#C99076\">\\M</span><span style=\"color:#DBD7CAEE\">odels</span><span style=\"color:#C99076\">\\N</span><span style=\"color:#DBD7CAEE\">ote::create</span><span style=\"color:#666666\">([</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Networking</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">description</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">I have no clue how SSL truly works.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">]);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">= </span><span style=\"color:#C98A7D\">App</span><span style=\"color:#C99076\">\\M</span><span style=\"color:#C98A7D\">odels</span><span style=\"color:#C99076\">\\N</span><span style=\"color:#C98A7D\">ote</span><span style=\"color:#C98A7D\"> {#7285</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    title:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Networking</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    description:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">I have no clue how SSL truly works.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    +updated_at:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">2023-12-11 23:04:02</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    +created_at:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">2023-12-11 23:04:02</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    +id:</span><span style=\"color:#4C9A91\"> 5</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">  }</span></span></code></pre></figure>\n<p>I can also generate sitemaps on startup too which is \"dumb easy\" (as the kids say) with the help of\nSpatie's <a href=\"https://github.com/spatie/laravel-sitemap\">Laravel sitemap library</a> paired with another console command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Console</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Commands</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">BlogPost</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Console</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Command</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Spatie</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Sitemap</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">SitemapGenerator</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Spatie</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Sitemap</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Tags</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">class</span><span style=\"color:#5DA994\"> GenerateSitemap</span><span style=\"color:#CB7676\"> extends</span><span style=\"color:#80A665\"> Command</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * The name and signature of the console command.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    protected</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">signature</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">app:generate-sitemap</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * The console command description.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    protected</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">description</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Generates the sitemap.</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * Generates a sitemap for all the SEO goodness</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> handle</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4D9375\"> void</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span><span style=\"color:#758575DD\"> $url */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">url</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> config</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">app.url</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Build the sitemap key that will ultimately live in the public directory</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">publicPath</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> public_path</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">outputFile</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">publicPath/sitemap-index.xml</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Grab a list of the slugs from the database so we can</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // dynamically generate the different entries of the map</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">slugs</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> BlogPost</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">select</span><span style=\"color:#666666\">([</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">updated_at</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">])</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">siteMap</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> SitemapGenerator</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">create</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">url</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getSitemap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Roll through each entry, mapping each to a sitemap entry with a low priority change value</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        collect</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">slugs</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">each</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">function</span><span style=\"color:#666666\"> (</span><span style=\"color:#B8A965\">BlogPost</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">blogPost</span><span style=\"color:#666666\">)</span><span style=\"color:#4D9375\"> use</span><span style=\"color:#666666\"> ($</span><span style=\"color:#BD976A\">siteMap</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                $</span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">blogPost</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                $</span><span style=\"color:#BD976A\">siteMap</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                    -></span><span style=\"color:#80A665\">add</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">create</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/blog/</span><span style=\"color:#666666\">$</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        -></span><span style=\"color:#80A665\">setPriority</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">.</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        -></span><span style=\"color:#80A665\">setChangeFrequency</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">CHANGE_FREQUENCY_YEARLY</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        -></span><span style=\"color:#80A665\">setLastModificationDate</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">blogPost</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">updated_at</span><span style=\"color:#CB7676\">?-></span><span style=\"color:#80A665\">toDate</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> ??</span><span style=\"color:#80A665\"> now</span><span style=\"color:#666666\">()));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Finally, add the static pages as well</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">siteMap</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">add</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">create</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">/about</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                -></span><span style=\"color:#80A665\">setPriority</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">.</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                -></span><span style=\"color:#80A665\">setChangeFrequency</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">CHANGE_FREQUENCY_YEARLY</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">add</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">create</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">/now</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                -></span><span style=\"color:#80A665\">setPriority</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">.</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                -></span><span style=\"color:#80A665\">setChangeFrequency</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Url</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">CHANGE_FREQUENCY_YEARLY</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">writeToFile</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">outputFile</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>And in my Forge deployment script, I can simply add the custom artisan command to generate a new sitemap everytime I\ndeploy:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># Other stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">if</span><span style=\"color:#666666\"> [</span><span style=\"color:#CB7676\"> -f</span><span style=\"color:#DBD7CAEE\"> artisan </span><span style=\"color:#666666\">];</span><span style=\"color:#4D9375\"> then</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    $FORGE_PHP</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> migrate</span><span style=\"color:#C99076\"> --force</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    $FORGE_PHP</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> app:sync-content</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    $FORGE_PHP</span><span style=\"color:#C98A7D\"> artisan</span><span style=\"color:#C98A7D\"> app:generate-sitemap</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">fi</span></span></code></pre></figure>\n<p>Simple!</p>\n<h1>Inertia</h1>\n<p>Okay, so I know I'm somewhat dunking on JavaScript in this post, but truth be told... I still love JS. I've had jobs\nworking with each of the Big Threetm frameworks in Angular, Vue, and React. I've begrudgingly been using\nReact because I'm lazy and (what seems like) one of the few that enjoy JSX. With Inertia and React, that means I can use\nthings like <a href=\"https://ui.shadcn.com/\">shad</a> for getting that clean Tailwind look (there's also\na <a href=\"https://www.shadcn-vue.com/\">Vue</a> and <a href=\"https://www.shadcn-svelte.com/\">Svelte</a> versions I used in the previous\niterations), and\nall the neat React things that are out in the wild. If it's on the web, there's probably a React library for it.</p>\n<p>I'm a fan of <a href=\"https://pnpm.io/\">pnpm</a> as a drop in replacement for npm, and I've also decided to\nditch <a href=\"https://eslint.org/\">eslint</a> and <a href=\"https://prettier.io/\">prettier</a> for <a href=\"https://biomejs.dev/\">biome</a>, another drop\nin replacement for both tools, written in Rust (like all good tooling nowadays). I've had my fair share of battles over\nthe years with both eslint and prettier, and also getting them to play nice together (shout out\nto <a href=\"https://github.com/prettier/eslint-config-prettier\">eslint-config-prettier</a>). While they're fundamentally different\nthings, i.e. formatting vs. linting, I think the argument could be made they're in the same family of code quality\ntools. Biome neatly wraps them up into a single tool that <em>just works</em>. So now when I want to lint or format my React\ncomponents, no more <code>.eslintrc.*</code> and <code>.prettierrc.*</code> files to deal with, just a single <code>biome.json</code> file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">$schema</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">https://biomejs.dev/schemas/1.4.1/schema.json</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">organizeImports</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">enabled</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> true</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">formatter</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">indentStyle</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">space</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">indentWidth</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 4</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">linter</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">enabled</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> true</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">rules</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#B8A965\">recommended</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> true</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Coupled with a neat biome command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># When I want to format things</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> dlx</span><span style=\"color:#C98A7D\"> @biomejs/biome</span><span style=\"color:#C98A7D\"> format</span><span style=\"color:#C99076\"> --write</span><span style=\"color:#C98A7D\"> ./resources/js</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># or, if I want to lint</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> dlx</span><span style=\"color:#C98A7D\"> @biomejs/biome</span><span style=\"color:#C98A7D\"> lint</span><span style=\"color:#C98A7D\"> ./resources/js</span></span></code></pre></figure>\n<p>Wrapping those up in my <code>package.json</code> <code>scripts</code> looks something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">scripts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">dev</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">vite</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">build</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">tsc &#x26;&#x26; vite build &#x26;&#x26; vite build --ssr</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">tailwind</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">prettier --plugin prettier-plugin-tailwindcss --write ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">check</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm dlx @biomejs/biome check --apply ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">fmt</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm dlx @biomejs/biome format --write ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">fix</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm dlx @biomejs/biome lint --apply ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">lint</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm dlx @biomejs/biome lint ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">ci</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm dlx @biomejs/biome ci ./resources/js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">prepare</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">git config core.hookspath .githooks</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">pre-commit</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">pnpm run tailwind &#x26;&#x26; pnpm run check &#x26;&#x26; pnpm run fmt</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now unfortunately, I'm not <em>entirely</em> free of prettier just yet, as there's still no support for <a href=\"https://github.com/biomejs/biome/discussions/164\">Tailwind class sorting\nin biome</a>. I only use prettier to simply wrangle Tailwind classes,\nthen let biome do the rest.</p>\n<p>Inertia has SSR too, which boils down to simply having to run an <code>artisan</code> command on deployment to spin up your Node.js\nserver where ever it may be and point Laravel to it. With Forge, it's <em>literally</em> the flip of a switch.</p>\n<p>One of the things I also needed was to display some common data on each page of my website, including on all the posts\nthemselves. In the footer, you'll see a Spotify widget that displays what I'm currently listening to and the current\nbuild commit SHA the site was deployed with. With Inertia middleware, this was a simple addon to the existing configured\nmiddleware:</p>\n<h4>app/Http/Middleware/HandleInertiaRequests.php</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Http</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Middleware</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Contracts</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">MusicTrackerContract</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Foundation</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Application</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Http</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Request</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Inertia</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Middleware</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Tightenco</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Ziggy</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Ziggy</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">final</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> HandleInertiaRequests</span><span style=\"color:#CB7676\"> extends</span><span style=\"color:#80A665\"> Middleware</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * The root template that is loaded on the first page visit.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#4D9375\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    protected</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">rootView</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">app</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#B8A965\"> __construct</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">private</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#B8A965\"> MusicTrackerContract</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">spotifyTracker</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * Determine the current asset version.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> version</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Request</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#CB7676\"> ?</span><span style=\"color:#4D9375\">string</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#CB7676\"> parent::</span><span style=\"color:#80A665\">version</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    /**</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * Define the props that are shared by default.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     *</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     * </span><span style=\"color:#4D9375\">@return</span><span style=\"color:#4D9375\"> array</span><span style=\"color:#758575DD\">&#x3C;</span><span style=\"color:#4D9375\">string</span><span style=\"color:#758575DD\">, mixed></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">     */</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> share</span><span style=\"color:#666666\">(</span><span style=\"color:#B8A965\">Request</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4D9375\"> array</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ...</span><span style=\"color:#CB7676\">parent::</span><span style=\"color:#80A665\">share</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">request</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">ziggy</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#666666\"> ()</span><span style=\"color:#666666\"> =></span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                ...(</span><span style=\"color:#4D9375\">new</span><span style=\"color:#B8A965\"> Ziggy</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">toArray</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                '</span><span style=\"color:#C98A7D\">location</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">request</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">url</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ],</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Propagate the commit information on every request</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">commit</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#80A665\"> config</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">app.commit</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Also propagate the current listening data from Spotify</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">spotify</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#C99076\">this</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">spotifyTracker</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getNowPlaying</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">laravelVersion</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#B8A965\"> Application</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">VERSION</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">phpVersion</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#C99076\"> PHP_VERSION</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and in my component footer:</p>\n<h4>resources/js/Components/SpotifyTracker.tsx</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"vitesse-dark\"><code data-language=\"tsx\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#4D9375\"> default</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> SpotifyTracker</span><span style=\"color:#666666\">({</span><span style=\"color:#BD976A\">children</span><span style=\"color:#666666\">}: { </span><span style=\"color:#BD976A\">children</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">React</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">JSX</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Element</span><span style=\"color:#666666\"> }):</span><span style=\"color:#5DA994\"> React</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">JSX</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Element</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Inertia has a pretty sweet hook allowing us to tap into common page properties</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const</span><span style=\"color:#BD976A\"> page</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> usePage</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const</span><span style=\"color:#BD976A\"> nowPlaying</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> page</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">props</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">spotify</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#5DA994\"> NowPlaying</span><span style=\"color:#666666\"> |</span><span style=\"color:#CB7676\"> undefined</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const</span><span style=\"color:#BD976A\"> currentlyPlaying</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> nowPlaying</span><span style=\"color:#666666\">?.</span><span style=\"color:#BD976A\">nowPlaying</span><span style=\"color:#CB7676\"> ??</span><span style=\"color:#4D9375\"> false</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span><span style=\"color:#BD976A\">currentlyPlaying</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#BD976A\"> nowPlaying</span><span style=\"color:#CB7676\"> !==</span><span style=\"color:#CB7676\"> undefined</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#B8A965\">CurrentlyPlaying</span><span style=\"color:#BD976A\"> nowPlaying</span><span style=\"color:#666666\">={</span><span style=\"color:#BD976A\">nowPlaying</span><span style=\"color:#666666\">}></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    {</span><span style=\"color:#BD976A\">children</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;/</span><span style=\"color:#B8A965\">CurrentlyPlaying</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            )}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            {</span><span style=\"color:#CB7676\">!</span><span style=\"color:#BD976A\">currentlyPlaying</span><span style=\"color:#CB7676\"> &#x26;&#x26;</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#B8A965\">NotCurrentlyPlaying</span><span style=\"color:#666666\">>{</span><span style=\"color:#BD976A\">children</span><span style=\"color:#666666\">}&#x3C;/</span><span style=\"color:#B8A965\">NotCurrentlyPlaying</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            )}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>with the corresponding <code>PageProps</code> in <code>index.d.ts</code> changes:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> type</span><span style=\"color:#5DA994\"> NowPlaying</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    nowPlaying</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">boolean</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    albumImageSrc</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    artist</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    href</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    trackTitle</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> type</span><span style=\"color:#5DA994\"> Note</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    title</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    description</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> type</span><span style=\"color:#5DA994\"> PageProps</span><span style=\"color:#666666\">&#x3C;</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    T</span><span style=\"color:#CB7676\"> extends</span><span style=\"color:#5DA994\"> Record</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> unknown</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Record</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> unknown</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">></span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> T</span><span style=\"color:#666666\"> &#x26;</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    commit</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    laravelVersion</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    phpVersion</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">string</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    spotify</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">NowPlaying</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    notes</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Note</span><span style=\"color:#666666\">[];</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>Now any page returned from an Inertia rendered route has all the common data available as React props. Pretty sweet,\nhuh?</p>\n<h2>Rendering content</h2>\n<p>For displaying the content of a blog post route, Laravel's route-model binding offered everything I needed to get up and\nrunning. Simply defining a route in my <code>web.php</code> like so:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B8A965\">Route</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">blog/{slug}</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#666666\"> (</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">,</span><span style=\"color:#B8A965\"> ContentRepositoryContract</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentRepository</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =></span><span style=\"color:#B8A965\"> Inertia</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">render</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Blog/Post/Index</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    '</span><span style=\"color:#C98A7D\">post</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">contentRepository</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">getBlogPostBySlug</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">]))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    -></span><span style=\"color:#80A665\">name</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">post</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span></code></pre></figure>\n<p>passes everything the page needs to render to the component responsible for rending content:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"vitesse-dark\"><code data-language=\"typescript\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\">Badge</span><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">@/Components/ui/badge</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\">Button</span><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">@/Components/ui/button</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#BD976A\"> MainLayout</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">@/Layouts/MainLayout</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#4D9375\">type</span><span style=\"color:#BD976A\"> Post</span><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">@/models</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\">Head</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> Link</span><span style=\"color:#666666\">}</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">@inertiajs/react</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">import</span><span style=\"color:#4D9375\"> *</span><span style=\"color:#4D9375\"> as</span><span style=\"color:#BD976A\"> React</span><span style=\"color:#4D9375\"> from</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">react</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#4D9375\"> default</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> BlogPost</span><span style=\"color:#666666\">({</span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\">}: { </span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\">: </span><span style=\"color:#5DA994\">Post</span><span style=\"color:#666666\"> }):</span><span style=\"color:#5DA994\"> React</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">JSX</span><span style=\"color:#666666\">.</span><span style=\"color:#5DA994\">Element</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    const </span><span style=\"color:#BD976A\">formattedDate</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> new </span><span style=\"color:#80A665\">Date</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        post</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">published_date</span><span style=\"color:#CB7676\"> ?? </span><span style=\"color:#C98A7D99\">\"\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ).</span><span style=\"color:#80A665\">toLocaleDateString</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en-us</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        year</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">numeric</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        month</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">short</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        day</span><span style=\"color:#666666\">: </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">numeric</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#BD976A\">Head</span><span style=\"color:#BD976A\"> title</span><span style=\"color:#666666\">={</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">post</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> | joeymckenzie.tech</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">}></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">meta</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">keywords</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> content</span><span style=\"color:#666666\">={post.</span><span style=\"color:#BD976A\">keywords</span><span style=\"color:#666666\">}</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">Head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#5DA994\">MainLayout</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex flex-col justify-center</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">article</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                        className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">prose mx-auto w-full overflow-hidden pb-6 dark:prose-invert prose-pre:text-sm prose-img:mx-auto prose-img:rounded-md</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#BD976A\">h1</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-center text-2xl</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>{post.</span><span style=\"color:#BD976A\">title</span><span style=\"color:#666666\">}&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#BD976A\">div</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">flex flex-row items-center justify-center gap-x-2 text-sm tracking-tight</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#BD976A\">time</span><span style=\"color:#BD976A\"> dateTime</span><span style=\"color:#666666\">={post.</span><span style=\"color:#BD976A\">published_date</span><span style=\"color:#666666\">}></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                                {</span><span style=\"color:#BD976A\">formattedDate</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">time</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#5DA994\">Badge</span><span style=\"color:#666666\">>{post.</span><span style=\"color:#BD976A\">category</span><span style=\"color:#666666\">}&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">Badge</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            &#x3C;</span><span style=\"color:#5DA994\">p</span><span style=\"color:#666666\">>{post.</span><span style=\"color:#BD976A\">views</span><span style=\"color:#666666\">}</span><span style=\"color:#BD976A\"> views</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#BD976A\">img</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            alt</span><span style=\"color:#666666\">={</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">${</span><span style=\"color:#C98A7D\">post</span><span style=\"color:#666666\">.</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> blog meme</span><span style=\"color:#C98A7D99\">`</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            src</span><span style=\"color:#666666\">={post.</span><span style=\"color:#BD976A\">hero_image</span><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            height</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">400</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            width</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">500</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#BD976A\">div</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">                            // biome-ignore lint/security/noDangerouslySetInnerHtml: controlled input</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                            dangerouslySetInnerHTML</span><span style=\"color:#666666\">={{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                                __html</span><span style=\"color:#666666\">: </span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">parsed_content</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                            }}</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        /</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">article</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#BD976A\">Link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">={</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">blogs</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)}</span><span style=\"color:#BD976A\"> className</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mx-auto max-w-md</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                        &#x3C;</span><span style=\"color:#BD976A\">Button</span><span style=\"color:#BD976A\"> variant</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">secondary</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#BD976A\"> Back</span><span style=\"color:#BD976A\"> to</span><span style=\"color:#BD976A\"> blogs</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">Button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">Link</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#BD976A\">MainLayout</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#CB7676\">/</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>A fairly simple component that ultimately takes the converted HTML content I've run through the nifty PHP League's\n<a href=\"https://commonmark.thephpleague.com/\">CommonMark</a> library and spit out on the other side to <code>dangerouslySetInnerHTML</code>\nwithin my React code.</p>\n<p>Gathering the content is simple enough with the help of Eloquent too:</p>\n<h4>app/Services/BlogPostRepository.php</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"php\" data-theme=\"vitesse-dark\"><code data-language=\"php\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">&#x3C;?</span><span style=\"color:#C99076\">php</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">declare</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">strict_types</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">namespace</span><span style=\"color:#5DA994\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#5DA994\">Services</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Contracts</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">ContentRepositoryContract</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> App</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Models</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">BlogPost</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> DateInterval</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Database</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Eloquent</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Collection</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Illuminate</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Support</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Facades</span><span style=\"color:#666666\">\\</span><span style=\"color:#B8A965\">Cache</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#B8A965\"> Override</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">final</span><span style=\"color:#CB7676\"> readonly</span><span style=\"color:#CB7676\"> class</span><span style=\"color:#5DA994\"> BlogPostRepository</span><span style=\"color:#CB7676\"> implements</span><span style=\"color:#80A665\"> ContentRepositoryContract</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getBlogPostBySlug</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">string</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> BlogPost</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // We won't cache the blogs, easier to let the view counts ride</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> BlogPost</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">select</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">id</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">keywords</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">hero_image</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">published_date</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">category</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">views</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">parsed_content</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ])</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">firstWhere</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">slug</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#B8A965\">is_null</span><span style=\"color:#666666\">($</span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\">))</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            abort</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">404</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // While we're at it, add a view count</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // AddView::dispatch($post);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">post</span><span style=\"color:#CB7676\">-></span><span style=\"color:#BD976A\">views</span><span style=\"color:#666666\"> +=</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">post</span><span style=\"color:#CB7676\">-></span><span style=\"color:#80A665\">save</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">post</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getLatestBlogPostMetadata</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> Collection</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#B8A965\"> Collection</span><span style=\"color:#758575DD\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#758575DD\">, BlogPost> $posts */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">posts</span><span style=\"color:#666666\"> =</span><span style=\"color:#CB7676\"> self::</span><span style=\"color:#80A665\">getBlogPostMetadata</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">sortByDesc</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">published_date</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">take</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">posts</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #[</span><span style=\"color:#B8A965\">Override</span><span style=\"color:#DBD7CAEE\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    public</span><span style=\"color:#CB7676\"> function</span><span style=\"color:#80A665\"> getBlogPostMetadata</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">:</span><span style=\"color:#B8A965\"> Collection</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        if</span><span style=\"color:#666666\"> (</span><span style=\"color:#B8A965\">Cache</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">has</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">allPosts</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">))</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#B8A965\"> Collection</span><span style=\"color:#758575DD\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#758575DD\">, BlogPost> $allPosts */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            $</span><span style=\"color:#BD976A\">allPosts</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> Cache</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">allPosts</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">allPosts</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        /** </span><span style=\"color:#4D9375\">@var</span><span style=\"color:#B8A965\"> Collection</span><span style=\"color:#758575DD\">&#x3C;</span><span style=\"color:#4D9375\">int</span><span style=\"color:#758575DD\">, BlogPost> $posts */</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        $</span><span style=\"color:#BD976A\">posts</span><span style=\"color:#666666\"> =</span><span style=\"color:#B8A965\"> BlogPost</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">select</span><span style=\"color:#666666\">([</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">slug</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">published_date</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">category</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">description</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">title</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            '</span><span style=\"color:#C98A7D\">views</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ])</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">orderByDesc</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">published_date</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            -></span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        Cache</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">set</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">allPosts</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">posts</span><span style=\"color:#666666\">,</span><span style=\"color:#4D9375\"> new</span><span style=\"color:#B8A965\"> DateInterval</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">PT5M</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#666666\"> $</span><span style=\"color:#BD976A\">posts</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I'm not exactly a fan of the repository pattern on top of existing repository implementations - Eloquent is <em>already</em> a\ngreat implementation of the repository pattern. But... I like to keep my controllers/routes thin and also wanted to add\na bit a caching here and there as the content itself won't change much from deployment to deployment.</p>\n<p>Which brings me to my next talking point...</p>\n<h1>Deployments</h1>\n<p>I'm a big fan of GitHub Actions, and while I <em>could</em> just trigger Forge deploys based on the latest push, it's easy\nenough to set up a simple action to ping the deployment URL to tell Forge to pull in my code and deploy the latest\nversion of it to the droplet. I like to display the latest commit in the footer, so I also needed a way to propagate the\ngit commit SHA as an environment variable. Unfortunately, Forge only has the SHA available at deployment time.\n<em>Fortunately</em>, it's easy enough to work around by pulling in the latest configuration for production via the Forge CLI,\nappending the SHA as an environment variable, and simply pushing it back up to Forge before the deployment script runs.</p>\n<p>One caveat to this process is that we want the append process to only append <em>if</em> there's currently not a commit in the <code>.env</code> file, while replacing the existing commit key-value pair if it already exists. A quick script like the follow should get the job done:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">#!/bin/bash</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Check if the correct number of arguments is provided</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">if</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C99076\">$#</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> -ne</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#666666\"> ];</span><span style=\"color:#4D9375\"> then</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">  echo</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Usage: $0 &#x3C;arg1> &#x3C;arg2></span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">  exit</span><span style=\"color:#4C9A91\"> 1</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">fi</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Assign arguments to variables</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">key</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">$1</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">value</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">$2</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Check if the key already exists in the file</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">if</span><span style=\"color:#80A665\"> grep</span><span style=\"color:#C99076\"> -q</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^$key=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\"> .env</span><span style=\"color:#666666\">;</span><span style=\"color:#4D9375\"> then</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">  # Replace the existing key-value pair</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  sed</span><span style=\"color:#C99076\"> -i</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">s/^$key=.*/$key=$value/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\"> .env</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">else</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">  # Append the new key-value pair to the end of the file</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">  echo</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">$key=$value</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> >></span><span style=\"color:#C98A7D\"> .env</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">fi</span></span></code></pre></figure>\n<p>We can then update our deploy workflow action to call this script, pass the key and SHA to it, and execute directly before updating the production configuration. All-in-all, this is what my deploy action looks like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"yaml\" data-theme=\"vitesse-dark\"><code data-language=\"yaml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B8A965\">name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Deploy to Forge</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">on</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    workflow_run</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        workflows</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">Inertia CI</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\"> ]</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        types</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#C98A7D\"> completed</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">jobs</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    build</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        runs-on</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> ubuntu-latest</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        timeout-minutes</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 10</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Deploy application</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        steps</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> uses</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> actions/checkout@v3</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Setup PHP</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              id</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> setup-php</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              uses</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> shivammathur/setup-php@v2</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              with</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                  php-version</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">8.3</span><span style=\"color:#C98A7D99\">'</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Install Forge CLI</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> composer global require laravel/forge-cli</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Authenticate with Forge</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> forge login --token=${{ secrets.FORGE_API_TOKEN }}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            # Forge environment variables, including the current git commit hash,</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            # aren't included as runtime environment variables and only in the build script.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            # To get the current commit propagated, pull the current production configuration,</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            # and append the current commit to the file and push it back up to Forge.</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Download current configuration</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> forge env:pull joeymckenzie.tech ${{ github.workspace }}/.env</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Add current commit and push back to forge</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#4D9375\"> |</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">                ./scripts/update-commit.sh FORGE_DEPLOY_COMMIT ${{ github.sha }}</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              working-directory</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> ${{ github.workspace }}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Push environment to Forge</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> forge env:push joeymckenzie.tech ${{ github.workspace }}/.env</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">            -</span><span style=\"color:#B8A965\"> name</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> Ping deploy URL</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">              run</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D\"> curl -l ${{ secrets.FORGE_DEPLOY_URL }}</span></span></code></pre></figure>\n<p>Setting a few environment variables, badda bing, badda boom, and everything works.</p>\n<h2>Wrapping up</h2>\n<p>Alright, I promised to keep it short.</p>\n<p>In the end, is Laravel probably overkill for my simple little website? Absolutely.</p>\n<p>Is it fun to over-engineer such things, though? Ab-so-lutely.</p>\n<p>I'm looking forward to seeing what else I can conjure up with Laravel to give myself a reason to explore all the various\nnooks and crannies of the framework as I'm not a full-time Laravel developer (yet...). All the code that powers my blog\nis available on GitHub <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech\">here</a>. I'm just beginning my Laravel journey\nand I'm well aware there's a <em>ton</em> more to learn, but nonetheless, I'm quite excited to keep at it.</p>\n<p>TL;DR - Laravel is friggin' sweet.</p>\n<p>Until next time, friends!</p>"
    },
    "_id": "2023/content-driven-websites-with-php-and-laravel.md",
    "_raw": {
      "sourceFilePath": "2023/content-driven-websites-with-php-and-laravel.md",
      "sourceFileName": "content-driven-websites-with-php-and-laravel.md",
      "sourceFileDir": "2023",
      "contentType": "markdown",
      "flattenedPath": "2023/content-driven-websites-with-php-and-laravel"
    },
    "type": "Post",
    "url": "/blog/2023/content-driven-websites-with-php-and-laravel"
  },
  {
    "title": "Learning to fly with Rust and Postgres",
    "description": "If it can be Dockerized, it can be deployed.",
    "pubDate": "2023-04-05T07:00:00.000Z",
    "category": "rust",
    "heroImage": "/images/learning-to-fly-rust-postgres/fly_meme.jpg",
    "draft": false,
    "keywords": [
      "rust",
      "postgres",
      "fly.io"
    ],
    "body": {
      "raw": "\nAfter a long weekend of random life events, I decided I needed to scratch an itch to learn something new. I've been\nwriting a lot serverless [Lambda's](https://aws.amazon.com/lambda/) lately and wanted to jump back into a more managed\nworkflow with a new tool I have yet to use, though seems to be getting a lot of hype in [fly.io](https://fly.io/). I've\nbeen hearing quite a bit within the community about the love developers have for fly due to its ease of deployment and\nideology about app servers centralizing on the idea of simply just deploying projects based on a Dockerfile. I do my\nfair share of Docker management at work and on side projects, so why not take fly for a spin?\n\n## Getting started with Fly\n\nFly seems like the perfect approach to get app servers up and running quickly. Simply spin up a project in a\nlanguage/framework of your choice, write a sensible Dockerfile fit for running on a server, and deploy to fly's platform\nto just have things _work_. Most of my workflow nowadays involves maintaining servers and applications through a variety\nof different tools, though mainly AWS stuff. I've been looking for a reason to de-AWS my side projects and found this\nthe perfect opportunity to do so by deploying a mighty simple Rust app sitting atop a Postgres database.\n\nLuckily enough, fly offers a hosted [Postgres option](https://fly.io/docs/postgres/) that is just another fly app within\nour cluster that our other fly app servers can talk to. Fly makes it clear, though, that this is not\na [fully managed database solution](https://fly.io/docs/postgres/getting-started/what-you-should-know/), as opposed to\nsomething like [PlanetScale](https://planetscale.com/), so your mileage may vary if you're looking to maintain a\ndatabase without being expected to put on a DBA hat now and again.\n\nTo get up and running, fly offers a rather nice [CLI](https://fly.io/docs/hands-on/install-flyctl/) to help manage our\napp servers and account. Let's start by installing it on our local machine. I'll be using brew with WSL2, so a quick:\n\n```shell\n> brew install flyctl\n```\n\nshould do the trick. Now that we've got the CLI installed, go ahead and log in with `fly auth login` and follow the\nlogin prompts in the browser the CLI opens. Once we've authenticated, we should be good to start spinning up some apps.\n\n## Creating a Postgres instance\n\nSince we'll be building a simple web app with a bit of persistence, let's go ahead and spin up our Postgres instance:\n\n```shell\n> fly postgres create\n```\n\nFollow the prompts, naming your database whatever seems appropriate and choosing the development configuration as we\ndon't necessarily need high availability for a toy project. After fly does a bit of initialization, we should see\nsomething like:\n\n```shell\nPostgres cluster wandering-cloud-1281 created\n  Username:    postgres\n  Password:    {{password}}\n  Hostname:    {{hostname}}\n  Flycast:     {{flycast}}\n  Proxy port:  5432\n  Postgres port:  5433\n  Connection string: postgres://postgres:{{password}}@{{server}}:5432\n\nSave your credentials in a secure place -- you won't be able to see them again!\n```\n\nin the console. Let's verify we're able to connect. As of this writing, there's a bit more configuration\nneeded [connect to your instance externally](https://fly.io/docs/postgres/connecting/connecting-external/) through a\nclient like pgAdmin, but luckily `flyctl` has us covered allowing us to connect to our internal instance through the\nCLI. Let's connect and verify we can run some queries:\n\n```shell\n> fly postgres connect -a <your instance name>\nConnecting to <ip>... complete\npsql (15.2 (Debian 15.2-1.pgdg110+1))\nType \"help\" for help.\n\n> postgres=# \\dt *.*\n                           List of relations\n       Schema       |           Name           |    Type     |  Owner\n--------------------+--------------------------+-------------+----------\n information_schema | sql_features             | table       | postgres\n information_schema | sql_implementation_info  | table       | postgres\n information_schema | sql_parts                | table       | postgres\n information_schema | sql_sizing               | table       | postgres\n pg_catalog         | pg_aggregate             | table       | postgres\n pg_catalog         | pg_am                    | table       | postgres\n pg_catalog         | pg_amop                  | table       | postgres\n```\n\nRunning a quick `\\dt *.*`. We should see a list of tables with various bits of metadata about their schema, type, owner,\nand name. Sweet!\n\n## Bootstrapping our service\n\nNext, let's spin up a bare-bones Rust web app. I'll be using [axum](https://docs.rs/axum/latest/axum/) as my framework,\nbut feel free to use your own:\n\n```shell\n> cargo new flying-with-rust-and-postgres\n# and once cargo is done with it's thing, let's add axum\n> cargo add axum\n# and while we're at it, let's grab tokio too\n> cargo add tokio --features full\n```\n\nNow that we've got our project bootstrapped, let's crack open `main.rs` and scaffold out a simple route:\n\n```rust\nuse std::net::SocketAddr;\n\nuse axum::{routing::get, Router};\n\nasync fn howdy() -> &'static str {\n    \"Well, hello there partner!\"\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Require a port to run, we can configure this with fly\n    let port = std::env::var(\"PORT\")?\n        .parse::<u16>()\n        .expect(\"port is not valid\");\n\n    let router = Router::new().route(\"/howdy\", get(howdy));\n\n    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed\n    let addr = SocketAddr::from(([0, 0, 0, 0], port));\n    axum::Server::bind(&addr)\n        .serve(router.into_make_service())\n        .await\n        .unwrap();\n\n    Ok(())\n}\n\n```\n\nLet's spin this thing up to make sure we've got water flowing through the pipes, so to speak:\n\n```shell\n> PORT=8080 cargo run\n\n# in another terminal...\n> curl -l http://localhost:8080/howdy\nWell, hello there partner!\n```\n\nNice! We've got the (arguably) world's most simple API ready to roll, now let's get this thing into fly.\n\n## Dockerizing our app\n\nI'll be the first to admit I'm _far_ from an experience Docker aficionado - most of my daily Docker work is within the\n.NET realm. With that said, since all fly needs is a Dockerfile to get started, let's add one to the root of our project\nwith a simple configuration, doing what we can to compress the size here and there:\n\n```shell\n# All credit goes to https://fasterthanli.me/articles/remote-development-with-rust-on-fly-io#what-the-heck-is-fly-io-for-even\n# for an an awesome walkthrough of Dockerfiles for rust, this is more or less a direct copy pasta with a few minor tweaks\n\n# After containerization, this manages to come in at a whopping ~155mb, still a bit to we could optimize but this should do for now\n\n# Stage one - copy over our build files for compilation, including workspace and .env files\nFROM rust:1-slim-bullseye AS build\n\nWORKDIR /app\n\nCOPY . .\n\n# On rebuilds, we explicitly cache our rust build dependencies to speed things up\nRUN --mount=type=cache,target=/app/target \\\n    --mount=type=cache,target=/usr/local/cargo/registry \\\n    --mount=type=cache,target=/usr/local/cargo/git \\\n    --mount=type=cache,target=/usr/local/rustup \\\n    set -eux; \\\n    # We'll use nightly because we like to go fast and break things\n    rustup install nightly; \\\n    cargo build --release; \\\n    # Compress debug symbols, squeezing the size just a bit more\n    objcopy --compress-debug-sections target/release/flying-with-rust-and-postgres ./server\n\n# Stage two - we'll utilize a second container to run our built binary from our first container - slim containers!\nFROM debian:bullseye-slim as deploy\n\n# Let's install all the necessary runtime tools on the container\nRUN set -eux; \\\n    export DEBIAN_FRONTEND=noninteractive; \\\n    apt update; \\\n    apt install -y --no-install-recommends bind9-dnsutils iputils-ping iproute2 curl ca-certificates htop; \\\n    apt clean autoclean; \\\n    apt autoremove -y; \\\n    rm -rf /var/lib/{apt,dpkg,cache,log}/;\n\n# Let's work from a self contained directory for all of our deployment needs\nWORKDIR /deploy\n\n# We need the artifact from the build container, so let's grab it\nCOPY --from=build /app/server ./\n\n# Let's expose port 80 as we'll need fly's internal port mapping also assumes 80\nEXPOSE 80\n\n# Finally, boot up the API\nCMD [\"./server\"]\n```\n\nWith our Dockerfile in place, let's build this bad boy:\n\n```shell\n> docker build . -t flying_with_rust_and_postgres\n```\n\nAfter a lengthy initial build (successive builds will be quicker thanks to the bits of caching we threw in there), we\ncan spin up our container locally and verify we're still looking good from a server perspective:\n\n```shell\n> docker run -d \\\n    -p 8080:8080 \\ # expose the container's port to match what our axum server will listen under\n    -e PORT=8008 \\ # the required env var to configure our axum port\n    --name flying_with_rust_and_postgres \\ # gives this container a name to stop and start\n    -it flying_with_rust_and_postgres # tags this container\n```\n\nAfter a few seconds, we should the container ID spit out in the terminal, and if we send through another request:\n\n```shell\n> curl -l http://localhost:8080/howdy\nWell, hello there partner!\n```\n\nOur app is running in a containerized manner, now let's get this thing deployed!\n\n## Deploying to fly\n\nAlright, I _did_ mention I was using this post as an excuse to learn fly, so let's figure out what the deployment story\nlooks like. There's gotta be _something_ in the CLI, right? Let's do a bit of trial and error:\n\n```shell\n> fly\nThis is flyctl, the Fly.io command line interface.\n\nHere's a few commands to get you started:\n  fly launch      Launch a new application\n  fly apps        Create and manage apps\n  fly postgres    Create and manage Postgres databases\n  fly redis       Create and manage Redis databases\n  fly machines    Create and manage individual Fly.io machines\n\nIf you need help along the way:\n  fly help            Display a complete list of commands\n  fly help <command>  Display help for a specific command, e.g. 'fly help launch'\n\nVisit https://fly.io/docs for additional documentation & guides\n```\n\nOkay... `fly launch` looks promising, let's check it out:\n\n```shell\n> fly help launch\nCreate and configure a new app from source code or a Docker image.\n\nUsage:\n  flyctl launch [flags]\n\nFlags:\n      # ...a bunch of options and whatnot\n```\n\nAlright, this looks like _exactly_ what we need. We have a Dockerfile, and all we need is to put this thing on a fly app\nserver. Let's take it for a spin:\n\n```shell\n> fly launch\n```\n\nWe get asked a bunch of questions, like what we want the app named, where it should be located, etc. Fly asks if we want\na Postgres instance - let's decline that for now as we have already one in place. What's even neater is that fly\ngenerates a config file for us in the `fly.toml` file that now appears in our editor:\n\n```toml\n# fly.toml file generated for flying-with-rust-and-postgres on 2023-04-03T14:09:56-07:00\n\napp = \"flying-with-rust-and-postgres\"\nkill_signal = \"SIGINT\"\nkill_timeout = 5\nprimary_region = \"lax\"\nprocesses = []\n\n[env]\n\n[experimental]\n  auto_rollback = true\n\n[[services]]\n  http_checks = []\n  internal_port = 80\n  processes = [\"app\"]\n  protocol = \"tcp\"\n  script_checks = []\n  [services.concurrency]\n    hard_limit = 25\n    soft_limit = 20\n    type = \"connections\"\n\n  [[services.ports]]\n    force_https = true\n    handlers = [\"http\"]\n    port = 80\n\n  [[services.ports]]\n    handlers = [\"tls\", \"http\"]\n    port = 443\n\n  [[services.tcp_checks]]\n    grace_period = \"1s\"\n    interval = \"15s\"\n    restart_limit = 0\n    timeout = \"2s\"\n```\n\nWe wait a bit, and check the console as we sit on the edge of our seats in anticipation of a successful deployment,\nand... it failed. Well, shoot. Let's take a look at the logs:\n\n```shell\n> fly logs\n\n# ...after a bit of sifting, we see something familiar\n[info]Preparing to run: `./server` as root\n[info]Error: NotPresent\n```\n\nAn error at startup? Oh! We didn't pass a port environment variable, so let's add that to our fly config:\n\n```toml\n# other configs...\n[env]\nPORT = \"80\"\n```\n\nFor production, we want to listen on port 80 as the default API port (versus 8080 locally). While we're at it, let's\nalso expose port 443 in our Dockerfile to satisfy SSL:\n\n```dockerfile\n# Previous setup...\n\n# Let's expose port 80 as we'll need fly's internal port mapping also assumes 80\nEXPOSE 80\nEXPOSE 443\n\n# Finally, boot up the API\nCMD [\"./server\"]\n```\n\nOkay, the second time's a charm:\n\n```shell\n> fly deploy\n```\n\nAnd after a few seconds (thanks to our layer caching), we should see a message about our app being deployed\nsuccessfully! A quick `fly logs` confirms it with a bunch of green in the terminal, but let's do a quick sanity check:\n\n```shell\n> curl -l https://flying-with-rust-and-postgres.fly.dev/howdy\nWell, hello there partner!\n```\n\nNice! Now anytime we make changes, we can `fly deploy` to have the reflected on our production. In reality, we'd hook\nthis up to CI, but I'll leave that as an exercise for the reader.\n\n## Task-ifying local development\n\nNow with the hard part out of the way, let's get back to the code. Because we'll be iterating, building docker\ncontainers, deploying, etc. _and_ because I can never remember all the docker flags I need to pass when\nbuilding/running/starting/stopping containers _and_ because I'm lazy, I'm going to add a `Makefile` (pause for audible\ngasp). There are better alternatives for Rust projects like [`cargo-make`](https://github.com/sagiegurari/cargo-make),\nbut our use case is simple enough here as we only need to manage docker. Let's add one to the root of our project:\n\n```shell\nPORT = 8080\nTAG = flying_with_rust_and_postgres\n\n.PHONY: build\nbuild:\n    docker build . -t $(TAG)\n\n.PHONY: run\nrun:\n    docker run -d \\\n    -p $(PORT):$(PORT) \\\n    -e PORT=$(PORT) \\\n    --name $(TAG) \\\n    -it $(TAG)\n\n.PHONY: stop\nstop:\n    docker stop $(TAG)\n\n.PHONY: start\nstart:\n    docker start $(TAG)\n```\n\nNow, with a simple `make build` or `make run`, we can rebuild and restart our container a bit easier. I'm using `PHONY`\ntargets here, as I'm using `make` as a glorified task runner rather than building outputs.\n\nOkay, so back to where we left off. We want to explore integrating fly apps with Postgres, but only our _deployed_ fly\napps can talk to our Postgres instance, which is a good thing - I don't want to do local development against production\ndata. Let's spin up a local development database with Postgres using docker by adding a few tasks to our `Makefile`:\n\n```shell\nDB_PORT = 5432\n\n# Other tasks...\n\n.PHONY: db-run\ndb-run:\n    docker run -d \\\n     -p $(DB_PORT):$(DB_PORT) \\\n     -e POSTGRES_PASSWORD=mySuperSecretPassword! \\\n     --name fly_demo_db \\\n     postgres\n\n.PHONY: db-start\ndb-start:\n    docker start fly_demo_db\n\n.PHONY: db-stop\ndb-stop:\n    docker stop fly_demo_db\n```\n\nNow we can spin up a local development database with a simple `make db-run`and subsequently,`make db-start`\nand `make db-stop` to start/stop it when needed. I should note that I'm only using `make` here to facilitate docker\ntasks as there are a handful of flags, local variables, and whatnot. `cargo` and `fly` are simple enough commands that\nwe don't necessarily need to add task runners for them.\n\n## Where we're going... we'll need persistence\n\nSo we're going to talk to a database from our Rust code. There are _quite_ a few great crates to facilitate doing this,\nand purely out of selfish preference, I'm going to use [`sqlx`](https://crates.io/crates/sqlx). `sqlx` is simple,\nstraightforward, compile-time safe, and at the end of the day, it's just SQL. This isn't a post about sqlx - we'll save\nthat for a rainy day.\n\nWith that schpiel out of the way, let's add sqlx with the `runtime-tokio-rustls` and `migrate` features along\nwith `postgres`:\n\n```shell\n> cargo add sqlx --features runtime-tokio-rustls, migrate, postgres\n```\n\nSpecifically, `migrate` will allow us to use migrations to keep our local development database in sync with our\nproduction database, as again, only our fly apps can actually communicate with our Postgres instance (if you're\nunwilling to pay). To make our migration story even easier, let's add\nthe [`sqlx-cli`](https://crates.io/crates/sqlx-cli) to help us manage migrations.\n\n```shell\n# We're only using Postgres, so we need just a subset of all features\n> cargo install sqlx-cli --no-default-features --features rustls, postgres\n```\n\nAfter it's installed, let's add a `.env` file that the sqlx CLI will look for when running and applying migrations:\n\n### .env\n\n```shell\nDATABASE_URL=postgres://postgres:mySuperSecretPassword@localhost:5432/postgres?sslmode=disable\n```\n\nWe'll slap a `sslmode=disable` here since we're only using this connection string locally. When we deploy, we'll need to\noverride this in our fly configuration at some point. Now that we've got the sqlx CLI installed, let's spin up a fresh\nmigration.\n\nTo spice things up a bit, rather than your standard issue `todo` example, let's create a `beer_logs` table to track\njournal entries of amazing beers we've drunk (somehow, that seems much more grammatically worse than \"drank\"):\n\n```shell\n> sqlx migrate add add_beer_logs_table\n\nCreating migrations/20230403232851_add_beer_logs_table.sql\n\nCongratulations on creating your first migration!\n\nDid you know you can embed your migrations in your application binary?\nOn startup, after creating your database connection or pool, add:\n\nsqlx::migrate!().run(<&your_pool OR &mut your_connection>).await?;\n\nNote that the compiler won't pick up new migrations if no Rust source files have changed.\nYou can create a Cargo build script to work around this with `sqlx migrate build-script`.\n\nSee: https://docs.rs/sqlx/0.5/sqlx/macro.migrate.html\n```\n\nNice! We've got a `/migrations` folder added, let's add some SQL to the script:\n\n```sql\n-- Add migration script here\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\nCREATE TABLE beer_logs (\n    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name TEXT NOT NULL,\n    notes TEXT NOT NULL,\n);\n```\n\nI'm using `UUID`s instead of integer-based for a variety of reasons, and whose discussion is out of scope for our\npurposes, atop the fact that people much smarter than myself can reason about doing so better than I can. Since we'll be\nusing UUIDs for keys, we'll need to add `uuid` as a sqlx feature in our manifest file. Now that we've fleshed out our\nmigration, let's apply it:\n\n```shell\n> sqlx migrate run\nApplied 20230403232851/migrate add beer logs table (71.391042ms)\n```\n\nSweet! If we inspect the database using your tool of choice, we should see two tables:\n\n-   `_sqlx_migrations` - the migration management table\n-   `beer_logs` - the journal table we created\n\nWe're going to need the same schema applied to our production database, so let's add a bit of code to apply migrations\nprogrammatically when our application starts up. Back in `main.rs`:\n\n```rust\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Require a port and connection string to run, we can configure these with fly\n    let connection_string = std::env::var(\"DATABASE_URL\").expect(\"connection pool was not found\");\n    let port = std::env::var(\"PORT\")?\n        .parse::<u16>()\n        .expect(\"port is not valid\");\n\n    println!(\"Initializing connection pool...\");\n\n    let pool = PgPoolOptions::new()\n        .max_connections(5)\n        .connect(&connection_string)\n        .await?;\n\n    println!(\"Connection pool initialized, running migrations...\");\n\n    sqlx::migrate!().run(&pool).await?;\n\n    println!(\"Migrations successfully applied!\");\n\n    let router = Router::new().route(\"/howdy\", get(howdy));\n\n    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed\n    let addr = SocketAddr::from(([0, 0, 0, 0], port));\n    axum::Server::bind(&addr)\n        .serve(router.into_make_service())\n        .await\n        .unwrap();\n\n    Ok(())\n}\n```\n\nWe've added a few lines to import a `DATABASE_URL` environment variable and run migrations, with the default being\nmigrations mapped to whatever is underneath the `/migrations` folder. We've also sprinkled in a few `println!()`s as a\npoor man's version of [tracing](https://crates.io/crates/tracing), but for our purposes here will suffice. If we spin up\nour server now with `cargo run`, we should see a relatively boring console as our migrations have already been manually\napplied using the CLI:\n\n```\n> PORT=8080 postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable cargo run\n\nFinished dev [unoptimized + debuginfo] target(s) in 0.12s\n Running `target/debug/flying-with-rust-and-postgres`\nRunning migrations...\nMigrations successfully applied!\n```\n\nTo sanity check, if we drop the tables (using your DB interface of choice) and spin up the server, we should see the\nsuccess message again. Now, it's going to be a bit annoying to have to punch in our environment variables, so let's add\na `make` task:\n\n```makefile\n# Existing environment variables...\nCONNECTION_STRING = postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable\n\n.PHONY: run-server\nrun-server:\n PORT=$(PORT) DATABASE_URL=$(CONNECTION_STRING) cargo run\n```\n\nWe could also use [`dotenvy`](https://crates.io/crates/dotenvy), though we only have a couple variables to manage for\nnow. Starting up with a `make run-server` does the trick:\n\n```shell\n> make run-server\n\nPORT=8080 DATABASE_URL=postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable cargo run\n   Compiling flying-with-rust-and-postgres v0.1.0 (~/flying-with-rust-and-postgres)\n    Finished dev [unoptimized + debuginfo] target(s) in 5.51s\n     Running `target/debug/flying-with-rust-and-postgres`\nInitializing connection pool...\nConnection pool initialized, running migrations...\nMigrations successfully applied!\n```\n\n## Keeping schema in sync\n\nSince we've created a table in development, let's do the work to get our production database on fly in the same state.\nSince our production database is hosted on fly, we need to adjust the `DATABASE_URL` application expects. Let's update\nthat within our `fly.toml` configuration:\n\n```toml\n[env]\nPORT = \"80\"\nDATABASE_URL = \"postgres://postgres:<your password@<your host>:5432/postgres?sslmode=disable\"\n```\n\nAgain, I'm disabling SSL because I'm ~~cheap~~ not holding possession of a valid cert to secure connections between my\napp server and the database. Obviously, DO NOT do this in a production scenario - for our purposes, simply serving over\ninsecure ports will do.\n\nNow, if we deploy our application with a `fly deploy`, we should see some good logs:\n\n```shell\n> fly deploy\n\n# A bunch of other logs...\n[info]Initializing connection pool...\n[info]Connection pool initialized, running migrations...\n[info]Migrations successfully applied!\n[info]Health check on port 80 is now passing.\n[info]Shutting down virtual machine\n[info]Sending signal SIGINT to main child process w/ PID 520\n[info]Starting clean up.\n[info]Shutting down virtual machine\n[info]Sending signal SIGINT to main child process w/ PID 520\n[info]Starting clean up.\n```\n\nKey to note here are the simple logs we output for migrations and clean server start. We're all set to now FINALLY write\nsome application code!\n\n## Logging beers\n\nWe set out to create a simple journal application to log the fantastic beers we've had so far. Let's add a route to\ncreate journals in `main.rs`:\n\n```rust\n#[derive(Deserialize, Debug)]\nstruct LogBeerRequest {\n    pub name: String,\n    pub notes: String,\n}\n\n#[derive(Serialize)]\nstruct LogBeerResponse {\n    pub id: Uuid,\n}\n\nasync fn create_log(\n    State(state): State<Arc<AppState>>,\n    Json(beer_notes_request): Json<LogBeerRequest>,\n) -> Json<LogBeerResponse> {\n    println!(\n        \"Received request to create beer log {:?}\",\n        beer_notes_request\n    );\n\n    let result = query_as!(\n        LogBeerResponse,\n        r\"\n        INSERT INTO beer_logs (name, notes)\n        VALUES ($1, $2)\n        RETURNING id\n        \",\n        beer_notes_request.name,\n        beer_notes_request.notes\n    )\n    .fetch_one(&state.pool)\n    .await\n    // DON'T panic in production... this is not an endorsement!\n    .unwrap_or_else(|_| panic!(\"inserting beer log {:?} failed\", beer_notes_request));\n\n    Json(result)\n}\n```\n\nOur log handler will simply take input, dump data into the `beer_logs` table, and return the ID of the created row. Now,\nwe're _obviously_ glossing over a few things here like proper error and response handling, injecting persistence\nconcerns at the API surface, etc. but we'll save those discussions for another day.\n\nWe're also using sqlx's `Uuid` type, so we'll need to add it as a `feature` to our dependencies, along with the `uuid`\npackage so we can reliably serialize the UUID type for requests and responses.\n\nWe're passing in some [axum `State`](https://docs.rs/axum/latest/axum/#sharing-state-with-handlers) with our\ninternal `AppState`, which we'll use to wrap our database connection pool in a safe manner:\n\n```rust\nstruct AppState {\n    pool: PgPool,\n}\n\n// And updating `main.rs`...\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Previous setup...\n\n    // Create a bit of state to share the connection pool and spint up the router\n    let state = AppState { pool };\n    let router = Router::new()\n        .route(\"/howdy\", get(howdy))\n        .route(\"/logs\", post(create_log))\n        .with_state(Arc::new(state));\n\n    println!(\"Router initialized, now listening on port {}\", port);\n\n    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed\n    let addr = SocketAddr::from(([0, 0, 0, 0], port));\n    axum::Server::bind(&addr)\n        .serve(router.into_make_service())\n        .await\n        .unwrap();\n\n    Ok(())\n}\n```\n\nNow if we rebuild and spin up our server and send a request through:\n\n```shell\n> make run-server\n\nPORT=8080 DATABASE_URL=postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable cargo run\n   Compiling flying-with-rust-and-postgres v0.1.0 (/home/jmckenzie/projects/rust/joey-mckenzie-tech/samples/flying-with-rust-and-postgres)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.23s\n     Running `target/debug/flying-with-rust-and-postgres`\nInitializing connection pool...\nConnection pool initialized, running migrations...\nMigrations successfully applied! Initializing router...\nRouter initialized, now listening on port 8080\n\n# In another terminal...\n> curl --header \"Content-Type: application/json\" \\\n--request POST \\\n--data '{\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}' \\\nhttp://localhost:8080/logs\n\n{\"id\":\"06845f6d-2647-4312-9753-a89ed61cd792\"}\n\n# And back in our server logs...\nReceived request to create beer log LogBeerRequest { name: \"Pliny the Elder\", notes: \"Like drinking the nectar of the gods...\" }\n```\n\nWe've got a response! While we could manually verify the row was inserted with some queries, let's add an endpoint to\nretrieve rows when given an ID:\n\n```rust\nasync fn get_log(State(state): State<Arc<AppState>>, Path(id): Path<Uuid>) -> Json<LogBeerRequest> {\n    println!(\"Received request to retrieve beer log {}\", id);\n\n    let result = query_as!(\n        LogBeerRequest,\n        r\"\n        SELECT id, name, notes FROM beer_logs\n        WHERE id = $1\n        \",\n        id,\n    )\n    .fetch_one(&state.pool)\n    .await\n    // DON'T panic in production... this is not an endorsement!\n    .unwrap_or_else(|_| panic!(\"retrieving beer log {:?} failed\", id));\n\n    Json(result)\n}\n```\n\nAnd now let's update `main.rs` to add a route to handle retrieving logs:\n\n```rust\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Previous setup...\n\n    // Create a bit of state to share the connection pool and spint up the router\n    let state = AppState { pool };\n    let router = Router::new()\n        .route(\"/howdy\", get(howdy))\n        .route(\"/logs\", post(create_log))\n        .route(\"/logs/:id\", get(get_log))\n        .with_state(Arc::new(state));\n\n    // Other stuff...\n}\n```\n\nNow if we bounce our server and send a request through using the previously created log:\n\n```shell\n> curl -l http://localhost:8080/logs/06845f6d-2647-4312-9753-a89ed61cd792\n\n{\"id\":\"06845f6d-2647-4312-9753-a89ed61cd792\",\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}\n```\n\nWe've got logs! Again, we're cutting a few corners here that we would most definitely want to handle in a more\nreal-world scenario, but for now, we've got a pretty good-looking (though bare-bones) beer-logging journal API. Let's\nget this thing deployed!\n\n## Back to fly\n\nOur fully fleshed-out server should look something like:\n\n```rust\nuse std::{net::SocketAddr, sync::Arc};\n\nuse axum::{\n    extract::{Path, State},\n    routing::{get, post},\n    Json, Router,\n};\nuse serde::{Deserialize, Serialize};\nuse sqlx::{postgres::PgPoolOptions, query_as, PgPool};\nuse uuid::Uuid;\n\nstruct AppState {\n    pool: PgPool,\n}\n\n#[derive(Deserialize, Serialize, Debug)]\nstruct LogBeerRequest {\n    pub name: String,\n    pub notes: String,\n}\n\n#[derive(Serialize)]\nstruct LogBeerResponse {\n    pub id: Uuid,\n}\n\nasync fn howdy() -> &'static str {\n    \"Well, hello there partner!\"\n}\n\nasync fn create_log(\n    State(state): State<Arc<AppState>>,\n    Json(beer_notes_request): Json<LogBeerRequest>,\n) -> Json<LogBeerResponse> {\n    println!(\n        \"Received request to create beer log {:?}\",\n        beer_notes_request\n    );\n\n    let result = query_as!(\n        LogBeerResponse,\n        r\"\n        INSERT INTO beer_logs (name, notes)\n        VALUES ($1, $2)\n        RETURNING id\n        \",\n        beer_notes_request.name,\n        beer_notes_request.notes\n    )\n    .fetch_one(&state.pool)\n    .await\n    // DON'T panic in production... this is not an endorsement!\n    .unwrap_or_else(|_| panic!(\"inserting beer log {:?} failed\", beer_notes_request));\n\n    Json(result)\n}\n\nasync fn get_log(State(state): State<Arc<AppState>>, Path(id): Path<Uuid>) -> Json<LogBeerRequest> {\n    println!(\"Received request to retrieve beer log {}\", id);\n\n    let result = query_as!(\n        LogBeerRequest,\n        r\"\n        SELECT name, notes FROM beer_logs\n        WHERE id = $1\n        \",\n        id,\n    )\n    .fetch_one(&state.pool)\n    .await\n    // DON'T panic in production... this is not an endorsement!\n    .unwrap_or_else(|_| panic!(\"retrieving beer log {:?} failed\", id));\n\n    Json(result)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    // Require a port and connection string to run, we can configure these with fly\n    let connection_string = std::env::var(\"DATABASE_URL\").expect(\"connection pool was not found\");\n    let port = std::env::var(\"PORT\")?\n        .parse::<u16>()\n        .expect(\"port is not valid\");\n\n    println!(\"Initializing connection pool...\");\n\n    let pool = PgPoolOptions::new()\n        .max_connections(5)\n        .connect(&connection_string)\n        .await?;\n    println!(\"Connection pool initialized, running migrations...\");\n\n    sqlx::migrate!(\"./migrations\").run(&pool).await?;\n\n    println!(\"Migrations successfully applied! Initializing router...\");\n\n    // Create a bit of state to share the connection pool and spint up the router\n    let state = AppState { pool };\n    let router = Router::new()\n        .route(\"/howdy\", get(howdy))\n        .route(\"/logs\", post(create_log))\n        .route(\"/logs/:id\", get(get_log))\n        .with_state(Arc::new(state));\n\n    println!(\"Router initialized, now listening on port {}\", port);\n\n    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed\n    let addr = SocketAddr::from(([0, 0, 0, 0], port));\n    axum::Server::bind(&addr)\n        .serve(router.into_make_service())\n        .await\n        .unwrap();\n\n    Ok(())\n}\n```\n\nSince we're copying over all the files in our Dockerfile except for the `/target` output folder, our deployment process\nshould be bringing over our `/migrations` folder as well. One issue we'll run into, though, will be that our builds\nmight fail as sqlx will attempt to run compile-time checks against the target database that it won't necessarily have\nthe connectivity to at build-time. Let's add the `offline` feature to our manifest file, then run a\nquick `cargo sqlx prepare` in the terminal to cache the database metadata our `query_as!()` macros need to run those\ncompile-time checks.\n\nWe should now see a `sqlx-data.json` file at the root of our project with some data about the tables, compiled queries,\nand a few other things. Again, since we're copying everything over during the container build process, we'll get this\nfile included by default. To get our docker builds successfully running, we'll need to do one of two things:\n\n-   Add the `SQLX_OFFLINE` environment variable to our `.env` file\n-   OR, tell docker to ignore `.env` files while copying over from source\n\nWe'll go with option one, as there might be environment variables we'll want to load in eventually other than the\ndatabase URL, so we'll tell sqlx to use the cached metadata when building. Our `.env` file should look something like\nthis:\n\n```shell\nDATABASE_URL=postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable\nSQLX_OFFLINE=true\n```\n\nNow if we build our container locally with a `make build` our build should run through successfully, giving us the green\nlight to deploy to fly. Let's do that now:\n\n```shell\n> fly deploy\n\n# After a sifting through the build logs, we should see...\n1 desired, 1 placed, 1 healthy, 0 unhealthy [health checks: 1 total] --> v15 deployed successfully\n```\n\nYour version may vary, but we've got fly's stamp of approval that the deployment was successful. Let's verify we're up\nand running with a few `curl`s:\n\n```shell\n> curl --header \"Content-Type: application/json\" \\\n--request POST \\\n--data '{\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}' \\\nhttps://flying-with-rust-and-postgres.fly.dev/logs\n\n{\"id\":\"551a31a1-c7c0-4893-9185-7340a5bf31b3\"}\n\n# Now taking our ID and querying for the log...\n\ncurl -l https://flying-with-rust-and-postgres.fly.dev/logs/551a31a1-c7c0-4893-9185-7340a5bf31b3\n\n{\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}\n```\n\nAnd just like, we're up and running with fly, Rust, and Postgres!\n\n## Wrapping up\n\nIn my quest for a developer-friendly hosting platform, I've been thoroughly satisfied with what fly offers. I'm excited\nto see what I can build, and without a doubt, I'll be looking for more excuses to host whatever I can with the platform.\n\nAll of the code we wrote today you can find within\nmy [blog samples](https://github.com/JoeyMckenzie/joey-mckenzie-tech/tree/main/samples/with-fly-postgres).\n\nUntil next time, friends!\n",
      "html": "<p>After a long weekend of random life events, I decided I needed to scratch an itch to learn something new. I've been\nwriting a lot serverless <a href=\"https://aws.amazon.com/lambda/\">Lambda's</a> lately and wanted to jump back into a more managed\nworkflow with a new tool I have yet to use, though seems to be getting a lot of hype in <a href=\"https://fly.io/\">fly.io</a>. I've\nbeen hearing quite a bit within the community about the love developers have for fly due to its ease of deployment and\nideology about app servers centralizing on the idea of simply just deploying projects based on a Dockerfile. I do my\nfair share of Docker management at work and on side projects, so why not take fly for a spin?</p>\n<h2>Getting started with Fly</h2>\n<p>Fly seems like the perfect approach to get app servers up and running quickly. Simply spin up a project in a\nlanguage/framework of your choice, write a sensible Dockerfile fit for running on a server, and deploy to fly's platform\nto just have things <em>work</em>. Most of my workflow nowadays involves maintaining servers and applications through a variety\nof different tools, though mainly AWS stuff. I've been looking for a reason to de-AWS my side projects and found this\nthe perfect opportunity to do so by deploying a mighty simple Rust app sitting atop a Postgres database.</p>\n<p>Luckily enough, fly offers a hosted <a href=\"https://fly.io/docs/postgres/\">Postgres option</a> that is just another fly app within\nour cluster that our other fly app servers can talk to. Fly makes it clear, though, that this is not\na <a href=\"https://fly.io/docs/postgres/getting-started/what-you-should-know/\">fully managed database solution</a>, as opposed to\nsomething like <a href=\"https://planetscale.com/\">PlanetScale</a>, so your mileage may vary if you're looking to maintain a\ndatabase without being expected to put on a DBA hat now and again.</p>\n<p>To get up and running, fly offers a rather nice <a href=\"https://fly.io/docs/hands-on/install-flyctl/\">CLI</a> to help manage our\napp servers and account. Let's start by installing it on our local machine. I'll be using brew with WSL2, so a quick:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> brew install flyctl</span></span></code></pre></figure>\n<p>should do the trick. Now that we've got the CLI installed, go ahead and log in with <code>fly auth login</code> and follow the\nlogin prompts in the browser the CLI opens. Once we've authenticated, we should be good to start spinning up some apps.</p>\n<h2>Creating a Postgres instance</h2>\n<p>Since we'll be building a simple web app with a bit of persistence, let's go ahead and spin up our Postgres instance:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> fly postgres create</span></span></code></pre></figure>\n<p>Follow the prompts, naming your database whatever seems appropriate and choosing the development configuration as we\ndon't necessarily need high availability for a toy project. After fly does a bit of initialization, we should see\nsomething like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">Postgres</span><span style=\"color:#C98A7D\"> cluster</span><span style=\"color:#C98A7D\"> wandering-cloud-1281</span><span style=\"color:#C98A7D\"> created</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  Username:</span><span style=\"color:#C98A7D\">    postgres</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  Password:</span><span style=\"color:#C98A7D\">    {{password}}</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  Hostname:</span><span style=\"color:#C98A7D\">    {{hostname}}</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  Flycast:</span><span style=\"color:#C98A7D\">     {{flycast}}</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  Proxy</span><span style=\"color:#C98A7D\"> port:</span><span style=\"color:#4C9A91\">  5432</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  Postgres</span><span style=\"color:#C98A7D\"> port:</span><span style=\"color:#4C9A91\">  5433</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  Connection</span><span style=\"color:#C98A7D\"> string:</span><span style=\"color:#C98A7D\"> postgres://postgres:{{password}}@{{server}}:5432</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Save</span><span style=\"color:#C98A7D\"> your</span><span style=\"color:#C98A7D\"> credentials</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#C98A7D\"> a</span><span style=\"color:#C98A7D\"> secure</span><span style=\"color:#C98A7D\"> place</span><span style=\"color:#C99076\"> --</span><span style=\"color:#C98A7D\"> you</span><span style=\"color:#C98A7D\"> won</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">t be able to see them again!</span></span></code></pre></figure>\n<p>in the console. Let's verify we're able to connect. As of this writing, there's a bit more configuration\nneeded <a href=\"https://fly.io/docs/postgres/connecting/connecting-external/\">connect to your instance externally</a> through a\nclient like pgAdmin, but luckily <code>flyctl</code> has us covered allowing us to connect to our internal instance through the\nCLI. Let's connect and verify we can run some queries:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> fly postgres connect -a </span><span style=\"color:#CB7676\">&#x3C;</span><span style=\"color:#DBD7CAEE\">your instance name</span><span style=\"color:#CB7676\">></span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Connecting</span><span style=\"color:#C98A7D\"> to</span><span style=\"color:#CB7676\"> &#x3C;</span><span style=\"color:#C98A7D\">i</span><span style=\"color:#DBD7CAEE\">p</span><span style=\"color:#CB7676\">></span><span style=\"color:#C98A7D\">...</span><span style=\"color:#C98A7D\"> complete</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">psql</span><span style=\"color:#DBD7CAEE\"> (15.2 (Debian </span><span style=\"color:#4C9A91\">15.2</span><span style=\"color:#C98A7D\">-1.pgdg110+1</span><span style=\"color:#DBD7CAEE\">))</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Type</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">help</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\"> for</span><span style=\"color:#C98A7D\"> help.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> postgres=# </span><span style=\"color:#C99076\">\\d</span><span style=\"color:#DBD7CAEE\">t </span><span style=\"color:#CB7676\">*</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#CB7676\">*</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                           List</span><span style=\"color:#C98A7D\"> of</span><span style=\"color:#C98A7D\"> relations</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">       Schema</span><span style=\"color:#CB7676\">       |</span><span style=\"color:#80A665\">           Name</span><span style=\"color:#CB7676\">           |</span><span style=\"color:#80A665\">    Type</span><span style=\"color:#CB7676\">     |</span><span style=\"color:#80A665\">  Owner</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">--------------------+--------------------------+-------------+----------</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> information_schema</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> sql_features</span><span style=\"color:#CB7676\">             |</span><span style=\"color:#80A665\"> table</span><span style=\"color:#CB7676\">       |</span><span style=\"color:#80A665\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> information_schema</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> sql_implementation_info</span><span style=\"color:#CB7676\">  |</span><span style=\"color:#80A665\"> table</span><span style=\"color:#CB7676\">       |</span><span style=\"color:#80A665\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> information_schema</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> sql_parts</span><span style=\"color:#CB7676\">                |</span><span style=\"color:#80A665\"> table</span><span style=\"color:#CB7676\">       |</span><span style=\"color:#80A665\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> information_schema</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> sql_sizing</span><span style=\"color:#CB7676\">               |</span><span style=\"color:#80A665\"> table</span><span style=\"color:#CB7676\">       |</span><span style=\"color:#80A665\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> pg_catalog</span><span style=\"color:#CB7676\">         |</span><span style=\"color:#80A665\"> pg_aggregate</span><span style=\"color:#CB7676\">             |</span><span style=\"color:#80A665\"> table</span><span style=\"color:#CB7676\">       |</span><span style=\"color:#80A665\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> pg_catalog</span><span style=\"color:#CB7676\">         |</span><span style=\"color:#80A665\"> pg_am</span><span style=\"color:#CB7676\">                    |</span><span style=\"color:#80A665\"> table</span><span style=\"color:#CB7676\">       |</span><span style=\"color:#80A665\"> postgres</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> pg_catalog</span><span style=\"color:#CB7676\">         |</span><span style=\"color:#80A665\"> pg_amop</span><span style=\"color:#CB7676\">                  |</span><span style=\"color:#80A665\"> table</span><span style=\"color:#CB7676\">       |</span><span style=\"color:#80A665\"> postgres</span></span></code></pre></figure>\n<p>Running a quick <code>\\dt *.*</code>. We should see a list of tables with various bits of metadata about their schema, type, owner,\nand name. Sweet!</p>\n<h2>Bootstrapping our service</h2>\n<p>Next, let's spin up a bare-bones Rust web app. I'll be using <a href=\"https://docs.rs/axum/latest/axum/\">axum</a> as my framework,\nbut feel free to use your own:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> cargo new flying-with-rust-and-postgres</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># and once cargo is done with it's thing, let's add axum</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> cargo add axum</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># and while we're at it, let's grab tokio too</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> cargo add tokio --features full</span></span></code></pre></figure>\n<p>Now that we've got our project bootstrapped, let's crack open <code>main.rs</code> and scaffold out a simple route:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">net</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SocketAddr</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">routing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> howdy</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#666666\">'</span><span style=\"color:#5DA994\">static</span><span style=\"color:#5DA994\"> str</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#C98A7D\">Well, hello there partner!</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;(),</span><span style=\"color:#5DA994\"> Box</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">dyn</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#BD976A\">error</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">>></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Require a port to run, we can configure this with fly</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">env</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">var</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">PORT</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">parse</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">u16</span><span style=\"color:#666666\">>()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">port is not valid</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/howdy</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">howdy</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> addr</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> SocketAddr</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from</span><span style=\"color:#666666\">(([</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">],</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Server</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">bind</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">addr</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">serve</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_make_service</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<p>Let's spin this thing up to make sure we've got water flowing through the pipes, so to speak:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> PORT=8080 cargo run</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># in another terminal...</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> curl -l http://localhost:8080/howdy</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Well,</span><span style=\"color:#C98A7D\"> hello</span><span style=\"color:#C98A7D\"> there</span><span style=\"color:#C98A7D\"> partner!</span></span></code></pre></figure>\n<p>Nice! We've got the (arguably) world's most simple API ready to roll, now let's get this thing into fly.</p>\n<h2>Dockerizing our app</h2>\n<p>I'll be the first to admit I'm <em>far</em> from an experience Docker aficionado - most of my daily Docker work is within the\n.NET realm. With that said, since all fly needs is a Dockerfile to get started, let's add one to the root of our project\nwith a simple configuration, doing what we can to compress the size here and there:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># All credit goes to https://fasterthanli.me/articles/remote-development-with-rust-on-fly-io#what-the-heck-is-fly-io-for-even</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># for an an awesome walkthrough of Dockerfiles for rust, this is more or less a direct copy pasta with a few minor tweaks</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># After containerization, this manages to come in at a whopping ~155mb, still a bit to we could optimize but this should do for now</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Stage one - copy over our build files for compilation, including workspace and .env files</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">FROM</span><span style=\"color:#C98A7D\"> rust:1-slim-bullseye</span><span style=\"color:#C98A7D\"> AS</span><span style=\"color:#C98A7D\"> build</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">WORKDIR</span><span style=\"color:#C98A7D\"> /app</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">COPY</span><span style=\"color:#C98A7D\"> .</span><span style=\"color:#C98A7D\"> .</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># On rebuilds, we explicitly cache our rust build dependencies to speed things up</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">RUN</span><span style=\"color:#C99076\"> --mount=type=cache,target=/app/target</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">    --mount=type=cache,target=/usr/local/cargo/registry</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">    --mount=type=cache,target=/usr/local/cargo/git</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">    --mount=type=cache,target=/usr/local/rustup</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">    set</span><span style=\"color:#C99076\"> -eux</span><span style=\"color:#666666\">;</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    # We'll use nightly because we like to go fast and break things</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    rustup</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C98A7D\"> nightly</span><span style=\"color:#666666\">;</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    cargo</span><span style=\"color:#C98A7D\"> build</span><span style=\"color:#C99076\"> --release</span><span style=\"color:#666666\">;</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    # Compress debug symbols, squeezing the size just a bit more</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    objcopy</span><span style=\"color:#C99076\"> --compress-debug-sections</span><span style=\"color:#C98A7D\"> target/release/flying-with-rust-and-postgres</span><span style=\"color:#C98A7D\"> ./server</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Stage two - we'll utilize a second container to run our built binary from our first container - slim containers!</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">FROM</span><span style=\"color:#C98A7D\"> debian:bullseye-slim</span><span style=\"color:#C98A7D\"> as</span><span style=\"color:#C98A7D\"> deploy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Let's install all the necessary runtime tools on the container</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">RUN</span><span style=\"color:#C98A7D\"> set</span><span style=\"color:#C99076\"> -eux</span><span style=\"color:#666666\">;</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    export</span><span style=\"color:#BD976A\"> DEBIAN_FRONTEND</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D\">noninteractive</span><span style=\"color:#666666\">;</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    apt</span><span style=\"color:#C98A7D\"> update</span><span style=\"color:#666666\">;</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    apt</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C99076\"> -y</span><span style=\"color:#C99076\"> --no-install-recommends</span><span style=\"color:#C98A7D\"> bind9-dnsutils</span><span style=\"color:#C98A7D\"> iputils-ping</span><span style=\"color:#C98A7D\"> iproute2</span><span style=\"color:#C98A7D\"> curl</span><span style=\"color:#C98A7D\"> ca-certificates</span><span style=\"color:#C98A7D\"> htop</span><span style=\"color:#666666\">;</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    apt</span><span style=\"color:#C98A7D\"> clean</span><span style=\"color:#C98A7D\"> autoclean</span><span style=\"color:#666666\">;</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    apt</span><span style=\"color:#C98A7D\"> autoremove</span><span style=\"color:#C99076\"> -y</span><span style=\"color:#666666\">;</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    rm</span><span style=\"color:#C99076\"> -rf</span><span style=\"color:#C98A7D\"> /var/lib/{apt,dpkg,cache,log}/</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Let's work from a self contained directory for all of our deployment needs</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">WORKDIR</span><span style=\"color:#C98A7D\"> /deploy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># We need the artifact from the build container, so let's grab it</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">COPY</span><span style=\"color:#C99076\"> --from=build</span><span style=\"color:#C98A7D\"> /app/server</span><span style=\"color:#C98A7D\"> ./</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Let's expose port 80 as we'll need fly's internal port mapping also assumes 80</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">EXPOSE</span><span style=\"color:#4C9A91\"> 80</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Finally, boot up the API</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">CMD</span><span style=\"color:#DBD7CAEE\"> [</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">./server</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#DBD7CAEE\">]</span></span></code></pre></figure>\n<p>With our Dockerfile in place, let's build this bad boy:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> docker build </span><span style=\"color:#B8A965\">.</span><span style=\"color:#DBD7CAEE\"> -t flying_with_rust_and_postgres</span></span></code></pre></figure>\n<p>After a lengthy initial build (successive builds will be quicker thanks to the bits of caching we threw in there), we\ncan spin up our container locally and verify we're still looking good from a server perspective:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> docker run -d \\</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    -p</span><span style=\"color:#4C9A91\"> 8080</span><span style=\"color:#C98A7D\">:8080</span><span style=\"color:#C99076\"> \\ </span><span style=\"color:#C98A7D\">#</span><span style=\"color:#C98A7D\"> expose</span><span style=\"color:#C98A7D\"> the</span><span style=\"color:#C98A7D\"> container</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">s port to match what our axum server will listen under</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">    -e PORT=8008 \\ # the required env var to configure our axum port</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">    --name flying_with_rust_and_postgres \\ # gives this container a name to stop and start</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">    -it flying_with_rust_and_postgres # tags this container</span></span></code></pre></figure>\n<p>After a few seconds, we should the container ID spit out in the terminal, and if we send through another request:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> curl -l http://localhost:8080/howdy</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Well,</span><span style=\"color:#C98A7D\"> hello</span><span style=\"color:#C98A7D\"> there</span><span style=\"color:#C98A7D\"> partner!</span></span></code></pre></figure>\n<p>Our app is running in a containerized manner, now let's get this thing deployed!</p>\n<h2>Deploying to fly</h2>\n<p>Alright, I <em>did</em> mention I was using this post as an excuse to learn fly, so let's figure out what the deployment story\nlooks like. There's gotta be <em>something</em> in the CLI, right? Let's do a bit of trial and error:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> fly</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">This</span><span style=\"color:#C98A7D\"> is</span><span style=\"color:#C98A7D\"> flyctl,</span><span style=\"color:#C98A7D\"> the</span><span style=\"color:#C98A7D\"> Fly.io</span><span style=\"color:#C98A7D\"> command</span><span style=\"color:#C98A7D\"> line</span><span style=\"color:#C98A7D\"> interface.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Here</span><span style=\"color:#80A665\">'s a few commands to get you started:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  fly launch      Launch a new application</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  fly apps        Create and manage apps</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  fly postgres    Create and manage Postgres databases</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  fly redis       Create and manage Redis databases</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  fly machines    Create and manage individual Fly.io machines</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">If you need help along the way:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  fly help            Display a complete list of commands</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  fly help &#x3C;command>  Display help for a specific command, e.g. '</span><span style=\"color:#80A665\">fly</span><span style=\"color:#C98A7D\"> help</span><span style=\"color:#C98A7D\"> launch</span><span style=\"color:#C98A7D99\">'</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">Visit https://fly.io/docs for additional documentation &#x26; guides</span></span></code></pre></figure>\n<p>Okay... <code>fly launch</code> looks promising, let's check it out:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> fly help launch</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Create</span><span style=\"color:#C98A7D\"> and</span><span style=\"color:#C98A7D\"> configure</span><span style=\"color:#C98A7D\"> a</span><span style=\"color:#C98A7D\"> new</span><span style=\"color:#C98A7D\"> app</span><span style=\"color:#C98A7D\"> from</span><span style=\"color:#C98A7D\"> source</span><span style=\"color:#C98A7D\"> code</span><span style=\"color:#C98A7D\"> or</span><span style=\"color:#C98A7D\"> a</span><span style=\"color:#C98A7D\"> Docker</span><span style=\"color:#C98A7D\"> image.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Usage:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  flyctl</span><span style=\"color:#C98A7D\"> launch</span><span style=\"color:#DBD7CAEE\"> [flags]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Flags:</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">      # ...a bunch of options and whatnot</span></span></code></pre></figure>\n<p>Alright, this looks like <em>exactly</em> what we need. We have a Dockerfile, and all we need is to put this thing on a fly app\nserver. Let's take it for a spin:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> fly launch</span></span></code></pre></figure>\n<p>We get asked a bunch of questions, like what we want the app named, where it should be located, etc. Fly asks if we want\na Postgres instance - let's decline that for now as we have already one in place. What's even neater is that fly\ngenerates a config file for us in the <code>fly.toml</code> file that now appears in our editor:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"toml\" data-theme=\"vitesse-dark\"><code data-language=\"toml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># fly.toml file generated for flying-with-rust-and-postgres on 2023-04-03T14:09:56-07:00</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">app</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">flying-with-rust-and-postgres</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">kill_signal</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">SIGINT</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">kill_timeout</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 5</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">primary_region</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">lax</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">processes</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> []</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">env</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">experimental</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">  auto_rollback</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> true</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[[</span><span style=\"color:#80A665\">services</span><span style=\"color:#666666\">]]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">  http_checks</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> []</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">  internal_port</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 80</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">  processes</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">app</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">  protocol</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">tcp</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">  script_checks</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> []</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">  [</span><span style=\"color:#80A665\">services</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">concurrency</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    hard_limit</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 25</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    soft_limit</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 20</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    type</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">connections</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">  [[</span><span style=\"color:#80A665\">services</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">ports</span><span style=\"color:#666666\">]]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    force_https</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> true</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    handlers</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">http</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    port</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 80</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">  [[</span><span style=\"color:#80A665\">services</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">ports</span><span style=\"color:#666666\">]]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    handlers</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">tls</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">http</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    port</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 443</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">  [[</span><span style=\"color:#80A665\">services</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">tcp_checks</span><span style=\"color:#666666\">]]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    grace_period</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">1s</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    interval</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">15s</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    restart_limit</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 0</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    timeout</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">2s</span><span style=\"color:#C98A7D99\">\"</span></span></code></pre></figure>\n<p>We wait a bit, and check the console as we sit on the edge of our seats in anticipation of a successful deployment,\nand... it failed. Well, shoot. Let's take a look at the logs:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> fly logs</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># ...after a bit of sifting, we see something familiar</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Preparing to run: </span><span style=\"color:#666666\">`</span><span style=\"color:#80A665\">./server</span><span style=\"color:#666666\">`</span><span style=\"color:#80A665\"> as</span><span style=\"color:#C98A7D\"> root</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Error: NotPresent</span></span></code></pre></figure>\n<p>An error at startup? Oh! We didn't pass a port environment variable, so let's add that to our fly config:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"toml\" data-theme=\"vitesse-dark\"><code data-language=\"toml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># other configs...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">env</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">PORT</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">80</span><span style=\"color:#C98A7D99\">\"</span></span></code></pre></figure>\n<p>For production, we want to listen on port 80 as the default API port (versus 8080 locally). While we're at it, let's\nalso expose port 443 in our Dockerfile to satisfy SSL:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"dockerfile\" data-theme=\"vitesse-dark\"><code data-language=\"dockerfile\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># Previous setup...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Let's expose port 80 as we'll need fly's internal port mapping also assumes 80</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">EXPOSE</span><span style=\"color:#DBD7CAEE\"> 80</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">EXPOSE</span><span style=\"color:#DBD7CAEE\"> 443</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Finally, boot up the API</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">CMD</span><span style=\"color:#DBD7CAEE\"> [</span><span style=\"color:#C98A7D\">\"./server\"</span><span style=\"color:#DBD7CAEE\">]</span></span></code></pre></figure>\n<p>Okay, the second time's a charm:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> fly deploy</span></span></code></pre></figure>\n<p>And after a few seconds (thanks to our layer caching), we should see a message about our app being deployed\nsuccessfully! A quick <code>fly logs</code> confirms it with a bunch of green in the terminal, but let's do a quick sanity check:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> curl -l https://flying-with-rust-and-postgres.fly.dev/howdy</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Well,</span><span style=\"color:#C98A7D\"> hello</span><span style=\"color:#C98A7D\"> there</span><span style=\"color:#C98A7D\"> partner!</span></span></code></pre></figure>\n<p>Nice! Now anytime we make changes, we can <code>fly deploy</code> to have the reflected on our production. In reality, we'd hook\nthis up to CI, but I'll leave that as an exercise for the reader.</p>\n<h2>Task-ifying local development</h2>\n<p>Now with the hard part out of the way, let's get back to the code. Because we'll be iterating, building docker\ncontainers, deploying, etc. <em>and</em> because I can never remember all the docker flags I need to pass when\nbuilding/running/starting/stopping containers <em>and</em> because I'm lazy, I'm going to add a <code>Makefile</code> (pause for audible\ngasp). There are better alternatives for Rust projects like <a href=\"https://github.com/sagiegurari/cargo-make\"><code>cargo-make</code></a>,\nbut our use case is simple enough here as we only need to manage docker. Let's add one to the root of our project:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">PORT</span><span style=\"color:#C98A7D\"> =</span><span style=\"color:#4C9A91\"> 8080</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">TAG</span><span style=\"color:#C98A7D\"> =</span><span style=\"color:#C98A7D\"> flying_with_rust_and_postgres</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">.PHONY:</span><span style=\"color:#C98A7D\"> build</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">build:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    docker</span><span style=\"color:#C98A7D\"> build</span><span style=\"color:#C98A7D\"> .</span><span style=\"color:#C99076\"> -t</span><span style=\"color:#666666\"> $(</span><span style=\"color:#80A665\">TAG</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">.PHONY:</span><span style=\"color:#C98A7D\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">run:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    docker</span><span style=\"color:#C98A7D\"> run</span><span style=\"color:#C99076\"> -d</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">    -p</span><span style=\"color:#666666\"> $(</span><span style=\"color:#80A665\">PORT</span><span style=\"color:#666666\">)</span><span style=\"color:#C98A7D\">:</span><span style=\"color:#666666\">$(</span><span style=\"color:#80A665\">PORT</span><span style=\"color:#666666\">)</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">    -e</span><span style=\"color:#C98A7D\"> PORT=</span><span style=\"color:#666666\">$(</span><span style=\"color:#80A665\">PORT</span><span style=\"color:#666666\">)</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">    --name</span><span style=\"color:#666666\"> $(</span><span style=\"color:#80A665\">TAG</span><span style=\"color:#666666\">)</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">    -it</span><span style=\"color:#666666\"> $(</span><span style=\"color:#80A665\">TAG</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">.PHONY:</span><span style=\"color:#C98A7D\"> stop</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">stop:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    docker</span><span style=\"color:#C98A7D\"> stop</span><span style=\"color:#666666\"> $(</span><span style=\"color:#80A665\">TAG</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">.PHONY:</span><span style=\"color:#C98A7D\"> start</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">start:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    docker</span><span style=\"color:#C98A7D\"> start</span><span style=\"color:#666666\"> $(</span><span style=\"color:#80A665\">TAG</span><span style=\"color:#666666\">)</span></span></code></pre></figure>\n<p>Now, with a simple <code>make build</code> or <code>make run</code>, we can rebuild and restart our container a bit easier. I'm using <code>PHONY</code>\ntargets here, as I'm using <code>make</code> as a glorified task runner rather than building outputs.</p>\n<p>Okay, so back to where we left off. We want to explore integrating fly apps with Postgres, but only our <em>deployed</em> fly\napps can talk to our Postgres instance, which is a good thing - I don't want to do local development against production\ndata. Let's spin up a local development database with Postgres using docker by adding a few tasks to our <code>Makefile</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">DB_PORT</span><span style=\"color:#C98A7D\"> =</span><span style=\"color:#4C9A91\"> 5432</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Other tasks...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">.PHONY:</span><span style=\"color:#C98A7D\"> db-run</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">db-run:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    docker</span><span style=\"color:#C98A7D\"> run</span><span style=\"color:#C99076\"> -d</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">     -p</span><span style=\"color:#666666\"> $(</span><span style=\"color:#80A665\">DB_PORT</span><span style=\"color:#666666\">)</span><span style=\"color:#C98A7D\">:</span><span style=\"color:#666666\">$(</span><span style=\"color:#80A665\">DB_PORT</span><span style=\"color:#666666\">)</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">     -e</span><span style=\"color:#C98A7D\"> POSTGRES_PASSWORD=mySuperSecretPassword!</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">     --name</span><span style=\"color:#C98A7D\"> fly_demo_db</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">     postgres</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">.PHONY:</span><span style=\"color:#C98A7D\"> db-start</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">db-start:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    docker</span><span style=\"color:#C98A7D\"> start</span><span style=\"color:#C98A7D\"> fly_demo_db</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">.PHONY:</span><span style=\"color:#C98A7D\"> db-stop</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">db-stop:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    docker</span><span style=\"color:#C98A7D\"> stop</span><span style=\"color:#C98A7D\"> fly_demo_db</span></span></code></pre></figure>\n<p>Now we can spin up a local development database with a simple <code>make db-run</code>and subsequently,<code>make db-start</code>\nand <code>make db-stop</code> to start/stop it when needed. I should note that I'm only using <code>make</code> here to facilitate docker\ntasks as there are a handful of flags, local variables, and whatnot. <code>cargo</code> and <code>fly</code> are simple enough commands that\nwe don't necessarily need to add task runners for them.</p>\n<h2>Where we're going... we'll need persistence</h2>\n<p>So we're going to talk to a database from our Rust code. There are <em>quite</em> a few great crates to facilitate doing this,\nand purely out of selfish preference, I'm going to use <a href=\"https://crates.io/crates/sqlx\"><code>sqlx</code></a>. <code>sqlx</code> is simple,\nstraightforward, compile-time safe, and at the end of the day, it's just SQL. This isn't a post about sqlx - we'll save\nthat for a rainy day.</p>\n<p>With that schpiel out of the way, let's add sqlx with the <code>runtime-tokio-rustls</code> and <code>migrate</code> features along\nwith <code>postgres</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> cargo add sqlx --features runtime-tokio-rustls, migrate, postgres</span></span></code></pre></figure>\n<p>Specifically, <code>migrate</code> will allow us to use migrations to keep our local development database in sync with our\nproduction database, as again, only our fly apps can actually communicate with our Postgres instance (if you're\nunwilling to pay). To make our migration story even easier, let's add\nthe <a href=\"https://crates.io/crates/sqlx-cli\"><code>sqlx-cli</code></a> to help us manage migrations.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># We're only using Postgres, so we need just a subset of all features</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> cargo install sqlx-cli --no-default-features --features rustls, postgres</span></span></code></pre></figure>\n<p>After it's installed, let's add a <code>.env</code> file that the sqlx CLI will look for when running and applying migrations:</p>\n<h3>.env</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">DATABASE_URL</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D\">postgres://postgres:mySuperSecretPassword@localhost:5432/postgres?sslmode=disable</span></span></code></pre></figure>\n<p>We'll slap a <code>sslmode=disable</code> here since we're only using this connection string locally. When we deploy, we'll need to\noverride this in our fly configuration at some point. Now that we've got the sqlx CLI installed, let's spin up a fresh\nmigration.</p>\n<p>To spice things up a bit, rather than your standard issue <code>todo</code> example, let's create a <code>beer_logs</code> table to track\njournal entries of amazing beers we've drunk (somehow, that seems much more grammatically worse than \"drank\"):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> sqlx migrate add add_beer_logs_table</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Creating</span><span style=\"color:#C98A7D\"> migrations/20230403232851_add_beer_logs_table.sql</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Congratulations</span><span style=\"color:#C98A7D\"> on</span><span style=\"color:#C98A7D\"> creating</span><span style=\"color:#C98A7D\"> your</span><span style=\"color:#C98A7D\"> first</span><span style=\"color:#C98A7D\"> migration!</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Did</span><span style=\"color:#C98A7D\"> you</span><span style=\"color:#C98A7D\"> know</span><span style=\"color:#C98A7D\"> you</span><span style=\"color:#C98A7D\"> can</span><span style=\"color:#C98A7D\"> embed</span><span style=\"color:#C98A7D\"> your</span><span style=\"color:#C98A7D\"> migrations</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#C98A7D\"> your</span><span style=\"color:#C98A7D\"> application</span><span style=\"color:#C98A7D\"> binary?</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">On</span><span style=\"color:#C98A7D\"> startup,</span><span style=\"color:#C98A7D\"> after</span><span style=\"color:#C98A7D\"> creating</span><span style=\"color:#C98A7D\"> your</span><span style=\"color:#C98A7D\"> database</span><span style=\"color:#C98A7D\"> connection</span><span style=\"color:#C98A7D\"> or</span><span style=\"color:#C98A7D\"> pool,</span><span style=\"color:#C98A7D\"> add:</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">sqlx::migrate!</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">.run</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x3C;</span><span style=\"color:#666666\">&#x26;</span><span style=\"color:#80A665\">your_pool</span><span style=\"color:#C98A7D\"> OR</span><span style=\"color:#666666\"> &#x26;</span><span style=\"color:#80A665\">mut</span><span style=\"color:#C98A7D\"> your_connectio</span><span style=\"color:#DBD7CAEE\">n</span><span style=\"color:#CB7676\">></span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\">.await</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Note</span><span style=\"color:#C98A7D\"> that</span><span style=\"color:#C98A7D\"> the</span><span style=\"color:#C98A7D\"> compiler</span><span style=\"color:#C98A7D\"> won</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">t pick up new migrations if no Rust source files have changed.</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">You can create a Cargo build script to work around this with `sqlx migrate build-script`.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">See: https://docs.rs/sqlx/0.5/sqlx/macro.migrate.html</span></span></code></pre></figure>\n<p>Nice! We've got a <code>/migrations</code> folder added, let's add some SQL to the script:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"sql\" data-theme=\"vitesse-dark\"><code data-language=\"sql\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">-- Add migration script here</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">CREATE</span><span style=\"color:#DBD7CAEE\"> EXTENSION </span><span style=\"color:#4D9375\">IF</span><span style=\"color:#4D9375\"> NOT</span><span style=\"color:#4D9375\"> EXISTS</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">uuid-ossp</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">CREATE</span><span style=\"color:#4D9375\"> TABLE</span><span style=\"color:#80A665\"> beer_logs</span><span style=\"color:#DBD7CAEE\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    id uuid </span><span style=\"color:#CB7676\">PRIMARY KEY</span><span style=\"color:#CB7676\"> DEFAULT</span><span style=\"color:#DBD7CAEE\"> uuid_generate_v4</span><span style=\"color:#666666\">()</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    name</span><span style=\"color:#CB7676\"> TEXT</span><span style=\"color:#4D9375\"> NOT NULL</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    notes </span><span style=\"color:#CB7676\">TEXT</span><span style=\"color:#4D9375\"> NOT NULL</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">);</span></span></code></pre></figure>\n<p>I'm using <code>UUID</code>s instead of integer-based for a variety of reasons, and whose discussion is out of scope for our\npurposes, atop the fact that people much smarter than myself can reason about doing so better than I can. Since we'll be\nusing UUIDs for keys, we'll need to add <code>uuid</code> as a sqlx feature in our manifest file. Now that we've fleshed out our\nmigration, let's apply it:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> sqlx migrate run</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Applied</span><span style=\"color:#4C9A91\"> 20230403232851</span><span style=\"color:#C98A7D\">/migrate</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> beer</span><span style=\"color:#C98A7D\"> logs</span><span style=\"color:#C98A7D\"> table</span><span style=\"color:#DBD7CAEE\"> (71.391042ms)</span></span></code></pre></figure>\n<p>Sweet! If we inspect the database using your tool of choice, we should see two tables:</p>\n<ul>\n<li><code>_sqlx_migrations</code> - the migration management table</li>\n<li><code>beer_logs</code> - the journal table we created</li>\n</ul>\n<p>We're going to need the same schema applied to our production database, so let's add a bit of code to apply migrations\nprogrammatically when our application starts up. Back in <code>main.rs</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;(),</span><span style=\"color:#5DA994\"> Box</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">dyn</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#BD976A\">error</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">>></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Require a port and connection string to run, we can configure these with fly</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> connection_string</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">env</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">var</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">DATABASE_URL</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">connection pool was not found</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">env</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">var</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">PORT</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">parse</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">u16</span><span style=\"color:#666666\">>()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">port is not valid</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Initializing connection pool...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> pool</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> PgPoolOptions</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">max_connections</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">connect</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">connection_string</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Connection pool initialized, running migrations...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    sqlx</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">migrate!</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">run</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">pool</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#4D9375\">await</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Migrations successfully applied!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/howdy</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">howdy</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> addr</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> SocketAddr</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from</span><span style=\"color:#666666\">(([</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">],</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Server</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">bind</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">addr</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">serve</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_make_service</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We've added a few lines to import a <code>DATABASE_URL</code> environment variable and run migrations, with the default being\nmigrations mapped to whatever is underneath the <code>/migrations</code> folder. We've also sprinkled in a few <code>println!()</code>s as a\npoor man's version of <a href=\"https://crates.io/crates/tracing\">tracing</a>, but for our purposes here will suffice. If we spin up\nour server now with <code>cargo run</code>, we should see a relatively boring console as our migrations have already been manually\napplied using the CLI:</p>\n<pre><code>> PORT=8080 postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable cargo run\n\nFinished dev [unoptimized + debuginfo] target(s) in 0.12s\n Running `target/debug/flying-with-rust-and-postgres`\nRunning migrations...\nMigrations successfully applied!\n</code></pre>\n<p>To sanity check, if we drop the tables (using your DB interface of choice) and spin up the server, we should see the\nsuccess message again. Now, it's going to be a bit annoying to have to punch in our environment variables, so let's add\na <code>make</code> task:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"makefile\" data-theme=\"vitesse-dark\"><code data-language=\"makefile\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># Existing environment variables...</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">CONNECTION_STRING</span><span style=\"color:#666666\"> =</span><span style=\"color:#DBD7CAEE\"> postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B8A965\">.PHONY</span><span style=\"color:#666666\">:</span><span style=\"color:#DBD7CAEE\"> run-server</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">run-server</span><span style=\"color:#666666\">:</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\"> PORT</span><span style=\"color:#666666\">=</span><span style=\"color:#666666\">$(</span><span style=\"color:#C98A7D\">PORT</span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\"> DATABASE_URL=</span><span style=\"color:#666666\">$(</span><span style=\"color:#C98A7D\">CONNECTION_STRING</span><span style=\"color:#666666\">)</span><span style=\"color:#DBD7CAEE\"> cargo run</span></span></code></pre></figure>\n<p>We could also use <a href=\"https://crates.io/crates/dotenvy\"><code>dotenvy</code></a>, though we only have a couple variables to manage for\nnow. Starting up with a <code>make run-server</code> does the trick:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> make run-server</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">PORT</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">8080</span><span style=\"color:#BD976A\"> DATABASE_URL</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D\">postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable</span><span style=\"color:#80A665\"> cargo</span><span style=\"color:#C98A7D\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">   Compiling</span><span style=\"color:#C98A7D\"> flying-with-rust-and-postgres</span><span style=\"color:#C98A7D\"> v0.1.0</span><span style=\"color:#DBD7CAEE\"> (~/flying-with-rust-and-postgres)</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Finished</span><span style=\"color:#C98A7D\"> dev</span><span style=\"color:#DBD7CAEE\"> [unoptimized </span><span style=\"color:#C98A7D\">+</span><span style=\"color:#C98A7D\"> debuginfo]</span><span style=\"color:#C98A7D\"> target</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">s</span><span style=\"color:#666666\">)</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#4C9A91\"> 5.51</span><span style=\"color:#C98A7D\">s</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">     Running</span><span style=\"color:#666666\"> `</span><span style=\"color:#80A665\">target/debug/flying-with-rust-and-postgres</span><span style=\"color:#666666\">`</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Initializing</span><span style=\"color:#C98A7D\"> connection</span><span style=\"color:#C98A7D\"> pool...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Connection</span><span style=\"color:#C98A7D\"> pool</span><span style=\"color:#C98A7D\"> initialized,</span><span style=\"color:#C98A7D\"> running</span><span style=\"color:#C98A7D\"> migrations...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Migrations</span><span style=\"color:#C98A7D\"> successfully</span><span style=\"color:#C98A7D\"> applied!</span></span></code></pre></figure>\n<h2>Keeping schema in sync</h2>\n<p>Since we've created a table in development, let's do the work to get our production database on fly in the same state.\nSince our production database is hosted on fly, we need to adjust the <code>DATABASE_URL</code> application expects. Let's update\nthat within our <code>fly.toml</code> configuration:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"toml\" data-theme=\"vitesse-dark\"><code data-language=\"toml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">env</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">PORT</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">80</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">DATABASE_URL</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">postgres://postgres:&#x3C;your password@&#x3C;your host>:5432/postgres?sslmode=disable</span><span style=\"color:#C98A7D99\">\"</span></span></code></pre></figure>\n<p>Again, I'm disabling SSL because I'm ~~cheap~~ not holding possession of a valid cert to secure connections between my\napp server and the database. Obviously, DO NOT do this in a production scenario - for our purposes, simply serving over\ninsecure ports will do.</p>\n<p>Now, if we deploy our application with a <code>fly deploy</code>, we should see some good logs:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> fly deploy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># A bunch of other logs...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Initializing connection pool...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Connection pool initialized, running migrations...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Migrations successfully applied</span><span style=\"color:#CB7676\">!</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Health check on port 80 is now passing.</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Shutting down virtual machine</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Sending signal SIGINT to main child process w/ PID 520</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Starting clean up.</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Shutting down virtual machine</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Sending signal SIGINT to main child process w/ PID 520</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\">Starting clean up.</span></span></code></pre></figure>\n<p>Key to note here are the simple logs we output for migrations and clean server start. We're all set to now FINALLY write\nsome application code!</p>\n<h2>Logging beers</h2>\n<p>We set out to create a simple journal application to log the fantastic beers we've had so far. Let's add a route to\ncreate journals in <code>main.rs</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Deserialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> LogBeerRequest</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> notes</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> LogBeerResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Uuid</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> create_log</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">AppState</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beer_notes_request</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LogBeerRequest</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LogBeerResponse</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">Received request to create beer log </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">:?</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        beer_notes_request</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> query_as!</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        LogBeerResponse</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        r</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        INSERT INTO beer_logs (name, notes)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        VALUES ($1, $2)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        RETURNING id</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        beer_notes_request</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        beer_notes_request</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">notes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#80A665\">fetch_one</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">state</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">pool</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // DON'T panic in production... this is not an endorsement!</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#80A665\">unwrap_or_else</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">_</span><span style=\"color:#CB7676\">|</span><span style=\"color:#80A665\"> panic!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inserting beer log </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">:?</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> failed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> beer_notes_request</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">result</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Our log handler will simply take input, dump data into the <code>beer_logs</code> table, and return the ID of the created row. Now,\nwe're <em>obviously</em> glossing over a few things here like proper error and response handling, injecting persistence\nconcerns at the API surface, etc. but we'll save those discussions for another day.</p>\n<p>We're also using sqlx's <code>Uuid</code> type, so we'll need to add it as a <code>feature</code> to our dependencies, along with the <code>uuid</code>\npackage so we can reliably serialize the UUID type for requests and responses.</p>\n<p>We're passing in some <a href=\"https://docs.rs/axum/latest/axum/#sharing-state-with-handlers\">axum <code>State</code></a> with our\ninternal <code>AppState</code>, which we'll use to wrap our database connection pool in a safe manner:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> AppState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    pool</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> PgPool</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">// And updating `main.rs`...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;(),</span><span style=\"color:#5DA994\"> Box</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">dyn</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#BD976A\">error</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">>></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Previous setup...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Create a bit of state to share the connection pool and spint up the router</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> AppState</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> pool</span><span style=\"color:#666666\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/howdy</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">howdy</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/logs</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> post</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">create_log</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_state</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Arc</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Router initialized, now listening on port </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> addr</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> SocketAddr</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from</span><span style=\"color:#666666\">(([</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">],</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Server</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">bind</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">addr</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">serve</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_make_service</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now if we rebuild and spin up our server and send a request through:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> make run-server</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">PORT</span><span style=\"color:#666666\">=</span><span style=\"color:#4C9A91\">8080</span><span style=\"color:#BD976A\"> DATABASE_URL</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D\">postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable</span><span style=\"color:#80A665\"> cargo</span><span style=\"color:#C98A7D\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">   Compiling</span><span style=\"color:#C98A7D\"> flying-with-rust-and-postgres</span><span style=\"color:#C98A7D\"> v0.1.0</span><span style=\"color:#DBD7CAEE\"> (/home/jmckenzie/projects/rust/joey-mckenzie-tech/samples/flying-with-rust-and-postgres)</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Finished</span><span style=\"color:#C98A7D\"> dev</span><span style=\"color:#DBD7CAEE\"> [unoptimized </span><span style=\"color:#C98A7D\">+</span><span style=\"color:#C98A7D\"> debuginfo]</span><span style=\"color:#C98A7D\"> target</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">s</span><span style=\"color:#666666\">)</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#4C9A91\"> 6.23</span><span style=\"color:#C98A7D\">s</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">     Running</span><span style=\"color:#666666\"> `</span><span style=\"color:#80A665\">target/debug/flying-with-rust-and-postgres</span><span style=\"color:#666666\">`</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Initializing</span><span style=\"color:#C98A7D\"> connection</span><span style=\"color:#C98A7D\"> pool...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Connection</span><span style=\"color:#C98A7D\"> pool</span><span style=\"color:#C98A7D\"> initialized,</span><span style=\"color:#C98A7D\"> running</span><span style=\"color:#C98A7D\"> migrations...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Migrations</span><span style=\"color:#C98A7D\"> successfully</span><span style=\"color:#C98A7D\"> applied!</span><span style=\"color:#C98A7D\"> Initializing</span><span style=\"color:#C98A7D\"> router...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Router</span><span style=\"color:#C98A7D\"> initialized,</span><span style=\"color:#C98A7D\"> now</span><span style=\"color:#C98A7D\"> listening</span><span style=\"color:#C98A7D\"> on</span><span style=\"color:#C98A7D\"> port</span><span style=\"color:#4C9A91\"> 8080</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># In another terminal...</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> curl --header </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Content-Type: application/json</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#DBD7CAEE\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">--request</span><span style=\"color:#C98A7D\"> POST</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">--data </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">{\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">http://localhost:8080/logs</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">\"id\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#80A665\">\"06845f6d-2647-4312-9753-a89ed61cd792\"</span><span style=\"color:#80A665\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># And back in our server logs...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Received</span><span style=\"color:#C98A7D\"> request</span><span style=\"color:#C98A7D\"> to</span><span style=\"color:#C98A7D\"> create</span><span style=\"color:#C98A7D\"> beer</span><span style=\"color:#C98A7D\"> log</span><span style=\"color:#C98A7D\"> LogBeerRequest</span><span style=\"color:#C98A7D\"> {</span><span style=\"color:#C98A7D\"> name:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Pliny the Elder</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span><span style=\"color:#C98A7D\"> notes:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Like drinking the nectar of the gods...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\"> }</span></span></code></pre></figure>\n<p>We've got a response! While we could manually verify the row was inserted with some queries, let's add an endpoint to\nretrieve rows when given an ID:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_log</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">AppState</span><span style=\"color:#666666\">>>,</span><span style=\"color:#80A665\"> Path</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Path</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Uuid</span><span style=\"color:#666666\">>)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LogBeerRequest</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Received request to retrieve beer log </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> query_as!</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        LogBeerRequest</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        r</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        SELECT id, name, notes FROM beer_logs</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        WHERE id = $1</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        id</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#80A665\">fetch_one</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">state</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">pool</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // DON'T panic in production... this is not an endorsement!</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#80A665\">unwrap_or_else</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">_</span><span style=\"color:#CB7676\">|</span><span style=\"color:#80A665\"> panic!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">retrieving beer log </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">:?</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> failed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">result</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>And now let's update <code>main.rs</code> to add a route to handle retrieving logs:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;(),</span><span style=\"color:#5DA994\"> Box</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">dyn</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#BD976A\">error</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">>></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Previous setup...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Create a bit of state to share the connection pool and spint up the router</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> AppState</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> pool</span><span style=\"color:#666666\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/howdy</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">howdy</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/logs</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> post</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">create_log</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/logs/:id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">get_log</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_state</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Arc</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now if we bounce our server and send a request through using the previously created log:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> curl -l http://localhost:8080/logs/06845f6d-2647-4312-9753-a89ed61cd792</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">\"id\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#80A665\">\"06845f6d-2647-4312-9753-a89ed61cd792\"</span><span style=\"color:#80A665\">,</span><span style=\"color:#80A665\">\"name\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#80A665\">\"Pliny the Elder\"</span><span style=\"color:#80A665\">,</span><span style=\"color:#80A665\">\"notes\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#80A665\">\"Like drinking the nectar of the gods...\"</span><span style=\"color:#80A665\">}</span></span></code></pre></figure>\n<p>We've got logs! Again, we're cutting a few corners here that we would most definitely want to handle in a more\nreal-world scenario, but for now, we've got a pretty good-looking (though bare-bones) beer-logging journal API. Let's\nget this thing deployed!</p>\n<h2>Back to fly</h2>\n<p>Our fully fleshed-out server should look something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">net</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SocketAddr</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> sync</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    extract</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#5DA994\">Path</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">},</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    routing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#DBD7CAEE\">get</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> post</span><span style=\"color:#666666\">},</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Json</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> serde</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#5DA994\">Deserialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Serialize</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> sqlx</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">postgres</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">PgPoolOptions</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> query_as</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> PgPool</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> uuid</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Uuid</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> AppState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    pool</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> PgPool</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Deserialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Serialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> LogBeerRequest</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> name</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> notes</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> LogBeerResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Uuid</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> howdy</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#666666\">'</span><span style=\"color:#5DA994\">static</span><span style=\"color:#5DA994\"> str</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#C98A7D\">Well, hello there partner!</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> create_log</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">AppState</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">beer_notes_request</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LogBeerRequest</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LogBeerResponse</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">Received request to create beer log </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">:?</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        beer_notes_request</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> query_as!</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        LogBeerResponse</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        r</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        INSERT INTO beer_logs (name, notes)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        VALUES ($1, $2)</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        RETURNING id</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        beer_notes_request</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">name</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        beer_notes_request</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">notes</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#80A665\">fetch_one</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">state</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">pool</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // DON'T panic in production... this is not an endorsement!</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#80A665\">unwrap_or_else</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">_</span><span style=\"color:#CB7676\">|</span><span style=\"color:#80A665\"> panic!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inserting beer log </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">:?</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> failed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> beer_notes_request</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">result</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_log</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">AppState</span><span style=\"color:#666666\">>>,</span><span style=\"color:#80A665\"> Path</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">id</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Path</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Uuid</span><span style=\"color:#666666\">>)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">LogBeerRequest</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Received request to retrieve beer log </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> result</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> query_as!</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        LogBeerRequest</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        r</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        SELECT name, notes FROM beer_logs</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D\">        WHERE id = $1</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        id</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#80A665\">fetch_one</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">state</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">pool</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // DON'T panic in production... this is not an endorsement!</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#80A665\">unwrap_or_else</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">_</span><span style=\"color:#CB7676\">|</span><span style=\"color:#80A665\"> panic!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">retrieving beer log </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">:?</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\"> failed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">result</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;(),</span><span style=\"color:#5DA994\"> Box</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">dyn</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#BD976A\">error</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">>></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Require a port and connection string to run, we can configure these with fly</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> connection_string</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">env</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">var</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">DATABASE_URL</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">connection pool was not found</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">env</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">var</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">PORT</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">parse</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">u16</span><span style=\"color:#666666\">>()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">port is not valid</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Initializing connection pool...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> pool</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> PgPoolOptions</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">max_connections</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">5</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">connect</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">connection_string</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Connection pool initialized, running migrations...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    sqlx</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">migrate!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">./migrations</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">run</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">pool</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#4D9375\">await</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Migrations successfully applied! Initializing router...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Create a bit of state to share the connection pool and spint up the router</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> AppState</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> pool</span><span style=\"color:#666666\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/howdy</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">howdy</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/logs</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> post</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">create_log</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/logs/:id</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">get_log</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_state</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Arc</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    println!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Router initialized, now listening on port </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Bind to whatever the hosting interface is - localhost on our dev machine, fly's domain once deployed</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> addr</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> SocketAddr</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from</span><span style=\"color:#666666\">(([</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">],</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Server</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">bind</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">addr</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">serve</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_make_service</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Since we're copying over all the files in our Dockerfile except for the <code>/target</code> output folder, our deployment process\nshould be bringing over our <code>/migrations</code> folder as well. One issue we'll run into, though, will be that our builds\nmight fail as sqlx will attempt to run compile-time checks against the target database that it won't necessarily have\nthe connectivity to at build-time. Let's add the <code>offline</code> feature to our manifest file, then run a\nquick <code>cargo sqlx prepare</code> in the terminal to cache the database metadata our <code>query_as!()</code> macros need to run those\ncompile-time checks.</p>\n<p>We should now see a <code>sqlx-data.json</code> file at the root of our project with some data about the tables, compiled queries,\nand a few other things. Again, since we're copying everything over during the container build process, we'll get this\nfile included by default. To get our docker builds successfully running, we'll need to do one of two things:</p>\n<ul>\n<li>Add the <code>SQLX_OFFLINE</code> environment variable to our <code>.env</code> file</li>\n<li>OR, tell docker to ignore <code>.env</code> files while copying over from source</li>\n</ul>\n<p>We'll go with option one, as there might be environment variables we'll want to load in eventually other than the\ndatabase URL, so we'll tell sqlx to use the cached metadata when building. Our <code>.env</code> file should look something like\nthis:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">DATABASE_URL</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D\">postgres://postgres:mySuperSecretPassword!@localhost:5432/postgres?sslmode=disable</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">SQLX_OFFLINE</span><span style=\"color:#666666\">=</span><span style=\"color:#4D9375\">true</span></span></code></pre></figure>\n<p>Now if we build our container locally with a <code>make build</code> our build should run through successfully, giving us the green\nlight to deploy to fly. Let's do that now:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> fly deploy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># After a sifting through the build logs, we should see...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">1</span><span style=\"color:#C98A7D\"> desired,</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#C98A7D\"> placed,</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#C98A7D\"> healthy,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#C98A7D\"> unhealthy</span><span style=\"color:#DBD7CAEE\"> [health </span><span style=\"color:#C98A7D\">checks:</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#C98A7D\"> total]</span><span style=\"color:#C99076\"> --</span><span style=\"color:#CB7676\">></span><span style=\"color:#C98A7D\"> v15</span><span style=\"color:#C98A7D\"> deployed</span><span style=\"color:#C98A7D\"> successfully</span></span></code></pre></figure>\n<p>Your version may vary, but we've got fly's stamp of approval that the deployment was successful. Let's verify we're up\nand running with a few <code>curl</code>s:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> curl --header </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Content-Type: application/json</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#DBD7CAEE\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">--request</span><span style=\"color:#C98A7D\"> POST</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">--data </span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">{\"name\":\"Pliny the Elder\",\"notes\":\"Like drinking the nectar of the gods...\"}</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">https://flying-with-rust-and-postgres.fly.dev/logs</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">\"id\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#80A665\">\"551a31a1-c7c0-4893-9185-7340a5bf31b3\"</span><span style=\"color:#80A665\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># Now taking our ID and querying for the log...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D\"> https://flying-with-rust-and-postgres.fly.dev/logs/551a31a1-c7c0-4893-9185-7340a5bf31b3</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">\"name\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#80A665\">\"Pliny the Elder\"</span><span style=\"color:#80A665\">,</span><span style=\"color:#80A665\">\"notes\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#80A665\">\"Like drinking the nectar of the gods...\"</span><span style=\"color:#80A665\">}</span></span></code></pre></figure>\n<p>And just like, we're up and running with fly, Rust, and Postgres!</p>\n<h2>Wrapping up</h2>\n<p>In my quest for a developer-friendly hosting platform, I've been thoroughly satisfied with what fly offers. I'm excited\nto see what I can build, and without a doubt, I'll be looking for more excuses to host whatever I can with the platform.</p>\n<p>All of the code we wrote today you can find within\nmy <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-tech/tree/main/samples/with-fly-postgres\">blog samples</a>.</p>\n<p>Until next time, friends!</p>"
    },
    "_id": "2023/learning-to-fly-with-rust-postgres.md",
    "_raw": {
      "sourceFilePath": "2023/learning-to-fly-with-rust-postgres.md",
      "sourceFileName": "learning-to-fly-with-rust-postgres.md",
      "sourceFileDir": "2023",
      "contentType": "markdown",
      "flattenedPath": "2023/learning-to-fly-with-rust-postgres"
    },
    "type": "Post",
    "url": "/blog/2023/learning-to-fly-with-rust-postgres"
  },
  {
    "title": "Migrating to Astro",
    "description": "Astro, Svelte, and Rust walk into a bar...",
    "pubDate": "2023-03-15T07:00:00.000Z",
    "category": "astro",
    "heroImage": "/images/migrating-to-astro/astro_meme.jpg",
    "draft": false,
    "keywords": [
      "astro",
      "content"
    ],
    "body": {
      "raw": "\nDuring a recent quarter (third?) life crisis, I decided to do what every developer does when they need something to work\non - I rewrote my blog from the ground up. I consider rebuilding personal blogs/portfolios a right of passage and have\nso far been able to squeeze a rewrite out about once every two years.\n\nAre the rewrites ever justified? No.\n\nWere the previous iterations functional enough for my needs? Yes.\n\nAm I eventually going to rewrite it again in a few years? Probably.\n\n## Diminishing focus on content\n\nMy previous portfolio/blog was written with [next.js](https://nextjs.org) and while it satisfied all my developer needs\nto produce content, write posts, etc. I wanted to go back to the drawing board as I find I was focusing more on\nframework detail concerns rather than what my blog was intended to be - a resource for developer content. I was quickly\nlosing sight of writing new content regularly and was seeking a return to basics.\n\n## Astro to the rescue\n\nEnter [astro](https://astro.build/), a web framework focused on content rather than framework internals. With astro, the\nfocus is on shipping the minimal amount of JS to the client for blazingly fast<sup>tm</sup> static websites. My blog is\nnothing more than static content, and astro seemed like the perfect choice with the icing on the cake being their\nrecently shipped [content collections](https://docs.astro.build/en/guides/content-collections/) allowing developers to\nwrite type-safe markdown content.\n\nWhat's even better about astro are the\nvarious [UI integrations](https://docs.astro.build/en/core-concepts/framework-components/) that users can plug and play\nfor when rich interactivity is needed. Better yet, astro allows for full control of _how_ the interactive framework\ncomponents should be shipped to the client. This leads us to the concept\nof [component islands](https://jasonformat.com/islands-architecture/), or rich interactive sections of a web page that\nare individualistic from their static peers. Astro was built on\nthe [concept of islands](https://docs.astro.build/en/concepts/islands/), allowing users to bring in interactive JS\n_without_ affecting the rest of the page.\n\nWhat this leads to, in practice, is being able to selectively choose bits of the page to be interactive (i.e. require\nJS) without holding up the rendering of the rest of the page. Astro components are isolated from one another, in this\nsense, and default to statically rendered HTML which means _wicked_ fast page loading.\n\nThis ultimately allowed me to build a primarily static site with content in markdown (this blog you're reading, for\nexample) while giving me the ability to bring in my JS framework of choice in [Svelte](https://svelte.dev/) for \"micro\"\ncomponents. I refer to the integration components as \"micro\" as they're simply a rendered subset of the entire static\nsite - we're not working within the context of a full-blown Svelte web application.\n\n## Statically dynamic\n\nInevitably, I hit a point where rich interactivity was needed to interact with the Spotify API, adding a bit of flare to\nmy site in the form of a widget to display whatever song/podcast I might be listening to at the moment (shout out\nto [Lee Robinson](https://leerob.io/), he had this on a previous version of his site). Since astro is meant for\nprimarily content-driven static websites, the SSG that astro runs pulls in all the necessary data at build time, which\nmeant the calls to the Spotify API were snapshots of whatever I had happened to be listening to at build time rather\nthan in real-time.\n\nWhile there were multiple ways to attack the problem of providing rich interactivity and real-time Spotify data, I went\nwith Svelte to build out a small widget that simply retrieved data from Spotify on page load. The only issue I had with\nthis approach was exposing my Spotify refresh token for authentication and my hashed client credentials (not a _huge_\nissue, but one could use the hash to retrieve access tokens).\n\n## Keeping things secure\n\n_In theory_, anyone could simply open a dev tools window and inspect the outbound requests to Spotify, grab my token,\nand start making requests to Spotify on my behalf - not great, as I'd eventually hit a quota/threshold in the number of\ncalls in this scenario if this were to happen. While not a _huge deal_ as the song/podcast I'm currently listening to\nisn't exactly top-secret security clearance level information, I didn't want to have to deal with swapping my client\ncredentials and rotating my refresh token regularly.\n\nThe solution?\n\nMove the Spotify API interaction behind a serverless function. This approach allowed me to hide my credentials on the\nserver without risk of exposure and simplifies the data fetching components on the frontend, as they're simply just\nretrieving the most basic information they need to display the Spotify widget without having to sift through giant JSON\nresponses to pull out the necessary data each time a page is loaded on my site.\n\n## Simply serverless\n\nSince I host using [Vercel](https://vercel.com/), the most obvious solution was to use edge functions... but where's the\nfun in that? I write JS/TS all the time, and quite frankly, I was ready for a change of pace.\n\nAnother option was\nto [enable SSR](https://docs.astro.build/en/guides/server-side-rendering/#enabling-ssr-in-your-project) with astro, but\nthen I lose the benefits of SSG. Astro's SSR also requires an adapter to the hosting platform to be installed and\nconfigured, and while not a painful task to do by any means, it would require a bit of lifting and shifting if I woke up\ntomorrow and decided to deploy to [Cloudflare Pages](https://pages.cloudflare.com/) instead of Vercel.\n\nI've been looking for an excuse to write as much [Rust](https://www.rust-lang.org/) as humanly possible in my day-to-day\ndeveloper tasks, and this was the perfect opportunity to use it.\n\nSo, I had a few options. I could write my own Rust web server and host it\non [fly.io](https://fly.io/), [DigitalOcean](https://www.digitalocean.com/), etc. but that would have required me to\nmanage the infrastructure a bit more closely than I would have cared for. There's also a Rust runtime\nfor [AWS lambda functions](https://docs.aws.amazon.com/sdk-for-rust/latest/dg/lambda.html), but again, this would\nrequire more AWS infrastructure management from me for such a simple use case.\n\n## If _can_ be written in Rust, it _will_ written Rust\n\nEnter [shuttle](https://shuttle.rs/), a relatively new platform providing users the ability to write serverless Rust\nfunctions and simply deploy on their infrastructure - little to no management on my end, fully capable of doing anything\nyou want in Rust. Perfect!\n\nAt the end of the day, I'm not exactly writing mission-critical production code - I just need data from Spotify.\n\nBut... I don't want to use JS/TS.\n\nAnd I don't want to want to fall back into SSR as I'll miss out on some nice benefits of SSG.\n\nAnd I want to write Rust.\n\nSo let's do all of that.\n\n## Many hours later\n\nFast-forward some time, and with the help of shuttle, I was able to spin up a mighty\nsmall [axum](https://docs.rs/axum/latest/axum/) server with a single route to call out to Spotify, get some data, and\nmarshal it into a simple response for the frontend end all while securely keeping my credentials and refresh token\nhidden from the outside world.\n\nWhen a page on my site loads, astro sends the necessary JS to render the Svelte Spotify widget (as you can see in the\nfooter), and once loaded the component calls out to my serverless Rust function. Neat!\n\nFor the curious, all of the serverless Rust code can be\nfound [here](https://github.com/JoeyMckenzie/joey-mckenzie-tech/tree/main/src/serverless) in the same repository that\nhosts this blog.\n\n## Wrapping up\n\nProject rewrites can be fun, allowing for the exploration of new technologies and language ecosystems as I'm sure we've\nall seen at one point or another during a company migration of existing services onto the latest shiny thing in the dev\nworld.\n\nYou can find all the source code of my most recent portfolio iteration on\nmy [GitHub](https://github.com/JoeyMckenzie/joey-mckenzie-tech) - feel free to fork your version!\n",
      "html": "<p>During a recent quarter (third?) life crisis, I decided to do what every developer does when they need something to work\non - I rewrote my blog from the ground up. I consider rebuilding personal blogs/portfolios a right of passage and have\nso far been able to squeeze a rewrite out about once every two years.</p>\n<p>Are the rewrites ever justified? No.</p>\n<p>Were the previous iterations functional enough for my needs? Yes.</p>\n<p>Am I eventually going to rewrite it again in a few years? Probably.</p>\n<h2>Diminishing focus on content</h2>\n<p>My previous portfolio/blog was written with <a href=\"https://nextjs.org\">next.js</a> and while it satisfied all my developer needs\nto produce content, write posts, etc. I wanted to go back to the drawing board as I find I was focusing more on\nframework detail concerns rather than what my blog was intended to be - a resource for developer content. I was quickly\nlosing sight of writing new content regularly and was seeking a return to basics.</p>\n<h2>Astro to the rescue</h2>\n<p>Enter <a href=\"https://astro.build/\">astro</a>, a web framework focused on content rather than framework internals. With astro, the\nfocus is on shipping the minimal amount of JS to the client for blazingly fasttm static websites. My blog is\nnothing more than static content, and astro seemed like the perfect choice with the icing on the cake being their\nrecently shipped <a href=\"https://docs.astro.build/en/guides/content-collections/\">content collections</a> allowing developers to\nwrite type-safe markdown content.</p>\n<p>What's even better about astro are the\nvarious <a href=\"https://docs.astro.build/en/core-concepts/framework-components/\">UI integrations</a> that users can plug and play\nfor when rich interactivity is needed. Better yet, astro allows for full control of <em>how</em> the interactive framework\ncomponents should be shipped to the client. This leads us to the concept\nof <a href=\"https://jasonformat.com/islands-architecture/\">component islands</a>, or rich interactive sections of a web page that\nare individualistic from their static peers. Astro was built on\nthe <a href=\"https://docs.astro.build/en/concepts/islands/\">concept of islands</a>, allowing users to bring in interactive JS\n<em>without</em> affecting the rest of the page.</p>\n<p>What this leads to, in practice, is being able to selectively choose bits of the page to be interactive (i.e. require\nJS) without holding up the rendering of the rest of the page. Astro components are isolated from one another, in this\nsense, and default to statically rendered HTML which means <em>wicked</em> fast page loading.</p>\n<p>This ultimately allowed me to build a primarily static site with content in markdown (this blog you're reading, for\nexample) while giving me the ability to bring in my JS framework of choice in <a href=\"https://svelte.dev/\">Svelte</a> for \"micro\"\ncomponents. I refer to the integration components as \"micro\" as they're simply a rendered subset of the entire static\nsite - we're not working within the context of a full-blown Svelte web application.</p>\n<h2>Statically dynamic</h2>\n<p>Inevitably, I hit a point where rich interactivity was needed to interact with the Spotify API, adding a bit of flare to\nmy site in the form of a widget to display whatever song/podcast I might be listening to at the moment (shout out\nto <a href=\"https://leerob.io/\">Lee Robinson</a>, he had this on a previous version of his site). Since astro is meant for\nprimarily content-driven static websites, the SSG that astro runs pulls in all the necessary data at build time, which\nmeant the calls to the Spotify API were snapshots of whatever I had happened to be listening to at build time rather\nthan in real-time.</p>\n<p>While there were multiple ways to attack the problem of providing rich interactivity and real-time Spotify data, I went\nwith Svelte to build out a small widget that simply retrieved data from Spotify on page load. The only issue I had with\nthis approach was exposing my Spotify refresh token for authentication and my hashed client credentials (not a <em>huge</em>\nissue, but one could use the hash to retrieve access tokens).</p>\n<h2>Keeping things secure</h2>\n<p><em>In theory</em>, anyone could simply open a dev tools window and inspect the outbound requests to Spotify, grab my token,\nand start making requests to Spotify on my behalf - not great, as I'd eventually hit a quota/threshold in the number of\ncalls in this scenario if this were to happen. While not a <em>huge deal</em> as the song/podcast I'm currently listening to\nisn't exactly top-secret security clearance level information, I didn't want to have to deal with swapping my client\ncredentials and rotating my refresh token regularly.</p>\n<p>The solution?</p>\n<p>Move the Spotify API interaction behind a serverless function. This approach allowed me to hide my credentials on the\nserver without risk of exposure and simplifies the data fetching components on the frontend, as they're simply just\nretrieving the most basic information they need to display the Spotify widget without having to sift through giant JSON\nresponses to pull out the necessary data each time a page is loaded on my site.</p>\n<h2>Simply serverless</h2>\n<p>Since I host using <a href=\"https://vercel.com/\">Vercel</a>, the most obvious solution was to use edge functions... but where's the\nfun in that? I write JS/TS all the time, and quite frankly, I was ready for a change of pace.</p>\n<p>Another option was\nto <a href=\"https://docs.astro.build/en/guides/server-side-rendering/#enabling-ssr-in-your-project\">enable SSR</a> with astro, but\nthen I lose the benefits of SSG. Astro's SSR also requires an adapter to the hosting platform to be installed and\nconfigured, and while not a painful task to do by any means, it would require a bit of lifting and shifting if I woke up\ntomorrow and decided to deploy to <a href=\"https://pages.cloudflare.com/\">Cloudflare Pages</a> instead of Vercel.</p>\n<p>I've been looking for an excuse to write as much <a href=\"https://www.rust-lang.org/\">Rust</a> as humanly possible in my day-to-day\ndeveloper tasks, and this was the perfect opportunity to use it.</p>\n<p>So, I had a few options. I could write my own Rust web server and host it\non <a href=\"https://fly.io/\">fly.io</a>, <a href=\"https://www.digitalocean.com/\">DigitalOcean</a>, etc. but that would have required me to\nmanage the infrastructure a bit more closely than I would have cared for. There's also a Rust runtime\nfor <a href=\"https://docs.aws.amazon.com/sdk-for-rust/latest/dg/lambda.html\">AWS lambda functions</a>, but again, this would\nrequire more AWS infrastructure management from me for such a simple use case.</p>\n<h2>If <em>can</em> be written in Rust, it <em>will</em> written Rust</h2>\n<p>Enter <a href=\"https://shuttle.rs/\">shuttle</a>, a relatively new platform providing users the ability to write serverless Rust\nfunctions and simply deploy on their infrastructure - little to no management on my end, fully capable of doing anything\nyou want in Rust. Perfect!</p>\n<p>At the end of the day, I'm not exactly writing mission-critical production code - I just need data from Spotify.</p>\n<p>But... I don't want to use JS/TS.</p>\n<p>And I don't want to want to fall back into SSR as I'll miss out on some nice benefits of SSG.</p>\n<p>And I want to write Rust.</p>\n<p>So let's do all of that.</p>\n<h2>Many hours later</h2>\n<p>Fast-forward some time, and with the help of shuttle, I was able to spin up a mighty\nsmall <a href=\"https://docs.rs/axum/latest/axum/\">axum</a> server with a single route to call out to Spotify, get some data, and\nmarshal it into a simple response for the frontend end all while securely keeping my credentials and refresh token\nhidden from the outside world.</p>\n<p>When a page on my site loads, astro sends the necessary JS to render the Svelte Spotify widget (as you can see in the\nfooter), and once loaded the component calls out to my serverless Rust function. Neat!</p>\n<p>For the curious, all of the serverless Rust code can be\nfound <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-tech/tree/main/src/serverless\">here</a> in the same repository that\nhosts this blog.</p>\n<h2>Wrapping up</h2>\n<p>Project rewrites can be fun, allowing for the exploration of new technologies and language ecosystems as I'm sure we've\nall seen at one point or another during a company migration of existing services onto the latest shiny thing in the dev\nworld.</p>\n<p>You can find all the source code of my most recent portfolio iteration on\nmy <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-tech\">GitHub</a> - feel free to fork your version!</p>"
    },
    "_id": "2023/migrating-to-astro.md",
    "_raw": {
      "sourceFilePath": "2023/migrating-to-astro.md",
      "sourceFileName": "migrating-to-astro.md",
      "sourceFileDir": "2023",
      "contentType": "markdown",
      "flattenedPath": "2023/migrating-to-astro"
    },
    "type": "Post",
    "url": "/blog/2023/migrating-to-astro"
  },
  {
    "title": "Rust, AWS Lambda, and too many Office quotes",
    "description": "Identity theft is not a joke, Jim!",
    "pubDate": "2023-11-02T07:00:00.000Z",
    "category": "aws",
    "heroImage": "/images/rust-aws-lambda-office-quotes/meme.jpeg",
    "draft": false,
    "keywords": [
      "rust",
      "aws lambda",
      "terraform"
    ],
    "body": {
      "raw": "\nBack from a hard fought battle against writer's block, I've been looking for a way to convince my boss to let me use\nRust at work.\nMost of our infrastructure is on AWS (_surprised pikachu face_) and I've been writing a lot of new system features\ndesigned\nto run serverlessly with things like Lambda, Step Functions, SQS, SNS, and all the other band members we know and love.\nWe're a .NET shop, so moving to Rust wouldn't exactly be an overnight transition, nor would I want to force my zealotry\nupon my fellow developers.\n\nMy days are mostly spent raising a newly added member to my family, and I needed a reason to stay up late staring at my\nlaptop\nwhile watching The Office reruns. Then it dawned on me... what if I could combine my two favorite things in Rust and The\nOffice?\nIt might sound crazy, but we're all about technological experimentation around these parts.\n\nThe outcome of that experiment was a Lambda deployed to AWS fronted by an API Gateway available to make requests to and\nget\nrandom quotes from The Office out. A request might look like:\n\n```shell\n$ curl -l \"https://{{gateway URL}}/quotes\" | jq .\n{\n    \"author\": \"Prison Mike\",\n    \"quote\": \"The worst thing about prison was the Dementors.\"\n}\n```\n\nWith the help [cargo lambda](https://www.cargo-lambda.info/guide/getting-started.html), I was surprised at how easy it\nwas to get up and running with Lambdas that were even more easily deployed to AWS. As an added bonus, I sprinkled in\nsome [Terraform](https://www.terraform.io/) because I'm lazy and don't know which buttons to click in AWS most of the\ntime. If you're following along, it'll help to have the following installed:\n\n-   Cargo and cargo lambda installed (a quick `cargo install cargo-lambda` should do the trick)\n-   Terraform CLI\n-   An AWS account (I'm still on the free tier, for now...)\n\nWe'll touch the surface of a few things here, but won't be going into depth necessarily on any one topic. There's people\na lot smarter than myself that are ackshually qualified to talk about Rust, AWS, and Terraform.\n\n## Getting started\n\nFirst thing's first, we're gonna need some Rust code to deploy. Let's spin up a new project with cargo lambda:\n\n```shell\n$ cargo lambda new office-quotes\n> Is this function an HTTP function? Yes\n```\n\nWe're prompted about the compute context of our Rust-based Lambda, which in our case, will be from an API Gateway\nrequest. Lambdas are compute services that can be triggered from any number of things in AWS like events from SNS. I\nplan to eventually display some random Office quotes for anyone visiting my website, so I'll make it available over the\nnetwork for my website to utilize.\n\nCracking open our `main.rs` file, we'll see a pretty bare bones scaffolded Rust application:\n\n```rust\nuse lambda_http::{run, service_fn, Body, Error, Request, RequestExt, Response};\n\n/// This is the main body for the function.\n/// Write your code inside it.\n/// There are some code example in the following URLs:\n/// - https://github.com/awslabs/aws-lambda-rust-runtime/tree/main/examples\nasync fn function_handler(event: Request) -> Result<Response<Body>, Error> {\n    // Extract some useful information from the request\n    let who = event\n        .query_string_parameters_ref()\n        .and_then(|params| params.first(\"name\"))\n        .unwrap_or(\"world\");\n    let message = format!(\"Hello {who}, this is an AWS Lambda HTTP request\");\n\n    // Return something that implements IntoResponse.\n    // It will be serialized to the right response event automatically by the runtime\n    let resp = Response::builder()\n        .status(200)\n        .header(\"content-type\", \"text/html\")\n        .body(message.into())\n        .map_err(Box::new)?;\n    Ok(resp)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n```\n\nThe `event` our function receives is an HTTP request from the API gateway that has a bunch of metadata\nabout the request, like query strings, path parameters, where the request came from, body of the request, etc. Luckily,\nI ain't got time for all that noise - I want to simply return some quotes through a `GET` with an optional query\nparameter `author` to get character specific quotes.\n\nNext up, we're gonna need some quote data. Through the power of ChatGPT, I was able to generate a `quotes.json` file\nthat'll serve as our data source for quotes. When we eventually (inevitably?) choose to exercise our ability to\nprematurely optimize our solution, we'll add in connectors to a plethora of different data sources on the off chance we\nneed to support multiple databases, caches, flat files, etc.\n\nOur quotes file is pretty standard JSON:\n\n#### quotes.json\n\n```json\n{\n    \"quotes\": [\n        {\n            \"quote\": \"Would I rather be feared or loved? Easy. Both. I want people to be afraid of how much they love me.\",\n            \"author\": \"Michael Scott\"\n        },\n        {\n            \"quote\": \"Whenever I'm about to do something, I think, 'Would an idiot do that?' and if they would, I do not do that thing.\",\n            \"author\": \"Dwight Schrute\"\n        }\n        // And many more...\n    ]\n}\n```\n\nPlacing that at the root of our project directly next to `Cargo.toml` should do the trick so we can read it in, parse it\ninto a `struct` of sorts, and spit out some data on the other side when a request comes in. I'm gonna add a few crates\nto help me out:\n\n```\n$ cargo add anyhow # To make error handling a little easier\n$ cargo add rand # To help us pick random quotes if no author is provided via query param\n$ cargo add serde --features macros # To help us read in JSON quotes to Rust structs\n$ cargo add serde_json # To help us write data out in the response the AWS Rust runtime expects\n```\n\nWith our crates in place, next let's add a file for parsing quote data from the quotes file:\n\n#### src/quotes.rs\n\n```rust\nuse std::{env::current_dir, fs::File, io::Read};\n\nuse anyhow::Context;\nuse rand::Rng;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Debug, Clone, Deserialize, Serialize)]\npub struct Quote {\n    pub author: String,\n    quote: String,\n}\n\n#[derive(Debug, Deserialize)]\npub struct QuotesData {\n    quotes: Vec<Quote>,\n}\n\nimpl QuotesData {\n    pub fn get_random_quote(&self) -> Quote {\n        let random_index = rand::thread_rng().gen_range(0..self.quotes.len());\n        self.quotes[random_index].clone()\n    }\n\n    pub fn get_quote_by(&self, author: &str) -> Option<Quote> {\n        self.quotes\n            .clone()\n            .into_iter()\n            .find(|q| q.author.to_lowercase().contains(&author.to_lowercase()))\n    }\n}\n\npub fn get_quotes() -> anyhow::Result<QuotesData> {\n    let quotes_file_path = current_dir().context(\"unable to determine current directory\")?;\n\n    let mut file = File::open(format!(\n        \"{}/quotes.json\",\n        quotes_file_path.to_str().unwrap()\n    ))\n    .context(\"unable to read quotes file\")?;\n\n    let mut file_contents = String::new();\n\n    file.read_to_string(&mut file_contents)\n        .context(\"unable to read the file contents into buffer\")?;\n\n    serde_json::from_str::<QuotesData>(&file_contents).context(\"unable to parse quotes\")\n}\n```\n\nNothing too fancy here. We're defining a few `struct`s to hold our quote data in `Quote` and `QuoteData`, while `impl`'\ning some functions on `QuoteData` to get us a quote when asked for one either from a specific author, or a random quote.\n\nFinally, we export a function for parsing the quotes file into our `QuotesData` stuct so we can do some logic with it\nlater. I should note that this isn't exactly the most exciting data, nor the most practical. You're probably already\nasking yourself \"wait... so we're parsing JSON data into Rust structs only to... return JSON data in the response?\" Yes,\nthat's _exactly_ what we're doing. Don't ask me why.\n\nOkay, so we have the ability to read the quotes file, now let's update our entrypoint into the function that will\ndetermine the context of the request and grab a quote:\n\n```rust\nmod quotes;\n\nuse anyhow::Context;\nuse lambda_http::{run, service_fn, Body, Error, Request, RequestExt, Response};\nuse quotes::get_quotes;\nuse serde_json::json;\nuse tracing::info;\n\n/// This is the main body for the function.\n/// Write your code inside it.\n/// There are some code example in the following URLs:\n/// - https://github.com/awslabs/aws-lambda-rust-runtime/tree/main/examples\nasync fn function_handler(event: Request) -> Result<Response<Body>, Error> {\n    info!(\"received request to get office quotes, loading quote data\");\n\n    // Load the quotes from our JSON file\n    let quotes = get_quotes()?;\n\n    // Grab a quote if an author name was sent along in the query params\n    // If no author is sent, we'll grab a random quote from the JSON\n    let quote = match event\n        .query_string_parameters_ref()\n        .and_then(|params| params.first(\"author\"))\n    {\n        Some(author) => {\n            info!(\"requested to retrieve quotes by author {author}\");\n            quotes.get_quote_by(author)\n        }\n        None => {\n            info!(\"no author specified, retrieving a random quote\");\n            Some(quotes.get_random_quote())\n        }\n    };\n\n    // Fineally, determine the response based on the authored quote we generated\n    // If we successfully generated a quote, wrap it up in a nice JSON response\n    // In the case an author was passed in via query param but no quote was found,\n    // return an error response in JSON format with the help of serde_json's `json!()` macro\n    match quote {\n        Some(authored_quote) => {\n            info!(\"quote retrieved by author {}\", &authored_quote.author);\n\n            let resp = Response::builder()\n                .status(200)\n                .header(\"content-type\", \"application/json\")\n                .body(\n                    serde_json::to_string(&authored_quote)\n                        .context(\"unable to serialize the hilarious quote\")?\n                        .into(),\n                )\n                .context(\"error attempting to build response body\")?;\n\n            Ok(resp)\n        }\n        None => {\n            let resp = Response::builder()\n                .status(404)\n                .header(\"content-type\", \"application/json\")\n                .body(\n                    json!({\n                        \"error\": \"Quote by that author does not exist.\"\n                    })\n                    .to_string()\n                    .into(),\n                )\n                .context(\"error attempting build the error response\")?;\n\n            Ok(resp)\n        }\n    }\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    info!(\"bootstrapping lambda\");\n\n    run(service_fn(function_handler)).await\n}\n```\n\nAgain, nothing too fancy here. At the top level, we're inspecting the request for query parameters and if one was sent,\nfind a quote by that author from the JSON we parsed. If no author sent, generate a random quote. Finally, we'll return\nJSON the API gateway based on the result of the request, falling back\nto an error if an author was provided but no quote was found. I've sprinkled in some `.context()?` utilities to help us\nearly return from unexpected errors with the help of `anyhow`. In a more robust application, we'd probably want to do\nsome more fine-grained error handling. Cargo lambda conveniently bundles the `tracing` crate into our functions, so\nwe're\nable to spit out some logs as well that will feed into a CloudWatch log group.\n\nNow that we've got our function in place, let's test it out. `cargo lambda` has some sweet utilities to help us out,\nincluding a `watch` command:\n\n```shell\n$ cargo lambda watch\nINFO invoke server listening on [::]:9000\nINFO starting lambda function function=\"_\" manifest=\"Cargo.toml\"\nCompiling office-quotes v0.1.0 (/home/jmckenzie/typescript/joey-mckenzie-tech/examples/rust/with-aws-lambda)\nFinished dev [unoptimized + debuginfo] target(s) in 1.40s\n    Running `target/debug/office-quotes`\nINFO bootstrapping lambda\n```\n\nAnd if we ping `localhost:9000`:\n\n```shell\n$ curl -l \"localhost:9000\" | jq .\n{\n  \"author\": \"Michael Scott\",\n  \"quote\": \"Would I rather be feared or loved? Easy. Both. I want people to be afraid of how much they love me.\"\n}\n```\n\nLet's verify the query parameters are making it into the request as well:\n\n```shell\n$ curl -l \"localhost:9000?author=kelly\" | jq .\n{\n  \"author\": \"Kelly Kapoor\",\n  \"quote\": \"I talk a lot, so I've learned to just tune myself out...\"\n}\n```\n\nLastly, let's check the error case where no author is found\n\n```shell\n$ curl -l \"localhost:9000?author=ron\" | jq .\n{\n  \"error\": \"Quote by that author does not exist.\"\n}\n```\n\nNice! We've got ourselves an MVP, time to ship to production.\n\n## Deploying to AWS\n\nWith our deployment approach, we'll do something akin to the following:\n\n-   Build the output artifact with the help of `cargo lambda`\n-   Package up the output into a zip file to store in S3\n-   Upload the zip file into a bucket\n-   Setup an Lambda function using the zip file as the source executable\n-   Setup an API Gateway instance that proxies requests through to our Lambda function\n\nNow doing all that stuff manually is not _too_ tedious, but I've been writing a lot Terraform lately and thought it\nwould fun to Terraform-erize this process. If you're not familiar with Terraform, it's\na [Hashicorp](https://www.hashicorp.com/) product with the goal of making provisioned infrastructure easier to main\nthrough infrastructure as code, or IaC. Terraform uses a configuration language called Hashicorp Configuration\nLanguage, or HCL, to define the who/what/when/where/why/how of our AWS infrastructure.\n\nI like to think of Terraform as a recipe for what our AWS infrastructure should look like, while also having the ability\nto plan and\napply those infrastructure changes for us, saving us an uncountable amount of mouse clicks navigating through the AWS\nconsole.\n\nAn example piece of TF configuration might look like:\n\n```terraform\nresource \"aws_lambda_function\" \"office_quotes\" {\n  function_name = \"office-quotes\"\n\n  s3_bucket = aws_s3_bucket.lambda_bucket.id\n  s3_key    = aws_s3_object.lambda_office_quotes.key\n\n  handler = \"rust.handler\"\n  runtime = \"provided.al2\"\n\n  source_code_hash = data.archive_file.lambda_office_quotes.output_base64sha256\n\n  role = aws_iam_role.lambda_execution_policy.arn\n}\n```\n\nHere, we're defining a resource that happens to be a Lambda function called `office_quotes`. That Lambda has a function\nname of `office-quotes`, has its source files located in an S3 bucket (which we'll provision in just a minute), and runs\non an EC2 instance with the `provided.al2` runtime. There's some other stuff in there like the role, which defines the\nexecution policy invokers of the function should have, and an MD5 hash of the zip file output. I mentioned earlier that\nthis isn't necessarily a blog post about Terraform, so I'll leave\na [link](https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/main/examples/rust/with-aws-lambda) to the example code\nhere.\n\nFollowing the plan above, first thing we need is an S3 bucket we can store our zipped up function code in. I'll create\na `bucket.tf` configuration file that will do just that:\n\n#### bucket.tf\n\n```terraform\nresource \"random_pet\" \"lambda_bucket_name\" {\n  prefix = \"rust-lambda\"\n}\n\nresource \"aws_s3_bucket\" \"lambda_bucket\" {\n  bucket = random_pet.lambda_bucket_name.id\n}\n\nresource \"aws_s3_bucket_ownership_controls\" \"lambda_bucket\" {\n  bucket = aws_s3_bucket.lambda_bucket.id\n  rule {\n    object_ownership = \"BucketOwnerPreferred\"\n  }\n}\n\nresource \"aws_s3_bucket_acl\" \"lambda_bucket\" {\n  depends_on = [aws_s3_bucket_ownership_controls.lambda_bucket]\n\n  bucket = aws_s3_bucket.lambda_bucket.id\n  acl    = \"private\"\n}\n\ndata \"archive_file\" \"lambda_office_quotes\" {\n  type = \"zip\"\n\n  source_dir  = \"${path.module}/../target/lambda/office-quotes\"\n  output_path = \"${path.module}/bootstrap.zip\"\n}\n\nresource \"aws_s3_object\" \"lambda_office_quotes\" {\n  bucket = aws_s3_bucket.lambda_bucket.id\n\n  key    = \"bootstrap.zip\"\n  source = data.archive_file.lambda_office_quotes.output_path\n\n  etag = filemd5(data.archive_file.lambda_office_quotes.output_path)\n}\n```\n\nThe first few `resource`s defined above describe the bucket name with the help of a couple randomly generated names and\npermissions on the bucket. The last few pieces of configuration define some `data` we're going to work with that happens\nto be an archive file and an object that will exist in that bucket that's just the zip file of our function code.\n\nYou may have noticed that the `source_dir` of our `archive_file` data that we'll need doesn't actually exist yet - let's\nbuild it! Within our parent directory (I usually stick all my Terraform specific stuff in a subdirectory of the project\nI'm working in) let's run a quick `cargo lambda build --release` to build the output we need.\n\nOnce the build finishes, you should notice an exectuable file named `bootstrap` should be present in\nyour `target/lambda/office-quotes` folder. `cargo lambda` offers different build configurations as well, allowing output\nformats to also be specified - we could also run the build with the `--output-format zip` flag to get a ready-to-upload\nfile with `bootstrap.zip`. Since we're leaning on Terraform to do the file zipping for us though, we'll take the default\ngenerated executable instead.\n\nWith our bucket configuration in place, let's define our Lambda function configuration:\n\n#### lambda.tf\n\n```terraform\nresource \"aws_lambda_function\" \"office_quotes\" {\n  function_name = \"office-quotes\"\n\n  s3_bucket = aws_s3_bucket.lambda_bucket.id\n  s3_key    = aws_s3_object.lambda_office_quotes.key\n\n  handler = \"rust.handler\"\n  runtime = \"provided.al2\"\n\n  source_code_hash = data.archive_file.lambda_office_quotes.output_base64sha256\n\n  role = aws_iam_role.lambda_execution_policy.arn\n}\n\nresource \"aws_cloudwatch_log_group\" \"office_quotes\" {\n  name = \"/aws/lambda/${aws_lambda_function.office_quotes.function_name}\"\n\n  retention_in_days = 1\n}\n\nresource \"aws_iam_role\" \"lambda_execution_policy\" {\n  name               = \"office-lambda-execution-role\"\n  assume_role_policy = jsonencode({\n    Version   = \"2012-10-17\"\n    Statement = [\n      {\n        Action    = \"sts:AssumeRole\"\n        Effect    = \"Allow\"\n        Sid       = \"\"\n        Principal = {\n          Service = \"lambda.amazonaws.com\"\n        }\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"lambda_policy_attachment\" {\n  role = aws_iam_role.lambda_execution_policy.name\n\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n}\n```\n\nAs we saw earlier, we'll use the same bit of function configuration and add a few things like CloudWatch logs and an\nexecution policy we'll expect services invoking the function to have.\n\nLet's hookup the final piece of infrastructure we'll need for now in an API Gateway resource:\n\n#### gateway.tf\n\n```terraform\nresource \"aws_apigatewayv2_api\" \"office_gateway\" {\n  name = \"office-gateway\"\n\n  protocol_type = \"HTTP\"\n}\n\nresource \"aws_apigatewayv2_stage\" \"office_gateway\" {\n  api_id = aws_apigatewayv2_api.office_gateway.id\n\n  name        = \"prod\"\n  auto_deploy = true\n\n  access_log_settings {\n    destination_arn = aws_cloudwatch_log_group.office_gateway.arn\n\n    format = jsonencode({\n      requestId               = \"$context.requestId\"\n      sourceIp                = \"$context.identity.sourceIp\"\n      requestTime             = \"$context.requestTime\"\n      protocol                = \"$context.protocol\"\n      httpMethod              = \"$context.httpMethod\"\n      resourcePath            = \"$context.resourcePath\"\n      routeKey                = \"$context.routeKey\"\n      status                  = \"$context.status\"\n      responseLength          = \"$context.responseLength\"\n      integrationErrorMessage = \"$context.integrationErrorMessage\"\n    }\n    )\n  }\n}\n\nresource \"aws_apigatewayv2_integration\" \"get_quote\" {\n  api_id = aws_apigatewayv2_api.office_gateway.id\n\n  integration_uri    = aws_lambda_function.office_quotes.invoke_arn\n  integration_type   = \"AWS_PROXY\"\n  integration_method = \"POST\"\n}\n\nresource \"aws_apigatewayv2_route\" \"get_quote\" {\n  api_id = aws_apigatewayv2_api.office_gateway.id\n\n  route_key = \"GET /quotes\"\n  target    = \"integrations/${aws_apigatewayv2_integration.get_quote.id}\"\n}\n\nresource \"aws_cloudwatch_log_group\" \"office_gateway\" {\n  name = \"/aws/api-gateway/${aws_apigatewayv2_api.office_gateway.name}\"\n\n  retention_in_days = 1\n}\n\nresource \"aws_lambda_permission\" \"office_gateway\" {\n  statement_id = \"AllowExecutionFromAPIGateway\"\n  action       = \"lambda:InvokeFunction\"\n\n  function_name = aws_lambda_function.office_quotes.function_name\n  principal     = \"apigateway.amazonaws.com\"\n\n  source_arn = \"${aws_apigatewayv2_api.office_gateway.execution_arn}/*/*\"\n}\n```\n\nOur API Gateway configuration is defined as a good ole fashioned HTTP API that has a route integration under\nthe `/quotes` path that will invoke our Lambda function. With the help of Terraform, we can reference bits of\ninfrastructure\ncreated in other files without needing to hard code or manually point to things.\n\nWhen we apply all of our Terraform infrastructure, we'll need a way to reference our created API Gateway without having\nto step into the AWS Console and click our way through to the API Gateway dashboard. Let's add an `outputs.tf` file\nthat tell Terraform that once all of our infrastructure is created, output it to the console for us. The created\nresources are also saved in our `terraform.tfstate` file as well, so we can also reference them there if need be.\n\n```terraform\noutput \"base_url\" {\n  description = \"Base URL for API Gateway stage.\"\n\n  value = aws_apigatewayv2_stage.office_gateway.invoke_url\n}\n\noutput \"lambda_bucket_name\" {\n  description = \"Name of the S3 bucket used to store function code.\"\n\n  value = aws_s3_bucket.lambda_bucket.id\n}\n```\n\nWhile we're at it, we'll go ahead and print out our bucket name as well as everytime we'll destroy/apply infrastructure,\nit'll change due to the random module we're leveraging to avoid clashing buckets. Now if we apply this plan, we should\nsee the fruits of our labor:\n\n```shell\n$ terraform apply -auto-approve\n\n# A bunch of logs about planned infrastructure...\n\nApply complete! Resources: 15 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nbase_url = \"https://dbyhxt543e.execute-api.us-west-1.amazonaws.com/prod\"\nlambda_bucket_name = \"rust-lambda-choice-cricket\"\n```\n\nAnd if I ping my URL (yours will be different) at the `/quotes` route:\n\n```shell\n$ curl -l \"https://dbyhxt543e.execute-api.us-west-1.amazonaws.com/prod/quotes\" | jq .\n{\n  \"author\": \"Dwight Schrute\",\n  \"quote\": \"Identity theft is not a joke, Jim! Millions of families suffer every year.\"\n}\n```\n\nSuccess! Rust, running on Lambda, publicly available through an API Gateway. This is great and all, but we need a way\nto reliably rebuild our infrastructure and apply changes. I'm going to define a `justfile`\nusing [just](https://github.com/casey/just)\nat the root of our project directory as I'm not smart enough to use `make`.\n\n#### justfile\n\n```shell\nalias b := build\n\ndefault: dev\n\n# build main\nbuild:\n    cargo lambda build --release && cp ./quotes.json ./target/lambda/office-quotes\n\n# build main\nbuild-deploy: build\n    just terraform/reapply\n\n# run the dev server\ndev:\n    cargo watch -x run\n\n# lint rust files\nclippy:\n    cargo clippy\n\n# check rust files format\ncheck:\n    cargo fmt -v --check\n\n# format rust files\nformat:\n    cargo fmt -v\n\n# run code quality tools\nci: check clippy\n```\n\n`just` is _just_ a convenient command runner, useful for aggregating things you'll run constantly in the terminal into a\nsingle source command. Instead of having to swap between `terraform` and `cargo` commands, `just` will allow me define a\nfew\ncommon commands to run so I can use things like `just build` or `just deploy` instead. I'm also going to define\nanother `justfile`\nwithin our `terraform` directory that will house all of the `terraform` commands we'll need to run:\n\n#### terraform/justfile\n\n```shell\ndefault: plan\n\n# run the plan\nplan:\n    terraform plan\n\n# apply the plan\napply:\n    terraform apply -auto-approve && sed -i '' \"s|^QUOTES_BASE_URL=.*|QUOTES_BASE_URL=$(terraform output -raw base_url)|\" ../../../../.env\n\n# destroy the plan\ndestroy:\n    terraform destroy -auto-approve\n\n# re-apply the plan\nreapply: destroy apply\n\n# format files\nfmt:\n    terraform fmt\n```\n\nOne could argue it's may not be the most fruitful idea to `-auto-approve` TF commands as it's essentially a force\ncommand,\nand we'd be better served running these things in CI through something like Terraform Cloud. I'm a one band on the AWS\nfree tier,\nthough, so I'll cut a few corners.\n\nBack in our root project directory, I can now run things like `just terraform/destory` or `just terraform/apply` without\nneeding\nto swap directories to run the different commands from the different `justfile`s. Let's verify our infrastructure is\nre-creatable,\nas that's where the true power of Terraform shines (in my opinion). Reliably re-creatable infrastructure empowers us to\nmove\nfast, especially when building in a multi-stage development environment.\n\n```shell\n$ just build-deploy\ncargo lambda build --release && cp ./quotes.json ./target/lambda/office-quotes\n    Finished release [optimized] target(s) in 0.12s\njust terraform/reapply\nterraform destroy -auto-approve\n// ...and a bunch of other TF output\n```\n\nWith our single `build-deploy` command, we'll:\n\n-   Compile our Rust code\n-   Build the expected output we need to zip and deploy to S3\n-   Copy over our JSON file for our Rust code to read from\n-   Destroy/recreate all of the required AWS infrastructure\n-   Deploy our zip file to the S3 bucket for our Lambda to use\n\nAgain, we'll see more output for the `base_url` and `lambda_bucket_name`, though with different IDs and names this time.\nI won't necessarily verify everything in AWS console, but we now have:\n\n-   A Lambda function that runs our zipped up Rust code from an S3 bucket\n-   An API Gateway instance that forwards requests to that Lambda\n-   CloudWatch log groups for both our API Gateway instance and our Lambda function\n\nAs a sanity check, let's make sure all the pipes are still hooked up by sending through another request to our gateway:\n\n```shell\n$ curl -l \"https://jcojq5szvk.execute-api.us-west-1.amazonaws.com/prod?author=michael\" | jq .\n{\n    \"author\": \"Michael Scott\",\n    \"quote\": \"I'm not superstitious...but I'm a little stitious.\"\n}\n```\n\nEz-pz, as the kids say! And with that, we've got Rust running on Lambda in AWS. The future of serverless Rust is looking\nbright! You can find all the source code for this example on my website examples\nin [GitHub](https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/main/examples/rust/with-aws-lambda).\n\nUntil next time, friends!\n",
      "html": "<p>Back from a hard fought battle against writer's block, I've been looking for a way to convince my boss to let me use\nRust at work.\nMost of our infrastructure is on AWS (<em>surprised pikachu face</em>) and I've been writing a lot of new system features\ndesigned\nto run serverlessly with things like Lambda, Step Functions, SQS, SNS, and all the other band members we know and love.\nWe're a .NET shop, so moving to Rust wouldn't exactly be an overnight transition, nor would I want to force my zealotry\nupon my fellow developers.</p>\n<p>My days are mostly spent raising a newly added member to my family, and I needed a reason to stay up late staring at my\nlaptop\nwhile watching The Office reruns. Then it dawned on me... what if I could combine my two favorite things in Rust and The\nOffice?\nIt might sound crazy, but we're all about technological experimentation around these parts.</p>\n<p>The outcome of that experiment was a Lambda deployed to AWS fronted by an API Gateway available to make requests to and\nget\nrandom quotes from The Office out. A request might look like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">https://{{gateway URL}}/quotes</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> jq</span><span style=\"color:#C98A7D\"> .</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \"author\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Prison Mike</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \"quote\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">The worst thing about prison was the Dementors.</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>With the help <a href=\"https://www.cargo-lambda.info/guide/getting-started.html\">cargo lambda</a>, I was surprised at how easy it\nwas to get up and running with Lambdas that were even more easily deployed to AWS. As an added bonus, I sprinkled in\nsome <a href=\"https://www.terraform.io/\">Terraform</a> because I'm lazy and don't know which buttons to click in AWS most of the\ntime. If you're following along, it'll help to have the following installed:</p>\n<ul>\n<li>Cargo and cargo lambda installed (a quick <code>cargo install cargo-lambda</code> should do the trick)</li>\n<li>Terraform CLI</li>\n<li>An AWS account (I'm still on the free tier, for now...)</li>\n</ul>\n<p>We'll touch the surface of a few things here, but won't be going into depth necessarily on any one topic. There's people\na lot smarter than myself that are ackshually qualified to talk about Rust, AWS, and Terraform.</p>\n<h2>Getting started</h2>\n<p>First thing's first, we're gonna need some Rust code to deploy. Let's spin up a new project with cargo lambda:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> lambda</span><span style=\"color:#C98A7D\"> new</span><span style=\"color:#C98A7D\"> office-quotes</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">></span><span style=\"color:#DBD7CAEE\"> Is this </span><span style=\"color:#CB7676\">function</span><span style=\"color:#80A665\"> an</span><span style=\"color:#DBD7CAEE\"> HTTP function? Yes</span></span></code></pre></figure>\n<p>We're prompted about the compute context of our Rust-based Lambda, which in our case, will be from an API Gateway\nrequest. Lambdas are compute services that can be triggered from any number of things in AWS like events from SNS. I\nplan to eventually display some random Office quotes for anyone visiting my website, so I'll make it available over the\nnetwork for my website to utilize.</p>\n<p>Cracking open our <code>main.rs</code> file, we'll see a pretty bare bones scaffolded Rust application:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> lambda_http</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#DBD7CAEE\">run</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> service_fn</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Body</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Error</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> RequestExt</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// This is the main body for the function.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// Write your code inside it.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// There are some code example in the following URLs:</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// - https://github.com/awslabs/aws-lambda-rust-runtime/tree/main/examples</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> function_handler</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">event</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Request</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Response</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Body</span><span style=\"color:#666666\">>,</span><span style=\"color:#5DA994\"> Error</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Extract some useful information from the request</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> who</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> event</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">query_string_parameters_ref</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">and_then</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">params</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\"> params</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">first</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">name</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">unwrap_or</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">world</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> message</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Hello </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">who</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D\">, this is an AWS Lambda HTTP request</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Return something that implements IntoResponse.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // It will be serialized to the right response event automatically by the runtime</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> resp</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">builder</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">status</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">200</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">header</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">content-type</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">text/html</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">body</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">message</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">map_err</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Box</span><span style=\"color:#CB7676\">::</span><span style=\"color:#BD976A\">new</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">resp</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;(),</span><span style=\"color:#5DA994\"> Error</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_max_level</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">Level</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">INFO</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // disable printing the name of the module in every log line.</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_target</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // disabling time is handy because CloudWatch will add the ingestion time.</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">without_time</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">init</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    run</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">service_fn</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">function_handler</span><span style=\"color:#666666\">))</span><span style=\"color:#CB7676\">.</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>The <code>event</code> our function receives is an HTTP request from the API gateway that has a bunch of metadata\nabout the request, like query strings, path parameters, where the request came from, body of the request, etc. Luckily,\nI ain't got time for all that noise - I want to simply return some quotes through a <code>GET</code> with an optional query\nparameter <code>author</code> to get character specific quotes.</p>\n<p>Next up, we're gonna need some quote data. Through the power of ChatGPT, I was able to generate a <code>quotes.json</code> file\nthat'll serve as our data source for quotes. When we eventually (inevitably?) choose to exercise our ability to\nprematurely optimize our solution, we'll add in connectors to a plethora of different data sources on the off chance we\nneed to support multiple databases, caches, flat files, etc.</p>\n<p>Our quotes file is pretty standard JSON:</p>\n<h4>quotes.json</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">quotes</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#B8A965\">quote</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Would I rather be feared or loved? Easy. Both. I want people to be afraid of how much they love me.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#B8A965\">author</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Michael Scott</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#B8A965\">quote</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Whenever I'm about to do something, I think, 'Would an idiot do that?' and if they would, I do not do that thing.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#B8A965\">author</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Dwight Schrute</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // And many more...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Placing that at the root of our project directly next to <code>Cargo.toml</code> should do the trick so we can read it in, parse it\ninto a <code>struct</code> of sorts, and spit out some data on the other side when a request comes in. I'm gonna add a few crates\nto help me out:</p>\n<pre><code>$ cargo add anyhow # To make error handling a little easier\n$ cargo add rand # To help us pick random quotes if no author is provided via query param\n$ cargo add serde --features macros # To help us read in JSON quotes to Rust structs\n$ cargo add serde_json # To help us write data out in the response the AWS Rust runtime expects\n</code></pre>\n<p>With our crates in place, next let's add a file for parsing quote data from the quotes file:</p>\n<h4>src/quotes.rs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">env</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">current_dir</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> fs</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">File</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> io</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Read</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Context</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> rand</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Rng</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> serde</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#5DA994\">Deserialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Serialize</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Debug</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Clone</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Deserialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Serialize</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> struct</span><span style=\"color:#5DA994\"> Quote</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> author</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    quote</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Debug</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Deserialize</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> struct</span><span style=\"color:#5DA994\"> QuotesData</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    quotes</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Vec</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Quote</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#5DA994\"> QuotesData</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_random_quote</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Quote</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        let</span><span style=\"color:#BD976A\"> random_index</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> rand</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">thread_rng</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">gen_range</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#CB7676\">..</span><span style=\"color:#C99076\">self</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">quotes</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">len</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        self</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">quotes</span><span style=\"color:#666666\">[</span><span style=\"color:#BD976A\">random_index</span><span style=\"color:#666666\">]</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">clone</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_quote_by</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> author</span><span style=\"color:#CB7676\">:</span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#5DA994\">str</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Option</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Quote</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        self</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">quotes</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            .</span><span style=\"color:#80A665\">clone</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            .</span><span style=\"color:#80A665\">into_iter</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            .</span><span style=\"color:#80A665\">find</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">q</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\"> q</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">author</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_lowercase</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">contains</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">author</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_lowercase</span><span style=\"color:#666666\">()))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_quotes</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">QuotesData</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> quotes_file_path</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> current_dir</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">context</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">unable to determine current directory</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#CB7676\"> mut</span><span style=\"color:#BD976A\"> file</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> File</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">open</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">format!</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D\">/quotes.json</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        quotes_file_path</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_str</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    .</span><span style=\"color:#80A665\">context</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">unable to read quotes file</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#CB7676\"> mut</span><span style=\"color:#BD976A\"> file_contents</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    file</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">read_to_string</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;mut</span><span style=\"color:#BD976A\"> file_contents</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">context</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">unable to read the file contents into buffer</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    serde_json</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from_str</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">QuotesData</span><span style=\"color:#666666\">>(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">file_contents</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">context</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">unable to parse quotes</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nothing too fancy here. We're defining a few <code>struct</code>s to hold our quote data in <code>Quote</code> and <code>QuoteData</code>, while <code>impl</code>'\ning some functions on <code>QuoteData</code> to get us a quote when asked for one either from a specific author, or a random quote.</p>\n<p>Finally, we export a function for parsing the quotes file into our <code>QuotesData</code> stuct so we can do some logic with it\nlater. I should note that this isn't exactly the most exciting data, nor the most practical. You're probably already\nasking yourself \"wait... so we're parsing JSON data into Rust structs only to... return JSON data in the response?\" Yes,\nthat's <em>exactly</em> what we're doing. Don't ask me why.</p>\n<p>Okay, so we have the ability to read the quotes file, now let's update our entrypoint into the function that will\ndetermine the context of the request and grab a quote:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">mod</span><span style=\"color:#80A665\"> quotes</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Context</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> lambda_http</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#DBD7CAEE\">run</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> service_fn</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Body</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Error</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Request</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> RequestExt</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> quotes</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get_quotes</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> serde_json</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">json</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// This is the main body for the function.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// Write your code inside it.</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// There are some code example in the following URLs:</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// - https://github.com/awslabs/aws-lambda-rust-runtime/tree/main/examples</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> function_handler</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">event</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Request</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Response</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Body</span><span style=\"color:#666666\">>,</span><span style=\"color:#5DA994\"> Error</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">received request to get office quotes, loading quote data</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Load the quotes from our JSON file</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> quotes</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> get_quotes</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Grab a quote if an author name was sent along in the query params</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // If no author is sent, we'll grab a random quote from the JSON</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> quote</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> match</span><span style=\"color:#BD976A\"> event</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">query_string_parameters_ref</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">and_then</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">params</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\"> params</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">first</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">author</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Some</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">author</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">requested to retrieve quotes by author </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">author</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            quotes</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">get_quote_by</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">author</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        None</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">no author specified, retrieving a random quote</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            Some</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">quotes</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">get_random_quote</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Fineally, determine the response based on the authored quote we generated</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // If we successfully generated a quote, wrap it up in a nice JSON response</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // In the case an author was passed in via query param but no quote was found,</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // return an error response in JSON format with the help of serde_json's `json!()` macro</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    match</span><span style=\"color:#BD976A\"> quote</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Some</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">authored_quote</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">quote retrieved by author </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#BD976A\">authored_quote</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">author</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            let</span><span style=\"color:#BD976A\"> resp</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">builder</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">status</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">200</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">header</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">content-type</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">application/json</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">body</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    serde_json</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">to_string</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">authored_quote</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        .</span><span style=\"color:#80A665\">context</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">unable to serialize the hilarious quote</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                        .</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">context</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">error attempting to build response body</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">resp</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        None</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">            let</span><span style=\"color:#BD976A\"> resp</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">builder</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">status</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">404</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">header</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">content-type</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">application/json</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">body</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    json!</span><span style=\"color:#666666\">({</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                        \"</span><span style=\"color:#C98A7D\">error</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Quote by that author does not exist.</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                    })</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                    .</span><span style=\"color:#80A665\">to_string</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                    .</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">context</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">error attempting build the error response</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">resp</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;(),</span><span style=\"color:#5DA994\"> Error</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_max_level</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">Level</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">INFO</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // disable printing the name of the module in every log line.</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_target</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">false</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // disabling time is handy because CloudWatch will add the ingestion time.</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">without_time</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">init</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">bootstrapping lambda</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    run</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">service_fn</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">function_handler</span><span style=\"color:#666666\">))</span><span style=\"color:#CB7676\">.</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Again, nothing too fancy here. At the top level, we're inspecting the request for query parameters and if one was sent,\nfind a quote by that author from the JSON we parsed. If no author sent, generate a random quote. Finally, we'll return\nJSON the API gateway based on the result of the request, falling back\nto an error if an author was provided but no quote was found. I've sprinkled in some <code>.context()?</code> utilities to help us\nearly return from unexpected errors with the help of <code>anyhow</code>. In a more robust application, we'd probably want to do\nsome more fine-grained error handling. Cargo lambda conveniently bundles the <code>tracing</code> crate into our functions, so\nwe're\nable to spit out some logs as well that will feed into a CloudWatch log group.</p>\n<p>Now that we've got our function in place, let's test it out. <code>cargo lambda</code> has some sweet utilities to help us out,\nincluding a <code>watch</code> command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> lambda</span><span style=\"color:#C98A7D\"> watch</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">INFO</span><span style=\"color:#C98A7D\"> invoke</span><span style=\"color:#C98A7D\"> server</span><span style=\"color:#C98A7D\"> listening</span><span style=\"color:#C98A7D\"> on</span><span style=\"color:#DBD7CAEE\"> [::]:9000</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">INFO</span><span style=\"color:#C98A7D\"> starting</span><span style=\"color:#C98A7D\"> lambda</span><span style=\"color:#C98A7D\"> function</span><span style=\"color:#C98A7D\"> function=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">_</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\"> manifest=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Cargo.toml</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Compiling</span><span style=\"color:#C98A7D\"> office-quotes</span><span style=\"color:#C98A7D\"> v0.1.0</span><span style=\"color:#DBD7CAEE\"> (/home/jmckenzie/typescript/joey-mckenzie-tech/examples/rust/with-aws-lambda)</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Finished</span><span style=\"color:#C98A7D\"> dev</span><span style=\"color:#DBD7CAEE\"> [unoptimized </span><span style=\"color:#C98A7D\">+</span><span style=\"color:#C98A7D\"> debuginfo]</span><span style=\"color:#C98A7D\"> target</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">s</span><span style=\"color:#666666\">)</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#4C9A91\"> 1.40</span><span style=\"color:#C98A7D\">s</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Running</span><span style=\"color:#666666\"> `</span><span style=\"color:#80A665\">target/debug/office-quotes</span><span style=\"color:#666666\">`</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">INFO</span><span style=\"color:#C98A7D\"> bootstrapping</span><span style=\"color:#C98A7D\"> lambda</span></span></code></pre></figure>\n<p>And if we ping <code>localhost:9000</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">localhost:9000</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> jq</span><span style=\"color:#C98A7D\"> .</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"author\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Michael Scott</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"quote\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Would I rather be feared or loved? Easy. Both. I want people to be afraid of how much they love me.</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Let's verify the query parameters are making it into the request as well:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">localhost:9000?author=kelly</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> jq</span><span style=\"color:#C98A7D\"> .</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"author\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Kelly Kapoor</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"quote\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">I talk a lot, so I've learned to just tune myself out...</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Lastly, let's check the error case where no author is found</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">localhost:9000?author=ron</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> jq</span><span style=\"color:#C98A7D\"> .</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"error\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Quote by that author does not exist.</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nice! We've got ourselves an MVP, time to ship to production.</p>\n<h2>Deploying to AWS</h2>\n<p>With our deployment approach, we'll do something akin to the following:</p>\n<ul>\n<li>Build the output artifact with the help of <code>cargo lambda</code></li>\n<li>Package up the output into a zip file to store in S3</li>\n<li>Upload the zip file into a bucket</li>\n<li>Setup an Lambda function using the zip file as the source executable</li>\n<li>Setup an API Gateway instance that proxies requests through to our Lambda function</li>\n</ul>\n<p>Now doing all that stuff manually is not <em>too</em> tedious, but I've been writing a lot Terraform lately and thought it\nwould fun to Terraform-erize this process. If you're not familiar with Terraform, it's\na <a href=\"https://www.hashicorp.com/\">Hashicorp</a> product with the goal of making provisioned infrastructure easier to main\nthrough infrastructure as code, or IaC. Terraform uses a configuration language called Hashicorp Configuration\nLanguage, or HCL, to define the who/what/when/where/why/how of our AWS infrastructure.</p>\n<p>I like to think of Terraform as a recipe for what our AWS infrastructure should look like, while also having the ability\nto plan and\napply those infrastructure changes for us, saving us an uncountable amount of mouse clicks navigating through the AWS\nconsole.</p>\n<p>An example piece of TF configuration might look like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"terraform\" data-theme=\"vitesse-dark\"><code data-language=\"terraform\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span>resource \"aws_lambda_function\" \"office_quotes\" {</span></span>\n<span data-line=\"\"><span>  function_name = \"office-quotes\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  s3_bucket = aws_s3_bucket.lambda_bucket.id</span></span>\n<span data-line=\"\"><span>  s3_key    = aws_s3_object.lambda_office_quotes.key</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  handler = \"rust.handler\"</span></span>\n<span data-line=\"\"><span>  runtime = \"provided.al2\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  source_code_hash = data.archive_file.lambda_office_quotes.output_base64sha256</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  role = aws_iam_role.lambda_execution_policy.arn</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>Here, we're defining a resource that happens to be a Lambda function called <code>office_quotes</code>. That Lambda has a function\nname of <code>office-quotes</code>, has its source files located in an S3 bucket (which we'll provision in just a minute), and runs\non an EC2 instance with the <code>provided.al2</code> runtime. There's some other stuff in there like the role, which defines the\nexecution policy invokers of the function should have, and an MD5 hash of the zip file output. I mentioned earlier that\nthis isn't necessarily a blog post about Terraform, so I'll leave\na <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/main/examples/rust/with-aws-lambda\">link</a> to the example code\nhere.</p>\n<p>Following the plan above, first thing we need is an S3 bucket we can store our zipped up function code in. I'll create\na <code>bucket.tf</code> configuration file that will do just that:</p>\n<h4>bucket.tf</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"terraform\" data-theme=\"vitesse-dark\"><code data-language=\"terraform\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span>resource \"random_pet\" \"lambda_bucket_name\" {</span></span>\n<span data-line=\"\"><span>  prefix = \"rust-lambda\"</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_s3_bucket\" \"lambda_bucket\" {</span></span>\n<span data-line=\"\"><span>  bucket = random_pet.lambda_bucket_name.id</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_s3_bucket_ownership_controls\" \"lambda_bucket\" {</span></span>\n<span data-line=\"\"><span>  bucket = aws_s3_bucket.lambda_bucket.id</span></span>\n<span data-line=\"\"><span>  rule {</span></span>\n<span data-line=\"\"><span>    object_ownership = \"BucketOwnerPreferred\"</span></span>\n<span data-line=\"\"><span>  }</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_s3_bucket_acl\" \"lambda_bucket\" {</span></span>\n<span data-line=\"\"><span>  depends_on = [aws_s3_bucket_ownership_controls.lambda_bucket]</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  bucket = aws_s3_bucket.lambda_bucket.id</span></span>\n<span data-line=\"\"><span>  acl    = \"private\"</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>data \"archive_file\" \"lambda_office_quotes\" {</span></span>\n<span data-line=\"\"><span>  type = \"zip\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  source_dir  = \"${path.module}/../target/lambda/office-quotes\"</span></span>\n<span data-line=\"\"><span>  output_path = \"${path.module}/bootstrap.zip\"</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_s3_object\" \"lambda_office_quotes\" {</span></span>\n<span data-line=\"\"><span>  bucket = aws_s3_bucket.lambda_bucket.id</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  key    = \"bootstrap.zip\"</span></span>\n<span data-line=\"\"><span>  source = data.archive_file.lambda_office_quotes.output_path</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  etag = filemd5(data.archive_file.lambda_office_quotes.output_path)</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>The first few <code>resource</code>s defined above describe the bucket name with the help of a couple randomly generated names and\npermissions on the bucket. The last few pieces of configuration define some <code>data</code> we're going to work with that happens\nto be an archive file and an object that will exist in that bucket that's just the zip file of our function code.</p>\n<p>You may have noticed that the <code>source_dir</code> of our <code>archive_file</code> data that we'll need doesn't actually exist yet - let's\nbuild it! Within our parent directory (I usually stick all my Terraform specific stuff in a subdirectory of the project\nI'm working in) let's run a quick <code>cargo lambda build --release</code> to build the output we need.</p>\n<p>Once the build finishes, you should notice an exectuable file named <code>bootstrap</code> should be present in\nyour <code>target/lambda/office-quotes</code> folder. <code>cargo lambda</code> offers different build configurations as well, allowing output\nformats to also be specified - we could also run the build with the <code>--output-format zip</code> flag to get a ready-to-upload\nfile with <code>bootstrap.zip</code>. Since we're leaning on Terraform to do the file zipping for us though, we'll take the default\ngenerated executable instead.</p>\n<p>With our bucket configuration in place, let's define our Lambda function configuration:</p>\n<h4>lambda.tf</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"terraform\" data-theme=\"vitesse-dark\"><code data-language=\"terraform\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span>resource \"aws_lambda_function\" \"office_quotes\" {</span></span>\n<span data-line=\"\"><span>  function_name = \"office-quotes\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  s3_bucket = aws_s3_bucket.lambda_bucket.id</span></span>\n<span data-line=\"\"><span>  s3_key    = aws_s3_object.lambda_office_quotes.key</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  handler = \"rust.handler\"</span></span>\n<span data-line=\"\"><span>  runtime = \"provided.al2\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  source_code_hash = data.archive_file.lambda_office_quotes.output_base64sha256</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  role = aws_iam_role.lambda_execution_policy.arn</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_cloudwatch_log_group\" \"office_quotes\" {</span></span>\n<span data-line=\"\"><span>  name = \"/aws/lambda/${aws_lambda_function.office_quotes.function_name}\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  retention_in_days = 1</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_iam_role\" \"lambda_execution_policy\" {</span></span>\n<span data-line=\"\"><span>  name               = \"office-lambda-execution-role\"</span></span>\n<span data-line=\"\"><span>  assume_role_policy = jsonencode({</span></span>\n<span data-line=\"\"><span>    Version   = \"2012-10-17\"</span></span>\n<span data-line=\"\"><span>    Statement = [</span></span>\n<span data-line=\"\"><span>      {</span></span>\n<span data-line=\"\"><span>        Action    = \"sts:AssumeRole\"</span></span>\n<span data-line=\"\"><span>        Effect    = \"Allow\"</span></span>\n<span data-line=\"\"><span>        Sid       = \"\"</span></span>\n<span data-line=\"\"><span>        Principal = {</span></span>\n<span data-line=\"\"><span>          Service = \"lambda.amazonaws.com\"</span></span>\n<span data-line=\"\"><span>        }</span></span>\n<span data-line=\"\"><span>      }</span></span>\n<span data-line=\"\"><span>    ]</span></span>\n<span data-line=\"\"><span>  })</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_iam_role_policy_attachment\" \"lambda_policy_attachment\" {</span></span>\n<span data-line=\"\"><span>  role = aws_iam_role.lambda_execution_policy.name</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>As we saw earlier, we'll use the same bit of function configuration and add a few things like CloudWatch logs and an\nexecution policy we'll expect services invoking the function to have.</p>\n<p>Let's hookup the final piece of infrastructure we'll need for now in an API Gateway resource:</p>\n<h4>gateway.tf</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"terraform\" data-theme=\"vitesse-dark\"><code data-language=\"terraform\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span>resource \"aws_apigatewayv2_api\" \"office_gateway\" {</span></span>\n<span data-line=\"\"><span>  name = \"office-gateway\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  protocol_type = \"HTTP\"</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_apigatewayv2_stage\" \"office_gateway\" {</span></span>\n<span data-line=\"\"><span>  api_id = aws_apigatewayv2_api.office_gateway.id</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  name        = \"prod\"</span></span>\n<span data-line=\"\"><span>  auto_deploy = true</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  access_log_settings {</span></span>\n<span data-line=\"\"><span>    destination_arn = aws_cloudwatch_log_group.office_gateway.arn</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>    format = jsonencode({</span></span>\n<span data-line=\"\"><span>      requestId               = \"$context.requestId\"</span></span>\n<span data-line=\"\"><span>      sourceIp                = \"$context.identity.sourceIp\"</span></span>\n<span data-line=\"\"><span>      requestTime             = \"$context.requestTime\"</span></span>\n<span data-line=\"\"><span>      protocol                = \"$context.protocol\"</span></span>\n<span data-line=\"\"><span>      httpMethod              = \"$context.httpMethod\"</span></span>\n<span data-line=\"\"><span>      resourcePath            = \"$context.resourcePath\"</span></span>\n<span data-line=\"\"><span>      routeKey                = \"$context.routeKey\"</span></span>\n<span data-line=\"\"><span>      status                  = \"$context.status\"</span></span>\n<span data-line=\"\"><span>      responseLength          = \"$context.responseLength\"</span></span>\n<span data-line=\"\"><span>      integrationErrorMessage = \"$context.integrationErrorMessage\"</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>    )</span></span>\n<span data-line=\"\"><span>  }</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_apigatewayv2_integration\" \"get_quote\" {</span></span>\n<span data-line=\"\"><span>  api_id = aws_apigatewayv2_api.office_gateway.id</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  integration_uri    = aws_lambda_function.office_quotes.invoke_arn</span></span>\n<span data-line=\"\"><span>  integration_type   = \"AWS_PROXY\"</span></span>\n<span data-line=\"\"><span>  integration_method = \"POST\"</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_apigatewayv2_route\" \"get_quote\" {</span></span>\n<span data-line=\"\"><span>  api_id = aws_apigatewayv2_api.office_gateway.id</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  route_key = \"GET /quotes\"</span></span>\n<span data-line=\"\"><span>  target    = \"integrations/${aws_apigatewayv2_integration.get_quote.id}\"</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_cloudwatch_log_group\" \"office_gateway\" {</span></span>\n<span data-line=\"\"><span>  name = \"/aws/api-gateway/${aws_apigatewayv2_api.office_gateway.name}\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  retention_in_days = 1</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>resource \"aws_lambda_permission\" \"office_gateway\" {</span></span>\n<span data-line=\"\"><span>  statement_id = \"AllowExecutionFromAPIGateway\"</span></span>\n<span data-line=\"\"><span>  action       = \"lambda:InvokeFunction\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  function_name = aws_lambda_function.office_quotes.function_name</span></span>\n<span data-line=\"\"><span>  principal     = \"apigateway.amazonaws.com\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  source_arn = \"${aws_apigatewayv2_api.office_gateway.execution_arn}/*/*\"</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>Our API Gateway configuration is defined as a good ole fashioned HTTP API that has a route integration under\nthe <code>/quotes</code> path that will invoke our Lambda function. With the help of Terraform, we can reference bits of\ninfrastructure\ncreated in other files without needing to hard code or manually point to things.</p>\n<p>When we apply all of our Terraform infrastructure, we'll need a way to reference our created API Gateway without having\nto step into the AWS Console and click our way through to the API Gateway dashboard. Let's add an <code>outputs.tf</code> file\nthat tell Terraform that once all of our infrastructure is created, output it to the console for us. The created\nresources are also saved in our <code>terraform.tfstate</code> file as well, so we can also reference them there if need be.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"terraform\" data-theme=\"vitesse-dark\"><code data-language=\"terraform\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span>output \"base_url\" {</span></span>\n<span data-line=\"\"><span>  description = \"Base URL for API Gateway stage.\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  value = aws_apigatewayv2_stage.office_gateway.invoke_url</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>output \"lambda_bucket_name\" {</span></span>\n<span data-line=\"\"><span>  description = \"Name of the S3 bucket used to store function code.\"</span></span>\n<span data-line=\"\"><span></span></span>\n<span data-line=\"\"><span>  value = aws_s3_bucket.lambda_bucket.id</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>While we're at it, we'll go ahead and print out our bucket name as well as everytime we'll destroy/apply infrastructure,\nit'll change due to the random module we're leveraging to avoid clashing buckets. Now if we apply this plan, we should\nsee the fruits of our labor:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> terraform</span><span style=\"color:#C98A7D\"> apply</span><span style=\"color:#C99076\"> -auto-approve</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># A bunch of logs about planned infrastructure...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Apply</span><span style=\"color:#C98A7D\"> complete!</span><span style=\"color:#C98A7D\"> Resources:</span><span style=\"color:#4C9A91\"> 15</span><span style=\"color:#C98A7D\"> added,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#C98A7D\"> changed,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#C98A7D\"> destroyed.</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Outputs:</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">base_url</span><span style=\"color:#C98A7D\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">https://dbyhxt543e.execute-api.us-west-1.amazonaws.com/prod</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">lambda_bucket_name</span><span style=\"color:#C98A7D\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">rust-lambda-choice-cricket</span><span style=\"color:#C98A7D99\">\"</span></span></code></pre></figure>\n<p>And if I ping my URL (yours will be different) at the <code>/quotes</code> route:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">https://dbyhxt543e.execute-api.us-west-1.amazonaws.com/prod/quotes</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> jq</span><span style=\"color:#C98A7D\"> .</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"author\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Dwight Schrute</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"quote\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Identity theft is not a joke, Jim! Millions of families suffer every year.</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Success! Rust, running on Lambda, publicly available through an API Gateway. This is great and all, but we need a way\nto reliably rebuild our infrastructure and apply changes. I'm going to define a <code>justfile</code>\nusing <a href=\"https://github.com/casey/just\">just</a>\nat the root of our project directory as I'm not smart enough to use <code>make</code>.</p>\n<h4>justfile</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B8A965\">alias</span><span style=\"color:#C98A7D\"> b</span><span style=\"color:#C98A7D\"> :=</span><span style=\"color:#C98A7D\"> build</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">default:</span><span style=\"color:#C98A7D\"> dev</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># build main</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">build:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    cargo</span><span style=\"color:#C98A7D\"> lambda</span><span style=\"color:#C98A7D\"> build</span><span style=\"color:#C99076\"> --release</span><span style=\"color:#666666\"> &#x26;&#x26;</span><span style=\"color:#80A665\"> cp</span><span style=\"color:#C98A7D\"> ./quotes.json</span><span style=\"color:#C98A7D\"> ./target/lambda/office-quotes</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># build main</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">build-deploy:</span><span style=\"color:#C98A7D\"> build</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    just</span><span style=\"color:#C98A7D\"> terraform/reapply</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># run the dev server</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">dev:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    cargo</span><span style=\"color:#C98A7D\"> watch</span><span style=\"color:#C99076\"> -x</span><span style=\"color:#C98A7D\"> run</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># lint rust files</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">clippy:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    cargo</span><span style=\"color:#C98A7D\"> clippy</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># check rust files format</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">check:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    cargo</span><span style=\"color:#C98A7D\"> fmt</span><span style=\"color:#C99076\"> -v</span><span style=\"color:#C99076\"> --check</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># format rust files</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">format:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    cargo</span><span style=\"color:#C98A7D\"> fmt</span><span style=\"color:#C99076\"> -v</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># run code quality tools</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">ci:</span><span style=\"color:#C98A7D\"> check</span><span style=\"color:#C98A7D\"> clippy</span></span></code></pre></figure>\n<p><code>just</code> is <em>just</em> a convenient command runner, useful for aggregating things you'll run constantly in the terminal into a\nsingle source command. Instead of having to swap between <code>terraform</code> and <code>cargo</code> commands, <code>just</code> will allow me define a\nfew\ncommon commands to run so I can use things like <code>just build</code> or <code>just deploy</code> instead. I'm also going to define\nanother <code>justfile</code>\nwithin our <code>terraform</code> directory that will house all of the <code>terraform</code> commands we'll need to run:</p>\n<h4>terraform/justfile</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">default:</span><span style=\"color:#C98A7D\"> plan</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># run the plan</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">plan:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    terraform</span><span style=\"color:#C98A7D\"> plan</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># apply the plan</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">apply:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    terraform</span><span style=\"color:#C98A7D\"> apply</span><span style=\"color:#C99076\"> -auto-approve</span><span style=\"color:#666666\"> &#x26;&#x26;</span><span style=\"color:#80A665\"> sed</span><span style=\"color:#C99076\"> -i</span><span style=\"color:#C98A7D99\"> ''</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">s|^QUOTES_BASE_URL=.*|QUOTES_BASE_URL=</span><span style=\"color:#666666\">$(</span><span style=\"color:#80A665\">terraform</span><span style=\"color:#C98A7D\"> output </span><span style=\"color:#C99076\">-raw</span><span style=\"color:#C98A7D\"> base_url</span><span style=\"color:#666666\">)</span><span style=\"color:#C98A7D\">|</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\"> ../../../../.env</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># destroy the plan</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">destroy:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    terraform</span><span style=\"color:#C98A7D\"> destroy</span><span style=\"color:#C99076\"> -auto-approve</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># re-apply the plan</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">reapply:</span><span style=\"color:#C98A7D\"> destroy</span><span style=\"color:#C98A7D\"> apply</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># format files</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">fmt:</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    terraform</span><span style=\"color:#C98A7D\"> fmt</span></span></code></pre></figure>\n<p>One could argue it's may not be the most fruitful idea to <code>-auto-approve</code> TF commands as it's essentially a force\ncommand,\nand we'd be better served running these things in CI through something like Terraform Cloud. I'm a one band on the AWS\nfree tier,\nthough, so I'll cut a few corners.</p>\n<p>Back in our root project directory, I can now run things like <code>just terraform/destory</code> or <code>just terraform/apply</code> without\nneeding\nto swap directories to run the different commands from the different <code>justfile</code>s. Let's verify our infrastructure is\nre-creatable,\nas that's where the true power of Terraform shines (in my opinion). Reliably re-creatable infrastructure empowers us to\nmove\nfast, especially when building in a multi-stage development environment.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> just</span><span style=\"color:#C98A7D\"> build-deploy</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> lambda</span><span style=\"color:#C98A7D\"> build</span><span style=\"color:#C99076\"> --release</span><span style=\"color:#666666\"> &#x26;&#x26;</span><span style=\"color:#80A665\"> cp</span><span style=\"color:#C98A7D\"> ./quotes.json</span><span style=\"color:#C98A7D\"> ./target/lambda/office-quotes</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Finished</span><span style=\"color:#C98A7D\"> release</span><span style=\"color:#DBD7CAEE\"> [optimized] target</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">s</span><span style=\"color:#666666\">)</span><span style=\"color:#4D9375\"> in</span><span style=\"color:#DBD7CAEE\"> 0.12s</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">just</span><span style=\"color:#C98A7D\"> terraform/reapply</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">terraform</span><span style=\"color:#C98A7D\"> destroy</span><span style=\"color:#C99076\"> -auto-approve</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">//</span><span style=\"color:#C98A7D\"> ...and</span><span style=\"color:#C98A7D\"> a</span><span style=\"color:#C98A7D\"> bunch</span><span style=\"color:#C98A7D\"> of</span><span style=\"color:#C98A7D\"> other</span><span style=\"color:#C98A7D\"> TF</span><span style=\"color:#C98A7D\"> output</span></span></code></pre></figure>\n<p>With our single <code>build-deploy</code> command, we'll:</p>\n<ul>\n<li>Compile our Rust code</li>\n<li>Build the expected output we need to zip and deploy to S3</li>\n<li>Copy over our JSON file for our Rust code to read from</li>\n<li>Destroy/recreate all of the required AWS infrastructure</li>\n<li>Deploy our zip file to the S3 bucket for our Lambda to use</li>\n</ul>\n<p>Again, we'll see more output for the <code>base_url</code> and <code>lambda_bucket_name</code>, though with different IDs and names this time.\nI won't necessarily verify everything in AWS console, but we now have:</p>\n<ul>\n<li>A Lambda function that runs our zipped up Rust code from an S3 bucket</li>\n<li>An API Gateway instance that forwards requests to that Lambda</li>\n<li>CloudWatch log groups for both our API Gateway instance and our Lambda function</li>\n</ul>\n<p>As a sanity check, let's make sure all the pipes are still hooked up by sending through another request to our gateway:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">https://jcojq5szvk.execute-api.us-west-1.amazonaws.com/prod?author=michael</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\"> |</span><span style=\"color:#80A665\"> jq</span><span style=\"color:#C98A7D\"> .</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \"author\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Michael Scott</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \"quote\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">I'm not superstitious...but I'm a little stitious.</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Ez-pz, as the kids say! And with that, we've got Rust running on Lambda in AWS. The future of serverless Rust is looking\nbright! You can find all the source code for this example on my website examples\nin <a href=\"https://github.com/JoeyMckenzie/joeymckenzie.tech/tree/main/examples/rust/with-aws-lambda\">GitHub</a>.</p>\n<p>Until next time, friends!</p>"
    },
    "_id": "2023/rust-aws-lambda-and-office-quotes.md",
    "_raw": {
      "sourceFilePath": "2023/rust-aws-lambda-and-office-quotes.md",
      "sourceFileName": "rust-aws-lambda-and-office-quotes.md",
      "sourceFileDir": "2023",
      "contentType": "markdown",
      "flattenedPath": "2023/rust-aws-lambda-and-office-quotes"
    },
    "type": "Post",
    "url": "/blog/2023/rust-aws-lambda-and-office-quotes"
  },
  {
    "title": "Going serverless with Rust and Shuttle",
    "description": "Managing infrastructure is already hard enough, let's write some serverless Rust with Shuttle!",
    "pubDate": "2023-03-30T07:00:00.000Z",
    "category": "rust",
    "heroImage": "/images/serverless-rust-with-shuttle/shuttle_meme.jpg",
    "draft": false,
    "keywords": [
      "rust",
      "aws lambda"
    ],
    "body": {
      "raw": "\nIn my epic quest to find any excuse to write more Rust in my daily dev life, I stumbled across an incredible platform\nthat allows developers to write serverless functions entirely in Rust.\n\nServerless functions? Check.\n\nWritten in pure Rust? Check.\n\nAll managed from the comfort of the command line? _Dear god_... just take my money!\n\n## What the deployment story currently looks like\n\nHarkening back to looking for any excuse to write more Rust, my typical deployment workflow for small projects would\nlook something like this:\n\n-   Write code (entirely bug-free, obviously)\n-   Construct a sensible Dockefile\n-   Deploy to some sort managed SaaS infrastructure platform\n-   Configure CI, testing pipelines, etc.\n\nWhile the current landscape of tools is small enough for micro-projects, I'd love to be an even lazier developer than I\ncurrently am and remove the middle to bullet points above. With shuttle, I'm able to write code and simply deploy my\nfunction - no containerization, no server configurations, simply just running a few commands and I'm able to go from\nlocal dev to production in minutes. Let's write a serverless function with shuttle that retrieves GitHub stars from one\nof our repositories!\n\n## Getting started\n\nFirst, let's bootstrap our shuttle project using [`cargo-shuttle`](https://crates.io/crates/cargo-shuttle/):\n\n```shell\ncargo install cargo-shuttle # or quickinstall if you prefer\n```\n\nQuick the shuttle CLI in place, let's scaffold out an [axum](https://crates.io/crates/axum/) server to respond to our\nrequests:\n\n```shell\ncargo shuttle init --axum\n```\n\nFollow the prompts of naming the project and selecting a folder. Taking a look at `main.rs` that shuttle generates for\nus should look something like this:\n\n```rust\nuse axum::{routing::get, Router};\n\nasync fn hello_world() -> &'static str {\n    \"Hello, world!\"\n}\n\n#[shuttle_runtime::main]\nasync fn axum() -> shuttle_axum::ShuttleAxum {\n    let router = Router::new().route(\"/hello\", get(hello_world));\n\n    Ok(router.into())\n}\n```\n\nand our manifest file will look something along the lines of:\n\n```toml\n[package]\nname = \"serverless-rust-with-shuttle\"\nversion = \"0.1.0\"\nedition = \"2021\"\npublish = false\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nshuttle-runtime = \"0.12.0\"\naxum = \"0.6.12\"\nshuttle-axum = \"0.12.0\"\ntokio = \"1.26.0\"\n```\n\nA few key notes here:\n\n-   Shuttle bootstraps a few dependencies for us in `shuttle-runtime` and `shuttle-axum` (0.12.0 at the time of this\n    writing)\n-   These crates allow us to invoke our function as an axum-specific serverless application as we see in our `main.rs`\n    file\n\nBut what's this `#[shuttle_runtime::main]` macro on our `main` function? Let's take a look with a\nquick [`cargo expand`](https://crates.io/crates/cargo-expand/) if you have it installed:\n\n```rust\n#![feature(prelude_import)]\n#[prelude_import]\nuse std::prelude::rust_2021::*;\n#[macro_use]\nextern crate std;\nuse axum::{routing::get, Router};\n\nasync fn hello_world() -> &'static str { \"Hello, world!\" }\n\nfn main() {\n    let body = async { shuttle_runtime::start(loader).await; };\n\n    #[allow(clippy :: expect_used, clippy :: diverging_sub_expression)]\n    {\n        return tokio::runtime::Builder::new_multi_thread().enable_all().build().expect(\"Failed building the Runtime\").block_on(body);\n    }\n}\nasync fn loader(mut _factory: shuttle_runtime::ProvisionerFactory,\n    logger: shuttle_runtime::Logger) -> shuttle_axum::ShuttleAxum {\n    use shuttle_runtime::Context;\n    use shuttle_runtime::tracing_subscriber::prelude::*;\n    let filter_layer =\n        shuttle_runtime::tracing_subscriber::EnvFilter::try_from_default_env().or_else(|_|\n                    shuttle_runtime::tracing_subscriber::EnvFilter::try_new(\"INFO\")).unwrap();\n    shuttle_runtime::tracing_subscriber::registry().with(filter_layer).with(logger).init();\n    axum().await\n}\nasync fn axum() -> shuttle_axum::ShuttleAxum {\n    let router = Router::new().route(\"/hello\", get(hello_world));\n\n    Ok(router.into())\n}\n```\n\nWhoa! If we look closely, we see a familiar bit of generated code:\n\n```rust\n#[allow(clippy :: expect_used, clippy :: diverging_sub_expression)]\n{\n    return tokio::runtime::Builder::new_multi_thread().enable_all().build().expect(\"Failed building the Runtime\").block_on(body);\n}\n```\n\nShuttle's `#[shuttle_runtime::main]` macro generates the _same code_ a typical `#[tokio::main]` macro generates along\nwith a few extra bits (like including the defacto logging crate in [`tracing`](https://crates.io/crates/tracing/) for\nlogging to the server's console through [`tracing-subscriber`](https://crates.io/crates/tracing-subscriber)). No magic\nhere, just a bit of generated boilerplate for us to hit the ground running.\n\nA quick note, shuttle recently (at the time of this writing) added a dependency\non [protobuf](https://github.com/protocolbuffers/protobuf) to facilitate some of their internal infrastructure. If\nyou're missing `protoc` as a dependency on your machine, take a look at my\nblog's [README](https://github.com/JoeyMckenzie/joey-mckenzie-tech/blob/main/README.md#running-shuttle-functions-locally)\nfor some quick instructions on how to get up and running with the package.\n\n## Managing secrets\n\nSo we've set out to build a serverless function that will retrieve stars from various repositories in GitHub, which\nimplies we'll need to interact with the GitHub API. To use their API, we'll need a key to authenticate our requests but\nshouldn't rely on clients, nor expose our secret keys to clients. We'll need _some way_ to inject secrets at\nstartup/runtime that'll house our API keys only known to the function so we can make valid requests - luckily shuttle\nhas us covered with [shuttle secrets](https://docs.shuttle.rs/resources/shuttle-secrets).\n\nLuckily, it's rather straightforward to secrets into our serverless function by adding a `Secrets.toml` file, shuttle's\nversion of a `.env` file, and injecting them on startup with\nthe [`shuttle-secrets`](https://crates.io/crates/shuttle-secrets) crate. Let's add that to our cargo dependencies:\n\n```shell\ncargo add shuttle-secrets\n```\n\nand in our `main` function, let's add the secrets store as an argument (don't forget to add\na `use shuttle_secrets::SecretStore;` to your imports):\n\n```rust\n#[shuttle_runtime::main]\nasync fn axum(\n    #[shuttle_secrets::Secrets] secret_store: SecretStore,\n) -> shuttle_axum::ShuttleAxum {\n  // other code...\n}\n```\n\nWhile we're at it, we'll need a valid GitHub access token - for creating personal access tokens, check out\nthe [docs](https://docs.github.com/en/apps/creating-github-apps/creating-github-apps/about-apps#personal-access-tokens)\nand make sure to add the `repo:read` scope so our authenticated requests have permission to retrieve repository data.\n\nOnce you've got your token (save it off as you'll only be able to see it once on the UI), let's add a `Secrets.toml`\nfile at the root of our project with the token as a key:\n\n```toml\nGITHUB_ACCESS_TOKEN = \"ghp...\"\n```\n\nNow that we've got secrets in place, let's do a sanity check to make sure we have access to our token value once the\nfunction is running. Let's update our `main` function to spit out the token's value at startup:\n\n```rust\n#[shuttle_runtime::main]\nasync fn axum(#[shuttle_secrets::Secrets] secret_store: SecretStore) -> shuttle_axum::ShuttleAxum {\n    let token = secret_store\n        .get(\"GITHUB_ACCESS_TOKEN\")\n        .expect(\"No access token was provided.\");\n\n    dbg!(token);\n\n    let router = Router::new().route(\"/hello\", get(hello_world));\n\n    Ok(router.into())\n}\n```\n\nWe'll simply just `.expect()` the token to exist as it's required for us to operate. Using shuttle's CLI, let's spin\nthis function up locally:\n\n```shell\ncargo shuttle run\n```\n\nand after our project is compiled and run, we should see the token's value in our terminal:\n\n```shell\nFinished dev [unoptimized + debuginfo] target(s) in 30.18s\n[samples/serverless-rust-with-shuttle/src/main.rs:14] token = \"ghp...\"\n\nStarting serverless-rust-with-shuttle on http://127.0.0.1:8000\n```\n\nSweet! We're 90% ready to start writing the _actual_ fun code. Since we'll need to call an external API via HTTP, let's\nadd [`reqwest`](https://crates.io/crates/reqwest) as a dependency to make our lives easier (with the `json` feature):\n\n```shell\ncargo add reqwest --features json\n```\n\nOkay... _now_ we're ready to get the ball rolling. Let's update the existing route with a path parameter in the form of\nthe repository name along with scaffolding out a handler in our `main` function:\n\n```rust\nuse axum::{routing::get, Router};\nuse shuttle_secrets::SecretStore;\n\nasync fn get_repository_stars() -> &'static str {\n    \"Hello, world!\"\n}\n\n#[shuttle_runtime::main]\nasync fn axum(#[shuttle_secrets::Secrets] secret_store: SecretStore) -> shuttle_axum::ShuttleAxum {\n    let token = secret_store\n        .get(\"GITHUB_ACCESS_TOKEN\")\n        .expect(\"No access token was provided.\");\n\n    let router = Router::new().route(\"/:repository/stars\", get(get_repository_stars));\n\n    Ok(router.into())\n}\n```\n\nand with our server running, let's send through a request:\n\n```shell\ncurl --location 'localhost:8000/my-repository/stars'\nHello, world!\n```\n\nNice, now we're getting somewhere. Let's add [`cargo-watch`](https://crates.io/crates/cargo-watch) to have our server\nrestart anytime we make changes so we're not bothered to stop/start manually ourselves:\n\n```shell\ncargo install cargo-watch # or cargo binstall\n```\n\nand running our server again:\n\n```shell\ncargo watch -x 'shuttle run'\n```\n\nNow any change to our source code will trigger an automatic restart of our server. Let's update our function handler to\nreturn some JSON in a sane fashion so we can start stubbing out what the request flow will look like. Back in `main.rs`\nlet's update our handler as well as add a response JSON model:\n\n```rust\n#[derive(Serialize, Debug)]\nstruct StarsResponse {\n    count: usize,\n}\n\nasync fn get_repository_stars() -> Result<Json<StarsResponse>, &'static str> {\n    let response = StarsResponse { count: 9000 };\n    Ok(Json(response))\n}\n```\n\nIgnoring our errors for just a bit, we'll need to bring in [`serde`](https://crates.io/crates/serde) so we can serialize\nour responses to JSON with the `derive` flag so we can use it on our struct:\n\n```shell\ncargo add serde --features derive\n```\n\nCompiling and running our server again, let's send another request through:\n\n```shell\ncurl --location 'localhost:8000/my-repository/stars'\n{\"count\":9000}\n```\n\nNow we're getting somewhere. We don't want to _just_ return errors in the form `&'static str`s, so let's address that by\ndefining our own error implementation that plays nicely with axum:\n\n```rust\n#[derive(Serialize, Debug)]\nstruct HandlerError {\n    message: String,\n}\n\nenum ApiError {}\n\nimpl IntoResponse for ApiError {\n    fn into_response(self) -> axum::response::Response {\n        let (status, error_message) = match self {\n            _ => (\n                StatusCode::INTERNAL_SERVER_ERROR,\n                \"Something very, very bad has happened... :(\".to_string(),\n            ),\n        };\n\n        let body = Json(HandlerError {\n            message: error_message,\n        });\n\n        (status, body).into_response()\n    }\n}\n\nasync fn get_repository_stars() -> Result<Json<StarsResponse>, ApiError> {\n    let response = StarsResponse { count: 9000 };\n    Ok(Json(response))\n}\n```\n\nIgnoring `clippy` errors for a moment, let's quickly run through our new additions:\n\n-   We've added a `HandlerError` struct to give us the ability to transform errors into user-friendly JSON responses with\n    a `message`\n-   We've `impl`'d `InotoResponse` for our new `ApiError` type that we'll use to coerce errors that happen during the\n    request into something axum understands how to transform\n-   We've updated our handler to return an `ApiError` in our `Result` rather than a static string so we can again help our\n    users out with information about why the request failed\n\nWe'll get around to adding some branches to our `ApiError` enum eventually, but for now to get our code to compile,\nlet's add the [`http`](https://crates.io/crates/http) crate so we can lean on the `StatusCode` type to map internal\nhandler errors to sensible HTTP status codes.\n\n> Handling errors with axum deserves it's on blog post, so I'll gloss over a few of the details for now so we can focus\n> on just getting our function up and running.\n\n```shell\ncargo add http\n```\n\nNow running our code and making another request, we should still see the same message response as the previous request\nwe made before we updated our handler. Our `main.rs` file is getting rather large, so let's split some things out for\norganizational purposes. Let's add two additional files in `errors.rs` and `handlers.rs` to house our error\nimplementation and request handlers, respectively\n\n### errors.rs\n\n```rust\nuse axum::{response::IntoResponse, Json};\nuse http::StatusCode;\nuse serde::Serialize;\n\n#[derive(Serialize, Debug)]\nstruct HandlerError {\n    message: String,\n}\n\npub enum ApiError {}\n\nimpl IntoResponse for ApiError {\n    fn into_response(self) -> axum::response::Response {\n        let (status, error_message) = match self {\n            _ => (\n                StatusCode::INTERNAL_SERVER_ERROR,\n                \"Something very, very bad has happened... :(\".to_string(),\n            ),\n        };\n\n        let body = Json(HandlerError {\n            message: error_message,\n        });\n\n        (status, body).into_response()\n    }\n}\n```\n\n### handlers.rs\n\n```rust\nuse axum::Json;\nuse serde::Serialize;\n\nuse crate::errors::ApiError;\n\n#[derive(Serialize, Debug)]\npub struct StarsResponse {\n    count: usize,\n}\n\npub async fn get_repository_stars() -> Result<Json<StarsResponse>, ApiError> {\n    let response = StarsResponse { count: 9000 };\n    Ok(Json(response))\n}\n```\n\nAfter cleaning up a few import errors and peppering in a few `pub`s for visibility, our `main.rs` file should now look\nlike this:\n\n```rust\nmod errors;\nmod handlers;\n\nuse axum::{routing::get, Router};\nuse handlers::get_repository_stars;\nuse shuttle_secrets::SecretStore;\n\n#[shuttle_runtime::main]\nasync fn axum(#[shuttle_secrets::Secrets] secret_store: SecretStore) -> shuttle_axum::ShuttleAxum {\n    let token = secret_store\n        .get(\"GITHUB_ACCESS_TOKEN\")\n        .expect(\"No access token was provided.\");\n\n    let router = Router::new().route(\"/:repository/stars\", get(get_repository_stars));\n\n    Ok(router.into())\n}\n```\n\nNice and lean! Next, we need to _somehow_ get our token into our `get_repository_stars` handler in a sane fashion, and\nit would be nice to inject it as a dependency as it represents part of our serverless function's state. Let's lean on\naxum's [state management](https://docs.rs/axum/latest/axum/#sharing-state-with-handlers) mechanisms to do so with\nthe `.with_state()` router extensions so we can inject the token secret into the handler at request time.\n\nThere are lots of ways to facilitate handling state in axum, so let's take the simplest approach by wrapping our token\nin a `struct` that'll we'll inject into our handlers. To keep things clean, let's add a `state.rs` file and the\nnecessary bits to get a bit of thread-safe state working:\n\n```rust\nuse std::sync::Arc;\n\n#[derive(Debug)]\npub struct HandlerState {\n    pub access_token: String,\n}\n\nimpl HandlerState {\n    pub fn new_state(access_token: String) -> Arc<HandlerState> {\n        Arc::new(HandlerState { access_token })\n    }\n}\n\n```\n\nand back in our router in `main.rs`, let's add it as a state extension:\n\n```rust\n#[shuttle_runtime::main]\nasync fn axum(#[shuttle_secrets::Secrets] secret_store: SecretStore) -> shuttle_axum::ShuttleAxum {\n    let token = secret_store\n        .get(\"GITHUB_ACCESS_TOKEN\")\n        .expect(\"No access token was provided.\");\n\n    let router = Router::new()\n        .route(\"/:repository/stars\", get(get_repository_stars))\n        .with_state(HandlerState::new_state(token));\n\n    Ok(router.into())\n}\n```\n\nLet's do one more sanity check to make sure we're still able to access our token within our request handler. Back in\nour `get_repository_stars handler`:\n\n```rust\npub async fn get_repository_stars(\n    State(state): State<Arc<HandlerState>>,\n) -> Result<Json<StarsResponse>, ApiError> {\n    dbg!(&state.access_token);\n    let response = StarsResponse { count: 9000 };\n    Ok(Json(response))\n}\n```\n\nand thanks to `cargo-watch`, our server should be back up and running. Sending through yet another request, we should\nsee our server output something like:\n\n```shell\n&state.access_token = \"ghp...\"\n```\n\nNice! We're propagating down our state to our handler leaning on `Arc` to help us facilitate sharing our `HandlerState`\nacross request threads and we're finally in a spot to start calling out to the GitHub API.\n\nBefore we do so, let's take a look at what we've got so far:\n\n-   We've got a serverless function spun with axum bootstrapped with shuttle\n-   We're handling errors according to axum convention\n-   We've separated out our bits of code into logically grouped units\n-   We're propagating top-level application state safely down to request handlers\n\nDoesn't seem like much, but we've accomplished quite a bit! Let's go back and add a bit of `tracing` so we can see\ninside the mind of our function as it processes requests. Recall earlier in the expanded macro just above `main` that\nshuttle provides we have our application bootstrapped with `tracing` behind the scenes ready to go to start logging.\nLet's add some trace logging in a few places so we can pretty-print out to the console. First, let's add the `tracing`\ncrate:\n\n```shell\ncargo add tracing\n```\n\nNext, let's update our `main` function to include a bit of startup-style logging:\n\n```rust\n#[shuttle_runtime::main]\nasync fn axum(#[shuttle_secrets::Secrets] secret_store: SecretStore) -> shuttle_axum::ShuttleAxum {\n    tracing::info!(\"Bootstrapping function secrets\");\n\n    let token = secret_store\n        .get(\"GITHUB_ACCESS_TOKEN\")\n        .expect(\"No access token was provided.\");\n\n    tracing::info!(\"Secrets successfully read, building server router\");\n\n    let router = Router::new()\n        .route(\"/:repository/stars\", get(get_repository_stars))\n        .with_state(HandlerState::new_state(token));\n\n    tracing::info!(\"Router successfully initialized, now listening on port 8000\");\n\n    Ok(router.into())\n}\n```\n\nThen, let's add some logging to our request handler in `handlers.rs`:\n\n```rust\npub async fn get_repository_stars(\n    State(state): State<Arc<HandlerState>>,\n    Path(repository): Path<String>,\n) -> Result<Json<StarsResponse>, ApiError> {\n    tracing::info!(\n        \"Received request to get start count for repository {}\",\n        repository\n    );\n    let response = StarsResponse { count: 9000 };\n    Ok(Json(response))\n}\n```\n\nNotice that I've added a `Path(repository): Path<String>` to our handler's input - this is axum's way of accessing\ndynamic route values based on the `:repository` path route from our router. Spinning up our function (or simply waiting\nif you're still `cargo watch`ing), we should the output in the console (omitting timestamps for brevity):\n\n```shell\nINFO serverless_rust_with_shuttle: Bootstrapping function secrets\nINFO serverless_rust_with_shuttle: Secrets successfully read, building server router\nINFO serverless_rust_with_shuttle: Router successfully initialized, now listening on port 8000\n\nStarting serverless-rust-with-shuttle on http://127.0.0.1:8000\n```\n\nSending a request through again, we should see the repository name from the route path being logged as well:\n\n```shell\n# From another terminal window...\ncurl --location 'localhost:8000/my-repository/stars'\n\n# In our output console\nINFO serverless_rust_with_shuttle::handlers: Received request to get start count for repository my-repository\n```\n\nNice! Pat yourself on the back, we've written quite a bit of code and have a functioning server listening to requests.\nWe still have two things left:\n\n1. Calling the GitHub API to retrieve star counts\n2. Deploying our function to production\n\n## Deploying to shuttle\n\nBefore we finish up the core logic of our code, let's left-shift our deployment process a bit. Let's deploy our\nfunction, verifying all our I's are dotted and T's crossed. Heading over to [shuttle](https://shuttle.rs)'s website and\nsigning up, we should be met with a screen like the following:\n\n![shuttle dashboard](/images/serverless-rust-with-shuttle/shuttle_dashboard.png)\n\nI'm also going to update the name of our function to something a bit more relevant with a `Shuttle.toml` file at the\nroot of our project:\n\n```toml\nname = \"github-repository-star-counter\"\n```\n\nYou'll need to adjust the name as, sadly, I'll be taking this name for myself. Once you're authenticated, simply run the\ndeploy command `cargo shuttle deploy` and we should a bunch of internal logging from shuttle along with a successful\ndeploy message along the lines of:\n\n```shell\nThese secrets can be accessed by github-repository-star-counter\n╭─────────────────────╮\n│         Keys        │\n╞═════════════════════╡\n│ GITHUB_ACCESS_TOKEN │\n╰─────────────────────╯\n\nService Name:  github-repository-star-counter\nDeployment ID: 3339ef4c-60f0-47e6-a159-5034ac03ad4f\nStatus:        running\nLast Updated:  2023-03-29T23:09:40Z\nURI:           https://github-repository-star-counter.shuttleapp.rs\n```\n\nHeck yeah! Our function has been deployed and also picked up our key from our `Secrets.toml` file. Let's test it out\nby `curl`ing to the URI:\n\n```shell\ncurl --location https://github-repository-star-counter.shuttleapp.rs/my-repository/stars\n{\"count\":9000}\n```\n\nWe've officially got serverless Rust running in production - how cool is that?\n\nWith our initial deployment out of the way, let's finish fleshing out our function to retrieve repository stars.\n\n## Back to business\n\nLet's add the client request to GitHub. Since we'll be establishing a connection to GitHub's API servers, rather than\nspin up a new HTTP client per request, let's instantiate a single client at startup for our handlers to pull out of from\nstate. There are lots of benefits to recycling HTTP client connections throughout an application's lifetime, but that's\na bit beyond the scope of what we're doing today.\n\nLet's update our `HandlerState` to include a `Client` from the `reqwest` crate:\n\n```rust\nuse std::sync::Arc;\n\nuse reqwest::Client;\n\n#[derive(Debug)]\npub struct HandlerState {\n    pub access_token: String,\n    pub client: Client,\n}\n\nimpl HandlerState {\n    pub fn new_state(access_token: String) -> Arc<HandlerState> {\n        let client = Client::new();\n\n        Arc::new(HandlerState {\n            access_token,\n            client,\n        })\n    }\n}\n```\n\nNow that we'll have access to the HTTP client, let's test out a call to the repositories. The URL we'll be calling to\nretrieve repository information will be in the form of `https://api.github.com/repos/OWNER/REPO` where we'll hard\ncode `OWNER` to be your username for now. Let's test a call out to see what the response looks like:\n\n```shell\ncurl --request GET \\\n--url \"https://api.github.com/repos/joeymckenzie/realworld-rust-axum-sqlx\" \\\n--header \"Accept: application/vnd.github+json\" \\\n--header \"Authorization: Bearer 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\"\n{\n  \"id\": 485222387,\n  \"node_id\": \"R_kgDOHOvn8w\",\n  \"name\": \"realworld-rust-axum-sqlx\",\n  // ...a ton of other properties\n  \"stargazers_count\": 129,\n}\n```\n\nWe see in the response we get _a lot_ of other data that doesn't necessarily pertain to the number of stars on the\nrepositories. The only property we care about for now is the `stargazers_count` which represents the number of stars our\nrepository has. Let's create a response model to deserialize this response into Rust code. Back in our `handlers.rs`\nfile:\n\n```rust\n// Imports...\n\n#[derive(Serialize, Debug)]\npub struct StarsResponse {\n    count: usize,\n}\n\n#[derive(Deserialize, Debug)]\npub struct GitHubRepositoryResponse {\n    stargazers_count: usize\n}\n\npub async fn get_repository_stars(\n    State(state): State<Arc<HandlerState>>,\n    Path(repository): Path<String>,\n) -> Result<Json<StarsResponse>, ApiError> {\n    // Code...\n}\n```\n\nWe've added a `GithubRepositoryResponse` to handle pulling data out into a `struct`. Let's implement the call now in our\nhandler:\n\n```rust\npub async fn get_repository_stars(\n    State(state): State<Arc<HandlerState>>,\n    Path(repository): Path<String>,\n) -> Result<Json<StarsResponse>, ApiError> {\n    tracing::info!(\n        \"Received request to get start count for repository {}\",\n        repository\n    );\n\n    let url = format!(\"https://api.github.com/repos/joeymckenzie/{}\", repository);\n\n    let response = state\n        .client\n        .get(url)\n        .bearer_auth(state.access_token)\n        .send()\n        .await?;\n\n    let response = StarsResponse { count: 9000 };\n\n    Ok(Json(response))\n}\n```\n\nNow if try to compile, we'll get an error yelling at us stating we have no conversion between a `reqwest` error and\nsomething axum understands with our `ApiError`. Yep, you guessed it - time to do some error converting.\n\n## Propagating errors\n\nOne of the first fundamental concepts we learn in Rust is the proper handling and conversion of errors. With Rust's\nexpansive crate ecosystem and library authors offering custom errors about their internal processes in their public\nAPIs, we're bound to eventually be forced to convert external errors to something that's known within our programs.\nThere are many great articles, including [the book itself](https://doc.rust-lang.org/stable/book/), that do a much more\nfantastic job than I'll do here going over converting errors from (in our case) `reqwest` to our internal `ApiError`.\n\nIn the simplest case, we'll need to convert `From` a `reqwest::Error` to an `ApiError`:\n\n### errors.rs\n\n```rust\npub enum ApiError {\n    RequestFailed(String),\n}\n\nimpl From<reqwest::Error> for ApiError {\n    fn from(value: reqwest::Error) -> Self {\n        Self::RequestFailed(value.to_string())\n    }\n}\n```\n\nWe could do this for any number of errors that will rear their ugly heads at some point while our function is executing,\nbut for now, I'll take the easy way out with [`thiserror`](https://crates.io/crates/thiserror):\n\n```shell\ncargo add thiserror\n```\n\nNow we can trim up `errors.rs`:\n\n```rust\nuse axum::{response::IntoResponse, Json};\nuse http::StatusCode;\nuse serde::Serialize;\nuse thiserror::Error;\n\n#[derive(Serialize, Debug)]\nstruct HandlerError {\n    message: String,\n}\n\n#[derive(Error, Debug)]\npub enum ApiError {\n    #[error(\"The request to GitHub failed: {0}\")]\n    RequestFailed(#[from] reqwest::Error),\n}\n\nimpl IntoResponse for ApiError {\n    fn into_response(self) -> axum::response::Response {\n        let (status, error_message) = match self {\n            Self::RequestFailed(e) => (StatusCode::INTERNAL_SERVER_ERROR, e.to_string()),\n        };\n\n        let body = Json(HandlerError {\n            message: error_message,\n        });\n\n        (status, body).into_response()\n    }\n}\n```\n\nLeaning on `thiserror`, we can leverage the `#[error]` macro to spit out a bit of boilerplate error conversion code for\nus. For a sanity check, let's take a look at the generated code with another quick `cargo expand errors`:\n\n```rust\npub enum ApiError {\n    #[error(\"The request to GitHub failed\")]\n    RequestFailed(#[from] reqwest::Error),\n}\n\n#[allow(unused_qualifications)]\nimpl std::error::Error for ApiError {\n    fn source(&self) -> std::option::Option<&(dyn std::error::Error + 'static)> {\n        use thiserror::__private::AsDynError;\n        #[allow(deprecated)]\n        match self {\n            ApiError::RequestFailed { 0: source, .. } => {\n                std::option::Option::Some(source.as_dyn_error())\n            }\n        }\n    }\n}\n\n#[allow(unused_qualifications)]\nimpl std::fmt::Display for ApiError {\n    fn fmt(&self, __formatter: &mut std::fmt::Formatter) -> std::fmt::Result {\n        #[allow(unused_variables, deprecated, clippy::used_underscore_binding)]\n        match self {\n            ApiError::RequestFailed(_0) => {\n                __formatter.write_fmt(format_args!(\"The request to GitHub failed\"))\n            }\n        }\n    }\n}\n\n#[allow(unused_qualifications)]\nimpl std::convert::From<reqwest::Error> for ApiError {\n    #[allow(deprecated)]\n    fn from(source: reqwest::Error) -> Self {\n        ApiError::RequestFailed {\n            0: source,\n        }\n    }\n}\n\n#[automatically_derived]\nimpl ::core::fmt::Debug for ApiError {\n    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n        match self {\n            ApiError::RequestFailed(__self_0) => {\n                ::core::fmt::Formatter::debug_tuple_field1_finish(\n                    f,\n                    \"RequestFailed\",\n                    &__self_0,\n                )\n            }\n        }\n    }\n}\n```\n\nSifting through the other bits of code that are printed out to the console, we see that `thiserror` is generating some\nboilerplate to `impl` `std::error::Error` and `From<reqwest::Error>` for us, so we can avoid writing the implementations\nourselves. Thanks, [dtolnay](https://crates.io/users/dtolnay)!\n\n## So many stars\n\nOkay, back to our handler. So we're handling the result errors `reqwest` _could_ propagate back to us, now let's rip\nthe `stargazer_count` off the API response to map back to our `StarsResponse` struct. Let's throw a `.json()` after\nour `.await?` to do so:\n\n```rust\npub async fn get_repository_stars(\n    State(state): State<Arc<HandlerState>>,\n    Path(repository): Path<String>,\n) -> Result<Json<StarsResponse>, ApiError> {\n    tracing::info!(\n        \"Received request to get start count for repository {}\",\n        repository\n    );\n\n    let url = format!(\"https://api.github.com/repos/joeymckenzie/{}\", repository);\n    dbg!(url.clone());\n\n    let github_response = state\n        .client\n        .get(url)\n        .bearer_auth(&state.access_token)\n        .header(\"User-Agent\", \"github-repository-star-counter/0.0.1\")\n        .send()\n        .await?\n        .json::<GitHubRepositoryResponse>()\n        .await?;\n\n    let response = StarsResponse {\n        count: github_response.stargazers_count,\n    };\n\n    Ok(Json(response))\n}\n```\n\nWe'll attempt to deserialize the response into our `GitHubRepositoryResponse` and again `await?` the process as we need\nto read from the response buffer and propagate any errors. We're already converting between `reqwest` errors and our\ninternal `ApiError`, so we're all good there.\n\nWe also add a `User-Agent` header to let the GitHub API servers know who we are - this is arbitrary for our purposes,\nbut is important for requests coming from the browser, in Postman, etc. Let's spin up our function and send a request\nthrough:\n\n```shell\n curl -l http://localhost:8000/realworld-rust-axum-sqlx/stars\n{\"count\":129}\n```\n\nWe have a response! Now that we've got the core logic in place, let's go ahead and deploy our function\nwith `cargo shuttle deploy`. Once the deployment finishes, let's ping our function at the deployment URL:\n\n```shell\ncurl -l https://github-repository-star-counter.shuttleapp.rs/realworld-rust-axum-sqlx/stars\n{\"count\":129}\n```\n\nNice! We've got good responses coming back from a serverless function written entirely in Rust. Let's check the logs\nwith a quick `cargo shuttle logs` to trace our request:\n\n```shell\ncargo shuttle logs\n# A few other logs that aren't important for now...\n INFO serverless_rust_with_shuttle::handlers: Received request to get start count for repository realworld-rust-axum-sqlx\nDEBUG reqwest::connect: starting new connection: https://api.github.com/\nDEBUG hyper::client::connect::dns: resolving host=\"api.github.com\"\nDEBUG hyper::client::connect::http: connecting to 140.82.121.6:443\n INFO serverless_rust_with_shuttle::handlers: Response received from GitHub GitHubRepositoryResponse { stargazers_count: 129 }\nDEBUG hyper::proto::h1::io: flushed 121 bytes\n```\n\n## Wrapping up\n\nAnd that's a wrap! We've got Rust running out in the wild in the form of a serverless function and I couldn't be\nhappier. There's quite a bit of cleanup we could do, for instance handling cases where the repository doesn't exist, but\nI'll leave that as an exercise for the reader.\n\nAll the source code for this function can be on my\nGitHub [here](https://github.com/JoeyMckenzie/joey-mckenzie-tech/samples/rust/with-shuttle).\n\nUntil next, friends!\n",
      "html": "<p>In my epic quest to find any excuse to write more Rust in my daily dev life, I stumbled across an incredible platform\nthat allows developers to write serverless functions entirely in Rust.</p>\n<p>Serverless functions? Check.</p>\n<p>Written in pure Rust? Check.</p>\n<p>All managed from the comfort of the command line? <em>Dear god</em>... just take my money!</p>\n<h2>What the deployment story currently looks like</h2>\n<p>Harkening back to looking for any excuse to write more Rust, my typical deployment workflow for small projects would\nlook something like this:</p>\n<ul>\n<li>Write code (entirely bug-free, obviously)</li>\n<li>Construct a sensible Dockefile</li>\n<li>Deploy to some sort managed SaaS infrastructure platform</li>\n<li>Configure CI, testing pipelines, etc.</li>\n</ul>\n<p>While the current landscape of tools is small enough for micro-projects, I'd love to be an even lazier developer than I\ncurrently am and remove the middle to bullet points above. With shuttle, I'm able to write code and simply deploy my\nfunction - no containerization, no server configurations, simply just running a few commands and I'm able to go from\nlocal dev to production in minutes. Let's write a serverless function with shuttle that retrieves GitHub stars from one\nof our repositories!</p>\n<h2>Getting started</h2>\n<p>First, let's bootstrap our shuttle project using <a href=\"https://crates.io/crates/cargo-shuttle/\"><code>cargo-shuttle</code></a>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C98A7D\"> cargo-shuttle</span><span style=\"color:#758575DD\"> # or quickinstall if you prefer</span></span></code></pre></figure>\n<p>Quick the shuttle CLI in place, let's scaffold out an <a href=\"https://crates.io/crates/axum/\">axum</a> server to respond to our\nrequests:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> shuttle</span><span style=\"color:#C98A7D\"> init</span><span style=\"color:#C99076\"> --axum</span></span></code></pre></figure>\n<p>Follow the prompts of naming the project and selecting a folder. Taking a look at <code>main.rs</code> that shuttle generates for\nus should look something like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">routing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> hello_world</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#666666\">'</span><span style=\"color:#5DA994\">static</span><span style=\"color:#5DA994\"> str</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#C98A7D\">Hello, world!</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> shuttle_axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ShuttleAxum</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/hello</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello_world</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and our manifest file will look something along the lines of:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"toml\" data-theme=\"vitesse-dark\"><code data-language=\"toml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">package</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">serverless-rust-with-shuttle</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">version</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">0.1.0</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">edition</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">2021</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">publish</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> false</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">dependencies</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">shuttle-runtime</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">0.12.0</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">axum</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">0.6.12</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">shuttle-axum</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">0.12.0</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">tokio</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">1.26.0</span><span style=\"color:#C98A7D99\">\"</span></span></code></pre></figure>\n<p>A few key notes here:</p>\n<ul>\n<li>Shuttle bootstraps a few dependencies for us in <code>shuttle-runtime</code> and <code>shuttle-axum</code> (0.12.0 at the time of this\nwriting)</li>\n<li>These crates allow us to invoke our function as an axum-specific serverless application as we see in our <code>main.rs</code>\nfile</li>\n</ul>\n<p>But what's this <code>#[shuttle_runtime::main]</code> macro on our <code>main</code> function? Let's take a look with a\nquick <a href=\"https://crates.io/crates/cargo-expand/\"><code>cargo expand</code></a> if you have it installed:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#</span><span style=\"color:#DBD7CAEE\">!</span><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">feature</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">prelude_import</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">prelude_import</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">prelude</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">rust_2021</span><span style=\"color:#CB7676\">::*</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">macro_use</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">extern</span><span style=\"color:#4D9375\"> crate</span><span style=\"color:#DBD7CAEE\"> std</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">routing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> hello_world</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#666666\">'</span><span style=\"color:#5DA994\">static</span><span style=\"color:#5DA994\"> str</span><span style=\"color:#666666\"> {</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">Hello, world!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> async</span><span style=\"color:#666666\"> {</span><span style=\"color:#80A665\"> shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">start</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">loader</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#4D9375\">await</span><span style=\"color:#666666\">;</span><span style=\"color:#666666\"> };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">    #[</span><span style=\"color:#DBD7CAEE\">allow</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">clippy </span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\"> expect_used</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> clippy </span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\"> diverging_sub_expression</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        return</span><span style=\"color:#80A665\"> tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Builder</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new_multi_thread</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">enable_all</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">build</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Failed building the Runtime</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">block_on</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">body</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> loader</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">mut</span><span style=\"color:#BD976A\"> _factory</span><span style=\"color:#CB7676\">:</span><span style=\"color:#80A665\"> shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ProvisionerFactory</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    logger</span><span style=\"color:#CB7676\">:</span><span style=\"color:#80A665\"> shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Logger</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> shuttle_axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ShuttleAxum</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    use</span><span style=\"color:#80A665\"> shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Context</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    use</span><span style=\"color:#80A665\"> shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">prelude</span><span style=\"color:#CB7676\">::*</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> filter_layer</span><span style=\"color:#666666\"> =</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">EnvFilter</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">try_from_default_env</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">or_else</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">_</span><span style=\"color:#CB7676\">|</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                    shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">EnvFilter</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">try_new</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">INFO</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">))</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">registry</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">with</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">filter_layer</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">with</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">logger</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">init</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    axum</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> shuttle_axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ShuttleAxum</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/hello</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello_world</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Whoa! If we look closely, we see a familiar bit of generated code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">allow</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">clippy </span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\"> expect_used</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> clippy </span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\"> diverging_sub_expression</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#80A665\"> tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Builder</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new_multi_thread</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">enable_all</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">build</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Failed building the Runtime</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">block_on</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">body</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Shuttle's <code>#[shuttle_runtime::main]</code> macro generates the <em>same code</em> a typical <code>#[tokio::main]</code> macro generates along\nwith a few extra bits (like including the defacto logging crate in <a href=\"https://crates.io/crates/tracing/\"><code>tracing</code></a> for\nlogging to the server's console through <a href=\"https://crates.io/crates/tracing-subscriber\"><code>tracing-subscriber</code></a>). No magic\nhere, just a bit of generated boilerplate for us to hit the ground running.</p>\n<p>A quick note, shuttle recently (at the time of this writing) added a dependency\non <a href=\"https://github.com/protocolbuffers/protobuf\">protobuf</a> to facilitate some of their internal infrastructure. If\nyou're missing <code>protoc</code> as a dependency on your machine, take a look at my\nblog's <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-tech/blob/main/README.md#running-shuttle-functions-locally\">README</a>\nfor some quick instructions on how to get up and running with the package.</p>\n<h2>Managing secrets</h2>\n<p>So we've set out to build a serverless function that will retrieve stars from various repositories in GitHub, which\nimplies we'll need to interact with the GitHub API. To use their API, we'll need a key to authenticate our requests but\nshouldn't rely on clients, nor expose our secret keys to clients. We'll need <em>some way</em> to inject secrets at\nstartup/runtime that'll house our API keys only known to the function so we can make valid requests - luckily shuttle\nhas us covered with <a href=\"https://docs.shuttle.rs/resources/shuttle-secrets\">shuttle secrets</a>.</p>\n<p>Luckily, it's rather straightforward to secrets into our serverless function by adding a <code>Secrets.toml</code> file, shuttle's\nversion of a <code>.env</code> file, and injecting them on startup with\nthe <a href=\"https://crates.io/crates/shuttle-secrets\"><code>shuttle-secrets</code></a> crate. Let's add that to our cargo dependencies:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> shuttle-secrets</span></span></code></pre></figure>\n<p>and in our <code>main</code> function, let's add the secrets store as an argument (don't forget to add\na <code>use shuttle_secrets::SecretStore;</code> to your imports):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    #</span><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">shuttle_secrets</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Secrets</span><span style=\"color:#666666\">]</span><span style=\"color:#BD976A\"> secret_store</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> SecretStore</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> shuttle_axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ShuttleAxum</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">  // other code...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>While we're at it, we'll need a valid GitHub access token - for creating personal access tokens, check out\nthe <a href=\"https://docs.github.com/en/apps/creating-github-apps/creating-github-apps/about-apps#personal-access-tokens\">docs</a>\nand make sure to add the <code>repo:read</code> scope so our authenticated requests have permission to retrieve repository data.</p>\n<p>Once you've got your token (save it off as you'll only be able to see it once on the UI), let's add a <code>Secrets.toml</code>\nfile at the root of our project with the token as a key:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"toml\" data-theme=\"vitesse-dark\"><code data-language=\"toml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">ghp...</span><span style=\"color:#C98A7D99\">\"</span></span></code></pre></figure>\n<p>Now that we've got secrets in place, let's do a sanity check to make sure we have access to our token value once the\nfunction is running. Let's update our <code>main</code> function to spit out the token's value at startup:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">#</span><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">shuttle_secrets</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Secrets</span><span style=\"color:#666666\">]</span><span style=\"color:#BD976A\"> secret_store</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> SecretStore</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> shuttle_axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ShuttleAxum</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> token</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> secret_store</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">No access token was provided.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    dbg!</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">token</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/hello</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello_world</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We'll simply just <code>.expect()</code> the token to exist as it's required for us to operate. Using shuttle's CLI, let's spin\nthis function up locally:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> shuttle</span><span style=\"color:#C98A7D\"> run</span></span></code></pre></figure>\n<p>and after our project is compiled and run, we should see the token's value in our terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">Finished</span><span style=\"color:#C98A7D\"> dev</span><span style=\"color:#DBD7CAEE\"> [unoptimized </span><span style=\"color:#C98A7D\">+</span><span style=\"color:#C98A7D\"> debuginfo]</span><span style=\"color:#C98A7D\"> target</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">s</span><span style=\"color:#666666\">)</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#4C9A91\"> 30.18</span><span style=\"color:#C98A7D\">s</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">[</span><span style=\"color:#DBD7CAEE\">samples/serverless-rust-with-shuttle/src/main.rs:14</span><span style=\"color:#666666\">]</span><span style=\"color:#DBD7CAEE\"> token = </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">ghp...</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Starting</span><span style=\"color:#C98A7D\"> serverless-rust-with-shuttle</span><span style=\"color:#C98A7D\"> on</span><span style=\"color:#C98A7D\"> http://127.0.0.1:8000</span></span></code></pre></figure>\n<p>Sweet! We're 90% ready to start writing the <em>actual</em> fun code. Since we'll need to call an external API via HTTP, let's\nadd <a href=\"https://crates.io/crates/reqwest\"><code>reqwest</code></a> as a dependency to make our lives easier (with the <code>json</code> feature):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> reqwest</span><span style=\"color:#C99076\"> --features</span><span style=\"color:#C98A7D\"> json</span></span></code></pre></figure>\n<p>Okay... <em>now</em> we're ready to get the ball rolling. Let's update the existing route with a path parameter in the form of\nthe repository name along with scaffolding out a handler in our <code>main</code> function:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">routing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> shuttle_secrets</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SecretStore</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_repository_stars</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#666666\">'</span><span style=\"color:#5DA994\">static</span><span style=\"color:#5DA994\"> str</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#C98A7D\">Hello, world!</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">#</span><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">shuttle_secrets</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Secrets</span><span style=\"color:#666666\">]</span><span style=\"color:#BD976A\"> secret_store</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> SecretStore</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> shuttle_axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ShuttleAxum</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> token</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> secret_store</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">No access token was provided.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/:repository/stars</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">get_repository_stars</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and with our server running, let's send through a request:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">curl</span><span style=\"color:#C99076\"> --location</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">localhost:8000/my-repository/stars</span><span style=\"color:#C98A7D99\">'</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Hello,</span><span style=\"color:#C98A7D\"> world!</span></span></code></pre></figure>\n<p>Nice, now we're getting somewhere. Let's add <a href=\"https://crates.io/crates/cargo-watch\"><code>cargo-watch</code></a> to have our server\nrestart anytime we make changes so we're not bothered to stop/start manually ourselves:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C98A7D\"> cargo-watch</span><span style=\"color:#758575DD\"> # or cargo binstall</span></span></code></pre></figure>\n<p>and running our server again:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> watch</span><span style=\"color:#C99076\"> -x</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">shuttle run</span><span style=\"color:#C98A7D99\">'</span></span></code></pre></figure>\n<p>Now any change to our source code will trigger an automatic restart of our server. Let's update our function handler to\nreturn some JSON in a sane fashion so we can start stubbing out what the request flow will look like. Back in <code>main.rs</code>\nlet's update our handler as well as add a response JSON model:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> StarsResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> usize</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_repository_stars</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StarsResponse</span><span style=\"color:#666666\">>,</span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#666666\">'</span><span style=\"color:#5DA994\">static</span><span style=\"color:#5DA994\"> str</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> StarsResponse</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4C9A91\"> 9000</span><span style=\"color:#666666\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Ignoring our errors for just a bit, we'll need to bring in <a href=\"https://crates.io/crates/serde\"><code>serde</code></a> so we can serialize\nour responses to JSON with the <code>derive</code> flag so we can use it on our struct:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> serde</span><span style=\"color:#C99076\"> --features</span><span style=\"color:#C98A7D\"> derive</span></span></code></pre></figure>\n<p>Compiling and running our server again, let's send another request through:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">curl</span><span style=\"color:#C99076\"> --location</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">localhost:8000/my-repository/stars</span><span style=\"color:#C98A7D99\">'</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">\"count\"</span><span style=\"color:#80A665\">:9000}</span></span></code></pre></figure>\n<p>Now we're getting somewhere. We don't want to <em>just</em> return errors in the form <code>&#x26;'static str</code>s, so let's address that by\ndefining our own error implementation that plays nicely with axum:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> HandlerError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    message</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">enum</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> into_response</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Response</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        let</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">status</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> error_message</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> match</span><span style=\"color:#C99076\"> self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">                StatusCode</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">INTERNAL_SERVER_ERROR</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                \"</span><span style=\"color:#C98A7D\">Something very, very bad has happened... :(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_string</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        let</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> Json</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">HandlerError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> error_message</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        (</span><span style=\"color:#BD976A\">status</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_response</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_repository_stars</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StarsResponse</span><span style=\"color:#666666\">>,</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> StarsResponse</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4C9A91\"> 9000</span><span style=\"color:#666666\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Ignoring <code>clippy</code> errors for a moment, let's quickly run through our new additions:</p>\n<ul>\n<li>We've added a <code>HandlerError</code> struct to give us the ability to transform errors into user-friendly JSON responses with\na <code>message</code></li>\n<li>We've <code>impl</code>'d <code>InotoResponse</code> for our new <code>ApiError</code> type that we'll use to coerce errors that happen during the\nrequest into something axum understands how to transform</li>\n<li>We've updated our handler to return an <code>ApiError</code> in our <code>Result</code> rather than a static string so we can again help our\nusers out with information about why the request failed</li>\n</ul>\n<p>We'll get around to adding some branches to our <code>ApiError</code> enum eventually, but for now to get our code to compile,\nlet's add the <a href=\"https://crates.io/crates/http\"><code>http</code></a> crate so we can lean on the <code>StatusCode</code> type to map internal\nhandler errors to sensible HTTP status codes.</p>\n<blockquote>\n<p>Handling errors with axum deserves it's on blog post, so I'll gloss over a few of the details for now so we can focus\non just getting our function up and running.</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> http</span></span></code></pre></figure>\n<p>Now running our code and making another request, we should still see the same message response as the previous request\nwe made before we updated our handler. Our <code>main.rs</code> file is getting rather large, so let's split some things out for\norganizational purposes. Let's add two additional files in <code>errors.rs</code> and <code>handlers.rs</code> to house our error\nimplementation and request handlers, respectively</p>\n<h3>errors.rs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">IntoResponse</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Json</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> http</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">StatusCode</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> serde</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> HandlerError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    message</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> enum</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> into_response</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Response</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        let</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">status</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> error_message</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> match</span><span style=\"color:#C99076\"> self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            _</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">                StatusCode</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">INTERNAL_SERVER_ERROR</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                \"</span><span style=\"color:#C98A7D\">Something very, very bad has happened... :(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_string</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        let</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> Json</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">HandlerError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> error_message</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        (</span><span style=\"color:#BD976A\">status</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_response</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<h3>handlers.rs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> serde</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#4D9375\"> crate</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">errors</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ApiError</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> struct</span><span style=\"color:#5DA994\"> StarsResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> usize</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#4D9375\"> async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_repository_stars</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StarsResponse</span><span style=\"color:#666666\">>,</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> StarsResponse</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4C9A91\"> 9000</span><span style=\"color:#666666\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>After cleaning up a few import errors and peppering in a few <code>pub</code>s for visibility, our <code>main.rs</code> file should now look\nlike this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">mod</span><span style=\"color:#80A665\"> errors</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">mod</span><span style=\"color:#80A665\"> handlers</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">routing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> handlers</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get_repository_stars</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> shuttle_secrets</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SecretStore</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">#</span><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">shuttle_secrets</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Secrets</span><span style=\"color:#666666\">]</span><span style=\"color:#BD976A\"> secret_store</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> SecretStore</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> shuttle_axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ShuttleAxum</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> token</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> secret_store</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">No access token was provided.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/:repository/stars</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">get_repository_stars</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Nice and lean! Next, we need to <em>somehow</em> get our token into our <code>get_repository_stars</code> handler in a sane fashion, and\nit would be nice to inject it as a dependency as it represents part of our serverless function's state. Let's lean on\naxum's <a href=\"https://docs.rs/axum/latest/axum/#sharing-state-with-handlers\">state management</a> mechanisms to do so with\nthe <code>.with_state()</code> router extensions so we can inject the token secret into the handler at request time.</p>\n<p>There are lots of ways to facilitate handling state in axum, so let's take the simplest approach by wrapping our token\nin a <code>struct</code> that'll we'll inject into our handlers. To keep things clean, let's add a <code>state.rs</code> file and the\nnecessary bits to get a bit of thread-safe state working:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">sync</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> struct</span><span style=\"color:#5DA994\"> HandlerState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> access_token</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#5DA994\"> HandlerState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> new_state</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">access_token</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HandlerState</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Arc</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">HandlerState</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> access_token</span><span style=\"color:#666666\"> })</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<p>and back in our router in <code>main.rs</code>, let's add it as a state extension:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">#</span><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">shuttle_secrets</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Secrets</span><span style=\"color:#666666\">]</span><span style=\"color:#BD976A\"> secret_store</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> SecretStore</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> shuttle_axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ShuttleAxum</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> token</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> secret_store</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">No access token was provided.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/:repository/stars</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">get_repository_stars</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_state</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">HandlerState</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new_state</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">token</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Let's do one more sanity check to make sure we're still able to access our token within our request handler. Back in\nour <code>get_repository_stars handler</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#4D9375\"> async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_repository_stars</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HandlerState</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StarsResponse</span><span style=\"color:#666666\">>,</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    dbg!</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">state</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">access_token</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> StarsResponse</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4C9A91\"> 9000</span><span style=\"color:#666666\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>and thanks to <code>cargo-watch</code>, our server should be back up and running. Sending through yet another request, we should\nsee our server output something like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x26;</span><span style=\"color:#80A665\">state.access_token</span><span style=\"color:#C98A7D\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">ghp...</span><span style=\"color:#C98A7D99\">\"</span></span></code></pre></figure>\n<p>Nice! We're propagating down our state to our handler leaning on <code>Arc</code> to help us facilitate sharing our <code>HandlerState</code>\nacross request threads and we're finally in a spot to start calling out to the GitHub API.</p>\n<p>Before we do so, let's take a look at what we've got so far:</p>\n<ul>\n<li>We've got a serverless function spun with axum bootstrapped with shuttle</li>\n<li>We're handling errors according to axum convention</li>\n<li>We've separated out our bits of code into logically grouped units</li>\n<li>We're propagating top-level application state safely down to request handlers</li>\n</ul>\n<p>Doesn't seem like much, but we've accomplished quite a bit! Let's go back and add a bit of <code>tracing</code> so we can see\ninside the mind of our function as it processes requests. Recall earlier in the expanded macro just above <code>main</code> that\nshuttle provides we have our application bootstrapped with <code>tracing</code> behind the scenes ready to go to start logging.\nLet's add some trace logging in a few places so we can pretty-print out to the console. First, let's add the <code>tracing</code>\ncrate:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tracing</span></span></code></pre></figure>\n<p>Next, let's update our <code>main</code> function to include a bit of startup-style logging:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">shuttle_runtime</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">#</span><span style=\"color:#666666\">[</span><span style=\"color:#80A665\">shuttle_secrets</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Secrets</span><span style=\"color:#666666\">]</span><span style=\"color:#BD976A\"> secret_store</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> SecretStore</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> shuttle_axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ShuttleAxum</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Bootstrapping function secrets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> token</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> secret_store</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">GITHUB_ACCESS_TOKEN</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">expect</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">No access token was provided.</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Secrets successfully read, building server router</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/:repository/stars</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">get_repository_stars</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_state</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">HandlerState</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new_state</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">token</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Router successfully initialized, now listening on port 8000</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Then, let's add some logging to our request handler in <code>handlers.rs</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#4D9375\"> async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_repository_stars</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HandlerState</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Path</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">repository</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Path</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">String</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StarsResponse</span><span style=\"color:#666666\">>,</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info!</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">Received request to get start count for repository </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        repository</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> StarsResponse</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4C9A91\"> 9000</span><span style=\"color:#666666\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Notice that I've added a <code>Path(repository): Path&#x3C;String></code> to our handler's input - this is axum's way of accessing\ndynamic route values based on the <code>:repository</code> path route from our router. Spinning up our function (or simply waiting\nif you're still <code>cargo watch</code>ing), we should the output in the console (omitting timestamps for brevity):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">INFO</span><span style=\"color:#C98A7D\"> serverless_rust_with_shuttle:</span><span style=\"color:#C98A7D\"> Bootstrapping</span><span style=\"color:#C98A7D\"> function</span><span style=\"color:#C98A7D\"> secrets</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">INFO</span><span style=\"color:#C98A7D\"> serverless_rust_with_shuttle:</span><span style=\"color:#C98A7D\"> Secrets</span><span style=\"color:#C98A7D\"> successfully</span><span style=\"color:#C98A7D\"> read,</span><span style=\"color:#C98A7D\"> building</span><span style=\"color:#C98A7D\"> server</span><span style=\"color:#C98A7D\"> router</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">INFO</span><span style=\"color:#C98A7D\"> serverless_rust_with_shuttle:</span><span style=\"color:#C98A7D\"> Router</span><span style=\"color:#C98A7D\"> successfully</span><span style=\"color:#C98A7D\"> initialized,</span><span style=\"color:#C98A7D\"> now</span><span style=\"color:#C98A7D\"> listening</span><span style=\"color:#C98A7D\"> on</span><span style=\"color:#C98A7D\"> port</span><span style=\"color:#4C9A91\"> 8000</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Starting</span><span style=\"color:#C98A7D\"> serverless-rust-with-shuttle</span><span style=\"color:#C98A7D\"> on</span><span style=\"color:#C98A7D\"> http://127.0.0.1:8000</span></span></code></pre></figure>\n<p>Sending a request through again, we should see the repository name from the route path being logged as well:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\"># From another terminal window...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">curl</span><span style=\"color:#C99076\"> --location</span><span style=\"color:#C98A7D99\"> '</span><span style=\"color:#C98A7D\">localhost:8000/my-repository/stars</span><span style=\"color:#C98A7D99\">'</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># In our output console</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">INFO</span><span style=\"color:#C98A7D\"> serverless_rust_with_shuttle::handlers:</span><span style=\"color:#C98A7D\"> Received</span><span style=\"color:#C98A7D\"> request</span><span style=\"color:#C98A7D\"> to</span><span style=\"color:#C98A7D\"> get</span><span style=\"color:#C98A7D\"> start</span><span style=\"color:#C98A7D\"> count</span><span style=\"color:#C98A7D\"> for</span><span style=\"color:#C98A7D\"> repository</span><span style=\"color:#C98A7D\"> my-repository</span></span></code></pre></figure>\n<p>Nice! Pat yourself on the back, we've written quite a bit of code and have a functioning server listening to requests.\nWe still have two things left:</p>\n<ol>\n<li>Calling the GitHub API to retrieve star counts</li>\n<li>Deploying our function to production</li>\n</ol>\n<h2>Deploying to shuttle</h2>\n<p>Before we finish up the core logic of our code, let's left-shift our deployment process a bit. Let's deploy our\nfunction, verifying all our I's are dotted and T's crossed. Heading over to <a href=\"https://shuttle.rs\">shuttle</a>'s website and\nsigning up, we should be met with a screen like the following:</p>\n<p><img src=\"/images/serverless-rust-with-shuttle/shuttle_dashboard.png\" alt=\"shuttle dashboard\"></p>\n<p>I'm also going to update the name of our function to something a bit more relevant with a <code>Shuttle.toml</code> file at the\nroot of our project:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"toml\" data-theme=\"vitesse-dark\"><code data-language=\"toml\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#BD976A\">name</span><span style=\"color:#666666\"> =</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">github-repository-star-counter</span><span style=\"color:#C98A7D99\">\"</span></span></code></pre></figure>\n<p>You'll need to adjust the name as, sadly, I'll be taking this name for myself. Once you're authenticated, simply run the\ndeploy command <code>cargo shuttle deploy</code> and we should a bunch of internal logging from shuttle along with a successful\ndeploy message along the lines of:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">These</span><span style=\"color:#C98A7D\"> secrets</span><span style=\"color:#C98A7D\"> can</span><span style=\"color:#C98A7D\"> be</span><span style=\"color:#C98A7D\"> accessed</span><span style=\"color:#C98A7D\"> by</span><span style=\"color:#C98A7D\"> github-repository-star-counter</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">╭─────────────────────╮</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">│</span><span style=\"color:#C98A7D\">         Keys</span><span style=\"color:#C98A7D\">        │</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">╞═════════════════════╡</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">│</span><span style=\"color:#C98A7D\"> GITHUB_ACCESS_TOKEN</span><span style=\"color:#C98A7D\"> │</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">╰─────────────────────╯</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Service</span><span style=\"color:#C98A7D\"> Name:</span><span style=\"color:#C98A7D\">  github-repository-star-counter</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Deployment</span><span style=\"color:#C98A7D\"> ID:</span><span style=\"color:#4C9A91\"> 3339</span><span style=\"color:#C98A7D\">ef4c-60f0-47e6-a159-5034ac03ad4f</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Status:</span><span style=\"color:#C98A7D\">        running</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Last</span><span style=\"color:#C98A7D\"> Updated:</span><span style=\"color:#4C9A91\">  2023</span><span style=\"color:#C98A7D\">-03-29T23:09:40Z</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">URI:</span><span style=\"color:#C98A7D\">           https://github-repository-star-counter.shuttleapp.rs</span></span></code></pre></figure>\n<p>Heck yeah! Our function has been deployed and also picked up our key from our <code>Secrets.toml</code> file. Let's test it out\nby <code>curl</code>ing to the URI:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">curl</span><span style=\"color:#C99076\"> --location</span><span style=\"color:#C98A7D\"> https://github-repository-star-counter.shuttleapp.rs/my-repository/stars</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">\"count\"</span><span style=\"color:#80A665\">:9000}</span></span></code></pre></figure>\n<p>We've officially got serverless Rust running in production - how cool is that?</p>\n<p>With our initial deployment out of the way, let's finish fleshing out our function to retrieve repository stars.</p>\n<h2>Back to business</h2>\n<p>Let's add the client request to GitHub. Since we'll be establishing a connection to GitHub's API servers, rather than\nspin up a new HTTP client per request, let's instantiate a single client at startup for our handlers to pull out of from\nstate. There are lots of benefits to recycling HTTP client connections throughout an application's lifetime, but that's\na bit beyond the scope of what we're doing today.</p>\n<p>Let's update our <code>HandlerState</code> to include a <code>Client</code> from the <code>reqwest</code> crate:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">sync</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> reqwest</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Client</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> struct</span><span style=\"color:#5DA994\"> HandlerState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> access_token</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#BD976A\"> client</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Client</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#5DA994\"> HandlerState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    pub</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> new_state</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">access_token</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HandlerState</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        let</span><span style=\"color:#BD976A\"> client</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Client</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        Arc</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">HandlerState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            access_token</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            client</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        })</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now that we'll have access to the HTTP client, let's test out a call to the repositories. The URL we'll be calling to\nretrieve repository information will be in the form of <code>https://api.github.com/repos/OWNER/REPO</code> where we'll hard\ncode <code>OWNER</code> to be your username for now. Let's test a call out to see what the response looks like:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">curl</span><span style=\"color:#C99076\"> --request</span><span style=\"color:#C98A7D\"> GET</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">--url </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://api.github.com/repos/joeymckenzie/realworld-rust-axum-sqlx</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">--header </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Accept: application/vnd.github+json</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C99076\"> \\</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">--header </span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Authorization: Bearer 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</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"id\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#4C9A91\"> 485222387</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"node_id\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">R_kgDOHOvn8w</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"name\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">realworld-rust-axum-sqlx</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  //</span><span style=\"color:#C98A7D\"> ...a</span><span style=\"color:#C98A7D\"> ton</span><span style=\"color:#C98A7D\"> of</span><span style=\"color:#C98A7D\"> other</span><span style=\"color:#C98A7D\"> properties</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"stargazers_count\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#4C9A91\"> 129</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We see in the response we get <em>a lot</em> of other data that doesn't necessarily pertain to the number of stars on the\nrepositories. The only property we care about for now is the <code>stargazers_count</code> which represents the number of stars our\nrepository has. Let's create a response model to deserialize this response into Rust code. Back in our <code>handlers.rs</code>\nfile:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// Imports...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> struct</span><span style=\"color:#5DA994\"> StarsResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> usize</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Deserialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> struct</span><span style=\"color:#5DA994\"> GitHubRepositoryResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    stargazers_count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> usize</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#4D9375\"> async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_repository_stars</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HandlerState</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Path</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">repository</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Path</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">String</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StarsResponse</span><span style=\"color:#666666\">>,</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Code...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We've added a <code>GithubRepositoryResponse</code> to handle pulling data out into a <code>struct</code>. Let's implement the call now in our\nhandler:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#4D9375\"> async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_repository_stars</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HandlerState</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Path</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">repository</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Path</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">String</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StarsResponse</span><span style=\"color:#666666\">>,</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info!</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">Received request to get start count for repository </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        repository</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> url</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://api.github.com/repos/joeymckenzie/</span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> repository</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#DBD7CAEE\">client</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">url</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">bearer_auth</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">access_token</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">send</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> StarsResponse</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#4C9A91\"> 9000</span><span style=\"color:#666666\"> };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now if try to compile, we'll get an error yelling at us stating we have no conversion between a <code>reqwest</code> error and\nsomething axum understands with our <code>ApiError</code>. Yep, you guessed it - time to do some error converting.</p>\n<h2>Propagating errors</h2>\n<p>One of the first fundamental concepts we learn in Rust is the proper handling and conversion of errors. With Rust's\nexpansive crate ecosystem and library authors offering custom errors about their internal processes in their public\nAPIs, we're bound to eventually be forced to convert external errors to something that's known within our programs.\nThere are many great articles, including <a href=\"https://doc.rust-lang.org/stable/book/\">the book itself</a>, that do a much more\nfantastic job than I'll do here going over converting errors from (in our case) <code>reqwest</code> to our internal <code>ApiError</code>.</p>\n<p>In the simplest case, we'll need to convert <code>From</code> a <code>reqwest::Error</code> to an <code>ApiError</code>:</p>\n<h3>errors.rs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> enum</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    RequestFailed</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">String</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#5DA994\"> From</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#BD976A\">reqwest</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">></span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> from</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">value</span><span style=\"color:#CB7676\">:</span><span style=\"color:#80A665\"> reqwest</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#C99076\"> Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">        Self</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">RequestFailed</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">value</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_string</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We could do this for any number of errors that will rear their ugly heads at some point while our function is executing,\nbut for now, I'll take the easy way out with <a href=\"https://crates.io/crates/thiserror\"><code>thiserror</code></a>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> thiserror</span></span></code></pre></figure>\n<p>Now we can trim up <code>errors.rs</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">IntoResponse</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Json</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> http</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">StatusCode</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> serde</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> thiserror</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Serialize</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> HandlerError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    message</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> String</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Debug</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> enum</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    #[</span><span style=\"color:#DBD7CAEE\">error</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">The request to GitHub failed: </span><span style=\"color:#666666\">{</span><span style=\"color:#C98A7D\">0</span><span style=\"color:#666666\">}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    RequestFailed</span><span style=\"color:#666666\">(#[</span><span style=\"color:#DBD7CAEE\">from</span><span style=\"color:#666666\">]</span><span style=\"color:#80A665\"> reqwest</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> into_response</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Response</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        let</span><span style=\"color:#666666\"> (</span><span style=\"color:#BD976A\">status</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> error_message</span><span style=\"color:#666666\">)</span><span style=\"color:#666666\"> =</span><span style=\"color:#4D9375\"> match</span><span style=\"color:#C99076\"> self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C99076\">            Self</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">RequestFailed</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">e</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> (</span><span style=\"color:#5DA994\">StatusCode</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">INTERNAL_SERVER_ERROR</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> e</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_string</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        let</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> Json</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">HandlerError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            message</span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> error_message</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">        (</span><span style=\"color:#BD976A\">status</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> body</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_response</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Leaning on <code>thiserror</code>, we can leverage the <code>#[error]</code> macro to spit out a bit of boilerplate error conversion code for\nus. For a sanity check, let's take a look at the generated code with another quick <code>cargo expand errors</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> enum</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    #[</span><span style=\"color:#DBD7CAEE\">error</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">The request to GitHub failed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    RequestFailed</span><span style=\"color:#666666\">(#[</span><span style=\"color:#DBD7CAEE\">from</span><span style=\"color:#666666\">]</span><span style=\"color:#80A665\"> reqwest</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">allow</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">unused_qualifications</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">error</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> source</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">option</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Option</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#666666\">(</span><span style=\"color:#4D9375\">dyn</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#BD976A\">error</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#CB7676\"> +</span><span style=\"color:#666666\"> '</span><span style=\"color:#5DA994\">static</span><span style=\"color:#666666\">)></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        use</span><span style=\"color:#80A665\"> thiserror</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">__private</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">AsDynError</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        #[</span><span style=\"color:#DBD7CAEE\">allow</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">deprecated</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        match</span><span style=\"color:#C99076\"> self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            ApiError</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">RequestFailed</span><span style=\"color:#666666\"> {</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> source</span><span style=\"color:#666666\">,</span><span style=\"color:#CB7676\"> ..</span><span style=\"color:#666666\"> }</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">option</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Option</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Some</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">source</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">as_dyn_error</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">allow</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">unused_qualifications</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Display</span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> fmt</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> __formatter</span><span style=\"color:#CB7676\">:</span><span style=\"color:#CB7676\"> &#x26;mut</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Formatter</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        #[</span><span style=\"color:#DBD7CAEE\">allow</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">unused_variables</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> deprecated</span><span style=\"color:#666666\">,</span><span style=\"color:#DBD7CAEE\"> clippy</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">used_underscore_binding</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        match</span><span style=\"color:#C99076\"> self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            ApiError</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">RequestFailed</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">_0</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                __formatter</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">write_fmt</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">format_args!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">The request to GitHub failed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">allow</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">unused_qualifications</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">convert</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">From</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#BD976A\">reqwest</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">></span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    #[</span><span style=\"color:#DBD7CAEE\">allow</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">deprecated</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> from</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">source</span><span style=\"color:#CB7676\">:</span><span style=\"color:#80A665\"> reqwest</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Error</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#C99076\"> Self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">        ApiError</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">RequestFailed</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4C9A91\">            0</span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> source</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">automatically_derived</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#CB7676\"> ::</span><span style=\"color:#80A665\">core</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Debug</span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> fmt</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> f</span><span style=\"color:#CB7676\">:</span><span style=\"color:#CB7676\"> &#x26;mut</span><span style=\"color:#CB7676\"> ::</span><span style=\"color:#80A665\">core</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Formatter</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#CB7676\"> ::</span><span style=\"color:#80A665\">core</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        match</span><span style=\"color:#C99076\"> self</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            ApiError</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">RequestFailed</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">__self_0</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                ::</span><span style=\"color:#80A665\">core</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Formatter</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">debug_tuple_field1_finish</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                    f</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">                    \"</span><span style=\"color:#C98A7D\">RequestFailed</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                    &#x26;</span><span style=\"color:#BD976A\">__self_0</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">                )</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Sifting through the other bits of code that are printed out to the console, we see that <code>thiserror</code> is generating some\nboilerplate to <code>impl</code> <code>std::error::Error</code> and <code>From&#x3C;reqwest::Error></code> for us, so we can avoid writing the implementations\nourselves. Thanks, <a href=\"https://crates.io/users/dtolnay\">dtolnay</a>!</p>\n<h2>So many stars</h2>\n<p>Okay, back to our handler. So we're handling the result errors <code>reqwest</code> <em>could</em> propagate back to us, now let's rip\nthe <code>stargazer_count</code> off the API response to map back to our <code>StarsResponse</code> struct. Let's throw a <code>.json()</code> after\nour <code>.await?</code> to do so:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#4D9375\"> async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> get_repository_stars</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">HandlerState</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Path</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">repository</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Path</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">String</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Result</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Json</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">StarsResponse</span><span style=\"color:#666666\">>,</span><span style=\"color:#5DA994\"> ApiError</span><span style=\"color:#666666\">></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">info!</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">Received request to get start count for repository </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        repository</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> url</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://api.github.com/repos/joeymckenzie/</span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> repository</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    dbg!</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">url</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">clone</span><span style=\"color:#666666\">());</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> github_response</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#DBD7CAEE\">client</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">url</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">bearer_auth</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">state</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">access_token</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">header</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">User-Agent</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">github-repository-star-counter/0.0.1</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">send</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span><span style=\"color:#CB7676\">?</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">json</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">GitHubRepositoryResponse</span><span style=\"color:#666666\">>()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> response</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> StarsResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        count</span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> github_response</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">stargazers_count</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">Json</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">response</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We'll attempt to deserialize the response into our <code>GitHubRepositoryResponse</code> and again <code>await?</code> the process as we need\nto read from the response buffer and propagate any errors. We're already converting between <code>reqwest</code> errors and our\ninternal <code>ApiError</code>, so we're all good there.</p>\n<p>We also add a <code>User-Agent</code> header to let the GitHub API servers know who we are - this is arbitrary for our purposes,\nbut is important for requests coming from the browser, in Postman, etc. Let's spin up our function and send a request\nthrough:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\"> curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D\"> http://localhost:8000/realworld-rust-axum-sqlx/stars</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">\"count\"</span><span style=\"color:#80A665\">:129}</span></span></code></pre></figure>\n<p>We have a response! Now that we've got the core logic in place, let's go ahead and deploy our function\nwith <code>cargo shuttle deploy</code>. Once the deployment finishes, let's ping our function at the deployment URL:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D\"> https://github-repository-star-counter.shuttleapp.rs/realworld-rust-axum-sqlx/stars</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">\"count\"</span><span style=\"color:#80A665\">:129}</span></span></code></pre></figure>\n<p>Nice! We've got good responses coming back from a serverless function written entirely in Rust. Let's check the logs\nwith a quick <code>cargo shuttle logs</code> to trace our request:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">cargo</span><span style=\"color:#C98A7D\"> shuttle</span><span style=\"color:#C98A7D\"> logs</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># A few other logs that aren't important for now...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> INFO</span><span style=\"color:#C98A7D\"> serverless_rust_with_shuttle::handlers:</span><span style=\"color:#C98A7D\"> Received</span><span style=\"color:#C98A7D\"> request</span><span style=\"color:#C98A7D\"> to</span><span style=\"color:#C98A7D\"> get</span><span style=\"color:#C98A7D\"> start</span><span style=\"color:#C98A7D\"> count</span><span style=\"color:#C98A7D\"> for</span><span style=\"color:#C98A7D\"> repository</span><span style=\"color:#C98A7D\"> realworld-rust-axum-sqlx</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">DEBUG</span><span style=\"color:#C98A7D\"> reqwest::connect:</span><span style=\"color:#C98A7D\"> starting</span><span style=\"color:#C98A7D\"> new</span><span style=\"color:#C98A7D\"> connection:</span><span style=\"color:#C98A7D\"> https://api.github.com/</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">DEBUG</span><span style=\"color:#C98A7D\"> hyper::client::connect::dns:</span><span style=\"color:#C98A7D\"> resolving</span><span style=\"color:#C98A7D\"> host=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">api.github.com</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">DEBUG</span><span style=\"color:#C98A7D\"> hyper::client::connect::http:</span><span style=\"color:#C98A7D\"> connecting</span><span style=\"color:#C98A7D\"> to</span><span style=\"color:#4C9A91\"> 140.82</span><span style=\"color:#C98A7D\">.121.6:443</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\"> INFO</span><span style=\"color:#C98A7D\"> serverless_rust_with_shuttle::handlers:</span><span style=\"color:#C98A7D\"> Response</span><span style=\"color:#C98A7D\"> received</span><span style=\"color:#C98A7D\"> from</span><span style=\"color:#C98A7D\"> GitHub</span><span style=\"color:#C98A7D\"> GitHubRepositoryResponse</span><span style=\"color:#C98A7D\"> {</span><span style=\"color:#C98A7D\"> stargazers_count:</span><span style=\"color:#4C9A91\"> 129</span><span style=\"color:#C98A7D\"> }</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">DEBUG</span><span style=\"color:#C98A7D\"> hyper::proto::h1::io:</span><span style=\"color:#C98A7D\"> flushed</span><span style=\"color:#4C9A91\"> 121</span><span style=\"color:#C98A7D\"> bytes</span></span></code></pre></figure>\n<h2>Wrapping up</h2>\n<p>And that's a wrap! We've got Rust running out in the wild in the form of a serverless function and I couldn't be\nhappier. There's quite a bit of cleanup we could do, for instance handling cases where the repository doesn't exist, but\nI'll leave that as an exercise for the reader.</p>\n<p>All the source code for this function can be on my\nGitHub <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-tech/samples/rust/with-shuttle\">here</a>.</p>\n<p>Until next, friends!</p>"
    },
    "_id": "2023/serverless-rust-with-shuttle.md",
    "_raw": {
      "sourceFilePath": "2023/serverless-rust-with-shuttle.md",
      "sourceFileName": "serverless-rust-with-shuttle.md",
      "sourceFileDir": "2023",
      "contentType": "markdown",
      "flattenedPath": "2023/serverless-rust-with-shuttle"
    },
    "type": "Post",
    "url": "/blog/2023/serverless-rust-with-shuttle"
  },
  {
    "title": "Back to the server with Rust, Axum, and htmx",
    "description": "(Insert meme about React devs rediscovering the magic of PHP and ASP).",
    "pubDate": "2023-07-11T07:00:00.000Z",
    "category": "rust",
    "heroImage": "/images/rust-axum-htmx-templates-with-askama/htmx_meme.jpg",
    "draft": false,
    "keywords": [
      "rust",
      "templates",
      "askama"
    ],
    "body": {
      "raw": "\nI'm finally back from paternity leave and I had quite a blast messing around with a few Rust libraries during my time\noff in an attempt\nto build a website (web app?) going back to basics. I'm somewhat JS'd out as of late and was looking\nfor some way to integrate [htmx](https://htmx.org/) with templates in a similar vein to\nGo's [html templates](https://pkg.go.dev/html/template/).\nI was pleasantly surprised at how easily I was able to duct tape [axum's](https://github.com/tokio-rs/axum/) static file\nserving leveraging\n[askama](https://github.com/djc/askama/) as a templating engine of sorts.\n\nCoupled with htmx and [Tailwind](https://tailwindcss.com/), I was able to find a workflow for site building using the\ntools I wanted, with\nthe best part being _entirely_ JS-free (on the surface, at least). I should preface this as **not** an advertisement for\nJS's demise, but simply an alternative approach to the development of Rust-backed web apps.\n\n## The stack\n\nTo kick things off, let's run through the bits we'll utilize to build a relatively straightforward application that\nserves\nstatic HTML but with reactivity powered by htmx. Our sandbox will look something like:\n\n-   Rust (for obvious reasons)\n-   Axum for serving static assets and powering the backend API\n-   Askama for HTML templating - think shared layouts, scripts, CSS, etc.\n-   htmx for reactivity on the UI\n-   Tailwind, because my brain is too smooth now to do CSS myself\n\nRAAHT-stack? THARA? Not sure, gonna need to workshop the acronym a bit.\n\n## Getting started\n\nLet's start by spinning up a new Rust binary:\n\n```shell\n$ cargo new --bin with-axum-htmx-askama && cd with-axum-htmx-askama\n     Created binary (application) `with-axum-htmx-askama` package\n```\n\nNext, let's bring in the stuff we'll need to start building,\n\n```shell\n$ cargo add askama # our templating engine\n$ cargo add axum # our web/file server\n$ cargo add tokio --features full # async runtime\n\n# let's add tracing for sanity\n$ cargo add tracing\n$ cargo add tracing-subscriber --features env-filter\n\n# finally, let's add tower to utilize the file serving capabilities\n$ cargo add tower\n$ cargo add tower-http --features fs\n```\n\nOkay, got our dependencies installed, now let's scaffold out `main.rs` with a basic router and tracing setup:\n\n```rust\nuse tracing::info;\nuse tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};\n\n#[tokio::main]\nasync fn main() {\n    tracing_subscriber::registry()\n        .with(\n            tracing_subscriber::EnvFilter::try_from_default_env()\n                .unwrap_or_else(|_| \"with_axum_htmx_askama=debug\".into()),\n        )\n        .with(tracing_subscriber::fmt::layer())\n        .init();\n\n    info!(\"hello, web server!\");\n}\n```\n\nAnd running a quick sanity check:\n\n```shell\n$ cargo run\n# things compiling...\n2023-06-13T06:21:03.461354Z  INFO with_axum_htmx_askama: hello, web server!\n```\n\nSweet, we're up and running with logging! Before we jump into our router, we should probably figure out _what_ exactly\nwe'll be serving.\nFor our templates, we'll tap into askama to help axum route endpoints to serve static HTML. Askama defaults to looking\nfor templates\nin a `/templates` directory at the project root, let's add that now with a bit of markup:\n\n#### templates/hello.html\n\n```html\n<h1>Howdy!</h1>\n```\n\nAnd back in `main.rs`, let's add an axum route to serve this file:\n\n```rust\nuse anyhow::Context;\nuse askama::Template;\nuse axum::{\n    http::StatusCode,\n    response::{Html, IntoResponse, Response},\n    routing::get,\n    Router,\n};\nuse tracing::info;\nuse tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    tracing_subscriber::registry()\n        .with(\n            tracing_subscriber::EnvFilter::try_from_default_env()\n                .unwrap_or_else(|_| \"with_axum_htmx_askama=debug\".into()),\n        )\n        .with(tracing_subscriber::fmt::layer())\n        .init();\n\n    info!(\"initializing router...\");\n\n    let router = Router::new().route(\"/\", get(hello));\n    let port = 8000_u16;\n    let addr = std::net::SocketAddr::from(([0, 0, 0, 0], port));\n\n    info!(\"router initialized, now listening on port {}\", port);\n\n    axum::Server::bind(&addr)\n        .serve(router.into_make_service())\n        .await\n        .context(\"error while starting server\")?;\n\n    Ok(())\n}\n\nasync fn hello() -> impl IntoResponse {\n    let template = HelloTemplate {};\n    HtmlTemplate(template)\n}\n\n#[derive(Template)]\n#[template(path = \"hello.html\")]\nstruct HelloTemplate;\n\n/// A wrapper type that we'll use to encapsulate HTML parsed by askama into valid HTML for axum to serve.\nstruct HtmlTemplate<T>(T);\n\n/// Allows us to convert Askama HTML templates into valid HTML for axum to serve in the response.\nimpl<T> IntoResponse for HtmlTemplate<T>\nwhere\n    T: Template,\n{\n    fn into_response(self) -> Response {\n        // Attempt to render the template with askama\n        match self.0.render() {\n            // If we're able to successfully parse and aggregate the template, serve it\n            Ok(html) => Html(html).into_response(),\n            // If we're not, return an error or some bit of fallback HTML\n            Err(err) => (\n                StatusCode::INTERNAL_SERVER_ERROR,\n                format!(\"Failed to render template. Error: {}\", err),\n            )\n                .into_response(),\n        }\n    }\n}\n```\n\nOkay, so we fleshed out our router quite a bit and added a few types to help us serve\nthe HTML askama will stitch together for us (more on that in a bit).\n\nWe have a simple base route that serves the `hello.html` file we have in our `templates/` directory,\nthough askama is also able to pass render-able data to these HTML files in a template-like fashion.\nLuckily for us, askama provides the `#[template(path = \"path/to/html\")]` macro, assuming your HTML\nfiles are in the `templates/` directory. This is also configurable, but the defaults will do for now. Running the server\nlocally:\n\n```shell\n$ cargo run\n    # stuff compiling...\n2023-06-13T06:47:23.018937Z  INFO with_axum_htmx_askama: initializing router...\n2023-06-13T06:47:23.019361Z  INFO with_axum_htmx_askama: router initialized, now listening on port 8000\n```\n\nWe have some basic logs that reassure successful startup, and if we navigate to `localhost:8000` in our favorite\nbrowser:\n\n![landing page](/images/rust-axum-htmx-templates-with-askama/landing_page.png)\n\nWe've got ourselves a landing page!\n\n## Integrating Tailwind\n\nNow, this isn't the most _exciting_ landing page, so let's spruce this up a bit to make it look like it's not from 1996.\nI'm gonna be using [Tailwind](https://tailwindcss.com/) mostly because I'm a CSS sellout and love really, really, really\nlong\nclass names on my elements.\n\nTailwind helpfully provides a plethora of integration guides for any number of tech stacks. Unfortunately, Rust-based\nstatic\nfile serving with axum isn't on the list. The good news, however, is that we can rely on the most basic of Tailwind\nstrategies\nto bring in some sweet styles.\n\nIf you're not familiar with Tailwind, take a look at the docs and the philosophy behind its design system. There are\nsome pretty\nneat optimizations we'll tap into, and one of the reasons I love Tailwind is for\nthe [utility tree-shaking/minification](https://tailwindcss.com/docs/optimizing-for-production) of CSS\nthat it'll do to ensure our bundled styles are as small as possible. No one needs 70 MB of CSS shipped to their\nbrowser (if you're reading this, Rob, you know what you did).\n\nWe're going to rely on a few npm packages, so we'll need to spin up a simple `package.json` file to help us bring in\nTailwind and eventually Prettier to make things look nice on our templates. Using pnpm:\n\n```shell\n$ pnpm init\nWrote to ~/with-axum-htmx-askama/package.json\n\n{\n  \"name\": \"with-axum-htmx-askama\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\nWith our package manifest in place, let's add a few things to it. I'm using pnpm, though npm and yarn will suffice:\n\n```shell\npnpm add -D tailwindcss prettier prettier-plugin-tailwindcss\n```\n\nAnd let's clean up `package.json` to remove the things we won't need:\n\n```json\n{\n    \"name\": \"with-axum-htmx-askama\",\n    \"version\": \"1.0.0\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n        \"prettier\": \"^2.8.8\",\n        \"prettier-plugin-tailwindcss\": \"^0.3.0\",\n        \"tailwindcss\": \"^3.3.2\"\n    }\n}\n```\n\nI'm using Prettier to keep things nicely formatted, so I'll add a quick script to keep our templates tidy:\n\n```json\n{\n    \"name\": \"with-axum-htmx-askama\",\n    \"version\": \"1.0.0\",\n    \"license\": \"ISC\",\n    \"scripts\": {\n        \"format\": \"prettier --write --ignore-unknown .\"\n    },\n    \"devDependencies\": {\n        \"prettier\": \"^2.8.8\",\n        \"prettier-plugin-tailwindcss\": \"^0.3.0\",\n        \"tailwindcss\": \"^3.3.2\"\n    }\n}\n```\n\nNow we can format from the terminal to our heart's content:\n\n```shell\n$ pnpm format\n\npackage.json 340ms\npnpm-lock.yaml 159ms\ntemplates/hello.html 371ms\n```\n\nLet's spice up our template now. Back in `hello.html`, let's flesh this page out a bit more\nto be more of a fully functional HTML file we'd expect to serve to the browser, including assets:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <link href=\"/assets/main.css\" rel=\"stylesheet\" />\n        <link href=\"https://rsms.me/inter/inter.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        <h1>Howdy!</h1>\n    </body>\n</html>\n```\n\nI've added two `link`s to CSS files, one for the Inter font... because why not.\n\n![inter meme](/images/rust-axum-htmx-templates-with-askama/inter_meme.jpg)\n\nThe other `link` is to a CSS file that doesn't exist (yet). This CSS file will contain the compiled output Tailwind's\nCLI spits out for us after scanning\nthe HTML files in our `/templates` directory and determining which utility\nclasses are not needed helping us reduce the bundled CSS file size that will ship to our users' browsers. Pretty neat,\nhuh?\n\nNow as I mentioned, this will be a file that is _generated_ and not necessarily included by default. First, we need to\nadd a CSS file Tailwind\nwill use to generate the utilities our HTML templates will use. Let's create a `styles/tailwind.css` file:\n\n#### styles/tailwind.css\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nWe'll use the CLI to read this file as input, scan which utilities are\nbeing used by our HTML, and output the optimized stylesheet to be served. Let's run our first pass:\n\n```shell\n$ pnpm dlx tailwindcss -i styles/tailwind.css -o assets/main.css --watch\n\nRebuilding...\n\nwarn - No utility classes were detected in your source files. If this is unexpected, double-check the `content` option in your Tailwind CSS configuration.\nwarn - https://tailwindcss.com/docs/content-configuration\n\nDone in 74ms.\n```\n\nNice! Though not very exciting, as Tailwind didn't detect any utility classes to purge as we don't have a configuration\nfile for it to read pointing to the markup. Let's add one:\n\n```shell\n$ pnpm dlx tailwindcss init\n\nCreated Tailwind CSS config file: tailwind.config.js\n```\n\nAnd let's adjust the `tailwind.config.js` file that was generated for us:\n\n```js\nconst { fontFamily } = require('tailwindcss/defaultTheme');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    content: ['./templates/*.html'],\n    theme: {\n        extend: {\n            fontFamily: {\n                sans: ['Inter var', ...fontFamily.sans],\n            },\n        },\n    },\n};\n```\n\nI'm also going to rename the extension to `.cjs` to make eslint happy.\nIf you're unfamiliar with Tailwind, essentially this is just a configuration file telling Tailwind where to look for\nutility classes\nfor treeshaking ones we're not using. We're also overriding the default sans font with the Inter font so we can look\nlike a legit Series B startup\non our landing page.\n\nNow if we run the Tailwind CLI again, we'll get the same message. If we spin up our server,\nnothing has changed either. One last step: we need to tell axum to serve our `assets/` directory so our compiled\nTailwind CSS file is available for our template to use.\n\nBack in `main.rs`, let's a `tower` service route to serve everything under the `assets/` folder:\n\n```rust\nuse anyhow::Context;\nuse askama::Template;\nuse axum::{\n    http::StatusCode,\n    response::{Html, IntoResponse, Response},\n    routing::get,\n    Router,\n};\nuse tower_http::services::ServeDir;\nuse tracing::info;\nuse tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    // Setup stuff...\n\n    // We could also read our port in from the environment as well\n    let assets_path = std::env::current_dir().unwrap();\n    let port = 8000_u16;\n    let addr = std::net::SocketAddr::from(([0, 0, 0, 0], port));\n    let router = Router::new().route(\"/\", get(hello)).nest_service(\n        \"/assets\",\n        ServeDir::new(format!(\"{}/assets\", assets_path.to_str().unwrap())),\n    );\n\n    // Other stuff...\n}\n\n// Other stuff...\n```\n\nThe key here is the `assets_path` and the chain call to `.nest_service()`, telling\naxum to serve an `/assets` route with all the files underneath that directory locally. Now if we start our server, we\nshould see our `Howdy!` text looks a bit different:\n\n![with Inter font](/images/rust-axum-htmx-templates-with-askama/with_inter.png)\n\nWe've got Inter font! Let's spice this up even more with some colored text. In our `hello.html` template, let's add a\ntext color class:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <link href=\"/assets/main.css\" rel=\"stylesheet\" />\n        <link href=\"https://rsms.me/inter/inter.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        <h1 class=\"text-green-500\">Howdy!</h1>\n    </body>\n</html>\n```\n\nI've been running my processes in the back, both the Tailwind CLI and our\naxum server with the help of [cargo-watch](https://crates.io/crates/cargo-watch), so any changes I make to our Rust code\nor HTML templates will automatically be detected. Refreshing the page, we should see green text. Sweet!\n\n# Extending templates\n\nOur current template generation is missing one key piece in template\ninheritance. If we were to add additional axum routes that\nserved HTML, we would need to include `<head>` tags for each file. Not a great developer experience, as we want to have\ntemplates extend a base markup file that includes all of our common head metadata like links, tags, etc.\n\nLuckily, askama [has us covered](https://djc.github.io/askama/template_syntax.html#template-inheritance) with what we\nneed. Using template inheritance, we can define base template layouts that our individual route templates will extend.\nTo make\nlife easier so we can avoid having to write the same boilerplate HTML in each template we'll serve, let's create\na `base.html` file:\n\n### templates/base.html\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <link href=\"/assets/main.css\" rel=\"stylesheet\" />\n        <link href=\"https://rsms.me/inter/inter.css\" rel=\"stylesheet\" />\n        <!-- Allow any inheriting page to set it's own title -->\n        <title>{% block title %}{{ title }}{% endblock %}</title>\n\n        <!-- Allow any inheriting page to extend head with additional assets -->\n        {% block head %}{% endblock %}\n    </head>\n    <body>\n        <div id=\"content\">\n            <!-- Inheriting pages will have their content rendered here, similar to app root in React, Angular, etc. -->\n            {% block content %}{% endblock %}\n        </div>\n    </body>\n</html>\n```\n\nWith our base template in place, let's clean up our `hello.html` file a bit:\n\n### templates/hello.html\n\n```html\n<!-- prettier-ignore -->\n{% extends \"base.html\" %}\n\n{% block title %}Hello!{% endblock %}\n\n{% block content %}\n<h1 class=\"text-green-500\">Howdy!</h1>\n{% endblock %}\n```\n\nNote the ignore statement for prettier to skip formatting this file for now - default prettier doesn't do a great job\nat formatting templated HTML files but I'm sure there's a plugin out there to include to fix this that I'm simply\ntoo lazy to search for.\n\nSince we've kept our server running and have Tailwind compiling output assets in watch mode for us, we should be able\nto navigate back to `localhost:8000` and notice there's no change to our page, still displaying the green \"Howdy!\" text.\nThis is exactly what we expect, though we now have base templates that each of our pages can include!\n\nTo prove that we've now got a nice extendable page model, let's add another page with a link on our home page that\nroutes\nto this new page that I'll cleverly name `/another-page` with its even more cleverly associated\ntemplate `another-page.html`:\n\n### templates/another-page.html\n\n```html\n<!-- prettier-ignore -->\n{% extends \"base.html\" %}\n\n{% block title %}Another page!{% endblock %}\n\n{% block content %}\n<h1 class=\"font-bold text-indigo-500\">Another page</h1>\n{% endblock %}\n```\n\nLet's add an axum route to serve this template with users hit the `/another-page` frontend route:\n\n### main.rs\n\n```rust\n// Imports and such...\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    // Other stuff...\n\n    let router = Router::new()\n        .route(\"/\", get(hello))\n        .route(\"/another-page\", get(another_page))\n        .nest_service(\n            \"/assets\",\n            ServeDir::new(format!(\"{}/assets\", assets_path.to_str().unwrap())),\n        );\n\n    // More stuff...\n}\n\n// Other templates...\n\nasync fn another_page() -> impl IntoResponse {\n    let template = AnotherPageTemplate {};\n    HtmlTemplate(template)\n}\n\n#[derive(Template)]\n#[template(path = \"another-page.html\")]\nstruct AnotherPageTemplate;\n```\n\nIf we manually route to this page, we should it in the browser:\n\n![another page](/images/rust-axum-htmx-templates-with-askama/another_page.png)\n\nAs another sanity check, take a look at the CSS Tailwind is outputting in our `assets/` directory, namely taking a look\nat the tail end (no pun intended) of the file:\n\n### assets/main.css\n\n```css\n/ / More classes... .font-bold {\n    font-weight: 700;\n}\n\n.text-green-500 {\n    --tw-text-opacity: 1;\n    color: rgb(34 197 94 / var(--tw-text-opacity));\n}\n\n.text-indigo-500 {\n    --tw-text-opacity: 1;\n    color: rgb(99 102 241 / var(--tw-text-opacity));\n}\n```\n\nTailwind is _only_ including the utilities it sees in our template files, namely the colors we've included and the bold\nfont we've slapped on the text of our `/another-page` route. Pretty neat, huh?\n\nLet's spice our templates up with some routes. In our `hello.html` let's add a link:\n\n```html\n<!-- prettier-ignore -->\n{% extends \"base.html\" %}\n\n{% block title %}Hello!{% endblock %}\n\n{% block content %}\n<div class=\"inline-flex flex-row space-x-2\">\n    <h1 class=\"text-green-500\">Howdy!</h1>\n    <a\n        href=\"/another-page\"\n        class=\"text-indigo-500 underline hover:text-indigo-300\"\n        >Another page</a\n    >\n</div>\n{% endblock %}\n```\n\nNothing special going on here, just spicing up the look of our link and adding some padding between the two elements.\nRefreshing the home page, we should see a new link pop up:\n\n![another page](/images/rust-axum-htmx-templates-with-askama/to_another_page.png)\n\nand clicking the link, we route to our newly added `/another-page` page! More importantly, take note of how we're only\nincluding\nthe relevant markup for each page. The power of templates compels you!\n\n## Bringing in the functionality\n\nOkay, so we have a web server serving static HTML, good-looking assets with the help of Tailwind, and an extendable page\nmodel... let's fit the last piece of the web dev DX puzzle by bringing interactive functionality to our pages with the\nhelp of htmx. With htmx, we can do all the JavaScript-y things we would normally see as first-class functionality in a\nmodern frontend framework, but in the comfort of our HTML. No need to submit form data to our backend and reload the\npage\nbetween transitions, htmx will do the work for us!\n\nSince htmx brings modern UI goodness to standard hypertext, we don't need to worry about writing form handlers, fetching\ndata via AJAX, etc. While htmx brings a lot to the plate, let's start small and simply grab some data from an API and\nreplace\nsome elements on the screen with it.\n\nEven better, htmx is small in size and easily pluggable into our current setup. Let's bring it in as a `<script>` tag\nto our base layout so all pages have access to it:\n\n### templates/base.html\n\n```html\n<!doctype html>\n<html lang=\"en\">\n    <head>\n        <link href=\"/assets/main.css\" rel=\"stylesheet\" />\n        <link href=\"https://rsms.me/inter/inter.css\" rel=\"stylesheet\" />\n        <!-- Allow any inheriting page to set it's own title -->\n        <title>{% block title %}{{ title }}{% endblock %}</title>\n\n        <!-- htmx from the unpkg CDN - your mileage may vary -->\n        <script src=\"https://unpkg.com/htmx.org@1.9.2\"></script>\n\n        <!-- Allow any inheriting page to extend head with additional assets -->\n        {% block head %}{% endblock %}\n    </head>\n    <body>\n        <div id=\"content\">\n            <!-- Inheriting pages will have their content rendered here, similar to app root in React, Angular, etc. -->\n            {% block content %}{% endblock %}\n        </div>\n    </body>\n</html>\n```\n\nWith htmx included, we'll add a button on our homepage that will ping one of our server endpoints for some data. We\ndon't have purely backend endpoints yet - all of our axum routes serve HTML. Let's mount\na subrouter that will include endpoints that return some JSON data for our UI to consume.\n\nTo note, we'll load htmx from unpkg, a handy npm package CDN. Keep in mind you'll probably want to fetch this packages\nduring production deployments to avoid unpkg outages (which happens more than I'm sure the maintainers care to admit).\n\nIf we refresh the landing page, again assuming were still using cargo-watch to run the server and crack open the network\ntab, we should the htmx JS loaded by the browser. Before we get to our markup, let's add an axum route that returns some\ntext for us to display:\n\n#### main.rs\n\n```rust\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    // Other stuff...\n    let api_router = Router::new().route(\"/hello\", get(hello_from_the_server));\n\n    let router = Router::new()\n        .nest(\"/api\", api_router)\n        .route(\"/\", get(hello))\n        .route(\"/another-page\", get(another_page))\n        .nest_service(\n            \"/assets\",\n            ServeDir::new(format!(\"{}/assets\", assets_path.to_str().unwrap())),\n        );\n\n    // More stuff...\n}\n\n// Other handlers...\n\nasync fn hello_from_the_server() -> &'static str {\n    \"Hello!\"\n}\n```\n\nWe've effectively added a subrouter underneath the parent `/api` route. The example here is pretty trivial, and we'll\nspice things up here shortly. With our server now able to serve data at specific\nendpoints, let's do a quick sanity check. In another terminal:\n\n```shell\n$ curl -l https://localhost:8000/api/hello\nHello!%\n```\n\nWe're serving data, now let's wire this up to a button click. On our homepage, let's add a spruced up Tailwind button:\n\n#### templates/hello.html\n\n```html\n<!-- prettier-ignore -->\n{% extends \"base.html\" %}\n\n{% block title %}Hello!{% endblock %}\n\n{% block content %}\n<div class=\"inline-flex flex-row space-x-2 px-8 py-4\">\n    <h1 class=\"text-green-500\">Howdy!</h1>\n    <a\n        href=\"/another-page\"\n        class=\"text-indigo-500 underline hover:text-indigo-300\"\n        >Another page</a\n    >\n    <button\n        type=\"button\"\n        hx-get=\"/api/hello\"\n        hx-swap=\"innerHtml\"\n        class=\"rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n    >\n        Say hello\n    </button>\n</div>\n{% endblock %}\n```\n\nI've added a button with the `hx-get` htmx directive to signal that when this button is clicked, send a GET\nto `/api/hello` at the current running domain and `hx-swap` the inner HTML (the button text) with whatever comes back. A\nquick page refresh and we should see our updated home route:\n\n![with button](/images/rust-axum-htmx-templates-with-askama/with_button.png)\n\nI'm a bit claustrophobic, so I added some padding to give our UI elements some room to breathe. With the network tab\nopen, if we click the button, we see some magic happen - a GET is fired and our button text is updated with the `Hello!`\ntext returned from the server. Sweet!\n\nOkay... static text returned from the server is fascinating and all, but let's make something a bit more functional.\nWith htmx, we can define\nactions that return HTML and dynamically swap and replace elements on the UI with the retrieved markup (flashback to my\nJEE days). Let's spit\nsome row data back to the homepage from the server using an endpoint that returns another template. Let's add a cool\nTailwind'y form so revolutionary in terms of data-driven APIs, it may just get me one of those mythical FAANG jobs\neveryone keeps talking about.\n\nTailwind has some pretty neat utilities, and I'm gonna go ahead and bring in the forms package to help create some nice\nlooking inputs:\n\n```shell\n$ pnpm add @tailwindcss/forms\n```\n\nOnce that's installed, let's update our `tailwind.config.cjs` file:\n\n```js\nconst { fontFamily } = require('tailwindcss/defaultTheme');\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    content: ['./templates/*.html'],\n    theme: {\n        extend: {\n            fontFamily: {\n                sans: ['Inter var', ...fontFamily.sans],\n            },\n        },\n    },\n    plugins: [require('@tailwindcss/forms')],\n};\n```\n\nNow that our utility has been added, let's create a `todo-form.html` file in our `templates/` directory with a good\nlooking form input:\n\n```html\n<form class=\"max-w-md\">\n    <label for=\"todo\" class=\"block text-sm font-medium leading-6 text-gray-900\"\n        >Todo</label\n    >\n    <div class=\"mt-2 inline-flex flex-row space-x-2\">\n        <input\n            type=\"text\"\n            name=\"todo\"\n            id=\"todo\"\n            class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n            placeholder=\"Replace frontend with htmx\"\n        />\n        <button\n            type=\"button\"\n            class=\"rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n        >\n            Add\n        </button>\n    </div>\n</form>\n```\n\nNow we're not extending the base layout since we'll take the lazy way out and simply add it to our home page. Again,\naskama\nprovides a jinja-like `include` tag we can throw on our `hello.html` template:\n\n```html\n<!-- prettier-ignore -->\n{% extends \"base.html\" %}\n\n{% block title %}Hello!{% endblock %}\n\n{% block content %}\n<div class=\"inline-flex flex-row space-x-2\">\n    <h1 class=\"text-green-500\">Howdy!</h1>\n    <a\n        href=\"/another-page\"\n        class=\"text-indigo-500 underline hover:text-indigo-300\"\n        >Another page</a\n    >\n    <button\n        type=\"button\"\n        hx-get=\"/api/hello\"\n        hx-swap=\"innerHtml\"\n        class=\"rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n    >\n        Say hello\n    </button>\n</div>\n\n{% include \"todo-form.html\" %} {% endblock %}\n```\n\nA quick page refresh and our home route now includes a single input form and button:\n\n![updated page](/images/rust-axum-htmx-templates-with-askama/updated_home.png)\n\nAs we add todos, we'll want them to appear beneath the input box and keep appending to it as we add more. We're not\nexactly\nbuilding the next Facebook, so we can keep our implementation simple. We need some way to keep track of todos, and we'll\nwant to manage that with our axum server so we can maintain a list of todos that will act as our persistence mechanism.\nLet's\nadd some state to hold the todo information:\n\n### main.rs\n\n```rust\nstruct AppState {\n    todos: Mutex<Vec<String>>,\n}\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    // Other stuff...\n\n    let app_state = Arc::new(AppState {\n        todos: Mutex::new(vec![]),\n    });\n\n    // We could also read our port in from the environment as well\n    let assets_path = std::env::current_dir().unwrap();\n    let port = 8000_u16;\n    let addr = std::net::SocketAddr::from(([0, 0, 0, 0], port));\n\n    let api_router = Router::new()\n        .route(\"/hello\", get(hello_from_the_server))\n        .route(\"/todos\", post(add_todo))\n        .with_state(app_state);\n\n    // Other stuff...\n}\n```\n\nWe add `AppState` that holds a `Vec` of todos as strings locked behind a `Mutex`. Now, this is not exactly a PSA for\nproper\nstate management with axum - we're cutting a lot of corners here to keep things streamlined. Because `AppState` can be\nshared\nacross threads thanks to being wrapped with `Arc`, we'll need to do our due diligence of locking the todo list before\nattempting\nto add more todays. With our state added as an extension to our API router, let's add the `add_todo` route to do just\nthat:\n\n```rust\n#[derive(Template)]\n#[template(path = \"todo-list.html\")]\nstruct TodoList {\n    todos: Vec<String>,\n}\n\nasync fn add_todo(\n    State(state): State<Arc<AppState>>,\n    Form(todo): Form<TodoRequest>,\n) -> impl IntoResponse {\n    let mut lock = state.todos.lock().unwrap();\n    lock.push(todo.todo);\n\n    let template = TodoList {\n        todos: lock.clone(),\n    };\n\n    HtmlTemplate(template)\n}\n```\n\nI've also added a `todo-list.html` template that will use the todo data we've acquired behind our lock. Let's add that\nto our `templates/` directory:\n\n```html\n{% for todo in todos %}\n<p class=\"text-lg\">{{ todo }}</p>\n{% endfor %}\n```\n\nUsing askama's templating, we pass in the todos list and iterate over them generating a `<p>` tag for each todo. We'll\nneed\nto paint the HTML returned by our `add_todo` route, so let's append it to the end of our `todo-form.html` markup:\n\n```html\n<form\n    hx-post=\"/api/todos\"\n    hx-target=\"#todos\"\n    hx-swap=\"innerHTML\"\n    class=\"max-w-md\"\n>\n    <label for=\"todo\" class=\"block text-sm font-medium leading-6 text-gray-900\"\n        >Todo</label\n    >\n    <div class=\"mt-2 inline-flex flex-row space-x-2\">\n        <input\n            type=\"text\"\n            name=\"todo\"\n            id=\"todo\"\n            class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n            placeholder=\"Replace frontend with htmx\"\n        />\n        <button\n            type=\"submit\"\n            class=\"rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n        >\n            Add\n        </button>\n    </div>\n</form>\n<div id=\"todos\" />\n```\n\nI've sprinkled in some htmx directives with `hx-post`, `hx-target`, and `hx-swap` as well:\n\n-   `hx-post` tells our form submission _where_ to send the form data as a POST request too\n-   `hx-target` is the element we want to mutate after we get a response\n-   `hx-swap=\"innerHTML\"` means we'll drop the hypertext returned from our `add_todo` handler as a child element of\n    our `<div id=\"todos\" />` tag\n\nWith our Tailwind and axum server processes still running in watch mode, we should be good to start trying things out\nnow.\nWith our homepage refreshed, we can start [adding todos](/images/rust-axum-htmx-templates-with-askama/full_demo.mp4).\nI've\nexpanded\nthe network while we create a few todos to show off htmx making form requests for us and returning the askama templated\nhypertext back to us.\nBadda bing, badda boom, and we've got some todos!\n\n## Wrapping up\n\nWeb dev (for me, at least) just got a lot more fun thanks to Rust, askama, axum and htmx. While our sample here is a bit\nlight on functionality, I've written a more fleshed out version available\non [GitHub](https://github.com/JoeyMckenzie/axum-htmx-templates/tree/main) that includes a more opinionated approach to\norganizing templates, page routes, and ready to host on a provider like [Fly](https://fly.io) with a ready-to-go\nDockerfile.\n\nUntil next time, friends!\n",
      "html": "<p>I'm finally back from paternity leave and I had quite a blast messing around with a few Rust libraries during my time\noff in an attempt\nto build a website (web app?) going back to basics. I'm somewhat JS'd out as of late and was looking\nfor some way to integrate <a href=\"https://htmx.org/\">htmx</a> with templates in a similar vein to\nGo's <a href=\"https://pkg.go.dev/html/template/\">html templates</a>.\nI was pleasantly surprised at how easily I was able to duct tape <a href=\"https://github.com/tokio-rs/axum/\">axum's</a> static file\nserving leveraging\n<a href=\"https://github.com/djc/askama/\">askama</a> as a templating engine of sorts.</p>\n<p>Coupled with htmx and <a href=\"https://tailwindcss.com/\">Tailwind</a>, I was able to find a workflow for site building using the\ntools I wanted, with\nthe best part being <em>entirely</em> JS-free (on the surface, at least). I should preface this as <strong>not</strong> an advertisement for\nJS's demise, but simply an alternative approach to the development of Rust-backed web apps.</p>\n<h2>The stack</h2>\n<p>To kick things off, let's run through the bits we'll utilize to build a relatively straightforward application that\nserves\nstatic HTML but with reactivity powered by htmx. Our sandbox will look something like:</p>\n<ul>\n<li>Rust (for obvious reasons)</li>\n<li>Axum for serving static assets and powering the backend API</li>\n<li>Askama for HTML templating - think shared layouts, scripts, CSS, etc.</li>\n<li>htmx for reactivity on the UI</li>\n<li>Tailwind, because my brain is too smooth now to do CSS myself</li>\n</ul>\n<p>RAAHT-stack? THARA? Not sure, gonna need to workshop the acronym a bit.</p>\n<h2>Getting started</h2>\n<p>Let's start by spinning up a new Rust binary:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> new</span><span style=\"color:#C99076\"> --bin</span><span style=\"color:#C98A7D\"> with-axum-htmx-askama</span><span style=\"color:#666666\"> &#x26;&#x26;</span><span style=\"color:#B8A965\"> cd</span><span style=\"color:#C98A7D\"> with-axum-htmx-askama</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">     Created</span><span style=\"color:#C98A7D\"> binary</span><span style=\"color:#DBD7CAEE\"> (application) </span><span style=\"color:#666666\">`</span><span style=\"color:#80A665\">with-axum-htmx-askama</span><span style=\"color:#666666\">`</span><span style=\"color:#80A665\"> package</span></span></code></pre></figure>\n<p>Next, let's bring in the stuff we'll need to start building,</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> askama</span><span style=\"color:#758575DD\"> # our templating engine</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> axum</span><span style=\"color:#758575DD\"> # our web/file server</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tokio</span><span style=\"color:#C99076\"> --features</span><span style=\"color:#C98A7D\"> full</span><span style=\"color:#758575DD\"> # async runtime</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># let's add tracing for sanity</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tracing</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tracing-subscriber</span><span style=\"color:#C99076\"> --features</span><span style=\"color:#C98A7D\"> env-filter</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># finally, let's add tower to utilize the file serving capabilities</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tower</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> tower-http</span><span style=\"color:#C99076\"> --features</span><span style=\"color:#C98A7D\"> fs</span></span></code></pre></figure>\n<p>Okay, got our dependencies installed, now let's scaffold out <code>main.rs</code> with a basic router and tracing setup:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">layer</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberExt</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> util</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberInitExt</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">registry</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">EnvFilter</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">try_from_default_env</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">unwrap_or_else</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">_</span><span style=\"color:#CB7676\">|</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">with_axum_htmx_askama=debug</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">layer</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">init</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">hello, web server!</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>And running a quick sanity check:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\"># things compiling...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">2023-06-13T06:21:03.461354Z</span><span style=\"color:#C98A7D\">  INFO</span><span style=\"color:#C98A7D\"> with_axum_htmx_askama:</span><span style=\"color:#C98A7D\"> hello,</span><span style=\"color:#C98A7D\"> web</span><span style=\"color:#C98A7D\"> server!</span></span></code></pre></figure>\n<p>Sweet, we're up and running with logging! Before we jump into our router, we should probably figure out <em>what</em> exactly\nwe'll be serving.\nFor our templates, we'll tap into askama to help axum route endpoints to serve static HTML. Askama defaults to looking\nfor templates\nin a <code>/templates</code> directory at the project root, let's add that now with a bit of markup:</p>\n<h4>templates/hello.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>And back in <code>main.rs</code>, let's add an axum route to serve this file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Context</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> askama</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Template</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    http</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">StatusCode</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#5DA994\">Html</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#666666\">},</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    routing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Router</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">layer</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberExt</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> util</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberInitExt</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;()></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">registry</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">EnvFilter</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">try_from_default_env</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">unwrap_or_else</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">_</span><span style=\"color:#CB7676\">|</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">with_axum_htmx_askama=debug</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into</span><span style=\"color:#666666\">()),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">fmt</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">layer</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">init</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">initializing router...</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 8000_</span><span style=\"color:#5DA994\">u16</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> addr</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">net</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SocketAddr</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from</span><span style=\"color:#666666\">(([</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">],</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    info!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">router initialized, now listening on port </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Server</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">bind</span><span style=\"color:#666666\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">addr</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">serve</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">router</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_make_service</span><span style=\"color:#666666\">())</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#4D9375\">await</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">context</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">error while starting server</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">?</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Ok</span><span style=\"color:#666666\">(())</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> hello</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#4D9375\"> impl</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> template</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> HelloTemplate</span><span style=\"color:#666666\"> {};</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    HtmlTemplate</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">template</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Template</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">template</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">path </span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">hello.html</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> HelloTemplate</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// A wrapper type that we'll use to encapsulate HTML parsed by askama into valid HTML for axum to serve.</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> HtmlTemplate</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">>(</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/// Allows us to convert Askama HTML templates into valid HTML for axum to serve in the response.</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">impl</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">></span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#4D9375\"> for</span><span style=\"color:#5DA994\"> HtmlTemplate</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">T</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">where</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    T</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Template</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    fn</span><span style=\"color:#80A665\"> into_response</span><span style=\"color:#666666\">(</span><span style=\"color:#C99076\">self</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Attempt to render the template with askama</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        match</span><span style=\"color:#C99076\"> self</span><span style=\"color:#CB7676\">.</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">.</span><span style=\"color:#80A665\">render</span><span style=\"color:#666666\">()</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If we're able to successfully parse and aggregate the template, serve it</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            Ok</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">html</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#80A665\"> Html</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">html</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">into_response</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If we're not, return an error or some bit of fallback HTML</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">            Err</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">err</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> =></span><span style=\"color:#666666\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">                StatusCode</span><span style=\"color:#CB7676\">::</span><span style=\"color:#C99076\">INTERNAL_SERVER_ERROR</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">                format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Failed to render template. Error: </span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> err</span><span style=\"color:#666666\">),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            )</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">                .</span><span style=\"color:#80A665\">into_response</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Okay, so we fleshed out our router quite a bit and added a few types to help us serve\nthe HTML askama will stitch together for us (more on that in a bit).</p>\n<p>We have a simple base route that serves the <code>hello.html</code> file we have in our <code>templates/</code> directory,\nthough askama is also able to pass render-able data to these HTML files in a template-like fashion.\nLuckily for us, askama provides the <code>#[template(path = \"path/to/html\")]</code> macro, assuming your HTML\nfiles are in the <code>templates/</code> directory. This is also configurable, but the defaults will do for now. Running the server\nlocally:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> cargo</span><span style=\"color:#C98A7D\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    # stuff compiling...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">2023-06-13T06:47:23.018937Z</span><span style=\"color:#C98A7D\">  INFO</span><span style=\"color:#C98A7D\"> with_axum_htmx_askama:</span><span style=\"color:#C98A7D\"> initializing</span><span style=\"color:#C98A7D\"> router...</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">2023-06-13T06:47:23.019361Z</span><span style=\"color:#C98A7D\">  INFO</span><span style=\"color:#C98A7D\"> with_axum_htmx_askama:</span><span style=\"color:#C98A7D\"> router</span><span style=\"color:#C98A7D\"> initialized,</span><span style=\"color:#C98A7D\"> now</span><span style=\"color:#C98A7D\"> listening</span><span style=\"color:#C98A7D\"> on</span><span style=\"color:#C98A7D\"> port</span><span style=\"color:#4C9A91\"> 8000</span></span></code></pre></figure>\n<p>We have some basic logs that reassure successful startup, and if we navigate to <code>localhost:8000</code> in our favorite\nbrowser:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/landing_page.png\" alt=\"landing page\"></p>\n<p>We've got ourselves a landing page!</p>\n<h2>Integrating Tailwind</h2>\n<p>Now, this isn't the most <em>exciting</em> landing page, so let's spruce this up a bit to make it look like it's not from 1996.\nI'm gonna be using <a href=\"https://tailwindcss.com/\">Tailwind</a> mostly because I'm a CSS sellout and love really, really, really\nlong\nclass names on my elements.</p>\n<p>Tailwind helpfully provides a plethora of integration guides for any number of tech stacks. Unfortunately, Rust-based\nstatic\nfile serving with axum isn't on the list. The good news, however, is that we can rely on the most basic of Tailwind\nstrategies\nto bring in some sweet styles.</p>\n<p>If you're not familiar with Tailwind, take a look at the docs and the philosophy behind its design system. There are\nsome pretty\nneat optimizations we'll tap into, and one of the reasons I love Tailwind is for\nthe <a href=\"https://tailwindcss.com/docs/optimizing-for-production\">utility tree-shaking/minification</a> of CSS\nthat it'll do to ensure our bundled styles are as small as possible. No one needs 70 MB of CSS shipped to their\nbrowser (if you're reading this, Rob, you know what you did).</p>\n<p>We're going to rely on a few npm packages, so we'll need to spin up a simple <code>package.json</code> file to help us bring in\nTailwind and eventually Prettier to make things look nice on our templates. Using pnpm:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> init</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Wrote</span><span style=\"color:#C98A7D\"> to</span><span style=\"color:#C98A7D\"> ~/with-axum-htmx-askama/package.json</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"name\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">with-axum-htmx-askama</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"version\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">1.0.0</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"description\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"main\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">index.js</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"scripts\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    \"test\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">echo </span><span style=\"color:#C99076\">\\\"</span><span style=\"color:#C98A7D\">Error: no test specified</span><span style=\"color:#C99076\">\\\"</span><span style=\"color:#C98A7D\"> &#x26;&#x26; exit 1</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">  }</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"keywords\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#DBD7CAEE\"> [],</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"author\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"\"</span><span style=\"color:#C98A7D\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">  \"license\"</span><span style=\"color:#B8A965\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">ISC</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>With our package manifest in place, let's add a few things to it. I'm using pnpm, though npm and yarn will suffice:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">pnpm</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C99076\"> -D</span><span style=\"color:#C98A7D\"> tailwindcss</span><span style=\"color:#C98A7D\"> prettier</span><span style=\"color:#C98A7D\"> prettier-plugin-tailwindcss</span></span></code></pre></figure>\n<p>And let's clean up <code>package.json</code> to remove the things we won't need:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">name</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">with-axum-htmx-askama</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">version</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">1.0.0</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">license</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">ISC</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">devDependencies</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">prettier</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^2.8.8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">prettier-plugin-tailwindcss</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^0.3.0</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">tailwindcss</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^3.3.2</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I'm using Prettier to keep things nicely formatted, so I'll add a quick script to keep our templates tidy:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"json\" data-theme=\"vitesse-dark\"><code data-language=\"json\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">name</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">with-axum-htmx-askama</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">version</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">1.0.0</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">license</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">ISC</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">scripts</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">format</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">prettier --write --ignore-unknown .</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#B8A965\">devDependencies</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">prettier</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^2.8.8</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">prettier-plugin-tailwindcss</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^0.3.0</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#B8A965\">tailwindcss</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">:</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">^3.3.2</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Now we can format from the terminal to our heart's content:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> format</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">package.json</span><span style=\"color:#4C9A91\"> 340</span><span style=\"color:#C98A7D\">ms</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">pnpm-lock.yaml</span><span style=\"color:#4C9A91\"> 159</span><span style=\"color:#C98A7D\">ms</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">templates/hello.html</span><span style=\"color:#4C9A91\"> 371</span><span style=\"color:#C98A7D\">ms</span></span></code></pre></figure>\n<p>Let's spice up our template now. Back in <code>hello.html</code>, let's flesh this page out a bit more\nto be more of a fully functional HTML file we'd expect to serve to the browser, including assets:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;!</span><span style=\"color:#4D9375\">doctype</span><span style=\"color:#BD976A\"> html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">html</span><span style=\"color:#BD976A\"> lang</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/assets/main.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://rsms.me/inter/inter.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>I've added two <code>link</code>s to CSS files, one for the Inter font... because why not.</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/inter_meme.jpg\" alt=\"inter meme\"></p>\n<p>The other <code>link</code> is to a CSS file that doesn't exist (yet). This CSS file will contain the compiled output Tailwind's\nCLI spits out for us after scanning\nthe HTML files in our <code>/templates</code> directory and determining which utility\nclasses are not needed helping us reduce the bundled CSS file size that will ship to our users' browsers. Pretty neat,\nhuh?</p>\n<p>Now as I mentioned, this will be a file that is <em>generated</em> and not necessarily included by default. First, we need to\nadd a CSS file Tailwind\nwill use to generate the utilities our HTML templates will use. Let's create a <code>styles/tailwind.css</code> file:</p>\n<h4>styles/tailwind.css</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"css\" data-theme=\"vitesse-dark\"><code data-language=\"css\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#4D9375\">tailwind</span><span style=\"color:#DBD7CAEE\"> base</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#4D9375\">tailwind</span><span style=\"color:#DBD7CAEE\"> components</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">@</span><span style=\"color:#4D9375\">tailwind</span><span style=\"color:#DBD7CAEE\"> utilities</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>We'll use the CLI to read this file as input, scan which utilities are\nbeing used by our HTML, and output the optimized stylesheet to be served. Let's run our first pass:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> dlx</span><span style=\"color:#C98A7D\"> tailwindcss</span><span style=\"color:#C99076\"> -i</span><span style=\"color:#C98A7D\"> styles/tailwind.css</span><span style=\"color:#C99076\"> -o</span><span style=\"color:#C98A7D\"> assets/main.css</span><span style=\"color:#C99076\"> --watch</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Rebuilding...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">warn</span><span style=\"color:#C98A7D\"> -</span><span style=\"color:#C98A7D\"> No</span><span style=\"color:#C98A7D\"> utility</span><span style=\"color:#C98A7D\"> classes</span><span style=\"color:#C98A7D\"> were</span><span style=\"color:#C98A7D\"> detected</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#C98A7D\"> your</span><span style=\"color:#C98A7D\"> source</span><span style=\"color:#C98A7D\"> files.</span><span style=\"color:#C98A7D\"> If</span><span style=\"color:#C98A7D\"> this</span><span style=\"color:#C98A7D\"> is</span><span style=\"color:#C98A7D\"> unexpected,</span><span style=\"color:#C98A7D\"> double-check</span><span style=\"color:#C98A7D\"> the</span><span style=\"color:#666666\"> `</span><span style=\"color:#80A665\">content</span><span style=\"color:#666666\">`</span><span style=\"color:#80A665\"> option</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#C98A7D\"> your</span><span style=\"color:#C98A7D\"> Tailwind</span><span style=\"color:#C98A7D\"> CSS</span><span style=\"color:#C98A7D\"> configuration.</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">warn</span><span style=\"color:#C98A7D\"> -</span><span style=\"color:#C98A7D\"> https://tailwindcss.com/docs/content-configuration</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Done</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#4C9A91\"> 74</span><span style=\"color:#C98A7D\">ms.</span></span></code></pre></figure>\n<p>Nice! Though not very exciting, as Tailwind didn't detect any utility classes to purge as we don't have a configuration\nfile for it to read pointing to the markup. Let's add one:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> dlx</span><span style=\"color:#C98A7D\"> tailwindcss</span><span style=\"color:#C98A7D\"> init</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">Created</span><span style=\"color:#C98A7D\"> Tailwind</span><span style=\"color:#C98A7D\"> CSS</span><span style=\"color:#C98A7D\"> config</span><span style=\"color:#C98A7D\"> file:</span><span style=\"color:#C98A7D\"> tailwind.config.js</span></span></code></pre></figure>\n<p>And let's adjust the <code>tailwind.config.js</code> file that was generated for us:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"js\" data-theme=\"vitesse-dark\"><code data-language=\"js\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">const</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> fontFamily</span><span style=\"color:#666666\"> }</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> require</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">tailwindcss/defaultTheme</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/** </span><span style=\"color:#666666\">@</span><span style=\"color:#4D9375\">type</span><span style=\"color:#666666\"> {</span><span style=\"color:#5DA994\">import('tailwindcss').Config</span><span style=\"color:#666666\">}</span><span style=\"color:#758575DD\"> */</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">module</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">exports</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    content</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./templates/*.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    theme</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        extend</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            fontFamily</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                sans</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Inter var</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> ...</span><span style=\"color:#BD976A\">fontFamily</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">sans</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>I'm also going to rename the extension to <code>.cjs</code> to make eslint happy.\nIf you're unfamiliar with Tailwind, essentially this is just a configuration file telling Tailwind where to look for\nutility classes\nfor treeshaking ones we're not using. We're also overriding the default sans font with the Inter font so we can look\nlike a legit Series B startup\non our landing page.</p>\n<p>Now if we run the Tailwind CLI again, we'll get the same message. If we spin up our server,\nnothing has changed either. One last step: we need to tell axum to serve our <code>assets/</code> directory so our compiled\nTailwind CSS file is available for our template to use.</p>\n<p>Back in <code>main.rs</code>, let's a <code>tower</code> service route to serve everything under the <code>assets/</code> folder:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Context</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> askama</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Template</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> axum</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    http</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">StatusCode</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    response</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#5DA994\">Html</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#666666\">,</span><span style=\"color:#5DA994\"> Response</span><span style=\"color:#666666\">},</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    routing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">get</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#5DA994\">    Router</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tower_http</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">services</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">ServeDir</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">info</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">use</span><span style=\"color:#80A665\"> tracing_subscriber</span><span style=\"color:#CB7676\">::</span><span style=\"color:#666666\">{</span><span style=\"color:#80A665\">layer</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberExt</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> util</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SubscriberInitExt</span><span style=\"color:#666666\">};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;()></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Setup stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // We could also read our port in from the environment as well</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> assets_path</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">env</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">current_dir</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 8000_</span><span style=\"color:#5DA994\">u16</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> addr</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">net</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SocketAddr</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from</span><span style=\"color:#666666\">(([</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">],</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello</span><span style=\"color:#666666\">))</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">nest_service</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">        \"</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">        ServeDir</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> assets_path</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_str</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">())),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">// Other stuff...</span></span></code></pre></figure>\n<p>The key here is the <code>assets_path</code> and the chain call to <code>.nest_service()</code>, telling\naxum to serve an <code>/assets</code> route with all the files underneath that directory locally. Now if we start our server, we\nshould see our <code>Howdy!</code> text looks a bit different:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/with_inter.png\" alt=\"with Inter font\"></p>\n<p>We've got Inter font! Let's spice this up even more with some colored text. In our <code>hello.html</code> template, let's add a\ntext color class:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;!</span><span style=\"color:#4D9375\">doctype</span><span style=\"color:#BD976A\"> html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">html</span><span style=\"color:#BD976A\"> lang</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/assets/main.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://rsms.me/inter/inter.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-green-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>I've been running my processes in the back, both the Tailwind CLI and our\naxum server with the help of <a href=\"https://crates.io/crates/cargo-watch\">cargo-watch</a>, so any changes I make to our Rust code\nor HTML templates will automatically be detected. Refreshing the page, we should see green text. Sweet!</p>\n<h1>Extending templates</h1>\n<p>Our current template generation is missing one key piece in template\ninheritance. If we were to add additional axum routes that\nserved HTML, we would need to include <code>&#x3C;head></code> tags for each file. Not a great developer experience, as we want to have\ntemplates extend a base markup file that includes all of our common head metadata like links, tags, etc.</p>\n<p>Luckily, askama <a href=\"https://djc.github.io/askama/template_syntax.html#template-inheritance\">has us covered</a> with what we\nneed. Using template inheritance, we can define base template layouts that our individual route templates will extend.\nTo make\nlife easier so we can avoid having to write the same boilerplate HTML in each template we'll serve, let's create\na <code>base.html</code> file:</p>\n<h3>templates/base.html</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;!</span><span style=\"color:#4D9375\">doctype</span><span style=\"color:#BD976A\"> html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">html</span><span style=\"color:#BD976A\"> lang</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/assets/main.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://rsms.me/inter/inter.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Allow any inheriting page to set it's own title --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">title</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">{% block title %}{{ title }}{% endblock %}</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">title</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Allow any inheriting page to extend head with additional assets --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        {% block head %}{% endblock %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">content</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            &#x3C;!-- Inheriting pages will have their content rendered here, similar to app root in React, Angular, etc. --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            {% block content %}{% endblock %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>With our base template in place, let's clean up our <code>hello.html</code> file a bit:</p>\n<h3>templates/hello.html</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- prettier-ignore --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% extends \"base.html\" %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block title %}Hello!{% endblock %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block content %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-green-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% endblock %}</span></span></code></pre></figure>\n<p>Note the ignore statement for prettier to skip formatting this file for now - default prettier doesn't do a great job\nat formatting templated HTML files but I'm sure there's a plugin out there to include to fix this that I'm simply\ntoo lazy to search for.</p>\n<p>Since we've kept our server running and have Tailwind compiling output assets in watch mode for us, we should be able\nto navigate back to <code>localhost:8000</code> and notice there's no change to our page, still displaying the green \"Howdy!\" text.\nThis is exactly what we expect, though we now have base templates that each of our pages can include!</p>\n<p>To prove that we've now got a nice extendable page model, let's add another page with a link on our home page that\nroutes\nto this new page that I'll cleverly name <code>/another-page</code> with its even more cleverly associated\ntemplate <code>another-page.html</code>:</p>\n<h3>templates/another-page.html</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- prettier-ignore --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% extends \"base.html\" %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block title %}Another page!{% endblock %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block content %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">font-bold text-indigo-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Another page</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% endblock %}</span></span></code></pre></figure>\n<p>Let's add an axum route to serve this template with users hit the <code>/another-page</code> frontend route:</p>\n<h3>main.rs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">// Imports and such...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;()></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/another-page</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">another_page</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">nest_service</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            ServeDir</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> assets_path</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_str</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">())),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // More stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">// Other templates...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> another_page</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#4D9375\"> impl</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> template</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> AnotherPageTemplate</span><span style=\"color:#666666\"> {};</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    HtmlTemplate</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">template</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Template</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">template</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">path </span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">another-page.html</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> AnotherPageTemplate</span><span style=\"color:#666666\">;</span></span></code></pre></figure>\n<p>If we manually route to this page, we should it in the browser:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/another_page.png\" alt=\"another page\"></p>\n<p>As another sanity check, take a look at the CSS Tailwind is outputting in our <code>assets/</code> directory, namely taking a look\nat the tail end (no pun intended) of the file:</p>\n<h3>assets/main.css</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"css\" data-theme=\"vitesse-dark\"><code data-language=\"css\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#DBD7CAEE\">/ / More classes... </span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">font-bold</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    font-weight</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 700</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">text-green-500</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    --tw-text-opacity</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    color</span><span style=\"color:#666666\">:</span><span style=\"color:#B8A965\"> rgb</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">34</span><span style=\"color:#4C9A91\"> 197</span><span style=\"color:#4C9A91\"> 94</span><span style=\"color:#DBD7CAEE\"> / </span><span style=\"color:#B8A965\">var</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">--tw-text-opacity</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">text-indigo-500</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    --tw-text-opacity</span><span style=\"color:#666666\">:</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    color</span><span style=\"color:#666666\">:</span><span style=\"color:#B8A965\"> rgb</span><span style=\"color:#666666\">(</span><span style=\"color:#4C9A91\">99</span><span style=\"color:#4C9A91\"> 102</span><span style=\"color:#4C9A91\"> 241</span><span style=\"color:#DBD7CAEE\"> / </span><span style=\"color:#B8A965\">var</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">--tw-text-opacity</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>Tailwind is <em>only</em> including the utilities it sees in our template files, namely the colors we've included and the bold\nfont we've slapped on the text of our <code>/another-page</code> route. Pretty neat, huh?</p>\n<p>Let's spice our templates up with some routes. In our <code>hello.html</code> let's add a link:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- prettier-ignore --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% extends \"base.html\" %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block title %}Hello!{% endblock %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block content %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex flex-row space-x-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-green-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/another-page</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-indigo-500 underline hover:text-indigo-300</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span><span style=\"color:#DBD7CAEE\">Another page</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% endblock %}</span></span></code></pre></figure>\n<p>Nothing special going on here, just spicing up the look of our link and adding some padding between the two elements.\nRefreshing the home page, we should see a new link pop up:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/to_another_page.png\" alt=\"another page\"></p>\n<p>and clicking the link, we route to our newly added <code>/another-page</code> page! More importantly, take note of how we're only\nincluding\nthe relevant markup for each page. The power of templates compels you!</p>\n<h2>Bringing in the functionality</h2>\n<p>Okay, so we have a web server serving static HTML, good-looking assets with the help of Tailwind, and an extendable page\nmodel... let's fit the last piece of the web dev DX puzzle by bringing interactive functionality to our pages with the\nhelp of htmx. With htmx, we can do all the JavaScript-y things we would normally see as first-class functionality in a\nmodern frontend framework, but in the comfort of our HTML. No need to submit form data to our backend and reload the\npage\nbetween transitions, htmx will do the work for us!</p>\n<p>Since htmx brings modern UI goodness to standard hypertext, we don't need to worry about writing form handlers, fetching\ndata via AJAX, etc. While htmx brings a lot to the plate, let's start small and simply grab some data from an API and\nreplace\nsome elements on the screen with it.</p>\n<p>Even better, htmx is small in size and easily pluggable into our current setup. Let's bring it in as a <code>&#x3C;script></code> tag\nto our base layout so all pages have access to it:</p>\n<h3>templates/base.html</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;!</span><span style=\"color:#4D9375\">doctype</span><span style=\"color:#BD976A\"> html</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">html</span><span style=\"color:#BD976A\"> lang</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">en</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/assets/main.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">link</span><span style=\"color:#BD976A\"> href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://rsms.me/inter/inter.css</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> rel</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">stylesheet</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Allow any inheriting page to set it's own title --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">title</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">{% block title %}{{ title }}{% endblock %}</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">title</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- htmx from the unpkg CDN - your mileage may vary --></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">script</span><span style=\"color:#BD976A\"> src</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">https://unpkg.com/htmx.org@1.9.2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">>&#x3C;/</span><span style=\"color:#4D9375\">script</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        &#x3C;!-- Allow any inheriting page to extend head with additional assets --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        {% block head %}{% endblock %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">head</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">content</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            &#x3C;!-- Inheriting pages will have their content rendered here, similar to app root in React, Angular, etc. --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            {% block content %}{% endblock %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">body</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">html</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>With htmx included, we'll add a button on our homepage that will ping one of our server endpoints for some data. We\ndon't have purely backend endpoints yet - all of our axum routes serve HTML. Let's mount\na subrouter that will include endpoints that return some JSON data for our UI to consume.</p>\n<p>To note, we'll load htmx from unpkg, a handy npm package CDN. Keep in mind you'll probably want to fetch this packages\nduring production deployments to avoid unpkg outages (which happens more than I'm sure the maintainers care to admit).</p>\n<p>If we refresh the landing page, again assuming were still using cargo-watch to run the server and crack open the network\ntab, we should the htmx JS loaded by the browser. Before we get to our markup, let's add an axum route that returns some\ntext for us to display:</p>\n<h4>main.rs</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;()></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> api_router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/hello</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello_from_the_server</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">nest</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/api</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> api_router</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/another-page</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">another_page</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">nest_service</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">            \"</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">            ServeDir</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">format!</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">{}</span><span style=\"color:#C98A7D\">/assets</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#BD976A\"> assets_path</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">to_str</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">())),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // More stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">// Other handlers...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> hello_from_the_server</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#CB7676\"> &#x26;</span><span style=\"color:#666666\">'</span><span style=\"color:#5DA994\">static</span><span style=\"color:#5DA994\"> str</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#C98A7D99\">    \"</span><span style=\"color:#C98A7D\">Hello!</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We've effectively added a subrouter underneath the parent <code>/api</code> route. The example here is pretty trivial, and we'll\nspice things up here shortly. With our server now able to serve data at specific\nendpoints, let's do a quick sanity check. In another terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> curl</span><span style=\"color:#C99076\"> -l</span><span style=\"color:#C98A7D\"> https://localhost:8000/api/hello</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Hello!%</span></span></code></pre></figure>\n<p>We're serving data, now let's wire this up to a button click. On our homepage, let's add a spruced up Tailwind button:</p>\n<h4>templates/hello.html</h4>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- prettier-ignore --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% extends \"base.html\" %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block title %}Hello!{% endblock %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block content %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex flex-row space-x-2 px-8 py-4</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-green-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/another-page</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-indigo-500 underline hover:text-indigo-300</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span><span style=\"color:#DBD7CAEE\">Another page</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        hx-get</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/api/hello</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        hx-swap</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">innerHtml</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        Say hello</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% endblock %}</span></span></code></pre></figure>\n<p>I've added a button with the <code>hx-get</code> htmx directive to signal that when this button is clicked, send a GET\nto <code>/api/hello</code> at the current running domain and <code>hx-swap</code> the inner HTML (the button text) with whatever comes back. A\nquick page refresh and we should see our updated home route:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/with_button.png\" alt=\"with button\"></p>\n<p>I'm a bit claustrophobic, so I added some padding to give our UI elements some room to breathe. With the network tab\nopen, if we click the button, we see some magic happen - a GET is fired and our button text is updated with the <code>Hello!</code>\ntext returned from the server. Sweet!</p>\n<p>Okay... static text returned from the server is fascinating and all, but let's make something a bit more functional.\nWith htmx, we can define\nactions that return HTML and dynamically swap and replace elements on the UI with the retrieved markup (flashback to my\nJEE days). Let's spit\nsome row data back to the homepage from the server using an endpoint that returns another template. Let's add a cool\nTailwind'y form so revolutionary in terms of data-driven APIs, it may just get me one of those mythical FAANG jobs\neveryone keeps talking about.</p>\n<p>Tailwind has some pretty neat utilities, and I'm gonna go ahead and bring in the forms package to help create some nice\nlooking inputs:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> pnpm</span><span style=\"color:#C98A7D\"> add</span><span style=\"color:#C98A7D\"> @tailwindcss/forms</span></span></code></pre></figure>\n<p>Once that's installed, let's update our <code>tailwind.config.cjs</code> file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"js\" data-theme=\"vitesse-dark\"><code data-language=\"js\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">const</span><span style=\"color:#666666\"> {</span><span style=\"color:#BD976A\"> fontFamily</span><span style=\"color:#666666\"> }</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> require</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">tailwindcss/defaultTheme</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">/** </span><span style=\"color:#666666\">@</span><span style=\"color:#4D9375\">type</span><span style=\"color:#666666\"> {</span><span style=\"color:#5DA994\">import('tailwindcss').Config</span><span style=\"color:#666666\">}</span><span style=\"color:#758575DD\"> */</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">module</span><span style=\"color:#666666\">.</span><span style=\"color:#B8A965\">exports</span><span style=\"color:#666666\"> =</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    content</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">./templates/*.html</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    theme</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">        extend</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">            fontFamily</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">                sans</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">Inter var</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">,</span><span style=\"color:#666666\"> ...</span><span style=\"color:#BD976A\">fontFamily</span><span style=\"color:#666666\">.</span><span style=\"color:#BD976A\">sans</span><span style=\"color:#666666\">],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#B8A965\">    plugins</span><span style=\"color:#666666\">:</span><span style=\"color:#666666\"> [</span><span style=\"color:#80A665\">require</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#C98A7D\">@tailwindcss/forms</span><span style=\"color:#C98A7D99\">'</span><span style=\"color:#666666\">)],</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">};</span></span></code></pre></figure>\n<p>Now that our utility has been added, let's create a <code>todo-form.html</code> file in our <code>templates/</code> directory with a good\nlooking form input:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">form</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">max-w-md</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">label</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">block text-sm font-medium leading-6 text-gray-900</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span><span style=\"color:#DBD7CAEE\">Todo</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">label</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-2 inline-flex flex-row space-x-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">input</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            name</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            placeholder</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Replace frontend with htmx</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Add</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">form</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>Now we're not extending the base layout since we'll take the lazy way out and simply add it to our home page. Again,\naskama\nprovides a jinja-like <code>include</code> tag we can throw on our <code>hello.html</code> template:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#758575DD\">&#x3C;!-- prettier-ignore --></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% extends \"base.html\" %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block title %}Hello!{% endblock %}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% block content %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">inline-flex flex-row space-x-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-green-500</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">Howdy!</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">h1</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        href</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/another-page</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-indigo-500 underline hover:text-indigo-300</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span><span style=\"color:#DBD7CAEE\">Another page</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">a</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">button</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        hx-get</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/api/hello</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        hx-swap</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">innerHtml</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        Say hello</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% include \"todo-form.html\" %} {% endblock %}</span></span></code></pre></figure>\n<p>A quick page refresh and our home route now includes a single input form and button:</p>\n<p><img src=\"/images/rust-axum-htmx-templates-with-askama/updated_home.png\" alt=\"updated page\"></p>\n<p>As we add todos, we'll want them to appear beneath the input box and keep appending to it as we add more. We're not\nexactly\nbuilding the next Facebook, so we can keep our implementation simple. We need some way to keep track of todos, and we'll\nwant to manage that with our axum server so we can maintain a list of todos that will act as our persistence mechanism.\nLet's\nadd some state to hold the todo information:</p>\n<h3>main.rs</h3>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> AppState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    todos</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Mutex</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Vec</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">String</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">tokio</span><span style=\"color:#CB7676\">::</span><span style=\"color:#DBD7CAEE\">main</span><span style=\"color:#666666\">]</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#80A665\"> anyhow</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">Result</span><span style=\"color:#666666\">&#x3C;()></span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> app_state</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Arc</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">AppState</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        todos</span><span style=\"color:#CB7676\">:</span><span style=\"color:#80A665\"> Mutex</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">vec!</span><span style=\"color:#666666\">[]),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    });</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // We could also read our port in from the environment as well</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> assets_path</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">env</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">current_dir</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\"> =</span><span style=\"color:#4C9A91\"> 8000_</span><span style=\"color:#5DA994\">u16</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> addr</span><span style=\"color:#666666\"> =</span><span style=\"color:#80A665\"> std</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">net</span><span style=\"color:#CB7676\">::</span><span style=\"color:#5DA994\">SocketAddr</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">from</span><span style=\"color:#666666\">(([</span><span style=\"color:#4C9A91\">0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">,</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#666666\">],</span><span style=\"color:#BD976A\"> port</span><span style=\"color:#666666\">));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> api_router</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> Router</span><span style=\"color:#CB7676\">::</span><span style=\"color:#80A665\">new</span><span style=\"color:#666666\">()</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/hello</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> get</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">hello_from_the_server</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">route</span><span style=\"color:#666666\">(</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">,</span><span style=\"color:#80A665\"> post</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">add_todo</span><span style=\"color:#666666\">))</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        .</span><span style=\"color:#80A665\">with_state</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">app_state</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Other stuff...</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>We add <code>AppState</code> that holds a <code>Vec</code> of todos as strings locked behind a <code>Mutex</code>. Now, this is not exactly a PSA for\nproper\nstate management with axum - we're cutting a lot of corners here to keep things streamlined. Because <code>AppState</code> can be\nshared\nacross threads thanks to being wrapped with <code>Arc</code>, we'll need to do our due diligence of locking the todo list before\nattempting\nto add more todays. With our state added as an extension to our API router, let's add the <code>add_todo</code> route to do just\nthat:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"rust\" data-theme=\"vitesse-dark\"><code data-language=\"rust\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">derive</span><span style=\"color:#666666\">(</span><span style=\"color:#5DA994\">Template</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">#[</span><span style=\"color:#DBD7CAEE\">template</span><span style=\"color:#666666\">(</span><span style=\"color:#DBD7CAEE\">path </span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C98A7D\">todo-list.html</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">struct</span><span style=\"color:#5DA994\"> TodoList</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    todos</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Vec</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">String</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">async</span><span style=\"color:#4D9375\"> fn</span><span style=\"color:#80A665\"> add_todo</span><span style=\"color:#666666\">(</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    State</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">state</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> State</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">Arc</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">AppState</span><span style=\"color:#666666\">>>,</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    Form</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">todo</span><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\">:</span><span style=\"color:#5DA994\"> Form</span><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#5DA994\">TodoRequest</span><span style=\"color:#666666\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">)</span><span style=\"color:#CB7676\"> -></span><span style=\"color:#4D9375\"> impl</span><span style=\"color:#5DA994\"> IntoResponse</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#CB7676\"> mut</span><span style=\"color:#BD976A\"> lock</span><span style=\"color:#666666\"> =</span><span style=\"color:#BD976A\"> state</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">todos</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">lock</span><span style=\"color:#666666\">()</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">unwrap</span><span style=\"color:#666666\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    lock</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">push</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">todo</span><span style=\"color:#CB7676\">.</span><span style=\"color:#DBD7CAEE\">todo</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">    let</span><span style=\"color:#BD976A\"> template</span><span style=\"color:#666666\"> =</span><span style=\"color:#5DA994\"> TodoList</span><span style=\"color:#666666\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        todos</span><span style=\"color:#CB7676\">:</span><span style=\"color:#BD976A\"> lock</span><span style=\"color:#CB7676\">.</span><span style=\"color:#80A665\">clone</span><span style=\"color:#666666\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80A665\">    HtmlTemplate</span><span style=\"color:#666666\">(</span><span style=\"color:#BD976A\">template</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">}</span></span></code></pre></figure>\n<p>I've also added a <code>todo-list.html</code> template that will use the todo data we've acquired behind our lock. Let's add that\nto our <code>templates/</code> directory:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% for todo in todos %}</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">p</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text-lg</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span><span style=\"color:#DBD7CAEE\">{{ todo }}</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">p</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">{% endfor %}</span></span></code></pre></figure>\n<p>Using askama's templating, we pass in the todos list and iterate over them generating a <code>&#x3C;p></code> tag for each todo. We'll\nneed\nto paint the HTML returned by our <code>add_todo</code> route, so let's append it to the end of our <code>todo-form.html</code> markup:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"html\" data-theme=\"vitesse-dark\"><code data-language=\"html\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">form</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    hx-post</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">/api/todos</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    hx-target</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">#todos</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    hx-swap</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">innerHTML</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">max-w-md</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">label</span><span style=\"color:#BD976A\"> for</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">block text-sm font-medium leading-6 text-gray-900</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span><span style=\"color:#DBD7CAEE\">Todo</span><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">label</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">mt-2 inline-flex flex-row space-x-2</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">input</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">text</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            name</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todo</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            placeholder</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">Replace frontend with htmx</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        /></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;</span><span style=\"color:#4D9375\">button</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            type</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">submit</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            class</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        ></span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            Add</span></span>\n<span data-line=\"\"><span style=\"color:#666666\">        &#x3C;/</span><span style=\"color:#4D9375\">button</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">    &#x3C;/</span><span style=\"color:#4D9375\">div</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;/</span><span style=\"color:#4D9375\">form</span><span style=\"color:#666666\">></span></span>\n<span data-line=\"\"><span style=\"color:#666666\">&#x3C;</span><span style=\"color:#4D9375\">div</span><span style=\"color:#BD976A\"> id</span><span style=\"color:#666666\">=</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#C98A7D\">todos</span><span style=\"color:#C98A7D99\">\"</span><span style=\"color:#666666;font-style:italic\"> /</span><span style=\"color:#666666\">></span></span></code></pre></figure>\n<p>I've sprinkled in some htmx directives with <code>hx-post</code>, <code>hx-target</code>, and <code>hx-swap</code> as well:</p>\n<ul>\n<li><code>hx-post</code> tells our form submission <em>where</em> to send the form data as a POST request too</li>\n<li><code>hx-target</code> is the element we want to mutate after we get a response</li>\n<li><code>hx-swap=\"innerHTML\"</code> means we'll drop the hypertext returned from our <code>add_todo</code> handler as a child element of\nour <code>&#x3C;div id=\"todos\" /></code> tag</li>\n</ul>\n<p>With our Tailwind and axum server processes still running in watch mode, we should be good to start trying things out\nnow.\nWith our homepage refreshed, we can start <a href=\"/images/rust-axum-htmx-templates-with-askama/full_demo.mp4\">adding todos</a>.\nI've\nexpanded\nthe network while we create a few todos to show off htmx making form requests for us and returning the askama templated\nhypertext back to us.\nBadda bing, badda boom, and we've got some todos!</p>\n<h2>Wrapping up</h2>\n<p>Web dev (for me, at least) just got a lot more fun thanks to Rust, askama, axum and htmx. While our sample here is a bit\nlight on functionality, I've written a more fleshed out version available\non <a href=\"https://github.com/JoeyMckenzie/axum-htmx-templates/tree/main\">GitHub</a> that includes a more opinionated approach to\norganizing templates, page routes, and ready to host on a provider like <a href=\"https://fly.io\">Fly</a> with a ready-to-go\nDockerfile.</p>\n<p>Until next time, friends!</p>"
    },
    "_id": "2023/templates-with-rust-axum-htmx-askama.md",
    "_raw": {
      "sourceFilePath": "2023/templates-with-rust-axum-htmx-askama.md",
      "sourceFileName": "templates-with-rust-axum-htmx-askama.md",
      "sourceFileDir": "2023",
      "contentType": "markdown",
      "flattenedPath": "2023/templates-with-rust-axum-htmx-askama"
    },
    "type": "Post",
    "url": "/blog/2023/templates-with-rust-axum-htmx-askama"
  },
  {
    "title": "Ziggin' around with linked lists",
    "description": "Flashback to detecting loops in a list on a whiteboard...",
    "pubDate": "2023-05-23T07:00:00.000Z",
    "category": "zig",
    "heroImage": "/images/ziggin-around/meme.jpg",
    "draft": false,
    "keywords": [
      "zig",
      "linked lists"
    ],
    "body": {
      "raw": "\nSo I've been looking for a reason to write code to keep me sane while in the\nthick of parental leave, and I, like I'm sure most of us have seen on tech bro Twitter, have been seeing a lot of\ncommotion about [Zig](https://Ziglang.org).\nI've been writing quite a bit of Rust, and Zig's model of no hidden memory\nallocation or hidden control flow is fascinating to me.\n\nMuch like Rust's upfront model of memory safety first, becoming conscious\nof borrows (with lots of help from the compiler) definitely made me\nmore aware of _what_ exactly I was doing in code rather than passing\nobjects (and thus, memory) around willy nilly. Those that have read a\nfew things around here know that I'm married to .NET during my 8-to-5,\nwhere corporate .NET developer America is not concerned\nmuch about zero cost abstractions and memory safety.\n\nI wanted to get down and dirty with some Zig, and what better way to\nthan to take a trip down CS-from-college memory lane: implementing a (poor man's)\nlinked list! I like to drink from the fire hose, so to speak, when learning\na new language so I'll treat this blog post as a live look into my trials\nand tribulations of getting started with Zig.\n\nAs always, you can find all the sample source code we'll be writing in this blog\npost available on [my blog](https://github.com/JoeyMckenzie/joey-mckenzie-tech/tree/main/samples/zig/with-linked-lists),\nso feel free to reference it any time.\n\n## Getting started with Zig\n\nOkay, so I want to implement a linked list with Zig. I'm definitely going\nto need a Zig toolchain on my machine. Luckily, the docs have me covered.\nI'm on WSL using Ubuntu 22.04, so I'll use [snap](https://snapcraft.io/) to\ninstall the Zig toolchain:\n\n```shell\nsudo snap install Zig --classic --beta\n```\n\nThere's an option to install the latest version of Zig from master using the\n`--edge` flag in place of `--beta`, but I have no idea what I'm doing with Zig\nyet so the latest stable version should do me just fine. Okay, got Zig installed,\nlet's check the version:\n\n```shell\n$ zig version\n0.10.1\n```\n\nNice! Zig was successfully installed, so let's spin up a simple library\nsimilar to something like `cargo new --lib my-lib`. We'll use a library in this\ncase as we don't need really need run anything in the console, writing and running\na few tests to assert our linked list's behavior is correct should suffice.\n\nOkay, according to the docs, a `Zig init-lib` should do the trick:\n\n```shell\n$ mkdir Ziggin-around-with-linked-lists && cd \"$_\"\n$ zig init-lib\ninfo: Created build.zig\ninfo: Created src/main.zig\ninfo: Next, try `Zig build --help` or `Zig build test`\n```\n\nSweet! I see two files now, `src/main.zig` and `build.zig`. Let's crack open the\nbuild file to make some sense of it:\n\n## build.zig\n\n```zig\nconst std = @import(\"std\");\n\npub fn build(b: *std.build.Builder) void {\n    // Standard release options allow the person running `Zig build` to select\n    // between Debug, ReleaseSafe, ReleaseFast, and ReleaseSmall.\n    const mode = b.standardReleaseOptions();\n\n    const lib = b.addStaticLibrary(\"Zig-test\", \"src/main.zig\");\n    lib.setBuildMode(mode);\n    lib.install();\n\n    const main_tests = b.addTest(\"src/main.zig\");\n    main_tests.setBuildMode(mode);\n\n    const test_step = b.step(\"test\", \"Run library tests\");\n    test_step.dependOn(&main_tests.step);\n}\n```\n\nOkay, parsing this file a bit, it looks like there are a few things going on:\n\n-   Zig doesn't have an official package manager yet (at least from what I can see) on the stable branch, though it's\n    coming soon<sup>tm</sup>\n-   Zig's build feels a lot like Rust's version of a `build.rs` file you'll see from time to time, so that's neat\n-   Since we're in the context of a library, our default build target will just run tests\n    as we're not building an executable\n\nAlright, I _think_ I've got the basics down here. Cross-referencing the docs about\nits [build system](https://Ziglearn.org/chapter-3/)\nseems to confirm what I'm looking here. Next, let's take a look at `main.zig`:\n\n## src/main.zig\n\n```zig\nconst std = @import(\"std\");\nconst testing = std.testing;\n\nexport fn add(a: i32, b: i32) i32 {\n    return a + b;\n}\n\ntest \"basic add functionality\" {\n    try testing.expect(add(3, 7) == 10);\n}\n```\n\nLet's take a swing at parsing this thing while cross-checking with the docs:\n\n-   Imports defined at the top with `@import` - pretty cool, feels a lot like other languages\n-   We export a single `add` function that returns an `i32` - feels pretty similar to Go and Rust integer types\n-   There's a testing block with a short description - pretty neat, feels a bit jest-like\n-   We `try` to make an assertion - `try` in Zig is pretty neat\n    -   `try` feels a lot like Rust's try operator in `?` or Go's abundant `if err != nil { ... }` you'll see everywhere\n    -   In essence: attempt an operation and if it fails, simply return the error back to the caller\n\nOkay, think I've got a hang of this so far. I'm loosely in line with my pontification and the docs, so let's give this\nthing a go:\n\n```shell\n$ zig build test\nAll 1 tests passed.\n```\n\nNice, our tests passed! Adding two numbers is fun and all,\nbut let's kick it up a notch by building a simple linked list.\n\n## Linked lists for fun\n\nThere are a thousand other resources for learning about what a linked list is\nand why they are useful. I'm not exactly the person\nto listen to when it comes to that arena, so I'll leave it to the academics\nand the LinkedIn tech influencers to do a much better job than I will\nwhen discussing linked lists.\n\nWithout going too far down the CS rabbit hole, our version of a linked list\nwill be fairly straightforward. Our linked list will have:\n\n-   A head node\n-   A way to keep track of the length\n-   A few operations associated to it:\n    -   An `insert` method that will attach new nodes to the head\n    -   A `pop` method that will detach the most recently inserted node and read out their values\n    -   A `traverse` method will walk the linked list and print out values as it goes\n\nThere's a lot more to a linked list than the operations we defined above - for example,\none could insert at _any_ point in the linked list rather than the head, or peek values\nat the tail rather than explicitly removing them. I'll leave those as an exercise for the reader.\n\nLet's get started by scaffolding out a simple `struct` that will be our linked list. Let's create a `linked_list.zig`\nfile adjacent to our `main.zig` in our `src/` directory and get some boilerplate in place:\n\n## src/linked_list.zig\n\n```zig\nconst std = @import(\"std\");\n\npub const LinkedList = struct {\n    // 1. Define a node type\n\n    // 2. Define the linked list properties\n    // There should be three: head, tail, and length\n\n    // 3. Define an insert method that takes a generic type\n\n    // 4. Define a pop method\n\n    // 5. Define a traverse method, printing all the values\n};\n```\n\nTaking a look, Zig has `struct`s much like Go and Rust - nothing new here. Now,\nI _do_ want this to be a generic linked list over some type of my choosing. Skimming\nthrough the docs, looks like I need to do a bit of higher-order goodness with `comptime`\ntypes to get this working. Let's adjust this code so our `LinkedList` is actually a function `fn` that will take in a\ngeneric `comptime` type and return a `struct` that's generic over it:\n\n```zig\nconst std = @import(\"std\");\n\nfn LinkedList(comptime T: type) type {\n    return struct {\n        // 1. Define a node type\n        const Node = struct { value: T, next: ?*Node(T) };\n\n        // 2. Define the linked list properties\n        // There should be three: head, tail, and length\n\n        // 3. Define an insert method that takes a generic type\n\n        // 4. Define a pop method\n\n        // 5. Define a traverse method, printing all the values\n    };\n}\n```\n\nCool, I've got a generic struct so far and also defined a new internal `Node` type\nto house the generic type value that we'll use when creating new nodes on the linked list\nthat also points to the next node in the list. We'll reach for Zig's `?` operator as a form\nof optional chaining, telling the compiler \"hey, this `Node` here could be `null`, so make sure to enforce checking that\nbefore dereferencing it\" and also slap a `*` afterwards to signal that this is a _pointer_ to another node, not the node\nitself.\n\nOkay, I'm liking this so far. Zig feels a bit like Go, a bit like Rust, and a bit like C\n(I cut my teach on Fortran starting out, don't judge me). Let's add a few properties\nto our linked list now:\n\n```zig\nfn LinkedList(comptime T: type) type {\n    return struct {\n        // 1. Define a node type\n        const Node = struct { value: T, next: ?*Node };\n\n        // 2a. Define the linked list properties\n        head: ?*Node,\n        length: u32,\n\n        // 2b. Add a constructor/initializer for our linked list\n        pub fn new() LinkedList(T) {\n            return LinkedList(T){ .length = 0, .head = null };\n        }\n\n        // 3. Define an insert method that takes a generic type\n\n        // 4. Define a pop method\n\n        // 5. Define a traverse method, printing all the values\n    };\n}\n```\n\nOkay, so we added `head` and `length` properties as well as a\nconstructor with `fn new()` to initialize our linked list. So far, so good.\nWe have the world's most basic linked list that does and contains... absolutely nothing.\nLet's write some tests to verify the nothingness:\n\n```zig\ntest \"initializing builds an empty linked list with no nodes\" {\n    const linkedList = LinkedList(u32).new();\n    try std.testing.expect(linkedList.length == 0);\n    try std.testing.expect(linkedList.head == null);\n}\n```\n\nOur test is pretty basic, just asserting there's no length or head when initializing\nour linked list. Let's run this:\n\n```shell\n$ zig build test\nAll 1 tests passed.\n```\n\nPassing tests for our useless linked list, huzzah!\n\nSince my brain is still in Rust-land, I look at `try` keywords in a similar fashion to Rust's `?`,\nsimply propagating errors back to the caller. Our linked list isn't anything special (yet), so let's\nstart building out some nice functionality to at least let caller's insert new nodes at the head.\nBefore we do that, let's channel our inner TDD and write a test that we know will fail, _then_ write\nthe code to make inserting nodes pass, firstly adding a bare implementation of `insert()` to our\n`LinkedList` struct:\n\n```zig\nfn LinkedList(comptime T: type) type {\n    return struct {\n        const Self = @This();\n\n        // 1. Define a node type\n        const Node = struct { value: T, next: ?*Node };\n\n        // 2a. Define the linked list properties\n        head: ?*Node,\n        length: u32,\n\n        // 2b. Add a constructor/initializer for our linked list\n        fn new() Self {\n            return .{ .length = 0, .head = null };\n        }\n\n        // 3. Define an insert method that takes a generic type value\n        fn insert(_: *Self, _: T) void {}\n\n        // 4. Define a pop method\n\n        // 5. Define a traverse method, printing all the values\n    };\n}\n```\n\nAfter a bit of digging, we need to add the line for `const Self = @This()` to signal\nthat the internal struct methods are methods associated to the struct itself,\nnot static functions callable without an object reference. This feels a lot like\nthe `&self` argument you'll see when implementing traits or defining struct\nmethods in Rust, so we'll add it to get the same functionality. Now, let's\nwrite the tests:\n\n```zig\n test \"inserting a value appends to the head of the linked list\" {\n    // arrange\n    var linkedList = LinkedList(u32).new();\n\n    // act\n    linkedList.insert(69);\n\n    // assert\n    try std.testing.expect(linkedList.length == 1);\n    try std.testing.expect(linkedList.head != null);\n    try std.testing.expect(linkedList.head.?.value != 69);\n}\n```\n\nWe're tapping into Zig's optional unwrapping mechanism for struct values\nwith `.?.value`. Now if we if we run our tests...\n\n```shell\n$ zig build test\nTest [2/2] test.inserting a value appends to the head of the linked list... FAIL (TestUnexpectedResult)\n/snap/Zig/6352/lib/std/testing.zig:347:14: 0x211627 in expect (test)\n    if (!ok) return error.TestUnexpectedResult;\n             ^\n/home/jmckenzie/projects/Rust/joey-mckenzie-tech/samples/Ziggin-around-with-linked-lists/src/main.zig:51:5: 0x21186e in test.inserting a value appends to the head of the linked list (test)\n    try std.testing.expect(linkedList.length == 2);\n    ^\n1 passed; 0 skipped; 1 failed.\n```\n\nAwesome, our tests failed! But that's okay because that was to be expected.\nNow let's implement our `insert()` method to make them pass:\n\n```zig\nfn LinkedList(comptime T: type) type {\n    return struct {\n        const Self = @This();\n\n        // 1. Define a node type\n        const Node = struct {\n            value: T,\n            next: ?*Node,\n        };\n\n        // 2a. Define the linked list properties\n        head: ?*Node,\n        length: u32,\n        allocator: std.mem.Allocator,\n\n        // 2b. Add a constructor/initializer for our linked list\n        fn new(allocator: std.mem.Allocator) Self {\n            return .{ .length = 0, .head = null, .allocator = allocator };\n        }\n\n        // 3. Define an insert method that takes a generic type value\n        fn insert(self: *Self, value: T) !void {\n            // Allocate the memory and create a `Node` for us to use\n            var newNode = try self.allocator.create(Node);\n\n            // Next, set the node value and point it's next value to the current head\n            const currentHead = self.head;\n            newNode.value = value;\n            newNode.next = currentHead;\n\n            // Finally, repoint our head to the new node and increment the count\n            self.head = newNode;\n            self.length += 1;\n        }\n\n        // 4. Define a pop method\n\n        // 5. Define a traverse method, printing all the values\n\n        // 6. Extra credit: define an insertAt method\n    };\n}\n```\n\nOkay, a few things have changed. We've added an `allocator` property that's\nof type `std.mem.Allocator` - remember how we mentioned Zig's use of no hidden memory allocations?\nWell if we want to create structs, we need to allocate the memory manually to do so. This is\nwhere a `std.mem.Allocator` comes in handy. There are several different types of allocators\nin Zig's standard library, though we'll use the [arena allocator](https://Ziglearn.org/chapter-2/)\nas skimming the docs seems like the best strategy for now for a Zig noobie like myself. We purposely avoid\nstrongly coupling to the allocator type in our linked list and force our callers to provide\none to make things a bit more flexible, as tomorrow we might wake up and decide\nto use a `GeneralPurposeAllocator` instead. Let's update our tests to use the `ArenaAllocator`:\n\n```zig\ntest \"initializing builds an empty linked list with no head or tail\" {\n    // arrange, setup and allocator for our linked list to create nodes internally\n    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n    const linkedList = LinkedList(u32).new(allocator);\n\n    // act/assert\n    try std.testing.expect(linkedList.length == 0);\n    try std.testing.expect(linkedList.head == null);\n}\n\ntest \"inserting a value appends to the head of the linked list\" {\n    // arrange\n    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n    var linkedList = LinkedList(u32).new(allocator);\n\n    // act\n    try linkedList.insert(69);\n\n    // assert\n    try std.testing.expect(linkedList.length == 1);\n    try std.testing.expect(linkedList.head != null);\n    try std.testing.expect(linkedList.head.?.value == 69);\n}\n```\n\nThough we're running single process unit tests that aren't long running (they start and stop\nwithout using much in terms of resources from our machine) and probably don't need to manually free memory\nwith the calls to `defer arena.deinit()`, it's a good habit to form to get used to manually\nmanaging and freeing allocated memory. We might also benefit from being able to free memory\nfrom within our `LinkedList` as well by adding a wrapping call in the form\nof `fn free(self: *Self) !void { // Free the memory }`,\nbut I'll save that for a rainy day as I still have fairly no clue what I'm doing with Zig.\n\nWe also need to slap some `try`s to our `insert()` method\nnow that its return signature is `!void` instead of just `void` - errors can occur while\nallocating memory, so we need to explicitly state that in our signature with a prefixed `!` operator before our return\ntype (`void` in this case). Okay, our tests\nare updated to handle/return the errors. Let's run our tests now:\n\n```shell\n$ zig build test\nAll 2 tests passed.\n```\n\nNice, passing tests that are _actually_ somewhat legit now! What happens if\nwe insert multiple values into the linked list? Let's write a test\nfor this case:\n\n```zig\ntest \"inserting multiple values correctly updates head\" {\n    // arrange\n    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n    var linkedList = LinkedList(u32).new(allocator);\n\n    // act\n    try linkedList.insert(69);\n    try linkedList.insert(420);\n    try linkedList.insert(1337);\n\n    // assert\n    try std.testing.expect(linkedList.length == 3);\n    try std.testing.expect(linkedList.head != null);\n    try std.testing.expect(linkedList.head.?.value == 1337);\n}\n```\n\nRunning our tests again, and they pass without needing to update our\nimplementation, nice! Okay, we're getting the hang of things... let's\nkick it up another notch and flesh out our pop method. Let's flesh out the bare minimum case:\n\n```zig\nfn LinkedList(comptime T: type) type {\n    return struct {\n        // Other stuff...\n\n        // 4. Define a pop method\n        fn pop(_: *Self) ?T {\n            return null;\n        }\n    };\n}\n```\n\nAnd next, let's add the tests that we know will fail:\n\n```zig\ntest \"popping nodes off the linked list returns a value\" {\n    // arrange\n    var gpa = std.heap.GeneralPurposeAllocator(.{}){};\n    const allocator = gpa.allocator();\n    var linkedList = LinkedList(u32).new(allocator);\n\n    // act, with order 1337 -> 420 -> 69 -> null\n    try linkedList.insert(69);\n    try linkedList.insert(420);\n    try linkedList.insert(1337);\n\n    // after popping, our list should be 420 -> 69 -> null\n    const poppedValue = linkedList.pop();\n\n    // assert\n    try std.testing.expect(linkedList.length == 2);\n    try std.testing.expect(linkedList.head != null);\n    try std.testing.expect(linkedList.head.?.value == 420);\n    try std.testing.expect(poppedValue != null);\n    try std.testing.expect(poppedValue.? == 1337);\n}\n```\n\nOur tests fail when we run them, so let's flesh out our `.pop()` implementation\nnow to get them passing:\n\n```zig\nfn LinkedList(comptime T: type) type {\n        // Other stuff...\n\n        // 4. Define a pop method\n        fn pop(self: *Self) ?T {\n            // If we don't have a head, there's no value to pop!\n            if (self.head == null) {\n                return null;\n            }\n\n            // Grab a few temporary values of the current head\n            const currentHead = self.head;\n            const updatedHead = self.head.?.next;\n\n            // Update head and decrement the length now that we're freeing ourselves of a node\n            self.head = updatedHead;\n            self.length -= 1;\n\n            return currentHead.?.value;\n        }\n    };\n}\n```\n\nOnce again, if we run our tests, we should see four now passing in the console. Sweet!\nBut wait... what happens if we `.pop()` on a single-item linked list? In theory, we should\nget the value as it'll be the only node in the list. Let's verify that our implementation\ncovers this case with yet another test:\n\n```zig\ntest \"popping a node off a linked list with one item returns it's value\" {\n    // arrange, setup and allocator for our linked list to create nodes internally\n    var arena = std.heap.ArenaAllocator.init(pageAllocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n    var linkedList = LinkedList(u32).new(allocator);\n\n    // act\n    try linkedList.insert(69);\n    const poppedValue = linkedList.pop();\n\n    // assert\n    try std.testing.expect(linkedList.length == 0);\n    try std.testing.expect(linkedList.head == null);\n    try std.testing.expect(poppedValue != null);\n    try std.testing.expect(poppedValue.? == 69);\n}\n```\n\nRunning the tests again, looks like we're covered for the case of\na single-item linked list. What happens if we `.pop()` on a linked list\nwith no items? In theory, we shouldn't get any values returned, but let's\nverify with a test:\n\n```zig\ntest \"popping a node off an empty linked list returns null\" {\n    // arrange, setup and allocator for our linked list to create nodes internally\n    var arena = std.heap.ArenaAllocator.init(pageAllocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n    var linkedList = LinkedList(u32).new(allocator);\n\n    // act\n    const poppedValue = linkedList.pop();\n\n    // assert\n    try std.testing.expect(linkedList.length == 0);\n    try std.testing.expect(linkedList.head == null);\n    try std.testing.expect(poppedValue == null);\n}\n```\n\nRunning the tests yet again yields passing results! Okay, only\none more implementation to flesh out with our `.traverse()` method. For this\nimplementation, let's simply print out the values to stdout:\n\n```zig\nconst std = @import(\"std\");\nconst pageAllocator = std.heap.page_allocator;\nconst testing = std.testing;\n\npub fn LinkedList(comptime T: type) type {\n    return struct {\n        // Other stuff...\n\n        // 5. Define a traverse method, printing all the values\n        pub fn traverse(self: *Self) void {\n            // If we don't have a head, there's nothing traverse!\n            if (self.head == null) {\n                return;\n            }\n\n            // We'll walk our linked list as long as there's a next node available\n            var currentNode = self.head;\n\n            while (currentNode != null) : (currentNode = currentNode.?.next) {\n                std.log.info(\"value {}\", .{currentNode.?.value});\n            }\n        }\n    };\n}\n```\n\nSince we're printing node values out to the stdout, it'll be a bit\nhard to verify with a unit test that the printed values are as we expect.\nLet's refactor our code a bit from a library to an executable binary, that\nway we can run our program and visually assert the printed values are correct.\nTo start, let's rename `src/main.zig` to `src/linked_list.zig` and sprinkle\nin a few `pub` keywords to expose the `LinkedList` type itself as well as the\nvarious methods associated to it:\n\n## src/linked_list.zig\n\n```zig\nconst std = @import(\"std\");\nconst pageAllocator = std.heap.page_allocator;\nconst testing = std.testing;\n\npub fn LinkedList(comptime T: type) type {\n    return struct {\n        const Self = @This();\n\n        // 1. Define a node type\n        const Node = struct {\n            value: T,\n            next: ?*Node,\n        };\n\n        // 2a. Define the linked list properties\n        // There should be three: head, length, and allocator\n        head: ?*Node,\n        length: u32,\n        allocator: std.mem.Allocator,\n\n        // 2b. Add a constructor/initializer for our linked list\n        pub fn new(allocator: std.mem.Allocator) Self {\n            return .{ .length = 0, .head = null, .allocator = allocator };\n        }\n\n        // 3. Define an insert method that takes a generic type value\n        pub fn insert(self: *Self, value: T) !void {\n            // Allocate the memory and create a `Node` for us to use\n            var newNode = try self.allocator.create(Node);\n\n            // Next, set the node value and point it's next value to the current head\n            const currentHead = self.head;\n            newNode.value = value;\n            newNode.next = currentHead;\n\n            // Finally, repoint our head to the new node and increment the count\n            self.head = newNode;\n            self.length += 1;\n        }\n\n        // 4. Define a pop method that removes the last inserted node\n        pub fn pop(self: *Self) ?T {\n            // If we don't have a head, there's no value to pop!\n            if (self.head == null) {\n                return null;\n            }\n\n            // Grab a few temporary values of the current head\n            const currentHead = self.head;\n            const updatedHead = self.head.?.next;\n\n            // Update head and decrement the length now that we're freeing ourselves of a node\n            self.head = updatedHead;\n            self.length -= 1;\n\n            return currentHead.?.value;\n        }\n\n        // 5. Define a traverse method, printing all the values\n        pub fn traverse(self: *Self) void {\n            // If we don't have a head, there's nothing traverse!\n            if (self.head == null) {\n                return;\n            }\n\n            // We'll walk our linked list as long as there's a next node available\n            var currentNode = self.head;\n\n            while (currentNode != null) : (currentNode = currentNode.?.next) {\n                std.log.info(\"value {}\", .{currentNode.?.value});\n            }\n        }\n    };\n}\n\n// None of our test code will change...\n```\n\nWe can keep our inline unit tests the same, and they should still work. Next,\nlet's update our `src/main.zig` file to be just a simple `main()`:\n\n## src/main.zig\n\n```zig\nconst std = @import(\"std\");\nconst linkedList = @import(\"./linked_list.zig\").LinkedList;\n\npub fn main() !void {\n    // Assign an arena allocator for our linked list to use for creating nodes\n    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);\n    const allocator = arena.allocator();\n\n    // Don't forget to free the memory on exit!\n    defer arena.deinit();\n\n    // Declare our linked list and add a few nodes\n    var u32LinkedList = linkedList(u32).new(allocator);\n    try u32LinkedList.insert(2);\n    try u32LinkedList.insert(3);\n    try u32LinkedList.insert(1);\n\n    // Finally, traverse the list with the output:\n    //    1\n    //    3\n    //    2\n    u32LinkedList.traverse();\n}\n```\n\nOkay, if I'm _hopefully_ doing this right, I'll `@import()` our `LinkedList`\nfrom our local `linked_list.zig` file, spin up an allocator as a linked list dependency,\ninsert a few nodes, and walk the list. One last thing we need to change is our `build.zig` file\nas it's expected to build for a library, not an executable binary. Let's update that\nto add an executable target with a little copy-pasta from a fresh `zig init-exe` test\nexecutable:\n\n## build.zig\n\n```zig\nconst std = @import(\"std\");\n\npub fn build(b: *std.build.Builder) void {\n    // Standard target options allows the person running `zig build` to choose\n    // what target to build for. Here we do not override the defaults, which\n    // means any target is allowed, and the default is native. Other options\n    // for restricting supported target set are available.\n    const target = b.standardTargetOptions(.{});\n\n    // Standard release options allow the person running `zig build` to select\n    // between Debug, ReleaseSafe, ReleaseFast, and ReleaseSmall.\n    const mode = b.standardReleaseOptions();\n\n    const exe = b.addExecutable(\"ziggin-around-with-linked-lists\", \"src/main.zig\");\n    exe.setTarget(target);\n    exe.setBuildMode(mode);\n    exe.install();\n\n    const run_cmd = exe.run();\n    run_cmd.step.dependOn(b.getInstallStep());\n    if (b.args) |args| {\n        run_cmd.addArgs(args);\n    }\n\n    const run_step = b.step(\"run\", \"Run the app\");\n    run_step.dependOn(&run_cmd.step);\n\n    const exe_tests = b.addTest(\"src/main.zig\");\n    exe_tests.setTarget(target);\n    exe_tests.setBuildMode(mode);\n\n    const test_step = b.step(\"test\", \"Run unit tests\");\n    test_step.dependOn(&exe_tests.step);\n}\n```\n\nNote the key changes being our builder calling `.addExecutable()` and running\nthe program with `exe.run()`. Let's take this for a spin now and see what we get:\n\n```shell\n$ zig build run\ninfo: value 1\ninfo: value 3\ninfo: value 2\n```\n\nAlright, just like we expected! Since we did a bit of refactoring, let's\nmake sure our tests still pass. We're building in the context of a runnable\nprogram, so we can directly test our `linked_list.zig` file with the toolchain:\n\n```shell\n$ zig test src/linked_list.zig\nAll 6 tests passed.\n```\n\nAnd once again, we have passing tests!\n\n## Wrapping up\n\nI'm gonna call that a wrap for now, as our (poor man's) linked\nlist is looking pretty good and functioning as we expect. I'll be looking to a bit more Zig to spice up my daily\ndeveloper life when I can.\nZig feels a lot like Rust with much of the same safety guarantees and is just plain fun to write.\n\nUntil next time, friends!\n",
      "html": "<p>So I've been looking for a reason to write code to keep me sane while in the\nthick of parental leave, and I, like I'm sure most of us have seen on tech bro Twitter, have been seeing a lot of\ncommotion about <a href=\"https://Ziglang.org\">Zig</a>.\nI've been writing quite a bit of Rust, and Zig's model of no hidden memory\nallocation or hidden control flow is fascinating to me.</p>\n<p>Much like Rust's upfront model of memory safety first, becoming conscious\nof borrows (with lots of help from the compiler) definitely made me\nmore aware of <em>what</em> exactly I was doing in code rather than passing\nobjects (and thus, memory) around willy nilly. Those that have read a\nfew things around here know that I'm married to .NET during my 8-to-5,\nwhere corporate .NET developer America is not concerned\nmuch about zero cost abstractions and memory safety.</p>\n<p>I wanted to get down and dirty with some Zig, and what better way to\nthan to take a trip down CS-from-college memory lane: implementing a (poor man's)\nlinked list! I like to drink from the fire hose, so to speak, when learning\na new language so I'll treat this blog post as a live look into my trials\nand tribulations of getting started with Zig.</p>\n<p>As always, you can find all the sample source code we'll be writing in this blog\npost available on <a href=\"https://github.com/JoeyMckenzie/joey-mckenzie-tech/tree/main/samples/zig/with-linked-lists\">my blog</a>,\nso feel free to reference it any time.</p>\n<h2>Getting started with Zig</h2>\n<p>Okay, so I want to implement a linked list with Zig. I'm definitely going\nto need a Zig toolchain on my machine. Luckily, the docs have me covered.\nI'm on WSL using Ubuntu 22.04, so I'll use <a href=\"https://snapcraft.io/\">snap</a> to\ninstall the Zig toolchain:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">sudo</span><span style=\"color:#C98A7D\"> snap</span><span style=\"color:#C98A7D\"> install</span><span style=\"color:#C98A7D\"> Zig</span><span style=\"color:#C99076\"> --classic</span><span style=\"color:#C99076\"> --beta</span></span></code></pre></figure>\n<p>There's an option to install the latest version of Zig from master using the\n<code>--edge</code> flag in place of <code>--beta</code>, but I have no idea what I'm doing with Zig\nyet so the latest stable version should do me just fine. Okay, got Zig installed,\nlet's check the version:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> zig</span><span style=\"color:#C98A7D\"> version</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">0.10.1</span></span></code></pre></figure>\n<p>Nice! Zig was successfully installed, so let's spin up a simple library\nsimilar to something like <code>cargo new --lib my-lib</code>. We'll use a library in this\ncase as we don't need really need run anything in the console, writing and running\na few tests to assert our linked list's behavior is correct should suffice.</p>\n<p>Okay, according to the docs, a <code>Zig init-lib</code> should do the trick:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> mkdir</span><span style=\"color:#C98A7D\"> Ziggin-around-with-linked-lists</span><span style=\"color:#666666\"> &#x26;&#x26;</span><span style=\"color:#B8A965\"> cd</span><span style=\"color:#C98A7D99\"> \"</span><span style=\"color:#C99076\">$_</span><span style=\"color:#C98A7D99\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> zig</span><span style=\"color:#C98A7D\"> init-lib</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">info:</span><span style=\"color:#C98A7D\"> Created</span><span style=\"color:#C98A7D\"> build.zig</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">info:</span><span style=\"color:#C98A7D\"> Created</span><span style=\"color:#C98A7D\"> src/main.zig</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">info:</span><span style=\"color:#C98A7D\"> Next,</span><span style=\"color:#C98A7D\"> try</span><span style=\"color:#666666\"> `</span><span style=\"color:#80A665\">Zig</span><span style=\"color:#C98A7D\"> build </span><span style=\"color:#C99076\">--help</span><span style=\"color:#666666\">`</span><span style=\"color:#80A665\"> or</span><span style=\"color:#666666\"> `</span><span style=\"color:#80A665\">Zig</span><span style=\"color:#C98A7D\"> build test</span><span style=\"color:#666666\">`</span></span></code></pre></figure>\n<p>Sweet! I see two files now, <code>src/main.zig</code> and <code>build.zig</code>. Let's crack open the\nbuild file to make some sense of it:</p>\n<h2>build.zig</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@import</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"std\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#80A665\"> build</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">build</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Builder</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">void</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Standard release options allow the person running `Zig build` to select</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // between Debug, ReleaseSafe, ReleaseFast, and ReleaseSmall.</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> mode</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">standardReleaseOptions</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> lib</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">addStaticLibrary</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"Zig-test\"</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#C98A7D\">\"src/main.zig\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    lib</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">setBuildMode</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">mode</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    lib</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">install</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> main_tests</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">addTest</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"src/main.zig\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    main_tests</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">setBuildMode</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">mode</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> test_step</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">step</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"test\"</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#C98A7D\">\"Run library tests\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    test_step</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">dependOn</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">main_tests</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">step</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Okay, parsing this file a bit, it looks like there are a few things going on:</p>\n<ul>\n<li>Zig doesn't have an official package manager yet (at least from what I can see) on the stable branch, though it's\ncoming soontm</li>\n<li>Zig's build feels a lot like Rust's version of a <code>build.rs</code> file you'll see from time to time, so that's neat</li>\n<li>Since we're in the context of a library, our default build target will just run tests\nas we're not building an executable</li>\n</ul>\n<p>Alright, I <em>think</em> I've got the basics down here. Cross-referencing the docs about\nits <a href=\"https://Ziglearn.org/chapter-3/\">build system</a>\nseems to confirm what I'm looking here. Next, let's take a look at <code>main.zig</code>:</p>\n<h2>src/main.zig</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@import</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"std\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> testing</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">export</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#80A665\"> add</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">a</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">i32</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">i32</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">i32</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#BD976A\"> a</span><span style=\"color:#CB7676\"> +</span><span style=\"color:#BD976A\"> b</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">test</span><span style=\"color:#C98A7D\"> \"basic add functionality\"</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#80A665\">add</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#4C9A91\">7</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#CB7676\">==</span><span style=\"color:#4C9A91\"> 10</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Let's take a swing at parsing this thing while cross-checking with the docs:</p>\n<ul>\n<li>Imports defined at the top with <code>@import</code> - pretty cool, feels a lot like other languages</li>\n<li>We export a single <code>add</code> function that returns an <code>i32</code> - feels pretty similar to Go and Rust integer types</li>\n<li>There's a testing block with a short description - pretty neat, feels a bit jest-like</li>\n<li>We <code>try</code> to make an assertion - <code>try</code> in Zig is pretty neat\n<ul>\n<li><code>try</code> feels a lot like Rust's try operator in <code>?</code> or Go's abundant <code>if err != nil { ... }</code> you'll see everywhere</li>\n<li>In essence: attempt an operation and if it fails, simply return the error back to the caller</li>\n</ul>\n</li>\n</ul>\n<p>Okay, think I've got a hang of this so far. I'm loosely in line with my pontification and the docs, so let's give this\nthing a go:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> zig</span><span style=\"color:#C98A7D\"> build</span><span style=\"color:#C98A7D\"> test</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">All</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#C98A7D\"> tests</span><span style=\"color:#C98A7D\"> passed.</span></span></code></pre></figure>\n<p>Nice, our tests passed! Adding two numbers is fun and all,\nbut let's kick it up a notch by building a simple linked list.</p>\n<h2>Linked lists for fun</h2>\n<p>There are a thousand other resources for learning about what a linked list is\nand why they are useful. I'm not exactly the person\nto listen to when it comes to that arena, so I'll leave it to the academics\nand the LinkedIn tech influencers to do a much better job than I will\nwhen discussing linked lists.</p>\n<p>Without going too far down the CS rabbit hole, our version of a linked list\nwill be fairly straightforward. Our linked list will have:</p>\n<ul>\n<li>A head node</li>\n<li>A way to keep track of the length</li>\n<li>A few operations associated to it:\n<ul>\n<li>An <code>insert</code> method that will attach new nodes to the head</li>\n<li>A <code>pop</code> method that will detach the most recently inserted node and read out their values</li>\n<li>A <code>traverse</code> method will walk the linked list and print out values as it goes</li>\n</ul>\n</li>\n</ul>\n<p>There's a lot more to a linked list than the operations we defined above - for example,\none could insert at <em>any</em> point in the linked list rather than the head, or peek values\nat the tail rather than explicitly removing them. I'll leave those as an exercise for the reader.</p>\n<p>Let's get started by scaffolding out a simple <code>struct</code> that will be our linked list. Let's create a <code>linked_list.zig</code>\nfile adjacent to our <code>main.zig</code> in our <code>src/</code> directory and get some boilerplate in place:</p>\n<h2>src/linked_list.zig</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@import</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"std\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#4D9375\"> const</span><span style=\"color:#BD976A\"> LinkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">struct</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // 1. Define a node type</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // 2. Define the linked list properties</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // There should be three: head, tail, and length</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // 3. Define an insert method that takes a generic type</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // 4. Define a pop method</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // 5. Define a traverse method, printing all the values</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">};</span></span></code></pre></figure>\n<p>Taking a look, Zig has <code>struct</code>s much like Go and Rust - nothing new here. Now,\nI <em>do</em> want this to be a generic linked list over some type of my choosing. Skimming\nthrough the docs, looks like I need to do a bit of higher-order goodness with <code>comptime</code>\ntypes to get this working. Let's adjust this code so our <code>LinkedList</code> is actually a function <code>fn</code> that will take in a\ngeneric <code>comptime</code> type and return a <code>struct</code> that's generic over it:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@import</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"std\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CB7676\">fn</span><span style=\"color:#5DA994\"> LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">comptime</span><span style=\"color:#BD976A\"> T</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#4D9375\"> struct</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 1. Define a node type</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        const</span><span style=\"color:#BD976A\"> Node</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">struct</span><span style=\"color:#DBD7CAEE\"> { </span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#BD976A\">next</span><span style=\"color:#DBD7CAEE\">: ?</span><span style=\"color:#CB7676\">*</span><span style=\"color:#5DA994\">Node</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">) };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 2. Define the linked list properties</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // There should be three: head, tail, and length</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 3. Define an insert method that takes a generic type</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 4. Define a pop method</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 5. Define a traverse method, printing all the values</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Cool, I've got a generic struct so far and also defined a new internal <code>Node</code> type\nto house the generic type value that we'll use when creating new nodes on the linked list\nthat also points to the next node in the list. We'll reach for Zig's <code>?</code> operator as a form\nof optional chaining, telling the compiler \"hey, this <code>Node</code> here could be <code>null</code>, so make sure to enforce checking that\nbefore dereferencing it\" and also slap a <code>*</code> afterwards to signal that this is a <em>pointer</em> to another node, not the node\nitself.</p>\n<p>Okay, I'm liking this so far. Zig feels a bit like Go, a bit like Rust, and a bit like C\n(I cut my teach on Fortran starting out, don't judge me). Let's add a few properties\nto our linked list now:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">fn</span><span style=\"color:#5DA994\"> LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">comptime</span><span style=\"color:#BD976A\"> T</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#4D9375\"> struct</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 1. Define a node type</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        const</span><span style=\"color:#BD976A\"> Node</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">struct</span><span style=\"color:#DBD7CAEE\"> { </span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#BD976A\">next</span><span style=\"color:#DBD7CAEE\">: ?</span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Node</span><span style=\"color:#DBD7CAEE\"> };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 2a. Define the linked list properties</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        head</span><span style=\"color:#DBD7CAEE\">: ?</span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Node</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        length</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 2b. Add a constructor/initializer for our linked list</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#80A665\"> new</span><span style=\"color:#DBD7CAEE\">() </span><span style=\"color:#5DA994\">LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#5DA994\"> LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">){ .</span><span style=\"color:#BD976A\">length</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4C9A91\">0</span><span style=\"color:#DBD7CAEE\">, .</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">null</span><span style=\"color:#DBD7CAEE\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 3. Define an insert method that takes a generic type</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 4. Define a pop method</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 5. Define a traverse method, printing all the values</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Okay, so we added <code>head</code> and <code>length</code> properties as well as a\nconstructor with <code>fn new()</code> to initialize our linked list. So far, so good.\nWe have the world's most basic linked list that does and contains... absolutely nothing.\nLet's write some tests to verify the nothingness:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">test</span><span style=\"color:#C98A7D\"> \"initializing builds an empty linked list with no nodes\"</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#5DA994\">LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">).</span><span style=\"color:#80A665\">new</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Our test is pretty basic, just asserting there's no length or head when initializing\nour linked list. Let's run this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> zig</span><span style=\"color:#C98A7D\"> build</span><span style=\"color:#C98A7D\"> test</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">All</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#C98A7D\"> tests</span><span style=\"color:#C98A7D\"> passed.</span></span></code></pre></figure>\n<p>Passing tests for our useless linked list, huzzah!</p>\n<p>Since my brain is still in Rust-land, I look at <code>try</code> keywords in a similar fashion to Rust's <code>?</code>,\nsimply propagating errors back to the caller. Our linked list isn't anything special (yet), so let's\nstart building out some nice functionality to at least let caller's insert new nodes at the head.\nBefore we do that, let's channel our inner TDD and write a test that we know will fail, <em>then</em> write\nthe code to make inserting nodes pass, firstly adding a bare implementation of <code>insert()</code> to our\n<code>LinkedList</code> struct:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">fn</span><span style=\"color:#5DA994\"> LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">comptime</span><span style=\"color:#BD976A\"> T</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#4D9375\"> struct</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        const</span><span style=\"color:#BD976A\"> Self</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@This</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 1. Define a node type</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        const</span><span style=\"color:#BD976A\"> Node</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">struct</span><span style=\"color:#DBD7CAEE\"> { </span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#BD976A\">next</span><span style=\"color:#DBD7CAEE\">: ?</span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Node</span><span style=\"color:#DBD7CAEE\"> };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 2a. Define the linked list properties</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        head</span><span style=\"color:#DBD7CAEE\">: ?</span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Node</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        length</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 2b. Add a constructor/initializer for our linked list</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        fn</span><span style=\"color:#80A665\"> new</span><span style=\"color:#DBD7CAEE\">() </span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#DBD7CAEE\"> .{ .</span><span style=\"color:#BD976A\">length</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4C9A91\">0</span><span style=\"color:#DBD7CAEE\">, .</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">null</span><span style=\"color:#DBD7CAEE\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 3. Define an insert method that takes a generic type value</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        fn</span><span style=\"color:#80A665\"> insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">_</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#BD976A\">_</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">void</span><span style=\"color:#DBD7CAEE\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 4. Define a pop method</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 5. Define a traverse method, printing all the values</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>After a bit of digging, we need to add the line for <code>const Self = @This()</code> to signal\nthat the internal struct methods are methods associated to the struct itself,\nnot static functions callable without an object reference. This feels a lot like\nthe <code>&#x26;self</code> argument you'll see when implementing traits or defining struct\nmethods in Rust, so we'll add it to get the same functionality. Now, let's\nwrite the tests:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\"> test</span><span style=\"color:#C98A7D\"> \"inserting a value appends to the head of the linked list\"</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#5DA994\">LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">).</span><span style=\"color:#80A665\">new</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // act</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">69</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // assert</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#4C9A91\"> 69</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>We're tapping into Zig's optional unwrapping mechanism for struct values\nwith <code>.?.value</code>. Now if we if we run our tests...</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> zig</span><span style=\"color:#C98A7D\"> build</span><span style=\"color:#C98A7D\"> test</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">Test</span><span style=\"color:#DBD7CAEE\"> [2/2] test.inserting a value appends to the head of the linked list... FAIL </span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">TestUnexpectedResult</span><span style=\"color:#666666\">)</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">/snap/Zig/6352/lib/std/testing.zig:347:14:</span><span style=\"color:#4C9A91\"> 0x211627</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#C98A7D\"> expect</span><span style=\"color:#DBD7CAEE\"> (test)</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#666666\"> (</span><span style=\"color:#CB7676\">!</span><span style=\"color:#80A665\">ok</span><span style=\"color:#666666\">)</span><span style=\"color:#4D9375\"> return</span><span style=\"color:#DBD7CAEE\"> error.TestUnexpectedResult</span><span style=\"color:#666666\">;</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">             ^</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">/home/jmckenzie/projects/Rust/joey-mckenzie-tech/samples/Ziggin-around-with-linked-lists/src/main.zig:51:5:</span><span style=\"color:#4C9A91\"> 0x21186e</span><span style=\"color:#C98A7D\"> in</span><span style=\"color:#C98A7D\"> test.inserting</span><span style=\"color:#C98A7D\"> a</span><span style=\"color:#C98A7D\"> value</span><span style=\"color:#C98A7D\"> appends</span><span style=\"color:#C98A7D\"> to</span><span style=\"color:#C98A7D\"> the</span><span style=\"color:#C98A7D\"> head</span><span style=\"color:#C98A7D\"> of</span><span style=\"color:#C98A7D\"> the</span><span style=\"color:#C98A7D\"> linked</span><span style=\"color:#C98A7D\"> list</span><span style=\"color:#DBD7CAEE\"> (test)</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    try</span><span style=\"color:#C98A7D\"> std.testing.expect</span><span style=\"color:#666666\">(</span><span style=\"color:#80A665\">linkedList.length</span><span style=\"color:#C98A7D\"> ==</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#666666\">);</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">    ^</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">1</span><span style=\"color:#C98A7D\"> passed</span><span style=\"color:#666666\">;</span><span style=\"color:#80A665\"> 0</span><span style=\"color:#C98A7D\"> skipped</span><span style=\"color:#666666\">;</span><span style=\"color:#80A665\"> 1</span><span style=\"color:#C98A7D\"> failed.</span></span></code></pre></figure>\n<p>Awesome, our tests failed! But that's okay because that was to be expected.\nNow let's implement our <code>insert()</code> method to make them pass:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">fn</span><span style=\"color:#5DA994\"> LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">comptime</span><span style=\"color:#BD976A\"> T</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#4D9375\"> struct</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        const</span><span style=\"color:#BD976A\"> Self</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@This</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 1. Define a node type</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        const</span><span style=\"color:#BD976A\"> Node</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">struct</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            value</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            next</span><span style=\"color:#DBD7CAEE\">: ?</span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Node</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 2a. Define the linked list properties</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        head</span><span style=\"color:#DBD7CAEE\">: ?</span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Node</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        length</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        allocator</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">mem</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Allocator</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 2b. Add a constructor/initializer for our linked list</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        fn</span><span style=\"color:#80A665\"> new</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">mem</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Allocator</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#DBD7CAEE\"> .{ .</span><span style=\"color:#BD976A\">length</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4C9A91\">0</span><span style=\"color:#DBD7CAEE\">, .</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">null</span><span style=\"color:#DBD7CAEE\">, .</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 3. Define an insert method that takes a generic type value</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        fn</span><span style=\"color:#80A665\"> insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#CB7676\">!</span><span style=\"color:#4D9375\">void</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Allocate the memory and create a `Node` for us to use</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            var</span><span style=\"color:#BD976A\"> newNode</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">try</span><span style=\"color:#BD976A\"> self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">create</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">Node</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Next, set the node value and point it's next value to the current head</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            const</span><span style=\"color:#BD976A\"> currentHead</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            newNode</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            newNode</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">next</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">currentHead</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Finally, repoint our head to the new node and increment the count</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">newNode</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> +=</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 4. Define a pop method</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 5. Define a traverse method, printing all the values</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 6. Extra credit: define an insertAt method</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Okay, a few things have changed. We've added an <code>allocator</code> property that's\nof type <code>std.mem.Allocator</code> - remember how we mentioned Zig's use of no hidden memory allocations?\nWell if we want to create structs, we need to allocate the memory manually to do so. This is\nwhere a <code>std.mem.Allocator</code> comes in handy. There are several different types of allocators\nin Zig's standard library, though we'll use the <a href=\"https://Ziglearn.org/chapter-2/\">arena allocator</a>\nas skimming the docs seems like the best strategy for now for a Zig noobie like myself. We purposely avoid\nstrongly coupling to the allocator type in our linked list and force our callers to provide\none to make things a bit more flexible, as tomorrow we might wake up and decide\nto use a <code>GeneralPurposeAllocator</code> instead. Let's update our tests to use the <code>ArenaAllocator</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">test</span><span style=\"color:#C98A7D\"> \"initializing builds an empty linked list with no head or tail\"</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // arrange, setup and allocator for our linked list to create nodes internally</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">ArenaAllocator</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">init</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">page_allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    defer</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">deinit</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> allocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">allocator</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#5DA994\">LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">).</span><span style=\"color:#80A665\">new</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // act/assert</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">test</span><span style=\"color:#C98A7D\"> \"inserting a value appends to the head of the linked list\"</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">ArenaAllocator</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">init</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">page_allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    defer</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">deinit</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> allocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">allocator</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#5DA994\">LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">).</span><span style=\"color:#80A665\">new</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // act</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">69</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // assert</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 69</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Though we're running single process unit tests that aren't long running (they start and stop\nwithout using much in terms of resources from our machine) and probably don't need to manually free memory\nwith the calls to <code>defer arena.deinit()</code>, it's a good habit to form to get used to manually\nmanaging and freeing allocated memory. We might also benefit from being able to free memory\nfrom within our <code>LinkedList</code> as well by adding a wrapping call in the form\nof <code>fn free(self: *Self) !void { // Free the memory }</code>,\nbut I'll save that for a rainy day as I still have fairly no clue what I'm doing with Zig.</p>\n<p>We also need to slap some <code>try</code>s to our <code>insert()</code> method\nnow that its return signature is <code>!void</code> instead of just <code>void</code> - errors can occur while\nallocating memory, so we need to explicitly state that in our signature with a prefixed <code>!</code> operator before our return\ntype (<code>void</code> in this case). Okay, our tests\nare updated to handle/return the errors. Let's run our tests now:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> zig</span><span style=\"color:#C98A7D\"> build</span><span style=\"color:#C98A7D\"> test</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">All</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#C98A7D\"> tests</span><span style=\"color:#C98A7D\"> passed.</span></span></code></pre></figure>\n<p>Nice, passing tests that are <em>actually</em> somewhat legit now! What happens if\nwe insert multiple values into the linked list? Let's write a test\nfor this case:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">test</span><span style=\"color:#C98A7D\"> \"inserting multiple values correctly updates head\"</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">ArenaAllocator</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">init</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">page_allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    defer</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">deinit</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> allocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">allocator</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#5DA994\">LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">).</span><span style=\"color:#80A665\">new</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // act</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">69</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">420</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">1337</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // assert</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 3</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 1337</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Running our tests again, and they pass without needing to update our\nimplementation, nice! Okay, we're getting the hang of things... let's\nkick it up another notch and flesh out our pop method. Let's flesh out the bare minimum case:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">fn</span><span style=\"color:#5DA994\"> LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">comptime</span><span style=\"color:#BD976A\"> T</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#4D9375\"> struct</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Other stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 4. Define a pop method</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        fn</span><span style=\"color:#80A665\"> pop</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">_</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\">) ?</span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>And next, let's add the tests that we know will fail:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">test</span><span style=\"color:#C98A7D\"> \"popping nodes off the linked list returns a value\"</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // arrange</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> gpa</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#5DA994\">GeneralPurposeAllocator</span><span style=\"color:#DBD7CAEE\">(.{}){};</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> allocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">gpa</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">allocator</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#5DA994\">LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">).</span><span style=\"color:#80A665\">new</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // act, with order 1337 -> 420 -> 69 -> null</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">69</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">420</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">1337</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // after popping, our list should be 420 -> 69 -> null</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> poppedValue</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">pop</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // assert</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 2</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 420</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">poppedValue</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">poppedValue</span><span style=\"color:#DBD7CAEE\">.? </span><span style=\"color:#CB7676\">==</span><span style=\"color:#4C9A91\"> 1337</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Our tests fail when we run them, so let's flesh out our <code>.pop()</code> implementation\nnow to get them passing:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#CB7676\">fn</span><span style=\"color:#5DA994\"> LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">comptime</span><span style=\"color:#BD976A\"> T</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Other stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 4. Define a pop method</span></span>\n<span data-line=\"\"><span style=\"color:#CB7676\">        fn</span><span style=\"color:#80A665\"> pop</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\">) ?</span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If we don't have a head, there's no value to pop!</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#DBD7CAEE\"> (</span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Grab a few temporary values of the current head</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            const</span><span style=\"color:#BD976A\"> currentHead</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            const</span><span style=\"color:#BD976A\"> updatedHead</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">next</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Update head and decrement the length now that we're freeing ourselves of a node</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">updatedHead</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> -=</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> currentHead</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Once again, if we run our tests, we should see four now passing in the console. Sweet!\nBut wait... what happens if we <code>.pop()</code> on a single-item linked list? In theory, we should\nget the value as it'll be the only node in the list. Let's verify that our implementation\ncovers this case with yet another test:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">test</span><span style=\"color:#C98A7D\"> \"popping a node off a linked list with one item returns it's value\"</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // arrange, setup and allocator for our linked list to create nodes internally</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">ArenaAllocator</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">init</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">pageAllocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    defer</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">deinit</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> allocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">allocator</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#5DA994\">LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">).</span><span style=\"color:#80A665\">new</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // act</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">69</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> poppedValue</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">pop</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // assert</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">poppedValue</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">poppedValue</span><span style=\"color:#DBD7CAEE\">.? </span><span style=\"color:#CB7676\">==</span><span style=\"color:#4C9A91\"> 69</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Running the tests again, looks like we're covered for the case of\na single-item linked list. What happens if we <code>.pop()</code> on a linked list\nwith no items? In theory, we shouldn't get any values returned, but let's\nverify with a test:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">test</span><span style=\"color:#C98A7D\"> \"popping a node off an empty linked list returns null\"</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // arrange, setup and allocator for our linked list to create nodes internally</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">ArenaAllocator</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">init</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">pageAllocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    defer</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">deinit</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> allocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">allocator</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#5DA994\">LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">).</span><span style=\"color:#80A665\">new</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // act</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> poppedValue</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">pop</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // assert</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4C9A91\"> 0</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">linkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">expect</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">poppedValue</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Running the tests yet again yields passing results! Okay, only\none more implementation to flesh out with our <code>.traverse()</code> method. For this\nimplementation, let's simply print out the values to stdout:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@import</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"std\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> pageAllocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">page_allocator</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> testing</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#5DA994\"> LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">comptime</span><span style=\"color:#BD976A\"> T</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#4D9375\"> struct</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // Other stuff...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 5. Define a traverse method, printing all the values</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#80A665\"> traverse</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">void</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If we don't have a head, there's nothing traverse!</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#DBD7CAEE\"> (</span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // We'll walk our linked list as long as there's a next node available</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            var</span><span style=\"color:#BD976A\"> currentNode</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            while</span><span style=\"color:#DBD7CAEE\"> (</span><span style=\"color:#BD976A\">currentNode</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">) : (</span><span style=\"color:#BD976A\">currentNode</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">currentNode</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">next</span><span style=\"color:#DBD7CAEE\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">log</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">info</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"value {}\"</span><span style=\"color:#DBD7CAEE\">, .{</span><span style=\"color:#BD976A\">currentNode</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">});</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Since we're printing node values out to the stdout, it'll be a bit\nhard to verify with a unit test that the printed values are as we expect.\nLet's refactor our code a bit from a library to an executable binary, that\nway we can run our program and visually assert the printed values are correct.\nTo start, let's rename <code>src/main.zig</code> to <code>src/linked_list.zig</code> and sprinkle\nin a few <code>pub</code> keywords to expose the <code>LinkedList</code> type itself as well as the\nvarious methods associated to it:</p>\n<h2>src/linked_list.zig</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@import</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"std\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> pageAllocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">page_allocator</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> testing</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">testing</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#5DA994\"> LinkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">comptime</span><span style=\"color:#BD976A\"> T</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">type</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    return</span><span style=\"color:#4D9375\"> struct</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        const</span><span style=\"color:#BD976A\"> Self</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@This</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 1. Define a node type</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        const</span><span style=\"color:#BD976A\"> Node</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">struct</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            value</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            next</span><span style=\"color:#DBD7CAEE\">: ?</span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Node</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 2a. Define the linked list properties</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // There should be three: head, length, and allocator</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        head</span><span style=\"color:#DBD7CAEE\">: ?</span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Node</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        length</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        allocator</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">mem</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Allocator</span><span style=\"color:#DBD7CAEE\">,</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 2b. Add a constructor/initializer for our linked list</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#80A665\"> new</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">mem</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Allocator</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#DBD7CAEE\"> .{ .</span><span style=\"color:#BD976A\">length</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4C9A91\">0</span><span style=\"color:#DBD7CAEE\">, .</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">null</span><span style=\"color:#DBD7CAEE\">, .</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 3. Define an insert method that takes a generic type value</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#80A665\"> insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#CB7676\">!</span><span style=\"color:#4D9375\">void</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Allocate the memory and create a `Node` for us to use</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            var</span><span style=\"color:#BD976A\"> newNode</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#4D9375\">try</span><span style=\"color:#BD976A\"> self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">create</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">Node</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Next, set the node value and point it's next value to the current head</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            const</span><span style=\"color:#BD976A\"> currentHead</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            newNode</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            newNode</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">next</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">currentHead</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Finally, repoint our head to the new node and increment the count</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">newNode</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> +=</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 4. Define a pop method that removes the last inserted node</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#80A665\"> pop</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\">) ?</span><span style=\"color:#BD976A\">T</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If we don't have a head, there's no value to pop!</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#DBD7CAEE\"> (</span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Grab a few temporary values of the current head</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            const</span><span style=\"color:#BD976A\"> currentHead</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            const</span><span style=\"color:#BD976A\"> updatedHead</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">next</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // Update head and decrement the length now that we're freeing ourselves of a node</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">updatedHead</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">            self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">length</span><span style=\"color:#CB7676\"> -=</span><span style=\"color:#4C9A91\"> 1</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            return</span><span style=\"color:#BD976A\"> currentHead</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">        // 5. Define a traverse method, printing all the values</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">        pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#80A665\"> traverse</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">Self</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">void</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // If we don't have a head, there's nothing traverse!</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            if</span><span style=\"color:#DBD7CAEE\"> (</span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#CB7676\"> ==</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">                return</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">            // We'll walk our linked list as long as there's a next node available</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            var</span><span style=\"color:#BD976A\"> currentNode</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">self</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">head</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">            while</span><span style=\"color:#DBD7CAEE\"> (</span><span style=\"color:#BD976A\">currentNode</span><span style=\"color:#CB7676\"> !=</span><span style=\"color:#4D9375\"> null</span><span style=\"color:#DBD7CAEE\">) : (</span><span style=\"color:#BD976A\">currentNode</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">currentNode</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">next</span><span style=\"color:#DBD7CAEE\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">                std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">log</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">info</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"value {}\"</span><span style=\"color:#DBD7CAEE\">, .{</span><span style=\"color:#BD976A\">currentNode</span><span style=\"color:#DBD7CAEE\">.?.</span><span style=\"color:#BD976A\">value</span><span style=\"color:#DBD7CAEE\">});</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    };</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">// None of our test code will change...</span></span></code></pre></figure>\n<p>We can keep our inline unit tests the same, and they should still work. Next,\nlet's update our <code>src/main.zig</code> file to be just a simple <code>main()</code>:</p>\n<h2>src/main.zig</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@import</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"std\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> linkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@import</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"./linked_list.zig\"</span><span style=\"color:#DBD7CAEE\">).</span><span style=\"color:#BD976A\">LinkedList</span><span style=\"color:#DBD7CAEE\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#80A665\"> main</span><span style=\"color:#DBD7CAEE\">() </span><span style=\"color:#CB7676\">!</span><span style=\"color:#4D9375\">void</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Assign an arena allocator for our linked list to use for creating nodes</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">ArenaAllocator</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">init</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">heap</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">page_allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> allocator</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">allocator</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Don't forget to free the memory on exit!</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    defer</span><span style=\"color:#BD976A\"> arena</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">deinit</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Declare our linked list and add a few nodes</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    var</span><span style=\"color:#BD976A\"> u32LinkedList</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#80A665\">linkedList</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4D9375\">u32</span><span style=\"color:#DBD7CAEE\">).</span><span style=\"color:#80A665\">new</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">allocator</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> u32LinkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">2</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> u32LinkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">3</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    try</span><span style=\"color:#BD976A\"> u32LinkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">insert</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#4C9A91\">1</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Finally, traverse the list with the output:</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    //    1</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    //    3</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    //    2</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    u32LinkedList</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">traverse</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Okay, if I'm <em>hopefully</em> doing this right, I'll <code>@import()</code> our <code>LinkedList</code>\nfrom our local <code>linked_list.zig</code> file, spin up an allocator as a linked list dependency,\ninsert a few nodes, and walk the list. One last thing we need to change is our <code>build.zig</code> file\nas it's expected to build for a library, not an executable binary. Let's update that\nto add an executable target with a little copy-pasta from a fresh <code>zig init-exe</code> test\nexecutable:</p>\n<h2>build.zig</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"zig\" data-theme=\"vitesse-dark\"><code data-language=\"zig\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#4D9375\">const</span><span style=\"color:#BD976A\"> std</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#B8A965\">@import</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"std\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">pub</span><span style=\"color:#CB7676\"> fn</span><span style=\"color:#80A665\"> build</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">: </span><span style=\"color:#CB7676\">*</span><span style=\"color:#BD976A\">std</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">build</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">Builder</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#4D9375\">void</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Standard target options allows the person running `zig build` to choose</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // what target to build for. Here we do not override the defaults, which</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // means any target is allowed, and the default is native. Other options</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // for restricting supported target set are available.</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> target</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">standardTargetOptions</span><span style=\"color:#DBD7CAEE\">(.{});</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // Standard release options allow the person running `zig build` to select</span></span>\n<span data-line=\"\"><span style=\"color:#758575DD\">    // between Debug, ReleaseSafe, ReleaseFast, and ReleaseSmall.</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> mode</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">standardReleaseOptions</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> exe</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">addExecutable</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"ziggin-around-with-linked-lists\"</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#C98A7D\">\"src/main.zig\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    exe</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">setTarget</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">target</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    exe</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">setBuildMode</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">mode</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    exe</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">install</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> run_cmd</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">exe</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">run</span><span style=\"color:#DBD7CAEE\">();</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    run_cmd</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">step</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">dependOn</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">getInstallStep</span><span style=\"color:#DBD7CAEE\">());</span></span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    if</span><span style=\"color:#DBD7CAEE\"> (</span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">args</span><span style=\"color:#DBD7CAEE\">) </span><span style=\"color:#CB7676\">|</span><span style=\"color:#BD976A\">args</span><span style=\"color:#CB7676\">|</span><span style=\"color:#DBD7CAEE\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">        run_cmd</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">addArgs</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">args</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> run_step</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">step</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"run\"</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#C98A7D\">\"Run the app\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    run_step</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">dependOn</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">run_cmd</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">step</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> exe_tests</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">addTest</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"src/main.zig\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    exe_tests</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">setTarget</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">target</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    exe_tests</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">setBuildMode</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#BD976A\">mode</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#4D9375\">    const</span><span style=\"color:#BD976A\"> test_step</span><span style=\"color:#DBD7CAEE\"> = </span><span style=\"color:#BD976A\">b</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">step</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#C98A7D\">\"test\"</span><span style=\"color:#DBD7CAEE\">, </span><span style=\"color:#C98A7D\">\"Run unit tests\"</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#BD976A\">    test_step</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#80A665\">dependOn</span><span style=\"color:#DBD7CAEE\">(</span><span style=\"color:#CB7676\">&#x26;</span><span style=\"color:#BD976A\">exe_tests</span><span style=\"color:#DBD7CAEE\">.</span><span style=\"color:#BD976A\">step</span><span style=\"color:#DBD7CAEE\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DBD7CAEE\">}</span></span></code></pre></figure>\n<p>Note the key changes being our builder calling <code>.addExecutable()</code> and running\nthe program with <code>exe.run()</code>. Let's take this for a spin now and see what we get:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> zig</span><span style=\"color:#C98A7D\"> build</span><span style=\"color:#C98A7D\"> run</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">info:</span><span style=\"color:#C98A7D\"> value</span><span style=\"color:#4C9A91\"> 1</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">info:</span><span style=\"color:#C98A7D\"> value</span><span style=\"color:#4C9A91\"> 3</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">info:</span><span style=\"color:#C98A7D\"> value</span><span style=\"color:#4C9A91\"> 2</span></span></code></pre></figure>\n<p>Alright, just like we expected! Since we did a bit of refactoring, let's\nmake sure our tests still pass. We're building in the context of a runnable\nprogram, so we can directly test our <code>linked_list.zig</code> file with the toolchain:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#121212;color:#dbd7caee\" tabindex=\"0\" data-language=\"shell\" data-theme=\"vitesse-dark\"><code data-language=\"shell\" data-theme=\"vitesse-dark\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#80A665\">$</span><span style=\"color:#C98A7D\"> zig</span><span style=\"color:#C98A7D\"> test</span><span style=\"color:#C98A7D\"> src/linked_list.zig</span></span>\n<span data-line=\"\"><span style=\"color:#80A665\">All</span><span style=\"color:#4C9A91\"> 6</span><span style=\"color:#C98A7D\"> tests</span><span style=\"color:#C98A7D\"> passed.</span></span></code></pre></figure>\n<p>And once again, we have passing tests!</p>\n<h2>Wrapping up</h2>\n<p>I'm gonna call that a wrap for now, as our (poor man's) linked\nlist is looking pretty good and functioning as we expect. I'll be looking to a bit more Zig to spice up my daily\ndeveloper life when I can.\nZig feels a lot like Rust with much of the same safety guarantees and is just plain fun to write.</p>\n<p>Until next time, friends!</p>"
    },
    "_id": "2023/ziggin-around-with-linked-lists.md",
    "_raw": {
      "sourceFilePath": "2023/ziggin-around-with-linked-lists.md",
      "sourceFileName": "ziggin-around-with-linked-lists.md",
      "sourceFileDir": "2023",
      "contentType": "markdown",
      "flattenedPath": "2023/ziggin-around-with-linked-lists"
    },
    "type": "Post",
    "url": "/blog/2023/ziggin-around-with-linked-lists"
  },
  {
    "title": "Rustful statement machines and event driven design",
    "description": "A hobbyist Rustacean's ode to the Gang of Four.",
    "pubDate": "2023-10-23T07:00:00.000Z",
    "category": "rust",
    "heroImage": "/images/ziggin-around/meme.jpg",
    "draft": false,
    "keywords": [
      "rust",
      "state machines",
      "design patterns"
    ],
    "body": {
      "raw": "\nBack in action, and I'm fresh off a hiatus while raising a little one. I can safely say that I _definitely_\nunderestimated\nwhat being a new parent would entail. Needless to say, as a break from changing diapers, I thought it would be fun to\nget some\nthoughts out on the blog here.\n\nFirst, I want to say **thank you** to those that have been reaching out via email with kind words regarding the mostly\ncraft beer-driven\nword adventures I have here on the blog - if you like what's going on here, give me\na [shout](mailto:joey.mckenzie27@gmail.com)!\nWith the pleasantries out of the way, let's dive back into our regularly schedule program of exploring things a bit\noutside our\n8 to 5 comfort zone.\n\nI've been writing way too many step functions in AWS lately, and I've grown somewhat of an interest in the topic of\nstate machines.\nCoincidentally, I've also taken quite a liking to PHP (pause for audible gasps) and Laravel. Couple\nwith [Jake Bennett's talk on\nstate machines in Laravel](and state machines) at the 2023 Laracon US, I thought it would be a fun thought/finger typing\nexperiment\nto explore what state machines would like in Rust.\n\nI've been skimming a newly bought copy of the [Gang of Four's holy text](https://en.wikipedia.org/wiki/Design_Patterns)\nof design patterns,\nand had immersed in state machines so much I've applied them to the my six month old's daily routine. I thought it would\nbe fun to...\n\n(**Warning**: dad joke ahead)\n\nshake the _rust_ off my blogging hiatus by implementing state patterns in Rust.\n\n## State machines and you\n\nState machines are (in my lowly opinion) one of my favorite design patterns. Couple with event driven designs, using\nstateful patterns\nallows me to think of my application as a time series - as frames advance throughout the request cycle's lifetime, I can\nthink of\nmy handlers as first responders to an event my API happens to capture.\n",
      "html": "<p>Back in action, and I'm fresh off a hiatus while raising a little one. I can safely say that I <em>definitely</em>\nunderestimated\nwhat being a new parent would entail. Needless to say, as a break from changing diapers, I thought it would be fun to\nget some\nthoughts out on the blog here.</p>\n<p>First, I want to say <strong>thank you</strong> to those that have been reaching out via email with kind words regarding the mostly\ncraft beer-driven\nword adventures I have here on the blog - if you like what's going on here, give me\na <a href=\"mailto:joey.mckenzie27@gmail.com\">shout</a>!\nWith the pleasantries out of the way, let's dive back into our regularly schedule program of exploring things a bit\noutside our\n8 to 5 comfort zone.</p>\n<p>I've been writing way too many step functions in AWS lately, and I've grown somewhat of an interest in the topic of\nstate machines.\nCoincidentally, I've also taken quite a liking to PHP (pause for audible gasps) and Laravel. Couple\nwith [Jake Bennett's talk on\nstate machines in Laravel](and state machines) at the 2023 Laracon US, I thought it would be a fun thought/finger typing\nexperiment\nto explore what state machines would like in Rust.</p>\n<p>I've been skimming a newly bought copy of the <a href=\"https://en.wikipedia.org/wiki/Design_Patterns\">Gang of Four's holy text</a>\nof design patterns,\nand had immersed in state machines so much I've applied them to the my six month old's daily routine. I thought it would\nbe fun to...</p>\n<p>(<strong>Warning</strong>: dad joke ahead)</p>\n<p>shake the <em>rust</em> off my blogging hiatus by implementing state patterns in Rust.</p>\n<h2>State machines and you</h2>\n<p>State machines are (in my lowly opinion) one of my favorite design patterns. Couple with event driven designs, using\nstateful patterns\nallows me to think of my application as a time series - as frames advance throughout the request cycle's lifetime, I can\nthink of\nmy handlers as first responders to an event my API happens to capture.</p>"
    },
    "_id": "draft/rustful-state-machines.md",
    "_raw": {
      "sourceFilePath": "draft/rustful-state-machines.md",
      "sourceFileName": "rustful-state-machines.md",
      "sourceFileDir": "draft",
      "contentType": "markdown",
      "flattenedPath": "draft/rustful-state-machines"
    },
    "type": "Post",
    "url": "/blog/draft/rustful-state-machines"
  }
]